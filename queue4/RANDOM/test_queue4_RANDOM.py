#Pyguin test cases converted from /home/auri/temp/lucca/python_experiments/queue4/RANDOM/test_queue4.py
import pytest
import queue4 as module_0
import builtins as module_1

def test_case_0():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)

def test_case_1():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'

def test_case_2():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0

def test_case_3():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None

def test_case_4():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'

def test_case_5():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()

def test_case_6():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_2 = double_linked_list_0.append(node_4)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue(queue_1)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    var_3 = queue_3.enqueue(queue_6)

def test_case_7():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_2 = double_linked_list_0.append(node_4)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()

def test_case_8():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_2.peek()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_2 = queue_5.size()
    assert var_2 == 0
    var_3 = node_0.__repr__()
    assert var_3 == 'Value: None'

def test_case_9():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = queue_3.enqueue(double_linked_list_0)

def test_case_10():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_2 = double_linked_list_1.append(node_5)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    var_3 = queue_2.size()
    assert var_3 == 0

def test_case_11():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_0.append(node_3)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue()
    var_3 = double_linked_list_0.push(queue_2)

def test_case_12():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_1 = queue_3.size()
    assert var_1 == 0
    var_2 = var_0.__repr__()

def test_case_13():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()

def test_case_14():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()

def test_case_15():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    var_1 = queue_3.peek()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = queue_5.peek()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_16():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'

def test_case_17():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    var_3 = queue_4.size()
    assert var_3 == 0

def test_case_18():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0

def test_case_19():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_1.size()
    assert var_2 == 0
    node_3 = module_0.Node()
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_4 = queue_4.size()
    assert var_4 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_5 = double_linked_list_2.append(node_7)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_6 = queue_9.peek()
    var_7 = queue_5.size()
    assert var_7 == 0

def test_case_20():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_0.pop()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'queue4.Node'
    assert var_2.data is None
    assert var_2.next is None
    assert var_2.prev == {*()}

def test_case_21():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_1 = double_linked_list_1.append(node_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_3.size()
    assert var_2 == 0
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    var_3 = queue_6.peek()
    queue_7 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_4 = queue_7.peek()
    queue_8 = module_0.Queue()
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    var_5 = queue_8.size()
    assert var_5 == 0
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_6 = double_linked_list_3.push(queue_8)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'

def test_case_22():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_1 = double_linked_list_0.append(node_3)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_2 = queue_3.peek()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    var_3 = queue_5.peek()
    queue_6 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    var_4 = double_linked_list_2.append(node_7)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_6.size()
    assert var_5 == 0
    queue_8 = module_0.Queue()

def test_case_23():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    var_1 = queue_3.peek()
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_2 = double_linked_list_2.append(node_4)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_3.peek()

def test_case_24():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_5 = module_0.Node()
    var_3 = node_5.__repr__()
    assert var_3 == 'Value: None'
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = double_linked_list_3.append(node_5)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'

def test_case_25():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_1 = queue_0.peek()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_1.append(node_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_2.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_4 = double_linked_list_2.append(node_6)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_7 = module_0.Queue()
    var_5 = queue_7.peek()
    queue_8 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_6 = queue_8.size()
    assert var_6 == 0
    queue_9 = module_0.Queue()
    var_7 = var_6.__repr__()
    assert var_7 == '0'

def test_case_26():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.peek()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    var_1 = queue_3.peek()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_4.size()
    assert var_2 == 0
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    node_4 = module_0.Node()
    var_3 = node_4.__repr__()
    assert var_3 == 'Value: None'
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_4 = queue_6.size()
    assert var_4 == 0
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_5 = double_linked_list_2.append(node_8)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_9 = set()
    node_10 = module_0.Node(prev=set_9)
    var_6 = double_linked_list_3.append(node_10)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_7 = queue_10.size()
    assert var_7 == 0
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None

def test_case_27():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_1.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_4 = queue_5.size()
    assert var_4 == 0
    node_5 = module_0.Node()
    var_5 = node_5.__repr__()
    assert var_5 == 'Value: None'
    var_6 = node_1.__repr__()
    assert var_6 == 'Value: None'

def test_case_28():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    node_3 = module_0.Node()
    var_2 = node_3.__repr__()
    assert var_2 == 'Value: None'
    queue_3 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_3 = double_linked_list_0.append(node_5)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    var_4 = queue_6.peek()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_29():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_2 = double_linked_list_0.append(node_4)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_2.enqueue(queue_5)

def test_case_30():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_1 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_2.size()
    assert var_2 == 0
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_5 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_4 = queue_7.peek()
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_9 = module_0.Queue()
    var_5 = queue_9.peek()
    set_8 = set()
    node_8 = module_0.Node(prev=set_8)
    node_9 = module_0.Node()
    var_6 = node_9.__repr__()
    assert var_6 == 'Value: None'
    queue_10 = module_0.Queue()
    set_9 = set()
    node_10 = module_0.Node(prev=set_9)
    var_7 = queue_10.size()
    assert var_7 == 0
    queue_11 = module_0.Queue()
    var_8 = queue_1.peek()

def test_case_31():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    node_1 = module_0.Node()
    var_0 = node_1.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_0.append(node_3)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_0.size()
    assert var_2 == 0
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_3 = double_linked_list_1.append(node_5)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_4 = queue_5.size()
    assert var_4 == 0
    queue_6 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_5 = queue_6.size()
    assert var_5 == 0
    queue_7 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_9 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_6 = queue_9.peek()
    set_9 = set()
    node_10 = module_0.Node(prev=set_9)
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_11 = module_0.Queue()
    var_7 = queue_11.peek()
    bytes_0 = b'\xf5'
    var_8 = double_linked_list_2.push(bytes_0)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'

def test_case_32():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_1.pop()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Node'
    assert var_3.data is None
    assert var_3.next is None
    assert var_3.prev == {*()}

def test_case_33():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = queue_3.size()
    assert var_2 == 0
    node_4 = module_0.Node()
    var_3 = node_4.__repr__()
    assert var_3 == 'Value: None'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_34():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()

def test_case_35():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    node_3 = module_0.Node()
    var_2 = node_3.__repr__()
    assert var_2 == 'Value: None'
    node_4 = module_0.Node()

def test_case_36():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_1 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = double_linked_list_0.append(node_3)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_1.size()
    assert var_3 == 0
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    var_4 = queue_4.peek()
    queue_5 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_5 = queue_5.size()
    assert var_5 == 0
    queue_6 = module_0.Queue()
    var_6 = queue_0.size()
    assert var_6 == 0

def test_case_37():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    node_2 = module_0.Node()
    var_0 = node_2.__repr__()
    assert var_0 == 'Value: None'
    queue_1 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_1.append(node_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_1.size()
    assert var_2 == 0
    var_3 = queue_0.enqueue(var_2)

def test_case_38():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    queue_1 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_0 = double_linked_list_1.append(node_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_1.size()
    assert var_1 == 0
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_3 = double_linked_list_3.append(node_8)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_9 = module_0.Node()
    var_4 = node_9.__repr__()
    assert var_4 == 'Value: None'
    set_8 = set()
    node_10 = module_0.Node(prev=set_8)
    queue_8 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_9 = module_0.Queue()
    var_5 = queue_9.peek()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_9 = set()
    node_11 = module_0.Node(prev=set_9)
    var_6 = queue_11.peek()
    node_12 = module_0.Node()

def test_case_39():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_3 = module_0.Node()
    queue_3 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_1 = double_linked_list_2.append(node_5)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_6 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_2 = queue_6.peek()
    node_8 = module_0.Node()
    var_3 = node_8.__repr__()
    assert var_3 == 'Value: None'
    queue_7 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    queue_8 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_8 = set()
    node_10 = module_0.Node(prev=set_8)
    var_4 = double_linked_list_4.append(node_10)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_7.size()
    assert var_5 == 0
    queue_9 = module_0.Queue()
    set_9 = set()
    node_11 = module_0.Node(prev=set_9)
    var_6 = queue_9.size()
    assert var_6 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()

def test_case_40():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_0 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_5 = module_0.Node()
    node_6 = module_0.Node()
    var_1 = node_6.__repr__()
    assert var_1 == 'Value: None'
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_6 = module_0.Queue()
    var_2 = queue_6.peek()
    queue_7 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_8 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_3 = double_linked_list_4.append(node_9)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_7.size()
    assert var_4 == 0
    queue_9 = module_0.Queue()
    set_8 = set()
    node_10 = module_0.Node(prev=set_8)
    var_5 = queue_9.peek()
    var_6 = double_linked_list_0.append(queue_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'

def test_case_41():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()

def test_case_42():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_3 = module_0.Node()
    queue_3 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_3 = double_linked_list_2.append(node_6)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_7 = module_0.Queue()
    var_4 = queue_7.peek()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    node_9 = module_0.Node()
    var_5 = node_9.__repr__()
    assert var_5 == 'Value: None'
    queue_8 = module_0.Queue()
    set_8 = set()
    node_10 = module_0.Node(prev=set_8)
    var_6 = queue_8.size()
    assert var_6 == 0
    set_9 = set()
    node_11 = module_0.Node(prev=set_9)
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()

def test_case_43():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    bool_0 = False
    double_linked_list_1 = module_0.DoubleLinkedList(bool_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_44():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    var_3 = queue_3.peek()
    queue_4 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_4 = queue_4.peek()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_5 = double_linked_list_3.append(node_8)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    node_9 = module_0.Node(node_3, prev=var_1)
    assert node_9.prev == 0
    var_6 = node_9.__repr__()
    assert var_6 == 'Value: Value: None'

def test_case_45():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_2 = node_3.__repr__()
    assert var_2 == 'Value: None'
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    var_3 = queue_6.peek()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_7 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_4 = double_linked_list_2.append(node_7)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_7.size()
    assert var_5 == 0
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_10 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_6 = queue_10.size()
    assert var_6 == 0
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_7 = queue_2.size()
    assert var_7 == 0

def test_case_46():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_2 = node_3.__repr__()
    assert var_2 == 'Value: None'
    queue_3 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    var_4 = queue_1.enqueue(node_0)

def test_case_47():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_2 = module_0.Node()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_1 = double_linked_list_2.append(node_4)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_6.size()
    assert var_2 == 0
    var_3 = double_linked_list_2.append(node_2)

def test_case_48():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    queue_1 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_0 = double_linked_list_1.append(node_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'

def test_case_49():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_50():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    var_0 = node_2.__repr__()
    assert var_0 == 'Value: None'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    var_1 = queue_4.peek()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_2 = queue_7.size()
    assert var_2 == 0
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_9 = module_0.Queue()
    var_3 = queue_9.peek()
    queue_10 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_4 = queue_10.size()
    assert var_4 == 0
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()

def test_case_51():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_0 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_1 = queue_6.peek()
    queue_7 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_2 = queue_7.size()
    assert var_2 == 0
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_3 = queue_9.size()
    assert var_3 == 0
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_11 = module_0.Queue()
    var_4 = queue_11.peek()
    queue_12 = module_0.Queue()
    set_8 = set()
    node_8 = module_0.Node(prev=set_8)
    queue_13 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_9 = set()
    node_9 = module_0.Node(prev=set_9)
    var_5 = double_linked_list_3.append(node_9)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_6 = queue_12.size()
    assert var_6 == 0
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None

def test_case_52():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'

def test_case_53():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_3 = module_0.Node()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    var_1 = queue_6.peek()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    assert f'{type(queue_8).__module__}.{type(queue_8).__qualname__}' == 'queue4.Queue'
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_9 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_2 = queue_9.peek()
    node_8 = module_0.Node()
    var_3 = node_8.__repr__()
    assert var_3 == 'Value: None'
    var_4 = double_linked_list_3.push(var_3)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'

def test_case_54():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()

def test_case_55():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    node_2 = module_0.Node()
    node_3 = module_0.Node()

def test_case_56():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()

def test_case_57():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_1 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_1.size()
    assert var_2 == 0
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_4.peek()
    node_4 = module_0.Node()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_6 = module_0.Queue()
    var_4 = queue_6.peek()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_7 = module_0.Node()
    queue_8 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    var_5 = double_linked_list_2.append(node_9)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None

def test_case_58():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    node_2 = module_0.Node()
    var_1 = node_2.__repr__()
    assert var_1 == 'Value: None'
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    var_2 = queue_2.peek()
    node_4 = module_0.Node(next_node=queue_0)

def test_case_59():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue(none_type_0)

def test_case_60():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    var_1 = queue_3.peek()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_3 = module_0.Node()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_0 = None
    queue_8 = module_0.Queue(none_type_0)
    queue_9 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_2.append(node_5)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_6 = module_0.Node()

def test_case_61():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    var_0 = queue_3.peek()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = queue_6.size()
    assert var_1 == 0
    queue_7 = module_0.Queue()
    node_4 = module_0.Node()
    var_2 = node_4.__repr__()
    assert var_2 == 'Value: None'
    queue_8 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_3 = queue_8.size()
    assert var_3 == 0
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_4 = queue_11.peek()
    node_7 = module_0.Node()
    queue_12 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    queue_13 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    var_5 = double_linked_list_3.append(node_9)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_6 = queue_12.size()
    assert var_6 == 0
    set_7 = set()
    node_10 = module_0.Node(prev=set_7)
    queue_14 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_15 = module_0.Queue()
    var_7 = queue_15.peek()
    double_linked_list_5 = module_0.DoubleLinkedList(node_3)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_5.tail).__module__}.{type(double_linked_list_5.tail).__qualname__}' == 'queue4.Node'

def test_case_62():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_0 = None
    queue_4 = module_0.Queue(none_type_0)
    queue_5 = module_0.Queue()
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None

def test_case_63():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0

def test_case_64():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_5.size()
    assert var_1 == 0
    queue_6 = module_0.Queue()

def test_case_65():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77

def test_case_66():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
    assert var_1.data is None
    assert var_1.next is None
    assert var_1.prev == {*()}

def test_case_67():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_2 = double_linked_list_1.append(node_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_3.size()
    assert var_3 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    queue_6 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_4 = queue_6.size()
    assert var_4 == 0
    queue_7 = module_0.Queue()
    var_5 = queue_6.size()
    assert var_5 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = double_linked_list_1.pop()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'queue4.Node'
    assert var_6.data is None
    assert var_6.next is None
    assert var_6.prev == {*()}

def test_case_68():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue(none_type_0)
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_1 = queue_6.peek()
    node_4 = module_0.Node()
    queue_7 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_2 = queue_7.peek()
    queue_8 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_3 = double_linked_list_1.append(node_7)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'queue4.Node'
    assert var_4.data is None
    assert var_4.next is None
    assert var_4.prev == {*()}
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_11 = module_0.Queue()
    var_5 = queue_11.peek()
    var_6 = node_7.__repr__()
    assert var_6 == 'Value: None'

def test_case_69():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_70():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_0 = queue_3.size()
    assert var_0 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'

def test_case_71():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_3.size()
    assert var_4 == 0
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_5 = double_linked_list_1.append(node_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_6 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'queue4.Node'
    assert var_6.data is None
    assert var_6.next is None
    assert var_6.prev == {*()}
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_8 = module_0.Queue()
    var_7 = queue_8.peek()
    node_6 = module_0.Node()
    var_8 = node_6.__repr__()
    assert var_8 == 'Value: None'
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_8 = module_0.Node()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_13 = module_0.Queue()

def test_case_72():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_3 = module_0.Node()
    queue_3 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_2 = double_linked_list_2.append(node_5)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_2.shift()
    assert double_linked_list_2.tail is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Node'
    assert var_3.data is None
    assert var_3.next is None
    assert var_3.prev == {*()}
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    assert f'{type(queue_8).__module__}.{type(queue_8).__qualname__}' == 'queue4.Queue'
    queue_9 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_4 = queue_9.size()
    assert var_4 == 0
    queue_10 = module_0.Queue()
    var_5 = queue_9.size()
    assert var_5 == 0
    var_6 = queue_8.peek()
    assert var_6 == 77
    queue_11 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    queue_12 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_7 = double_linked_list_5.append(node_9)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    set_9 = set()
    node_10 = module_0.Node(prev=set_9)
    queue_13 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    set_10 = set()
    node_11 = module_0.Node(prev=set_10)
    queue_14 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    queue_15 = module_0.Queue()
    var_8 = queue_15.peek()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    double_linked_list_9 = module_0.DoubleLinkedList()
    assert double_linked_list_9.head is None
    assert double_linked_list_9.tail is None

def test_case_73():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_9 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_9.size()
    assert var_1 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_12 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_4 = module_0.Node()
    queue_13 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_2 = queue_13.peek()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_14 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_15 = module_0.Queue()
    var_3 = queue_15.peek()
    node_7 = module_0.Node(next_node=node_6)

def test_case_74():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'

def test_case_75():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.peek()
    node_1 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_0.append(node_3)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_3 = queue_5.peek()
    var_4 = queue_2.enqueue(var_2)

def test_case_76():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_5.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_7.size()
    assert var_1 == 0
    queue_8 = module_0.Queue()
    var_2 = queue_7.size()
    assert var_2 == 0
    var_3 = queue_6.peek()
    assert var_3 == 77
    queue_9 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_1)
    queue_11 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_11.size()
    assert var_4 == 0
    queue_12 = module_0.Queue()
    var_5 = queue_11.size()
    assert var_5 == 0
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_13 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    none_type_0 = None
    queue_17 = module_0.Queue(none_type_0)
    queue_18 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_6 = queue_18.size()
    assert var_6 == 0
    queue_19 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_20 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    var_7 = double_linked_list_3.append(node_7)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_8 = double_linked_list_3.shift()
    assert double_linked_list_3.tail is None
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'queue4.Node'
    assert var_8.data is None
    assert var_8.next is None
    assert var_8.prev == {*()}
    queue_21 = module_0.Queue()

def test_case_77():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_0 = None
    queue_4 = module_0.Queue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_6.size()
    assert var_1 == 0
    queue_7 = module_0.Queue()
    var_2 = queue_6.size()
    assert var_2 == 0
    queue_8 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_9 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = double_linked_list_0.append(node_3)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_10 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_5 = module_0.Node()
    var_4 = queue_8.size()
    assert var_4 == 0

def test_case_78():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.peek()
    node_1 = module_0.Node()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue(none_type_0)
    queue_6 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_7 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_0.append(node_3)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'queue4.Node'
    assert var_2.data is None
    assert var_2.next is None
    assert var_2.prev == {*()}
    queue_8 = module_0.Queue()

def test_case_79():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    var_1 = queue_3.peek()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_3 = module_0.Node()
    var_2 = node_3.__repr__()
    assert var_2 == 'Value: None'
    queue_6 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_3 = queue_6.size()
    assert var_3 == 0
    queue_7 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_4 = double_linked_list_3.append(node_6)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_3.shift()
    assert double_linked_list_3.tail is None
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Node'
    assert var_5.data is None
    assert var_5.next is None
    assert var_5.prev == {*()}
    queue_9 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_6 = double_linked_list_4.append(node_8)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_7 = queue_9.size()
    assert var_7 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_0)
    assert f'{type(queue_11).__module__}.{type(queue_11).__qualname__}' == 'queue4.Queue'
    queue_12 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_8 = queue_12.size()
    assert var_8 == 0
    queue_13 = module_0.Queue()
    var_9 = queue_12.size()
    assert var_9 == 0
    set_9 = set()
    node_10 = module_0.Node(prev=set_9)
    queue_14 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_10 = set()
    node_11 = module_0.Node(prev=set_10)
    queue_15 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    node_12 = module_0.Node()
    node_13 = module_0.Node()

def test_case_80():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
    assert var_1.data is None
    assert var_1.next is None
    assert var_1.prev == {*()}
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_3.peek()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_5 = module_0.Node()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_7 = module_0.Node(next_node=queue_3)

def test_case_81():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.peek()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_4 = queue_8.size()
    assert var_4 == 0
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_5 = var_4.__repr__()
    assert var_5 == '0'

def test_case_82():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'

def test_case_83():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_84():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    queue_8 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_8.size()
    assert var_1 == 0
    queue_9 = module_0.Queue()
    var_2 = queue_8.size()
    assert var_2 == 0
    node_3 = module_0.Node()
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    queue_10 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = queue_10.size()
    assert var_4 == 0
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_85():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    queue_4 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    var_4 = queue_4.size()
    assert var_4 == 0
    queue_6 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_6 = module_0.Node()
    queue_8 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_5 = double_linked_list_2.append(node_8)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_6 = double_linked_list_0.remove(bytes_1)
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None

def test_case_86():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_2)
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_5.size()
    assert var_2 == 0
    queue_6 = module_0.Queue()
    var_3 = queue_5.size()
    assert var_3 == 0
    var_4 = queue_4.peek()
    assert var_4 == 77
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_11 = module_0.Queue()
    var_5 = queue_11.peek()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_4 = module_0.Node()
    var_6 = node_4.__repr__()
    assert var_6 == 'Value: None'
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_14 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_6 = module_0.Node()
    queue_15 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_7 = queue_15.peek()
    node_8 = module_0.Node()
    var_8 = node_2.__repr__()
    assert var_8 == 'Value: None'

def test_case_87():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    var_0 = queue_3.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_5.size()
    assert var_1 == 0
    queue_6 = module_0.Queue()
    var_2 = queue_5.size()
    assert var_2 == 0
    var_3 = queue_4.peek()
    assert var_3 == 77
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    none_type_0 = None
    queue_10 = module_0.Queue(none_type_0)
    queue_11 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = queue_11.peek()
    node_3 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_5 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_13 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_6 = queue_13.size()
    assert var_6 == 0
    queue_14 = module_0.Queue()
    node_5 = module_0.Node()
    var_7 = node_5.__repr__()
    assert var_7 == 'Value: None'
    queue_15 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_8 = queue_15.peek()
    queue_16 = module_0.Queue(queue_15)
    var_9 = queue_4.size()
    assert var_9 == 11

def test_case_88():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = queue_5.peek()
    node_4 = module_0.Node()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_7 = module_0.Node()
    queue_8 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_3 = queue_8.peek()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_0.size()
    assert var_5 == 11

def test_case_89():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_4.peek()
    node_2 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None

def test_case_90():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_3.peek()
    node_2 = module_0.Node()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_3 = double_linked_list_1.append(node_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_4.size()
    assert var_4 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_5 = queue_8.size()
    assert var_5 == 0
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_1)
    queue_12 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_6 = queue_12.size()
    assert var_6 == 0
    queue_13 = module_0.Queue()
    var_7 = queue_12.size()
    assert var_7 == 0
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_2)
    var_8 = queue_13.enqueue(var_1)

def test_case_91():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    var_2 = queue_2.size()
    assert var_2 == 0
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    var_3 = queue_5.peek()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_8 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_2)
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_4 = module_0.Node()
    var_5 = node_2.__repr__()
    assert var_5 == 'Value: None'

def test_case_92():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    var_4 = queue_4.size()
    assert var_4 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    none_type_0 = None
    queue_9 = module_0.Queue(none_type_0)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_2)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_5 = double_linked_list_0.append(bytes_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_3)
    queue_12 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_6 = queue_12.peek()
    node_3 = module_0.Node()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_13 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_14 = module_0.Queue()
    var_7 = queue_14.peek()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_17 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_8 = queue_17.peek()
    queue_18 = module_0.Queue()

def test_case_93():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_9 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_3 = double_linked_list_3.append(node_5)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_9.size()
    assert var_4 == 0
    double_linked_list_4 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None

def test_case_94():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    var_0 = queue_2.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_3.append(node_3)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    queue_8 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_3 = queue_8.size()
    assert var_3 == 0
    queue_9 = module_0.Queue()
    var_4 = queue_8.size()
    assert var_4 == 0
    var_5 = queue_7.peek()
    assert var_5 == 77
    queue_10 = module_0.Queue()

def test_case_95():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_96():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_0 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    var_1 = double_linked_list_0.append(set_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'

def test_case_97():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_0 = queue_4.peek()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_0 = None
    queue_8 = module_0.Queue(none_type_0)
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_1 = queue_10.peek()
    node_5 = module_0.Node()
    node_6 = module_0.Node()
    var_2 = node_6.__repr__()
    assert var_2 == 'Value: None'
    var_3 = double_linked_list_2.push(none_type_0)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'

def test_case_98():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue(none_type_0)
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_1 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    var_2 = node_4.__repr__()
    assert var_2 == 'Value: None'
    queue_8 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_3 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    assert f'{type(queue_9).__module__}.{type(queue_9).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_99():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    var_2 = queue_2.size()
    assert var_2 == 0
    var_3 = queue_1.peek()
    assert var_3 == 77
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_4 = queue_4.size()
    assert var_4 == 0
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_5 = double_linked_list_1.append(node_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_6 = queue_5.size()
    assert var_6 == 0
    str_0 = "v)9v\x0c_92-l^'("
    double_linked_list_2 = module_0.DoubleLinkedList(str_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'

def test_case_100():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_2 = module_0.Node()
    node_3 = module_0.Node()
    var_2 = node_3.__repr__()
    assert var_2 == 'Value: None'
    queue_7 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_3 = queue_7.peek()
    queue_8 = module_0.Queue(queue_7)
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = queue_0.size()
    assert var_4 == 11

def test_case_101():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'queue4.Node'
    assert var_2.data is None
    assert var_2.next is None
    assert var_2.prev == {*()}
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    node_4 = module_0.Node(double_linked_list_0)

def test_case_102():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    var_3 = queue_4.size()
    assert var_3 == 0
    var_4 = queue_3.peek()
    assert var_4 == 77
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_2)
    var_5 = queue_0.enqueue(queue_4)

def test_case_103():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = double_linked_list_0.pop()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'queue4.Node'
    assert var_2.data is None
    assert var_2.next is None
    assert var_2.prev == {*()}

def test_case_104():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_2.size()
    assert var_2 == 11

def test_case_105():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'

def test_case_106():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    queue_2 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_1 = double_linked_list_1.append(node_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'queue4.Node'
    assert var_2.data is None
    assert var_2.next is None
    assert var_2.prev == {*()}
    queue_4 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_3 = queue_4.peek()
    node_6 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = queue_0.size()
    assert var_4 == 0

def test_case_107():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    var_1 = queue_3.peek()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = queue_6.size()
    assert var_2 == 0
    queue_7 = module_0.Queue()
    var_3 = queue_6.size()
    assert var_3 == 0
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_5 = module_0.Node()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_4 = queue_11.size()
    assert var_4 == 0
    queue_12 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_13 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_14 = module_0.Queue()
    var_5 = queue_14.peek()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_6 = queue_8.peek()

def test_case_108():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_1 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    queue_7 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_7.size()
    assert var_1 == 0
    queue_8 = module_0.Queue()
    var_2 = queue_7.size()
    assert var_2 == 0
    queue_9 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_9.size()
    assert var_3 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = queue_11.size()
    assert var_4 == 0
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_14 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_15 = module_0.Queue()
    var_5 = queue_15.peek()
    queue_16 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_17 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_6 = double_linked_list_3.append(node_7)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    double_linked_list_4 = module_0.DoubleLinkedList(queue_13)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_4.tail).__module__}.{type(double_linked_list_4.tail).__qualname__}' == 'queue4.Node'

def test_case_109():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    queue_5 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    var_4 = queue_5.size()
    assert var_4 == 0
    var_5 = queue_4.peek()
    assert var_5 == 77
    queue_7 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_6 = queue_7.size()
    assert var_6 == 0
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_7 = queue_9.size()
    assert var_7 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    none_type_0 = None
    queue_15 = module_0.Queue(none_type_0)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()

def test_case_110():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_4.peek()
    node_4 = module_0.Node()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_10 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_4 = queue_10.peek()
    queue_11 = module_0.Queue(queue_10)
    assert f'{type(queue_11).__module__}.{type(queue_11).__qualname__}' == 'queue4.Queue'
    str_0 = 'Zh"'
    node_7 = module_0.Node(next_node=queue_10, prev=str_0)

def test_case_111():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_3 = module_0.Node()

def test_case_112():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = queue_5.peek()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_8 = module_0.Queue()
    var_5 = queue_8.peek()
    queue_9 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_6 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_12 = module_0.Queue()
    var_7 = queue_12.peek()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    queue_15 = module_0.Queue()

def test_case_113():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
    assert var_1.data is None
    assert var_1.next is None
    assert var_1.prev == {*()}
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_4 = module_0.Node()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    var_2 = queue_7.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    queue_9 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_3 = queue_9.size()
    assert var_3 == 0
    queue_10 = module_0.Queue()
    var_4 = queue_9.size()
    assert var_4 == 0
    node_7 = module_0.Node()
    var_5 = node_7.__repr__()
    assert var_5 == 'Value: None'
    queue_11 = module_0.Queue(node_7)
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_12 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_2)
    queue_16 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_6 = queue_16.size()
    assert var_6 == 0
    queue_17 = module_0.Queue()
    var_7 = queue_16.size()
    assert var_7 == 0
    var_8 = queue_15.peek()
    assert var_8 == 77
    queue_18 = module_0.Queue(var_8)
    var_9 = queue_18.dequeue()
    assert var_9 == 77

def test_case_114():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    var_2 = queue_2.size()
    assert var_2 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    node_2 = module_0.Node()
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = queue_5.size()
    assert var_4 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_5 = double_linked_list_0.append(node_6)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_10 = module_0.Queue()
    var_6 = queue_10.peek()
    queue_11 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_7 = queue_11.peek()
    node_9 = module_0.Node(bytes_1)

def test_case_115():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_1 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_3 = double_linked_list_2.append(node_5)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_4 = queue_7.size()
    assert var_4 == 0
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_5 = queue_6.enqueue(queue_2)

def test_case_116():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    queue_2 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    var_3 = queue_2.size()
    assert var_3 == 0
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    node_3 = module_0.Node()
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    queue_4 = module_0.Queue(node_3)
    queue_5 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_5 = queue_5.size()
    assert var_5 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()

def test_case_117():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_0 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
    assert var_1.data is None
    assert var_1.next is None
    assert var_1.prev == {*()}
    queue_2 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = queue_2.size()
    assert var_2 == 0
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_3 = queue_6.size()
    assert var_3 == 0
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    none_type_0 = None
    queue_11 = module_0.Queue(none_type_0)
    var_4 = queue_3.peek()

def test_case_118():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0

def test_case_119():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = queue_2.size()
    assert var_1 == 0
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_6 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_2 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_8 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_9 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_3 = queue_9.peek()
    node_8 = module_0.Node()
    queue_10 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    queue_11 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_8 = set()
    node_10 = module_0.Node(prev=set_8)
    var_4 = double_linked_list_5.append(node_10)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_5.shift()
    assert double_linked_list_5.tail is None
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Node'
    assert var_5.data is None
    assert var_5.next is None
    assert var_5.prev == {*()}
    node_11 = module_0.Node(var_2, double_linked_list_1)

def test_case_120():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_1 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None

def test_case_121():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    var_1 = queue_4.peek()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_5.peek()
    node_3 = module_0.Node()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_3 = double_linked_list_1.append(node_5)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue(set_0)

def test_case_122():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue(none_type_0)
    queue_4 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_4.size()
    assert var_1 == 0
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_6.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    queue_8 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_8.size()
    assert var_3 == 0
    queue_9 = module_0.Queue()
    var_4 = queue_8.size()
    assert var_4 == 0
    var_5 = queue_7.peek()
    assert var_5 == 77
    queue_10 = module_0.Queue()
    var_6 = var_1.__repr__()
    assert var_6 == '0'

def test_case_123():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
    assert var_1.data is None
    assert var_1.next is None
    assert var_1.prev == {*()}
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue(none_type_0)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_3 = module_0.Node()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_2 = double_linked_list_2.append(node_5)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_9.size()
    assert var_3 == 0
    var_4 = queue_3.enqueue(none_type_0)

def test_case_124():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_0.pop()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
    assert var_1.data is None
    assert var_1.next is None
    assert var_1.prev == {*()}

def test_case_125():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_3.size()
    assert var_0 == 0
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    var_1 = queue_6.peek()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_9 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_2 = queue_9.peek()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    none_type_0 = None
    queue_13 = module_0.Queue(none_type_0)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_16 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_6 = module_0.Node()
    var_3 = queue_15.size()
    assert var_3 == 0
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_17 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    node_8 = module_0.Node()
    queue_18 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_4 = queue_18.size()
    assert var_4 == 0
    node_10 = module_0.Node()
    var_5 = node_10.__repr__()
    assert var_5 == 'Value: None'
    queue_19 = module_0.Queue(node_10)
    assert f'{type(queue_19).__module__}.{type(queue_19).__qualname__}' == 'queue4.Queue'
    var_6 = queue_1.peek()

def test_case_126():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_4.size()
    assert var_1 == 0
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_7 = module_0.Queue()
    var_2 = queue_7.peek()
    var_3 = var_0.__repr__()
    assert var_3 == '0'

def test_case_127():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
    assert var_1.data is None
    assert var_1.next is None
    assert var_1.prev == {*()}
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_3.peek()
    node_3 = module_0.Node()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_5 = module_0.Node(prev=queue_0)

def test_case_128():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_1.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_3.size()
    assert var_3 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    queue_5 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_4 = queue_5.size()
    assert var_4 == 0
    queue_6 = module_0.Queue()
    var_5 = queue_5.size()
    assert var_5 == 0
    var_6 = queue_4.peek()
    assert var_6 == 77
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    node_5 = module_0.Node()
    var_7 = node_5.__repr__()
    assert var_7 == 'Value: None'
    queue_8 = module_0.Queue(node_5)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_2)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_8 = double_linked_list_1.append(bytes_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_11 = module_0.Queue()
    var_9 = queue_11.peek()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_14 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_10 = queue_14.peek()
    queue_15 = module_0.Queue(queue_14)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None

def test_case_129():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'queue4.Node'
    assert var_2.data is None
    assert var_2.next is None
    assert var_2.prev == {*()}
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    var_3 = queue_6.peek()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_4 = queue_10.size()
    assert var_4 == 0
    queue_11 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_12 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    none_type_0 = None
    queue_18 = module_0.Queue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_19 = module_0.Queue(bytes_0)
    assert f'{type(queue_19).__module__}.{type(queue_19).__qualname__}' == 'queue4.Queue'
    queue_20 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_5 = queue_20.size()
    assert var_5 == 0
    queue_21 = module_0.Queue()
    var_6 = queue_20.size()
    assert var_6 == 0
    var_7 = queue_19.peek()
    assert var_7 == 77
    queue_22 = module_0.Queue()
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    var_8 = queue_22.peek()
    queue_23 = module_0.Queue(queue_22)
    int_0 = 2476
    float_0 = -1291.81
    tuple_0 = (int_0, var_2, float_0, node_0)
    var_9 = double_linked_list_0.push(tuple_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'

def test_case_130():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_1.size()
    assert var_1 == 0
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_131():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    node_2 = module_0.Node()
    var_1 = node_2.__repr__()
    assert var_1 == 'Value: None'
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_2 = queue_2.peek()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    var_3 = queue_4.peek()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_4 = queue_7.size()
    assert var_4 == 0
    queue_8 = module_0.Queue()

def test_case_132():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_1 = double_linked_list_1.append(node_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_7 = module_0.Node()
    var_2 = queue_7.size()
    assert var_2 == 0
    queue_9 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_3 = double_linked_list_4.append(node_9)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_4.shift()
    assert double_linked_list_4.tail is None
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'queue4.Node'
    assert var_4.data is None
    assert var_4.next is None
    assert var_4.prev == {*()}
    set_8 = set()
    node_10 = module_0.Node(prev=set_8)
    queue_11 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_14 = module_0.Queue()
    set_9 = set()
    node_11 = module_0.Node(prev=set_9)
    var_5 = queue_14.size()
    assert var_5 == 0
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    set_10 = set()
    node_12 = module_0.Node(prev=set_10)
    var_6 = queue_18.peek()
    node_13 = module_0.Node(next_node=var_5)
    assert node_13.next == 0

def test_case_133():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_0 = None
    queue_7 = module_0.Queue(none_type_0)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_3 = module_0.Node()
    queue_9 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_10 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_11 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_4 = queue_11.peek()
    node_7 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    var_5 = queue_0.peek()
    assert var_5 == 77

def test_case_134():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue()

def test_case_135():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    node_1 = module_0.Node()

def test_case_136():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = double_linked_list_0.push(var_0)

def test_case_137():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    var_1 = queue_3.peek()
    node_3 = module_0.Node()
    var_2 = node_3.__repr__()
    assert var_2 == 'Value: None'
    queue_4 = module_0.Queue()
    node_4 = module_0.Node()
    var_3 = node_4.__repr__()
    assert var_3 == 'Value: None'
    queue_5 = module_0.Queue(node_4)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    queue_7 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_4 = queue_7.size()
    assert var_4 == 0
    queue_8 = module_0.Queue()
    var_5 = queue_7.size()
    assert var_5 == 0
    var_6 = queue_6.peek()
    assert var_6 == 77
    queue_9 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_7 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    var_8 = queue_8.peek()

def test_case_138():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    node_2 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_2)
    queue_3 = module_0.Queue()
    set_0 = set()
    node_3 = module_0.Node(prev=set_0)
    var_4 = queue_3.size()
    assert var_4 == 0
    queue_4 = module_0.Queue()
    var_5 = queue_3.size()
    assert var_5 == 0
    queue_5 = module_0.Queue()

def test_case_139():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_2.size()
    assert var_0 == 0
    node_2 = module_0.Node()
    var_1 = node_2.__repr__()
    assert var_1 == 'Value: None'
    queue_4 = module_0.Queue(node_2)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    node_3 = module_0.Node()
    var_2 = node_3.__repr__()
    assert var_2 == 'Value: None'
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_9 = module_0.Queue()
    var_3 = queue_9.peek()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    none_type_0 = None
    queue_13 = module_0.Queue(none_type_0)
    queue_14 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_4 = queue_14.peek()
    node_7 = module_0.Node()
    var_5 = queue_14.enqueue(node_3)

def test_case_140():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    node_4 = module_0.Node()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_5 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_9 = module_0.Queue()
    var_6 = queue_9.peek()
    node_7 = module_0.Node()
    var_7 = node_7.__repr__()
    assert var_7 == 'Value: None'
    node_8 = module_0.Node()

def test_case_141():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_1.enqueue(queue_0)

def test_case_142():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_3.peek()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    var_2 = queue_7.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    queue_9 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_3 = queue_9.size()
    assert var_3 == 0
    queue_10 = module_0.Queue()
    var_4 = queue_9.size()
    assert var_4 == 0
    var_5 = queue_8.peek()
    assert var_5 == 77
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_1)
    queue_12 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_6 = queue_12.size()
    assert var_6 == 0
    queue_13 = module_0.Queue()
    var_7 = queue_12.size()
    assert var_7 == 0
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_17 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    var_8 = double_linked_list_3.append(node_7)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_9 = queue_16.size()
    assert var_9 == 0
    queue_18 = module_0.Queue()
    set_8 = set()
    node_8 = module_0.Node(prev=set_8)
    var_10 = queue_18.size()
    assert var_10 == 0
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList(queue_18)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_4.tail).__module__}.{type(double_linked_list_4.tail).__qualname__}' == 'queue4.Node'

def test_case_143():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_2 = double_linked_list_2.append(node_4)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_5.enqueue(queue_4)
    queue_6 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_4 = double_linked_list_3.append(node_6)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_6.size()
    assert var_5 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    assert f'{type(queue_8).__module__}.{type(queue_8).__qualname__}' == 'queue4.Queue'
    queue_9 = module_0.Queue()
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    var_6 = queue_9.size()
    assert var_6 == 0
    set_8 = set()
    node_8 = module_0.Node(prev=set_8)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    none_type_0 = None
    queue_13 = module_0.Queue(none_type_0)
    var_7 = double_linked_list_1.append(queue_2)

def test_case_144():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    node_3 = module_0.Node()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_3 = double_linked_list_1.append(node_5)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'queue4.Node'
    assert var_4.data is None
    assert var_4.next is None
    assert var_4.prev == {*()}
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_5 = double_linked_list_2.push(var_0)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'

def test_case_145():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_0 = None
    queue_4 = module_0.Queue(none_type_0)
    queue_5 = module_0.Queue()

def test_case_146():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_5.size()
    assert var_2 == 0
    queue_6 = module_0.Queue()
    var_3 = queue_5.size()
    assert var_3 == 0
    var_4 = queue_4.peek()
    assert var_4 == 77
    queue_7 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_5 = double_linked_list_1.append(node_5)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_6 = queue_7.size()
    assert var_6 == 0
    queue_9 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_7 = queue_9.size()
    assert var_7 == 0
    node_7 = module_0.Node()
    var_8 = node_7.__repr__()
    assert var_8 == 'Value: None'
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_12 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_9 = module_0.Node()
    var_9 = queue_11.size()
    assert var_9 == 0
    var_10 = double_linked_list_0.push(node_5)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'

def test_case_147():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    node_2 = module_0.Node()
    var_1 = node_2.__repr__()
    assert var_1 == 'Value: None'
    queue_1 = module_0.Queue(node_2)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_2.peek()
    node_4 = module_0.Node()
    queue_3 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_3 = double_linked_list_0.append(node_6)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_0 = None
    queue_8 = module_0.Queue(none_type_0)
    queue_9 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_10 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_4 = double_linked_list_1.append(node_8)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Node'
    assert var_5.data is None
    assert var_5.next is None
    assert var_5.prev == {*()}
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    queue_13 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_10 = module_0.Node()
    var_6 = queue_12.size()
    assert var_6 == 0
    set_8 = set()
    node_11 = module_0.Node(prev=set_8)
    queue_14 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_12 = module_0.Node(queue_3)

def test_case_148():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_2 = module_0.Node()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    var_0 = queue_5.enqueue(queue_4)

def test_case_149():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = queue_3.peek()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = var_1.__repr__()

def test_case_150():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    node_2 = module_0.Node()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    var_3 = queue_3.peek()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_7 = module_0.Queue()
    var_4 = queue_7.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    queue_9 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_5 = queue_9.size()
    assert var_5 == 0
    queue_10 = module_0.Queue()
    var_6 = queue_9.size()
    assert var_6 == 0
    var_7 = queue_8.peek()
    assert var_7 == 77
    queue_11 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_12 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_8 = double_linked_list_4.append(node_7)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_9 = queue_11.size()
    assert var_9 == 0
    queue_13 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_10 = queue_13.peek()
    node_9 = module_0.Node()
    var_11 = node_2.__repr__()
    assert var_11 == 'Value: None'

def test_case_151():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = var_0.__repr__()

def test_case_152():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    var_3 = queue_5.peek()
    var_4 = queue_3.peek()
    assert var_4 == 77

def test_case_153():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = double_linked_list_1.append(node_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = queue_6.size()
    assert var_2 == 0
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_7 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_8 = module_0.Queue()
    var_3 = queue_8.peek()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_11 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    node_6 = module_0.Node()
    var_4 = queue_10.size()
    assert var_4 == 0
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_12 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    node_8 = module_0.Node()
    queue_13 = module_0.Queue(var_4)

def test_case_154():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue(node_1)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_3 = module_0.Node()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_2.append(node_5)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_5.size()
    assert var_3 == 0
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None

def test_case_155():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Node'
    assert var_3.data is None
    assert var_3.next is None
    assert var_3.prev == {*()}
    node_4 = module_0.Node()
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    queue_4 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_5 = queue_4.size()
    assert var_5 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    node_6 = module_0.Node()
    var_6 = node_6.__repr__()
    assert var_6 == 'Value: None'
    queue_7 = module_0.Queue(node_6)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_9 = module_0.Queue()
    var_7 = queue_9.peek()
    queue_10 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_8 = queue_10.size()
    assert var_8 == 0
    queue_11 = module_0.Queue()
    var_9 = queue_5.peek()

def test_case_156():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)

def test_case_157():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_1.pop()
    assert var_3 == b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_158():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    var_3 = queue_4.size()
    assert var_3 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_10 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = double_linked_list_1.append(node_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_9.size()
    assert var_5 == 0
    queue_11 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_6 = queue_11.size()
    assert var_6 == 0
    bytes_2 = b'\x1e+\x86j\xa7\x91\x18n\xe6Q\xc6k\x8a8\xed\xb1^_D\xb2'
    list_0 = [queue_7, bytes_2, queue_2, set_2]
    var_7 = queue_6.enqueue(list_0)

def test_case_159():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue(none_type_0)
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_5 = module_0.Queue()
    var_0 = queue_5.peek()
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    queue_6 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = var_2.__repr__()
    queue_8 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_4 = double_linked_list_1.append(node_5)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_9.enqueue(queue_8)
    queue_10 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_6 = double_linked_list_2.append(node_7)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_7 = double_linked_list_2.shift()
    assert double_linked_list_2.tail is None
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'queue4.Node'
    assert var_7.data is None
    assert var_7.next is None
    assert var_7.prev == {*()}
    queue_12 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_8 = queue_12.peek()
    var_9 = var_7.__repr__()
    assert var_9 == 'Value: None'

def test_case_160():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'

def test_case_161():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_0)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_2 = double_linked_list_3.append(node_4)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_8.enqueue(queue_7)
    node_5 = module_0.Node()
    var_4 = node_5.__repr__()
    assert var_4 == 'Value: None'
    queue_9 = module_0.Queue(node_5)
    assert f'{type(queue_9).__module__}.{type(queue_9).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_0)
    queue_11 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_5 = queue_11.size()
    assert var_5 == 0
    queue_12 = module_0.Queue()
    var_6 = queue_11.size()
    assert var_6 == 0
    node_7 = module_0.Node()
    var_7 = node_7.__repr__()
    assert var_7 == 'Value: None'
    queue_13 = module_0.Queue()

def test_case_162():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_1 = queue_1.enqueue(set_0)

def test_case_163():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_1 = queue_5.peek()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_7 = module_0.Queue()
    var_2 = queue_7.peek()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_0)
    assert f'{type(queue_10).__module__}.{type(queue_10).__qualname__}' == 'queue4.Queue'
    queue_11 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_3 = queue_11.peek()
    queue_12 = module_0.Queue(queue_11)
    var_4 = queue_12.enqueue(set_5)
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_13 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    queue_16 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    node_8 = module_0.Node()
    var_5 = queue_15.size()
    assert var_5 == 0
    var_6 = node_7.__repr__()
    assert var_6 == 'Value: None'
    none_type_0 = None
    var_7 = queue_2.enqueue(none_type_0)

def test_case_164():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_2 = module_0.Node()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_0 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    var_1 = queue_5.enqueue(set_2)
    queue_6 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_2 = double_linked_list_3.append(node_5)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_6.size()
    assert var_3 == 0
    var_4 = queue_2.enqueue(var_0)

def test_case_165():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_7.size()
    assert var_2 == 0
    queue_8 = module_0.Queue()
    var_3 = queue_7.size()
    assert var_3 == 0
    var_4 = queue_6.peek()
    assert var_4 == 77
    queue_9 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_5 = queue_9.peek()
    node_4 = module_0.Node()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    none_type_0 = None
    queue_13 = module_0.Queue(none_type_0)
    queue_14 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_6 = queue_14.peek()
    queue_15 = module_0.Queue(queue_14)
    var_7 = queue_15.enqueue(set_4)
    queue_16 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_8 = queue_16.peek()
    queue_17 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_18 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_9 = double_linked_list_2.append(node_8)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_19 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    queue_20 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_9 = set()
    node_10 = module_0.Node(prev=set_9)
    var_10 = double_linked_list_3.append(node_10)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_11 = queue_19.size()
    assert var_11 == 0
    var_12 = var_10.__repr__()

def test_case_166():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    queue_2 = module_0.Queue(node_2)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_4 = double_linked_list_1.append(node_5)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue()

def test_case_167():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
    assert var_1.data is None
    assert var_1.next is None
    assert var_1.prev == {*()}
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_3 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    queue_6 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_4 = queue_6.size()
    assert var_4 == 0
    node_6 = module_0.Node()
    var_5 = node_6.__repr__()
    assert var_5 == 'Value: None'
    queue_7 = module_0.Queue(node_6)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_8 = module_0.Node()
    var_6 = queue_10.size()
    assert var_6 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_0)
    queue_13 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_7 = queue_13.size()
    assert var_7 == 0
    queue_14 = module_0.Queue()
    var_8 = queue_13.size()
    assert var_8 == 0
    var_9 = queue_12.peek()
    assert var_9 == 77
    queue_15 = module_0.Queue()
    set_8 = set()
    node_10 = module_0.Node(prev=set_8)
    queue_16 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_9 = set()
    node_11 = module_0.Node(prev=set_9)
    var_10 = double_linked_list_3.append(node_11)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_11 = queue_16.enqueue(queue_15)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_17 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_12 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    double_linked_list_5 = module_0.DoubleLinkedList(var_11)
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None

def test_case_168():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_5 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_7.size()
    assert var_1 == 0
    queue_8 = module_0.Queue()
    var_2 = queue_7.size()
    assert var_2 == 0
    queue_9 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_9.size()
    assert var_3 == 0
    var_4 = double_linked_list_0.append(var_3)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'

def test_case_169():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_0 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = var_0.__repr__()
    queue_5 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_2 = double_linked_list_1.append(node_5)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_8 = module_0.Queue()
    var_3 = queue_8.peek()
    queue_9 = module_0.Queue()

def test_case_170():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
    assert var_1.data is None
    assert var_1.next is None
    assert var_1.prev == {*()}
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    var_3 = queue_3.enqueue(set_2)
    queue_4 = module_0.Queue()

def test_case_171():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    var_1 = queue_2.size()
    assert var_1 == 0
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_4 = module_0.Node()
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_7 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_4 = double_linked_list_2.append(node_6)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_7.size()
    assert var_5 == 0
    queue_9 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_6 = queue_9.size()
    assert var_6 == 0
    queue_10 = module_0.Queue()
    node_8 = module_0.Node()
    var_7 = node_8.__repr__()
    assert var_7 == 'Value: None'
    var_8 = queue_9.size()
    assert var_8 == 0

def test_case_172():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_3.size()
    assert var_0 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    none_type_0 = None
    queue_9 = module_0.Queue(none_type_0)
    var_1 = queue_9.peek()

def test_case_173():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_3.size()
    assert var_0 == 0
    queue_4 = module_0.Queue()
    var_1 = queue_3.size()
    assert var_1 == 0
    var_2 = queue_2.peek()
    assert var_2 == 77
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = var_3.__repr__()
    node_4 = module_0.Node()
    var_5 = node_4.__repr__()
    assert var_5 == 'Value: None'
    queue_7 = module_0.Queue(node_4)
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_9 = module_0.Queue()
    var_6 = queue_9.peek()
    queue_10 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_7 = double_linked_list_2.append(node_7)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_12 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    queue_13 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_8 = double_linked_list_3.append(node_9)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_9 = queue_13.enqueue(queue_12)
    queue_14 = module_0.Queue()
    set_9 = set()
    node_10 = module_0.Node(prev=set_9)
    var_10 = queue_14.peek()
    queue_15 = module_0.Queue(queue_14)
    var_11 = queue_9.size()
    assert var_11 == 0

def test_case_174():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_1 = queue_1.enqueue(set_0)
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = double_linked_list_0.append(node_3)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_3.size()
    assert var_4 == 0
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_5 = queue_7.peek()
    queue_8 = module_0.Queue(queue_7)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    queue_10 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_6 = queue_10.size()
    assert var_6 == 0
    queue_11 = module_0.Queue()
    var_7 = queue_10.size()
    assert var_7 == 0
    var_8 = queue_9.peek()
    assert var_8 == 77
    node_7 = module_0.Node()
    var_9 = node_7.__repr__()
    assert var_9 == 'Value: None'
    queue_12 = module_0.Queue(node_7)
    queue_13 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    queue_14 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_10 = double_linked_list_2.append(node_9)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_15 = module_0.Queue()

def test_case_175():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue(queue_0)

def test_case_176():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()

def test_case_177():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue(queue_2)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_5.peek()
    node_3 = module_0.Node()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_3 = double_linked_list_2.append(node_5)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_7 = module_0.Node()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_4 = double_linked_list_0.append(double_linked_list_3)

def test_case_178():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_4.size()
    assert var_0 == 0
    queue_5 = module_0.Queue()
    var_1 = queue_4.size()
    assert var_1 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_3 = module_0.Node()
    var_2 = queue_9.size()
    assert var_2 == 0
    queue_11 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_3 = queue_11.size()
    assert var_3 == 0
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_15 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_4 = double_linked_list_3.append(node_6)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_15.enqueue(queue_14)
    bool_0 = True
    var_6 = double_linked_list_0.append(bool_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'

def test_case_179():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    queue_6 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_3 = queue_6.size()
    assert var_3 == 0
    queue_7 = module_0.Queue()
    var_4 = queue_6.size()
    assert var_4 == 0
    queue_8 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    queue_10 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_5 = queue_10.size()
    assert var_5 == 0
    queue_11 = module_0.Queue()
    var_6 = queue_10.size()
    assert var_6 == 0
    queue_12 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_7 = queue_12.peek()
    queue_13 = module_0.Queue(queue_12)
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_8 = var_7.__repr__()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_16 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_8 = module_0.Node()
    var_9 = queue_15.size()
    assert var_9 == 0
    var_10 = queue_11.enqueue(queue_4)

def test_case_180():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = var_0.__repr__()
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_0.append(node_3)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_3 = queue_4.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    var_5 = node_5.__repr__()
    assert var_5 == 'Value: None'
    node_6 = module_0.Node()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_6 = queue_6.enqueue(none_type_0)
    var_7 = double_linked_list_0.append(node_7)

def test_case_181():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_1 = module_0.Node()
    var_1 = double_linked_list_0.push(double_linked_list_0)

def test_case_182():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_4.size()
    assert var_1 == 0
    queue_5 = module_0.Queue()
    var_2 = queue_4.size()
    assert var_2 == 0
    var_3 = queue_3.peek()
    assert var_3 == 77
    double_linked_list_0 = module_0.DoubleLinkedList(set_0)

def test_case_183():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_1 = queue_1.enqueue(set_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = double_linked_list_0.append(node_3)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_7.enqueue(queue_6)
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_7 = module_0.Node()
    var_6 = node_7.__repr__()
    assert var_6 == 'Value: None'

def test_case_184():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_6 = module_0.Queue()
    var_2 = queue_6.peek()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    assert f'{type(queue_9).__module__}.{type(queue_9).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_12.peek()
    node_4 = module_0.Node()
    queue_13 = module_0.Queue()
    var_5 = queue_9.enqueue(queue_3)

def test_case_185():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    var_1 = queue_2.size()
    assert var_1 == 0
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_4 = module_0.Node()
    var_3 = queue_5.size()
    assert var_3 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_5 = var_1.__repr__()
    assert var_5 == '0'

def test_case_186():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_1.peek()
    node_2 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    var_2 = queue_3.size()
    assert var_2 == 0
    var_3 = queue_2.enqueue(var_0)

def test_case_187():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
    assert var_1.data is None
    assert var_1.next is None
    assert var_1.prev == {*()}
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    var_4 = queue_3.size()
    assert var_4 == 0
    queue_5 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_5 = queue_5.size()
    assert var_5 == 0
    queue_6 = module_0.Queue(var_0)

def test_case_188():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None

def test_case_189():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_5.size()
    assert var_0 == 0
    queue_6 = module_0.Queue()
    var_1 = queue_5.size()
    assert var_1 == 0
    queue_7 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_2)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = double_linked_list_2.append(bytes_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_3)
    queue_10 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_10.size()
    assert var_3 == 0
    queue_11 = module_0.Queue()
    var_4 = queue_10.size()
    assert var_4 == 0
    var_5 = queue_4.dequeue()
    assert var_5 == 77

def test_case_190():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = var_1.__repr__()
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_7 = module_0.Queue()
    var_4 = queue_7.peek()
    queue_8 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_5 = queue_8.peek()
    node_6 = module_0.Node()
    queue_9 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_6 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    var_7 = queue_10.enqueue(set_6)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_0)
    queue_12 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_8 = queue_12.size()
    assert var_8 == 0
    queue_13 = module_0.Queue()
    var_9 = queue_12.size()
    assert var_9 == 0
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_10 = queue_15.peek()
    var_11 = queue_0.dequeue()

def test_case_191():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_1.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_4 = module_0.Node()
    var_3 = queue_4.size()
    assert var_3 == 0
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    node_5 = module_0.Node()
    var_5 = node_5.__repr__()
    assert var_5 == 'Value: None'
    queue_6 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_6 = queue_6.size()
    assert var_6 == 0
    queue_7 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    var_7 = double_linked_list_2.append(node_8)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_8 = double_linked_list_2.shift()
    assert double_linked_list_2.tail is None
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'queue4.Node'
    assert var_8.data is None
    assert var_8.next is None
    assert var_8.prev == {*()}
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_10 = module_0.Queue(var_2)

def test_case_192():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'

def test_case_193():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_0 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_6.size()
    assert var_1 == 0
    queue_7 = module_0.Queue()
    var_2 = queue_6.size()
    assert var_2 == 0
    var_3 = queue_5.peek()
    assert var_3 == 77
    queue_8 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    var_5 = queue_9.enqueue(set_2)
    var_6 = double_linked_list_2.push(node_1)

def test_case_194():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_2.append(node_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_2.shift()
    assert double_linked_list_2.tail is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Node'
    assert var_3.data is None
    assert var_3.next is None
    assert var_3.prev == {*()}
    node_4 = module_0.Node()
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    node_5 = module_0.Node()
    var_5 = node_5.__repr__()
    assert var_5 == 'Value: None'
    queue_6 = module_0.Queue(node_5)
    queue_7 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_6 = queue_7.peek()
    queue_8 = module_0.Queue(queue_7)
    var_7 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None

def test_case_195():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = double_linked_list_0.append(node_3)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'queue4.Node'
    assert var_4.data is None
    assert var_4.next is None
    assert var_4.prev == {*()}
    queue_7 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_5 = queue_7.peek()
    node_5 = module_0.Node()
    queue_8 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_6 = queue_8.size()
    assert var_6 == 0
    node_7 = module_0.Node()
    var_7 = node_7.__repr__()
    assert var_7 == 'Value: None'
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_9 = module_0.Node()

def test_case_196():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = node_5.__repr__()
    assert var_2 == 'Value: None'
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    none_type_0 = None
    queue_9 = module_0.Queue(none_type_0)
    queue_10 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_3 = queue_10.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_0)
    assert f'{type(queue_11).__module__}.{type(queue_11).__qualname__}' == 'queue4.Queue'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_12 = module_0.Queue(queue_11)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    queue_15 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_8 = module_0.Node()
    var_5 = queue_14.size()
    assert var_5 == 0
    var_6 = node_7.__repr__()
    assert var_6 == 'Value: None'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_16 = module_0.Queue(bytes_1)
    queue_17 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_7 = queue_17.size()
    assert var_7 == 0
    queue_18 = module_0.Queue()
    var_8 = queue_17.size()
    assert var_8 == 0
    queue_19 = module_0.Queue()

def test_case_197():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_2.enqueue(queue_1)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    var_3 = queue_4.enqueue(var_0)

def test_case_198():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue(queue_0)
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = double_linked_list_1.append(node_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_3.enqueue(queue_2)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_9 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_10 = module_0.Queue()
    var_3 = queue_10.peek()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_2)
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    var_4 = double_linked_list_7.append(bytes_2)
    assert f'{type(double_linked_list_7.head).__module__}.{type(double_linked_list_7.head).__qualname__}' == 'queue4.Node'
    queue_14 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_5 = queue_14.size()
    assert var_5 == 0
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_17 = module_0.Queue()
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    queue_18 = module_0.Queue()
    var_6 = queue_18.peek()
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    queue_19 = module_0.Queue()
    double_linked_list_9 = module_0.DoubleLinkedList()
    assert double_linked_list_9.head is None
    assert double_linked_list_9.tail is None
    node_8 = module_0.Node()
    queue_20 = module_0.Queue()

def test_case_199():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_3.peek()
    node_2 = module_0.Node()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_1 = double_linked_list_2.append(node_4)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_5.enqueue(queue_4)
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_7 = module_0.Queue()
    var_3 = queue_7.peek()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_4 = queue_10.size()
    assert var_4 == 0
    queue_11 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_0)
    assert f'{type(queue_12).__module__}.{type(queue_12).__qualname__}' == 'queue4.Queue'
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_15 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_8 = module_0.Node()
    var_5 = queue_14.size()
    assert var_5 == 0
    queue_16 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_6 = queue_16.peek()
    queue_17 = module_0.Queue(queue_16)
    set_8 = set()
    node_10 = module_0.Node(prev=set_8)
    queue_18 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    node_11 = module_0.Node()
    var_7 = double_linked_list_3.push(queue_9)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'

def test_case_200():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_0)

def test_case_201():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_1 = node_2.__repr__()
    assert var_1 == 'Value: None'
    node_3 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    queue_3 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    var_3 = queue_3.size()
    assert var_3 == 0
    node_5 = module_0.Node()
    var_4 = node_5.__repr__()
    assert var_4 == 'Value: None'
    queue_5 = module_0.Queue(node_5)
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_5 = queue_6.enqueue(none_type_0)
    queue_7 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_6 = queue_7.size()
    assert var_6 == 0
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    var_7 = queue_10.peek()
    queue_11 = module_0.Queue(queue_10)
    var_8 = queue_11.enqueue(set_5)
    queue_12 = module_0.Queue()
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    var_9 = queue_12.peek()
    queue_13 = module_0.Queue(queue_12)
    var_10 = queue_8.size()
    assert var_10 == 0

def test_case_202():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None

def test_case_203():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    var_1 = queue_3.peek()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    queue_7 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_7.size()
    assert var_3 == 0
    queue_8 = module_0.Queue()
    var_4 = queue_7.size()
    assert var_4 == 0
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_10 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_5 = queue_10.peek()
    queue_11 = module_0.Queue(queue_10)
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_6 = var_5.__repr__()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_12 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_7 = module_0.Node()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_13 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_7 = queue_18.size()
    assert var_7 == 0
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    node_10 = module_0.Node()

def test_case_204():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    node_2 = module_0.Node()
    var_0 = node_2.__repr__()
    assert var_0 == 'Value: None'
    queue_1 = module_0.Queue(node_2)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_3 = queue_5.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_2)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = double_linked_list_3.append(bytes_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    var_6 = node_5.__repr__()
    assert var_6 == 'Value: None'
    node_6 = module_0.Node()
    queue_8 = module_0.Queue()
    set_3 = set()
    node_7 = module_0.Node(prev=set_3)
    var_7 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    var_8 = var_7.__repr__()
    var_9 = queue_0.peek()

def test_case_205():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_2 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_1.size()
    assert var_3 == 0
    queue_3 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_4 = queue_3.size()
    assert var_4 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_5 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue(queue_3)

def test_case_206():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_5.size()
    assert var_3 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    queue_7 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_7.size()
    assert var_4 == 0
    queue_8 = module_0.Queue()
    var_5 = queue_7.size()
    assert var_5 == 0
    var_6 = queue_6.peek()
    assert var_6 == 77
    queue_9 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_7 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_2)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_8 = double_linked_list_1.append(bytes_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_12 = module_0.Queue(queue_11)
    queue_13 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_14 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_9 = double_linked_list_2.append(node_6)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_10 = queue_14.enqueue(queue_13)
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_3)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_11 = double_linked_list_3.append(bytes_3)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_12 = double_linked_list_3.append(queue_15)
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    var_13 = queue_5.peek()

def test_case_207():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_0 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    var_1 = queue_4.enqueue(set_1)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    var_2 = queue_6.peek()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_9 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_3 = double_linked_list_3.append(node_5)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_9.size()
    assert var_4 == 0
    var_5 = queue_5.size()
    assert var_5 == 0

def test_case_208():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    node_2 = module_0.Node()
    var_0 = node_2.__repr__()
    assert var_0 == 'Value: None'
    queue_1 = module_0.Queue(node_2)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_1.append(node_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_3.enqueue(queue_2)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_6 = module_0.Node()
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_7 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    queue_9 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_4 = queue_9.size()
    assert var_4 == 0
    queue_10 = module_0.Queue()
    var_5 = queue_9.size()
    assert var_5 == 0
    queue_11 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    queue_13 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    var_6 = queue_13.size()
    assert var_6 == 0
    queue_14 = module_0.Queue()
    var_7 = queue_13.size()
    assert var_7 == 0
    var_8 = queue_12.peek()
    assert var_8 == 77
    var_9 = node_3.__repr__()
    assert var_9 == 'Value: None'
    var_10 = var_9.__repr__()
    assert var_10 == "'Value: None'"

def test_case_209():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue(none_type_0)
    queue_4 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_4.size()
    assert var_1 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_7.size()
    assert var_2 == 0
    queue_8 = module_0.Queue()
    var_3 = queue_7.size()
    assert var_3 == 0
    queue_9 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_10 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_11 = module_0.Queue()
    var_4 = queue_11.peek()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_14 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    bytes_1 = b'\x81\x9b\t<\x1e\xfb\r\x8ce\xfb\xcfo\x18('
    double_linked_list_4 = module_0.DoubleLinkedList(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_4.tail).__module__}.{type(double_linked_list_4.tail).__qualname__}' == 'queue4.Node'

def test_case_210():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_3 = module_0.Node()
    var_1 = node_3.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue(node_3)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = node_4.__repr__()
    assert var_2 == 'Value: None'
    queue_5 = module_0.Queue()

def test_case_211():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_4)
    queue_5 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_2 = queue_5.peek()
    node_1 = module_0.Node()
    queue_6 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_5 = var_4.__repr__()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_7 = module_0.Node()
    var_6 = node_7.__repr__()
    assert var_6 == 'Value: None'
    var_7 = var_4.__repr__()

def test_case_212():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    node_1 = module_0.Node()
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_3 = module_0.Node()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_2 = double_linked_list_2.append(node_5)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_3.enqueue(queue_2)
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    queue_4 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_5 = module_0.Queue()
    var_4 = queue_5.peek()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_5 = queue_0.size()
    assert var_5 == 11

def test_case_213():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    node_1 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    queue_2 = module_0.Queue()
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    var_3 = queue_2.size()
    assert var_3 == 0
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    var_4 = queue_5.peek()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_5 = queue_6.enqueue(none_type_0)
    queue_7 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_6 = queue_7.size()
    assert var_6 == 0
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_7 = queue_9.peek()
    node_8 = module_0.Node()
    queue_10 = module_0.Queue()
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    var_8 = queue_10.size()
    assert var_8 == 0
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_2)
    queue_12 = module_0.Queue()
    set_7 = set()
    node_10 = module_0.Node(prev=set_7)
    var_9 = queue_12.size()
    assert var_9 == 0
    queue_13 = module_0.Queue()
    var_10 = queue_12.size()
    assert var_10 == 0
    queue_14 = module_0.Queue()
    var_11 = double_linked_list_0.pop()
    assert var_11 == b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None

def test_case_214():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_1.enqueue(queue_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()

def test_case_215():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue(none_type_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_6.enqueue(queue_5)
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_7.size()
    assert var_2 == 0
    queue_8 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    assert f'{type(queue_9).__module__}.{type(queue_9).__qualname__}' == 'queue4.Queue'
    queue_10 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_10.size()
    assert var_3 == 0
    queue_11 = module_0.Queue()
    var_4 = queue_10.size()
    assert var_4 == 0
    var_5 = queue_11.peek()

def test_case_216():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_2 = double_linked_list_1.append(node_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_4.size()
    assert var_3 == 0
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_0)
    node_6 = module_0.Node(prev=none_type_0)

def test_case_217():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_0 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    node_2 = module_0.Node()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_2 = queue_4.peek()
    node_4 = module_0.Node()
    node_5 = module_0.Node()
    var_3 = node_5.__repr__()
    assert var_3 == 'Value: None'
    queue_5 = module_0.Queue(node_5)
    set_2 = set()
    node_6 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_7 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_4 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue(queue_7)
    node_8 = module_0.Node(node_3)

def test_case_218():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_0 = None
    queue_6 = module_0.Queue(none_type_0)
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(none_type_1)
    queue_8 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_3 = double_linked_list_1.append(node_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_9.enqueue(queue_8)
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_10 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_5 = queue_10.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_0)
    assert f'{type(queue_11).__module__}.{type(queue_11).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_7 = module_0.Node()
    var_7 = node_7.__repr__()
    assert var_7 == 'Value: None'
    node_8 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_8 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_13 = module_0.Queue(queue_12)
    var_9 = var_8.__repr__()

def test_case_219():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'queue4.Node'
    assert var_2.data is None
    assert var_2.next is None
    assert var_2.prev == {*()}
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_4 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_5 = module_0.Queue()
    var_3 = queue_5.peek()
    node_5 = module_0.Node()
    var_4 = node_5.__repr__()
    assert var_4 == 'Value: None'
    queue_6 = module_0.Queue(node_5)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    queue_9 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_6 = double_linked_list_4.append(node_8)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_7 = queue_9.size()
    assert var_7 == 0
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    queue_13 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    node_10 = module_0.Node()
    var_8 = queue_12.size()
    assert var_8 == 0
    double_linked_list_6 = module_0.DoubleLinkedList(double_linked_list_1)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_6.tail).__module__}.{type(double_linked_list_6.tail).__qualname__}' == 'queue4.Node'

def test_case_220():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    var_2 = queue_2.enqueue(set_1)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    var_3 = queue_4.peek()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    queue_8 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_5 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_6 = var_5.__repr__()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_12 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_7 = module_0.Node()
    var_7 = queue_11.size()
    assert var_7 == 0
    var_8 = node_6.__repr__()
    assert var_8 == 'Value: None'
    var_9 = queue_4.size()
    assert var_9 == 0

def test_case_221():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = queue_5.peek()
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'

def test_case_222():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    var_3 = queue_4.peek()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_5 = queue_7.size()
    assert var_5 == 0
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_11 = module_0.Queue()
    var_6 = queue_11.peek()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_7 = queue_1.size()
    assert var_7 == 0

def test_case_223():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1

def test_case_224():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    var_2 = queue_2.enqueue(set_1)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_5 = module_0.Node()
    var_4 = node_5.__repr__()
    assert var_4 == 'Value: None'
    queue_8 = module_0.Queue(node_5)
    queue_9 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_5 = queue_9.size()
    assert var_5 == 0
    queue_10 = module_0.Queue()
    var_6 = queue_8.dequeue()
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'queue4.Node'
    assert var_6.data is None
    assert var_6.next is None
    assert var_6.prev is None

def test_case_225():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_2 = queue_5.peek()
    node_5 = module_0.Node()
    queue_6 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_3 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue(queue_8)
    queue_10 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_5 = double_linked_list_3.append(node_8)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_6 = double_linked_list_3.shift()
    assert double_linked_list_3.tail is None
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'queue4.Node'
    assert var_6.data is None
    assert var_6.next is None
    assert var_6.prev == {*()}
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    queue_12 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_8 = set()
    node_10 = module_0.Node(prev=set_8)
    set_9 = set()
    node_11 = module_0.Node(prev=set_9)
    queue_15 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    node_12 = module_0.Node()
    double_linked_list_7 = module_0.DoubleLinkedList(node_2)
    assert f'{type(double_linked_list_7.head).__module__}.{type(double_linked_list_7.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_7.tail).__module__}.{type(double_linked_list_7.tail).__qualname__}' == 'queue4.Node'

def test_case_226():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    var_2 = queue_2.size()
    assert var_2 == 0
    var_3 = queue_1.peek()
    assert var_3 == 77

def test_case_227():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_2 = module_0.Node()
    var_2 = queue_3.size()
    assert var_2 == 0
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_8 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_3 = double_linked_list_4.append(node_5)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_8.size()
    assert var_4 == 0
    node_6 = module_0.Node()
    var_5 = node_6.__repr__()
    assert var_5 == 'Value: None'
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    none_type_0 = None
    queue_13 = module_0.Queue(none_type_0)
    queue_14 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_6 = queue_14.peek()
    queue_15 = module_0.Queue(queue_14)
    var_7 = queue_15.enqueue(set_5)
    var_8 = double_linked_list_4.append(set_5)

def test_case_228():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_4.size()
    assert var_1 == 0
    queue_5 = module_0.Queue()
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_3 = module_0.Node()
    var_3 = queue_7.size()
    assert var_3 == 0
    var_4 = node_2.__repr__()
    assert var_4 == 'Value: None'
    queue_9 = module_0.Queue()

def test_case_229():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    var_2 = queue_1.enqueue(var_1)

def test_case_230():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    node_2 = module_0.Node()
    complex_0 = 2886.801252 + 1418.99508j
    queue_3 = module_0.Queue(complex_0)
    var_3 = queue_3.size()
    assert var_3 == 1
    var_4 = node_0.__repr__()
    assert var_4 == 'Value: None'

def test_case_231():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_1 = None
    queue_8 = module_0.Queue(none_type_1)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_9 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_10 = module_0.Queue()
    var_3 = queue_10.peek()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_15 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_4 = module_0.Node()
    var_4 = queue_14.size()
    assert var_4 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_16 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    var_6 = node_5.__repr__()
    assert var_6 == 'Value: None'
    node_6 = module_0.Node()
    queue_17 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_7 = queue_17.peek()
    node_8 = module_0.Node()
    queue_18 = module_0.Queue()
    set_5 = set()
    node_9 = module_0.Node(prev=set_5)
    var_8 = queue_18.peek()
    queue_19 = module_0.Queue(queue_18)
    set_6 = set()
    node_10 = module_0.Node(prev=set_6)
    var_9 = var_8.__repr__()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_20 = module_0.Queue(bytes_2)
    set_7 = set()
    node_11 = module_0.Node(prev=set_7)
    queue_21 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_12 = module_0.Node()
    var_10 = queue_21.peek()

def test_case_232():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_0 = None
    queue_6 = module_0.Queue(none_type_0)
    queue_7 = module_0.Queue()

def test_case_233():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    var_1 = queue_2.enqueue(set_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    var_3 = queue_4.size()
    assert var_3 == 0
    node_2 = module_0.Node()
    var_4 = node_2.__repr__()
    assert var_4 == 'Value: None'
    queue_6 = module_0.Queue(node_2)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_2)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_5 = double_linked_list_0.append(bytes_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue(queue_8)
    queue_10 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_11 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_6 = double_linked_list_1.append(node_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_7 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'queue4.Node'
    assert var_7.data is None
    assert var_7.next is None
    assert var_7.prev == {*()}
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_3)
    queue_13 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_8 = queue_13.size()
    assert var_8 == 0
    queue_14 = module_0.Queue()
    var_9 = queue_13.size()
    assert var_9 == 0
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_10 = queue_16.size()
    assert var_10 == 0
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    none_type_0 = None
    queue_17 = module_0.Queue()
    var_11 = queue_17.enqueue(none_type_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_234():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    var_0 = queue_2.peek()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_5.peek()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_6.size()
    assert var_3 == 0
    queue_7 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_4 = double_linked_list_1.append(node_5)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_8.enqueue(queue_7)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_0)
    assert f'{type(queue_11).__module__}.{type(queue_11).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_6 = module_0.Node()
    var_7 = node_6.__repr__()
    assert var_7 == 'Value: None'
    node_7 = module_0.Node()
    var_8 = queue_7.enqueue(queue_11)

def test_case_235():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == 77

def test_case_236():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    complex_0 = 2886.801252 + 1418.99508j
    queue_1 = module_0.Queue(complex_0)
    var_1 = queue_1.size()
    assert var_1 == 1
    queue_2 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_3.enqueue(queue_2)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_8 = module_0.Queue()
    var_4 = queue_8.peek()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None

def test_case_237():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_0 = None
    queue_7 = module_0.Queue(none_type_0)
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    none_type_1 = None
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(none_type_1)
    queue_9 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_4 = queue_9.size()
    assert var_4 == 0
    queue_10 = module_0.Queue()
    var_5 = queue_8.size()
    assert var_5 == 1

def test_case_238():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_3 = module_0.Node()
    var_4 = queue_5.size()
    assert var_4 == 0
    queue_7 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_5 = double_linked_list_1.append(node_5)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_6 = queue_8.enqueue(queue_7)
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_12 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_13 = module_0.Queue()
    var_7 = queue_13.peek()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_8 = var_6.__repr__()

def test_case_239():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    var_1 = queue_1.dequeue()
    assert var_1 == 77
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_1 = module_0.Node()
    var_2 = queue_3.size()
    assert var_2 == 0
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_0)
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = double_linked_list_2.append(node_4)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_7.enqueue(queue_6)
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_6 = node_5.__repr__()
    assert var_6 == 'Value: None'
    queue_9 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_7 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_8 = module_0.Node()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_2)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_8 = double_linked_list_5.append(bytes_2)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    queue_13 = module_0.Queue(queue_12)
    queue_14 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_9 = queue_14.peek()
    queue_15 = module_0.Queue(queue_14)
    var_10 = queue_15.enqueue(set_7)
    queue_16 = module_0.Queue()

def test_case_240():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    var_3 = queue_4.enqueue(set_2)
    queue_5 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_8 = module_0.Queue()
    var_5 = queue_8.peek()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_0)
    queue_12 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_6 = queue_12.size()
    assert var_6 == 0
    queue_13 = module_0.Queue()
    var_7 = queue_12.size()
    assert var_7 == 0
    queue_14 = module_0.Queue()

def test_case_241():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77
    queue_3 = module_0.Queue()
    node_1 = module_0.Node(var_2, queue_3)
    assert node_1.data == 77

def test_case_242():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    node_3 = module_0.Node()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_243():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_1 = module_0.Queue(node_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_1 = queue_2.size()
    assert var_1 == 0
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_1.append(queue_6)
    complex_0 = 2886.801252 + 1418.99508j
    queue_7 = module_0.Queue(complex_0)
    var_5 = queue_7.size()
    assert var_5 == 1
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_2)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = double_linked_list_2.append(bytes_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_7 = queue_6.dequeue()
    assert var_7 == 77

def test_case_244():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_3.peek()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_5 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue(queue_5)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_6 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_7 = double_linked_list_3.append(queue_7)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_2)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_8 = double_linked_list_4.append(bytes_2)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    var_9 = node_5.__repr__()
    assert var_9 == 'Value: None'
    node_6 = module_0.Node()
    var_10 = queue_3.size()
    assert var_10 == 0

def test_case_245():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_246():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'queue4.Node'
    assert var_2.data is None
    assert var_2.next is None
    assert var_2.prev == {*()}
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_1.append(queue_5)
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_5 = queue_6.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    double_linked_list_3 = module_0.DoubleLinkedList(var_5)
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    node_4 = module_0.Node(next_node=var_1, prev=var_5)

def test_case_247():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue(none_type_0)
    var_0 = double_linked_list_0.append(queue_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'

def test_case_248():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_3 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_4 = var_3.__repr__()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_11 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_5 = queue_11.size()
    assert var_5 == 0
    var_6 = queue_1.enqueue(set_5)

def test_case_249():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_3 = var_2.__repr__()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    none_type_0 = None
    queue_10 = module_0.Queue(none_type_0)
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_11 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_6 = module_0.Node()
    var_4 = double_linked_list_0.pop()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'queue4.Node'
    assert var_4.data is None
    assert var_4.next is None
    assert var_4.prev == {*()}

def test_case_250():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    var_3 = queue_6.enqueue(set_2)
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_10 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_4 = queue_10.size()
    assert var_4 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_0)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_12 = module_0.Queue(queue_11)
    complex_0 = 2886.801252 + 1418.99508j
    queue_13 = module_0.Queue(complex_0)
    var_6 = queue_13.size()
    assert var_6 == 1
    node_5 = module_0.Node()
    var_7 = node_5.__repr__()
    assert var_7 == 'Value: None'
    var_8 = queue_9.peek()

def test_case_251():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_3 = module_0.Queue()
    var_1 = queue_3.peek()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_3.append(node_3)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_3 = double_linked_list_4.append(node_5)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_8.enqueue(queue_7)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    queue_10 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_5 = queue_10.size()
    assert var_5 == 0
    queue_11 = module_0.Queue()
    var_6 = queue_10.size()
    assert var_6 == 0
    queue_12 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_2)
    var_7 = queue_13.dequeue()
    assert var_7 == 77
    complex_0 = 2886.801252 + 1418.99508j
    queue_14 = module_0.Queue(complex_0)
    var_8 = queue_14.size()
    assert var_8 == 1
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    node_7 = module_0.Node()

def test_case_252():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_0)
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_2 = queue_1.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList(var_2)
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_2)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_3 = double_linked_list_3.append(bytes_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_4 = node_1.__repr__()
    assert var_4 == 'Value: None'
    node_2 = module_0.Node()
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_3)
    var_5 = queue_4.dequeue()
    assert var_5 == 77
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_4 = module_0.Node()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    node_6 = module_0.Node()
    var_6 = queue_7.size()
    assert var_6 == 0
    var_7 = node_5.__repr__()
    assert var_7 == 'Value: None'
    queue_9 = module_0.Queue()
    set_3 = set()
    node_7 = module_0.Node(prev=set_3)
    var_8 = queue_9.size()
    assert var_8 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    var_9 = queue_11.peek()
    queue_12 = module_0.Queue(queue_11)
    none_type_0 = None
    node_9 = module_0.Node(prev=none_type_0)

def test_case_253():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_5.peek()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_2 = double_linked_list_2.append(node_4)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_1.append(queue_7)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'

def test_case_254():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    var_2 = queue_0.enqueue(set_0)

def test_case_255():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.size()
    assert var_2 == 0

def test_case_256():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_0 = None
    queue_7 = module_0.Queue(none_type_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_8 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_9 = module_0.Queue()
    var_2 = queue_9.peek()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    none_type_1 = None
    queue_10 = module_0.Queue()
    var_3 = queue_10.enqueue(none_type_1)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_12 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_5 = queue_12.peek()
    node_4 = module_0.Node()
    queue_13 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_6 = queue_13.peek()
    queue_14 = module_0.Queue(queue_13)
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_7 = var_6.__repr__()
    queue_15 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_8 = queue_15.peek()
    node_8 = module_0.Node(next_node=queue_8, prev=queue_9)

def test_case_257():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    node_2 = module_0.Node()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_2 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_4.size()
    assert var_3 == 0

def test_case_258():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    node_1 = module_0.Node()
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_0 = None
    queue_6 = module_0.Queue(none_type_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_9 = module_0.Queue()
    var_4 = queue_9.peek()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_2)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = double_linked_list_3.append(bytes_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_13 = module_0.Queue(queue_12)
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_3)
    var_6 = queue_5.enqueue(double_linked_list_1)

def test_case_259():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    var_4 = queue_4.size()
    assert var_4 == 0
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_2)
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_5 = queue_7.size()
    assert var_5 == 0
    queue_8 = module_0.Queue()
    var_6 = queue_7.size()
    assert var_6 == 0
    queue_9 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_10 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_13 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_14 = module_0.Queue()
    var_7 = queue_14.peek()
    queue_15 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_16 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_8 = double_linked_list_3.append(node_6)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_9 = queue_15.size()
    assert var_9 == 0
    var_10 = double_linked_list_2.push(queue_2)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'

def test_case_260():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = var_1.__repr__()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_0)
    queue_6 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_4 = double_linked_list_2.append(node_6)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_7.enqueue(queue_6)
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    complex_0 = 2886.801252 + 1418.99508j
    queue_9 = module_0.Queue(complex_0)
    var_6 = queue_9.size()
    assert var_6 == 1
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    none_type_1 = None
    queue_13 = module_0.Queue(none_type_1)
    queue_14 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_7 = queue_14.peek()
    node_9 = module_0.Node()
    double_linked_list_4 = module_0.DoubleLinkedList(node_8)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_4.tail).__module__}.{type(double_linked_list_4.tail).__qualname__}' == 'queue4.Node'

def test_case_261():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_0 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_1.append(node_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_1.enqueue(queue_0)
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = var_2.__repr__()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    queue_6 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_5 = queue_6.size()
    assert var_5 == 0
    queue_7 = module_0.Queue()
    var_6 = queue_6.size()
    assert var_6 == 0
    var_7 = queue_5.peek()
    assert var_7 == 77
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_2)
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_10 = module_0.Queue()
    var_8 = queue_10.peek()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    none_type_0 = None
    queue_16 = module_0.Queue(none_type_0)
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    none_type_1 = None
    queue_17 = module_0.Queue()
    var_9 = queue_17.enqueue(none_type_1)
    var_10 = double_linked_list_2.shift()
    assert var_10 == b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    assert double_linked_list_2.tail is None

def test_case_262():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == 77
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    queue_2 = module_0.Queue()
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    var_2 = queue_2.size()
    assert var_2 == 0
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_2)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = double_linked_list_0.append(bytes_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_4 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_5 = var_4.__repr__()
    queue_7 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_6 = queue_7.peek()
    queue_8 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_7 = queue_8.size()
    assert var_7 == 0
    var_8 = queue_7.size()
    assert var_8 == 0
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_3)
    queue_10 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_9 = queue_10.size()
    assert var_9 == 0
    queue_11 = module_0.Queue()
    var_10 = queue_10.size()
    assert var_10 == 0
    var_11 = queue_9.peek()
    assert var_11 == 77
    queue_12 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_12 = queue_12.size()
    assert var_12 == 0
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    queue_15 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_8 = module_0.Node()
    var_13 = queue_14.size()
    assert var_13 == 0
    var_14 = node_7.__repr__()
    assert var_14 == 'Value: None'
    bytes_4 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_16 = module_0.Queue(bytes_4)
    var_15 = node_4.__repr__()
    assert var_15 == 'Value: None'

def test_case_263():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_4 = module_0.Node()
    var_3 = queue_8.size()
    assert var_3 == 0
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    queue_10 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_5 = queue_10.peek()
    queue_11 = module_0.Queue(queue_10)
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_6 = var_5.__repr__()
    var_7 = node_3.__repr__()
    assert var_7 == 'Value: None'

def test_case_264():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_3 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_3.append(queue_3)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_5 = queue_6.peek()
    queue_7 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_6 = queue_7.size()
    assert var_6 == 0
    var_7 = queue_6.size()
    assert var_7 == 0
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    none_type_0 = None
    queue_8 = module_0.Queue()
    var_8 = queue_8.enqueue(none_type_0)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_6 = module_0.Node()
    var_9 = queue_10.size()
    assert var_9 == 0
    var_10 = node_5.__repr__()
    assert var_10 == 'Value: None'
    var_11 = queue_4.peek()

def test_case_265():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_3.size()
    assert var_0 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_7.size()
    assert var_1 == 0
    queue_8 = module_0.Queue()
    var_2 = queue_7.size()
    assert var_2 == 0
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_3 = double_linked_list_2.append(node_4)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_10.size()
    assert var_4 == 0
    node_5 = module_0.Node()
    var_5 = node_5.__repr__()
    assert var_5 == 'Value: None'
    queue_12 = module_0.Queue(node_5)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_1)
    var_6 = queue_13.dequeue()
    assert var_6 == 77
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_2)
    queue_15 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_7 = queue_15.size()
    assert var_7 == 0
    queue_16 = module_0.Queue()
    var_8 = queue_15.size()
    assert var_8 == 0
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    none_type_0 = None
    queue_17 = module_0.Queue()
    var_9 = queue_17.enqueue(none_type_0)
    queue_18 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    queue_19 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_10 = double_linked_list_3.append(node_9)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_11 = queue_19.enqueue(queue_18)
    var_12 = double_linked_list_1.append(var_8)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'

def test_case_266():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = var_0.__repr__()
    queue_2 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = queue_2.peek()
    queue_3 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_3 = queue_3.size()
    assert var_3 == 0
    var_4 = queue_2.size()
    assert var_4 == 0
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_5 = module_0.Queue()
    var_5 = queue_5.peek()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    complex_0 = 2886.801252 + 1418.99508j
    queue_8 = module_0.Queue(complex_0)
    var_6 = queue_8.size()
    assert var_6 == 1
    queue_9 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_7 = queue_9.size()
    assert var_7 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    none_type_0 = None
    queue_14 = module_0.Queue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_8 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_7 = module_0.Node()
    var_9 = node_7.__repr__()
    assert var_9 == 'Value: None'
    node_8 = module_0.Node()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    queue_16 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_10 = module_0.Node()
    var_10 = queue_16.enqueue(var_6)
    var_11 = queue_2.enqueue(var_10)

def test_case_267():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_2.append(queue_4)
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_5.peek()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = queue_6.size()
    assert var_4 == 0
    var_5 = queue_5.size()
    assert var_5 == 0
    queue_7 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_6 = double_linked_list_3.append(node_4)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_7 = queue_8.enqueue(queue_7)
    queue_9 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_8 = queue_9.peek()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_11 = module_0.Queue()
    var_9 = queue_11.peek()
    var_10 = queue_2.peek()

def test_case_268():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_1.enqueue(queue_0)
    complex_0 = 2886.801252 + 1418.99508j
    queue_2 = module_0.Queue(complex_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    var_2 = queue_2.size()
    assert var_2 == 1
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(none_type_0)
    var_4 = queue_2.enqueue(set_2)
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_5 = queue_4.peek()
    node_4 = module_0.Node()
    var_6 = queue_3.size()
    assert var_6 == 1

def test_case_269():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    node_3 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    queue_4 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    var_4 = queue_4.size()
    assert var_4 == 0
    var_5 = queue_3.peek()
    assert var_5 == 77
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_6 = module_0.Node()
    queue_7 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_6 = queue_7.peek()
    node_8 = module_0.Node()
    queue_8 = module_0.Queue()
    set_5 = set()
    node_9 = module_0.Node(prev=set_5)
    var_7 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    set_6 = set()
    node_10 = module_0.Node(prev=set_6)
    var_8 = var_7.__repr__()
    var_9 = queue_7.size()
    assert var_9 == 0

def test_case_270():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()

def test_case_271():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Node'
    assert var_3.data is None
    assert var_3.next is None
    assert var_3.prev == {*()}
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None

def test_case_272():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    var_1 = queue_1.dequeue()
    assert var_1 == 77
    queue_2 = module_0.Queue()

def test_case_273():
    none_type_0 = None
    node_0 = module_0.Node(prev=none_type_0)

def test_case_274():
    none_type_0 = None
    node_0 = module_0.Node(prev=none_type_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    node_3 = module_0.Node()
    var_2 = queue_2.enqueue(node_3)

def test_case_275():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_4.peek()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    var_3 = queue_6.enqueue(set_2)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_2.append(queue_7)
    complex_0 = 2886.801252 + 1418.99508j
    queue_8 = module_0.Queue(complex_0)
    var_6 = queue_8.size()
    assert var_6 == 1
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_7 = node_4.__repr__()
    assert var_7 == 'Value: None'
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None

def test_case_276():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_4.peek()
    node_2 = module_0.Node()
    var_3 = queue_0.dequeue()
    assert var_3 == 77

def test_case_277():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    var_2 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_3 = var_2.__repr__()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    node_4 = module_0.Node()
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    queue_5 = module_0.Queue(node_4)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    var_5 = queue_6.dequeue()
    assert var_5 == 77
    queue_7 = module_0.Queue()
    var_6 = double_linked_list_0.shift()
    assert var_6 == b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    assert double_linked_list_0.tail is None

def test_case_278():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = queue_1.peek()

def test_case_279():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    complex_0 = 2886.801252 + 1418.99508j
    queue_1 = module_0.Queue(complex_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_1 = queue_1.size()
    assert var_1 == 1
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    var_2 = queue_3.size()
    assert var_2 == 0
    complex_1 = 2886.801252 + 1418.99508j
    queue_5 = module_0.Queue(complex_1)
    var_3 = queue_5.size()
    assert var_3 == 1
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_0)
    var_5 = queue_5.enqueue(set_2)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    none_type_1 = None
    queue_10 = module_0.Queue(none_type_1)
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_14 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_6 = node_5.__repr__()
    assert var_6 == 'Value: None'
    queue_15 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_7 = queue_15.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_16 = module_0.Queue(bytes_0)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    double_linked_list_5 = module_0.DoubleLinkedList(var_7)
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    node_7 = module_0.Node()

def test_case_280():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()

def test_case_281():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_4 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    var_5 = queue_6.enqueue(set_4)
    queue_7 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_6 = queue_7.peek()
    queue_8 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_7 = queue_8.size()
    assert var_7 == 0
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    var_8 = queue_11.peek()
    queue_12 = module_0.Queue(queue_11)
    set_8 = set()
    node_8 = module_0.Node(prev=set_8)
    var_9 = var_8.__repr__()
    set_9 = set()
    node_9 = module_0.Node(prev=set_9)
    queue_13 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_14 = module_0.Queue()
    var_10 = queue_14.peek()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_10 = set()
    node_10 = module_0.Node(prev=set_10)
    queue_17 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_11 = double_linked_list_0.push(var_0)

def test_case_282():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_3 = module_0.Queue()
    var_1 = queue_3.peek()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_4.append(node_3)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_4.shift()
    assert double_linked_list_4.tail is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Node'
    assert var_3.data is None
    assert var_3.next is None
    assert var_3.prev == {*()}
    queue_8 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_4 = queue_8.peek()
    queue_9 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_5 = queue_9.size()
    assert var_5 == 0
    var_6 = queue_8.size()
    assert var_6 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_1)
    queue_11 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_7 = queue_11.size()
    assert var_7 == 0
    queue_12 = module_0.Queue()
    var_8 = queue_11.size()
    assert var_8 == 0
    var_9 = queue_10.peek()
    assert var_9 == 77
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_2)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_10 = double_linked_list_5.append(bytes_2)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    queue_16 = module_0.Queue(queue_15)
    var_11 = queue_14.peek()
    none_type_0 = None
    node_7 = module_0.Node(prev=none_type_0)
    var_12 = node_0.__repr__()
    assert var_12 == 'Value: None'

def test_case_283():
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'

def test_case_284():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = queue_1.peek()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_7.size()
    assert var_3 == 0
    queue_8 = module_0.Queue()
    var_4 = queue_7.size()
    assert var_4 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_6 = double_linked_list_3.append(queue_9)
    node_3 = module_0.Node(next_node=node_1)

def test_case_285():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_0 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_1.append(node_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    complex_0 = 2886.801252 + 1418.99508j
    queue_2 = module_0.Queue(complex_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    var_2 = queue_2.size()
    assert var_2 == 1
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_5 = node_3.__repr__()
    assert var_5 == 'Value: None'
    node_4 = module_0.Node()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_6 = queue_6.peek()
    queue_7 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_7 = queue_7.size()
    assert var_7 == 0
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_8 = queue_2.enqueue(var_4)

def test_case_286():
    none_type_0 = None
    node_0 = module_0.Node(prev=none_type_0)
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_4.peek()
    var_2 = queue_2.enqueue(node_2)

def test_case_287():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_3 = node_0.__repr__()
    assert var_3 == 'Value: None'
    node_1 = module_0.Node()
    node_2 = module_0.Node()
    var_4 = node_2.__repr__()
    assert var_4 == 'Value: None'
    queue_4 = module_0.Queue(node_2)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_2)
    var_5 = queue_5.dequeue()
    assert var_5 == 77
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_0 = set()
    node_3 = module_0.Node(prev=set_0)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_4 = module_0.Node()
    var_6 = queue_8.size()
    assert var_6 == 0
    var_7 = node_3.__repr__()
    assert var_7 == 'Value: None'
    set_1 = set()
    node_5 = module_0.Node(prev=set_1)
    queue_10 = module_0.Queue()
    set_2 = set()
    node_6 = module_0.Node(prev=set_2)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_3 = set()
    node_7 = module_0.Node(prev=set_3)
    var_8 = double_linked_list_3.append(node_7)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_9 = queue_10.size()
    assert var_9 == 0
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    queue_12 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_3)
    queue_16 = module_0.Queue()
    set_5 = set()
    node_9 = module_0.Node(prev=set_5)
    var_10 = queue_16.size()
    assert var_10 == 0
    queue_17 = module_0.Queue()
    var_11 = queue_16.size()
    assert var_11 == 0
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    set_6 = set()
    node_10 = module_0.Node(prev=set_6)
    var_12 = queue_19.size()
    assert var_12 == 0
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_22 = module_0.Queue(complex_0)
    var_13 = queue_22.size()
    assert var_13 == 1
    set_7 = set()
    node_11 = module_0.Node(prev=set_7)
    none_type_0 = None
    queue_23 = module_0.Queue()
    var_14 = queue_23.enqueue(none_type_0)
    var_15 = queue_22.enqueue(set_7)
    queue_24 = module_0.Queue()

def test_case_288():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    var_1 = queue_3.peek()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_7.size()
    assert var_2 == 0
    queue_8 = module_0.Queue()
    var_3 = queue_7.size()
    assert var_3 == 0
    queue_9 = module_0.Queue()
    node_3 = module_0.Node()
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    none_type_0 = None
    queue_10 = module_0.Queue()
    var_5 = queue_10.enqueue(none_type_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_289():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_3.size()
    assert var_0 == 0
    queue_4 = module_0.Queue()
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_290():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.size()
    assert var_2 == 0
    complex_0 = 2886.801252 + 1418.99508j
    queue_2 = module_0.Queue(complex_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    var_3 = queue_2.size()
    assert var_3 == 1
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_4 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_5 = double_linked_list_0.append(node_4)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_6 = queue_4.size()
    assert var_6 == 0
    bool_0 = True
    double_linked_list_1 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None

def test_case_291():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_1 = queue_6.size()
    assert var_1 == 0
    queue_7 = module_0.Queue()
    var_2 = queue_6.size()
    assert var_2 == 0
    bool_0 = True
    double_linked_list_3 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_3 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    node_5 = module_0.Node()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_2)
    var_5 = queue_9.dequeue()
    assert var_5 == 77
    var_6 = queue_4.peek()

def test_case_292():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    var_4 = var_0.__repr__()
    assert var_4 == '0'

def test_case_293():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_0)
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_2 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = var_2.__repr__()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_4 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    var_5 = node_4.__repr__()
    assert var_5 == 'Value: None'
    node_5 = module_0.Node()
    node_6 = module_0.Node()
    var_6 = node_6.__repr__()
    assert var_6 == 'Value: None'
    queue_8 = module_0.Queue(node_6)
    queue_9 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_2)
    queue_11 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_7 = queue_11.peek()
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_3)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    double_linked_list_6 = module_0.DoubleLinkedList(var_7)
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_13 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    queue_14 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    var_8 = double_linked_list_7.append(node_9)
    assert f'{type(double_linked_list_7.head).__module__}.{type(double_linked_list_7.head).__qualname__}' == 'queue4.Node'
    var_9 = double_linked_list_7.shift()
    assert double_linked_list_7.tail is None
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'queue4.Node'
    assert var_9.data is None
    assert var_9.next is None
    assert var_9.prev == {*()}
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None

def test_case_294():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    complex_0 = 2886.801252 + 1418.99508j
    queue_2 = module_0.Queue(complex_0)
    var_2 = queue_2.size()
    assert var_2 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(none_type_0)
    var_4 = queue_2.enqueue(set_0)
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_5 = queue_4.peek()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_3 = module_0.Node()
    var_6 = queue_6.size()
    assert var_6 == 0
    queue_8 = module_0.Queue(queue_1)

def test_case_295():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_2 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    var_2 = queue_2.peek()
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = var_3.__repr__()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_4 = module_0.Node()
    var_5 = queue_8.size()
    assert var_5 == 0
    var_6 = node_3.__repr__()
    assert var_6 == 'Value: None'
    queue_10 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_7 = double_linked_list_4.append(node_6)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_8 = queue_10.size()
    assert var_8 == 0
    queue_12 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_13 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_9 = double_linked_list_5.append(node_8)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_10 = double_linked_list_5.shift()
    assert double_linked_list_5.tail is None
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'queue4.Node'
    assert var_10.data is None
    assert var_10.next is None
    assert var_10.prev == {*()}
    complex_0 = 2886.801252 + 1418.99508j
    queue_14 = module_0.Queue(complex_0)
    var_11 = queue_14.size()
    assert var_11 == 1
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    none_type_0 = None
    queue_15 = module_0.Queue()
    var_12 = queue_15.enqueue(none_type_0)
    var_13 = queue_14.enqueue(set_8)
    queue_16 = module_0.Queue()
    set_9 = set()
    node_10 = module_0.Node(prev=set_9)
    var_14 = queue_16.size()
    assert var_14 == 0
    queue_17 = module_0.Queue()
    var_15 = queue_17.enqueue(var_0)

def test_case_296():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    var_3 = queue_3.size()
    assert var_3 == 0
    var_4 = queue_2.peek()
    assert var_4 == 77
    complex_0 = 2886.801252 + 1418.99508j
    queue_5 = module_0.Queue(complex_0)
    var_5 = queue_5.size()
    assert var_5 == 1
    complex_1 = 2886.801252 + 1418.99508j
    queue_6 = module_0.Queue(complex_1)
    var_6 = queue_6.size()
    assert var_6 == 1
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_7 = queue_7.enqueue(none_type_0)
    var_8 = queue_6.enqueue(set_2)
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_1)
    var_9 = queue_11.dequeue()
    assert var_9 == 77
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None

def test_case_297():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    var_1 = queue_5.dequeue()
    assert var_1 == 77
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    none_type_0 = None
    node_3 = module_0.Node(prev=none_type_0)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_2)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_3 = double_linked_list_4.append(bytes_2)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_4.append(queue_8)
    var_5 = var_1.__repr__()
    assert var_5 == '77'

def test_case_298():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_5.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    double_linked_list_3 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_2 = module_0.Node()
    var_1 = node_2.__repr__()
    assert var_1 == 'Value: None'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_2 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_4.append(queue_7)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    queue_9 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_5 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    queue_11 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_6 = queue_11.peek()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_12 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_7 = queue_12.size()
    assert var_7 == 0
    queue_13 = module_0.Queue()
    node_8 = module_0.Node(var_6, prev=bytes_0)

def test_case_299():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_0 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    var_1 = queue_4.peek()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    bool_0 = True
    double_linked_list_4 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_4).__module__}.{type(double_linked_list_4).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_4.tail).__module__}.{type(double_linked_list_4.tail).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    queue_8 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_2 = queue_8.size()
    assert var_2 == 0
    queue_9 = module_0.Queue()
    var_3 = queue_8.size()
    assert var_3 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_4 = queue_11.peek()
    queue_12 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_5 = queue_12.size()
    assert var_5 == 0
    var_6 = queue_11.size()
    assert var_6 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_1)
    queue_14 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_7 = queue_14.size()
    assert var_7 == 0
    queue_15 = module_0.Queue()
    var_8 = queue_14.size()
    assert var_8 == 0
    var_9 = queue_13.peek()
    assert var_9 == 77
    var_10 = queue_5.size()
    assert var_10 == 0

def test_case_300():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = var_1.__repr__()
    node_2 = module_0.Node()
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'
    var_4 = queue_2.size()
    assert var_4 == 1

def test_case_301():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_0 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_0 = None
    queue_8 = module_0.Queue(none_type_0)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_5 = module_0.Node()
    var_1 = queue_10.size()
    assert var_1 == 0
    var_2 = node_4.__repr__()
    assert var_2 == 'Value: None'
    queue_12 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_3 = queue_12.peek()
    queue_13 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_4 = queue_13.size()
    assert var_4 == 0
    var_5 = queue_12.size()
    assert var_5 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_0)
    assert f'{type(queue_14).__module__}.{type(queue_14).__qualname__}' == 'queue4.Queue'
    queue_15 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_6 = queue_15.size()
    assert var_6 == 0
    queue_16 = module_0.Queue()
    var_7 = queue_15.size()
    assert var_7 == 0
    var_8 = queue_14.peek()
    assert var_8 == 77
    queue_17 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    queue_18 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_8 = set()
    node_10 = module_0.Node(prev=set_8)
    var_9 = double_linked_list_3.append(node_10)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_10 = double_linked_list_3.shift()
    assert double_linked_list_3.tail is None
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'queue4.Node'
    assert var_10.data is None
    assert var_10.next is None
    assert var_10.prev == {*()}
    node_11 = module_0.Node(next_node=var_9)

def test_case_302():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_3.size()
    assert var_2 == 0
    node_2 = module_0.Node()
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'
    queue_4 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_4 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_5 = var_4.__repr__()
    complex_0 = 2886.801252 + 1418.99508j
    queue_6 = module_0.Queue(complex_0)
    var_6 = queue_6.size()
    assert var_6 == 1
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_7 = queue_7.enqueue(none_type_0)
    var_8 = queue_6.enqueue(set_4)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_8 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_9 = double_linked_list_1.append(node_7)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_8 = module_0.Node()
    var_10 = node_8.__repr__()
    assert var_10 == 'Value: None'
    queue_10 = module_0.Queue(node_8)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_1)
    var_11 = queue_11.dequeue()
    assert var_11 == 77
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_12 = queue_13.size()
    assert var_12 == 0
    queue_14 = module_0.Queue()
    var_13 = queue_14.peek()
    queue_15 = module_0.Queue()
    set_8 = set()
    node_10 = module_0.Node(prev=set_8)
    var_14 = queue_15.size()
    assert var_14 == 0
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    var_15 = queue_2.size()
    assert var_15 == 0

def test_case_303():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_0 = queue_1.enqueue(none_type_0)
    complex_0 = 2886.801252 + 1418.99508j
    queue_2 = module_0.Queue(complex_0)
    var_1 = queue_2.size()
    assert var_1 == 1
    node_1 = module_0.Node()
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    queue_3 = module_0.Queue(node_1)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    var_3 = queue_4.dequeue()
    assert var_3 == 77
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_2 = module_0.Node()
    var_4 = node_2.__repr__()
    assert var_4 == 'Value: None'
    double_linked_list_0 = module_0.DoubleLinkedList(queue_7)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'

def test_case_304():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_0)
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_2 = queue_1.peek()
    var_3 = queue_1.peek()

def test_case_305():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'

def test_case_306():
    none_type_0 = None
    node_0 = module_0.Node(prev=none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue(queue_0)
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    complex_0 = 2886.801252 + 1418.99508j
    queue_2 = module_0.Queue(complex_0)
    var_2 = queue_2.size()
    assert var_2 == 1
    var_3 = double_linked_list_0.remove(bytes_0)
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None

def test_case_307():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.size()
    assert var_2 == 0
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_2.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_3)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_4 = double_linked_list_2.append(node_4)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(none_type_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_6 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_7 = double_linked_list_3.append(queue_8)
    none_type_1 = None
    node_6 = module_0.Node(prev=none_type_1)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_2)
    queue_10 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_8 = queue_10.size()
    assert var_8 == 0
    queue_11 = module_0.Queue()
    var_9 = queue_10.size()
    assert var_9 == 0
    var_10 = queue_9.peek()
    assert var_10 == 77
    complex_0 = 2886.801252 + 1418.99508j
    queue_12 = module_0.Queue(complex_0)
    var_11 = queue_12.size()
    assert var_11 == 1
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    none_type_2 = None
    queue_13 = module_0.Queue()
    var_12 = queue_13.enqueue(none_type_2)
    var_13 = queue_12.enqueue(set_7)
    double_linked_list_4 = module_0.DoubleLinkedList(node_8)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_4.tail).__module__}.{type(double_linked_list_4.tail).__qualname__}' == 'queue4.Node'

def test_case_308():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_3.size()
    assert var_2 == 0
    var_3 = queue_2.size()
    assert var_3 == 0
    node_3 = module_0.Node(prev=set_0)

def test_case_309():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    var_1 = queue_3.peek()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_310():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_1.enqueue(queue_0)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_2 = double_linked_list_4.append(set_3)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_3 = node_1.__repr__()
    assert var_3 == 'Value: None'

def test_case_311():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == 77
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_0.append(queue_1)
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_2.size()
    assert var_3 == 0
    queue_3 = module_0.Queue()
    var_4 = double_linked_list_0.shift()
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'queue4.Queue'

def test_case_312():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
    assert var_1.data is None
    assert var_1.next is None
    assert var_1.prev == {*()}
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_7.peek()
    queue_8 = module_0.Queue(queue_7)
    var_4 = queue_8.enqueue(set_2)
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    none_type_1 = None
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(none_type_1)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_1)
    queue_11 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_6 = queue_11.size()
    assert var_6 == 0
    queue_12 = module_0.Queue()
    var_7 = queue_11.size()
    assert var_7 == 0
    bool_0 = True
    double_linked_list_2 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_13 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_8 = double_linked_list_4.append(set_6)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    queue_16 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    node_8 = module_0.Node(queue_16)

def test_case_313():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    var_2 = queue_3.enqueue(set_1)
    queue_4 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue(queue_5)
    var_4 = queue_4.peek()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    none_type_0 = None
    queue_10 = module_0.Queue(none_type_0)
    node_2 = module_0.Node()
    var_5 = node_2.__repr__()
    assert var_5 == 'Value: None'
    queue_11 = module_0.Queue(node_2)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    var_6 = queue_12.dequeue()
    assert var_6 == 77
    queue_13 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_14 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_15 = module_0.Queue()
    var_7 = queue_15.peek()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_18 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_19 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_8 = double_linked_list_4.append(node_5)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    var_9 = queue_6.size()
    assert var_9 == 1

def test_case_314():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_4 = module_0.Node()
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_6 = module_0.Node()
    var_2 = queue_6.size()
    assert var_2 == 0
    var_3 = node_5.__repr__()
    assert var_3 == 'Value: None'
    queue_8 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_4 = queue_8.size()
    assert var_4 == 0
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    var_5 = queue_10.size()
    assert var_5 == 0
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None

def test_case_315():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    var_1 = queue_2.peek()
    complex_0 = 2886.801252 + 1418.99508j
    queue_5 = module_0.Queue(complex_0)
    var_2 = queue_5.size()
    assert var_2 == 1
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_3 = queue_6.enqueue(none_type_0)
    var_4 = queue_5.enqueue(set_1)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_8 = module_0.Queue()
    var_5 = queue_8.peek()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_6 = double_linked_list_0.append(queue_7)

def test_case_316():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    var_2 = queue_2.size()
    assert var_2 == 1

def test_case_317():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = var_1.__repr__()
    queue_3 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_3.peek()
    node_4 = module_0.Node()
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    queue_4 = module_0.Queue(node_4)
    node_5 = module_0.Node(var_2, var_0)
    assert node_5.next == 0

def test_case_318():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_1 = queue_1.enqueue(set_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_3.peek()
    node_4 = module_0.Node()
    var_3 = node_4.__repr__()
    assert var_3 == 'Value: None'
    queue_4 = module_0.Queue(node_4)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    var_4 = queue_5.dequeue()
    assert var_4 == 77
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_5 = double_linked_list_1.append(node_6)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_6 = queue_9.size()
    assert var_6 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_7 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_8 = module_0.Node()
    var_8 = node_8.__repr__()
    assert var_8 == 'Value: None'
    node_9 = module_0.Node()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    none_type_0 = None
    queue_16 = module_0.Queue(none_type_0)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_17 = module_0.Queue(bytes_2)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_9 = double_linked_list_3.append(bytes_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_18 = module_0.Queue(bytes_3)
    queue_19 = module_0.Queue()
    set_6 = set()
    node_10 = module_0.Node(prev=set_6)
    var_10 = queue_19.size()
    assert var_10 == 0
    queue_20 = module_0.Queue()
    var_11 = queue_19.size()
    assert var_11 == 0
    queue_21 = module_0.Queue(node_4)

def test_case_319():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue(queue_6)
    var_2 = queue_5.peek()
    queue_8 = module_0.Queue()

def test_case_320():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_0)
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = double_linked_list_1.append(node_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_1.size()
    assert var_3 == 0
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_4 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_5 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue(queue_6)
    var_6 = queue_5.peek()
    var_7 = queue_7.size()
    assert var_7 == 1
    var_8 = queue_6.size()
    assert var_8 == 11

def test_case_321():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    var_0 = queue_2.peek()
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue(node_1)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    var_2 = queue_4.dequeue()
    assert var_2 == 77
    queue_5 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_4 = node_2.__repr__()
    assert var_4 == 'Value: None'
    node_3 = module_0.Node()
    complex_0 = 2886.801252 + 1418.99508j
    queue_7 = module_0.Queue(complex_0)
    var_5 = queue_7.size()
    assert var_5 == 1
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_8 = module_0.Queue()
    var_6 = queue_8.enqueue(none_type_0)
    var_7 = queue_7.enqueue(set_1)
    var_8 = double_linked_list_1.shift()
    assert var_8 == b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    assert double_linked_list_1.tail is None

def test_case_322():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_1)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_2.append(node_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    queue_6 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_3 = double_linked_list_3.append(node_6)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_7.enqueue(queue_6)
    var_5 = double_linked_list_3.shift()
    assert double_linked_list_3.tail is None
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Node'
    assert var_5.data is None
    assert var_5.next is None
    assert var_5.prev == {*()}

def test_case_323():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    queue_2 = module_0.Queue()
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    var_1 = queue_2.size()
    assert var_1 == 0
    var_2 = queue_1.peek()
    assert var_2 == 77
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = double_linked_list_1.append(set_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_5 = node_1.__repr__()
    assert var_5 == 'Value: None'

def test_case_324():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_0.append(node_3)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_3 = queue_7.peek()
    queue_8 = module_0.Queue(queue_7)
    assert f'{type(queue_8).__module__}.{type(queue_8).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    queue_10 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_4 = queue_10.size()
    assert var_4 == 0
    queue_11 = module_0.Queue()
    var_5 = queue_10.size()
    assert var_5 == 0
    queue_12 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_6 = queue_12.size()
    assert var_6 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_1)
    var_7 = queue_13.dequeue()
    assert var_7 == 77
    node_7 = module_0.Node()
    var_8 = node_7.__repr__()
    assert var_8 == 'Value: None'
    queue_14 = module_0.Queue()

def test_case_325():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_0 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_1.append(node_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    queue_2 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_2 = queue_3.size()
    assert var_2 == 0
    var_3 = queue_2.size()
    assert var_3 == 0
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_326():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_2 = module_0.Node()
    node_3 = module_0.Node()
    var_2 = node_3.__repr__()
    assert var_2 == 'Value: None'
    queue_3 = module_0.Queue(node_3)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    var_3 = queue_4.dequeue()
    assert var_3 == 77
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_4 = queue_6.peek()
    node_5 = module_0.Node(none_type_0)

def test_case_327():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    var_2 = queue_3.enqueue(set_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = node_1.__repr__()
    assert var_3 == 'Value: None'
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_0 = None
    queue_8 = module_0.Queue(none_type_0)
    queue_9 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = double_linked_list_2.append(node_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    complex_0 = 2886.801252 + 1418.99508j
    queue_11 = module_0.Queue(complex_0)
    var_5 = queue_11.size()
    assert var_5 == 1
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    none_type_1 = None
    queue_12 = module_0.Queue()
    var_6 = queue_12.enqueue(none_type_1)
    var_7 = queue_11.enqueue(set_4)
    queue_13 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_8 = queue_13.peek()
    queue_14 = module_0.Queue(queue_13)
    complex_1 = 2886.801252 + 1418.99508j
    queue_15 = module_0.Queue(complex_1)
    var_9 = queue_15.size()
    assert var_9 == 1
    var_10 = var_6.__repr__()

def test_case_328():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_1 = double_linked_list_3.append(set_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    complex_0 = 2886.801252 + 1418.99508j
    queue_7 = module_0.Queue(complex_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    var_2 = queue_7.size()
    assert var_2 == 1
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(none_type_0)
    var_4 = queue_7.enqueue(set_2)
    queue_9 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_0)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_5 = double_linked_list_4.append(bytes_0)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_11 = module_0.Queue(queue_10)
    var_6 = queue_9.peek()
    queue_12 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_13 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_7 = double_linked_list_5.append(node_4)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    queue_14 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_8 = queue_14.size()
    assert var_8 == 0
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_19 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    node_7 = module_0.Node()
    var_9 = queue_18.size()
    assert var_9 == 0
    var_10 = node_6.__repr__()
    assert var_10 == 'Value: None'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_20 = module_0.Queue(bytes_1)
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    var_11 = double_linked_list_7.append(bytes_1)
    assert f'{type(double_linked_list_7.head).__module__}.{type(double_linked_list_7.head).__qualname__}' == 'queue4.Node'
    var_12 = double_linked_list_7.append(queue_20)
    queue_21 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_13 = queue_21.peek()
    queue_22 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_14 = queue_22.size()
    assert var_14 == 0
    var_15 = queue_21.size()
    assert var_15 == 0
    queue_23 = module_0.Queue()
    set_9 = set()
    node_10 = module_0.Node(prev=set_9)
    var_16 = queue_23.peek()
    node_11 = module_0.Node()
    double_linked_list_8 = module_0.DoubleLinkedList(var_5)
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None

def test_case_329():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_1.enqueue(queue_0)
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_5 = module_0.Queue()
    var_3 = queue_5.peek()
    queue_6 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue(queue_7)
    var_5 = queue_6.peek()
    var_6 = queue_8.size()
    assert var_6 == 1
    complex_0 = 2886.801252 + 1418.99508j
    queue_9 = module_0.Queue(complex_0)
    var_7 = queue_9.size()
    assert var_7 == 1
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    none_type_0 = None
    queue_10 = module_0.Queue()
    var_8 = queue_10.enqueue(none_type_0)
    var_9 = queue_9.enqueue(set_5)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_10 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_11 = double_linked_list_4.append(queue_11)
    var_12 = queue_2.enqueue(node_1)

def test_case_330():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_1.enqueue(queue_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_3 = module_0.Node()
    var_2 = queue_3.size()
    assert var_2 == 0
    var_3 = queue_2.peek()

def test_case_331():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
    assert var_1.data is None
    assert var_1.next is None
    assert var_1.prev == {*()}
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_332():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_1 = queue_1.enqueue(set_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_0.pop()
    assert var_3 == b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None

def test_case_333():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    var_2 = queue_2.size()
    assert var_2 == 1
    var_3 = queue_2.dequeue()
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Queue'

def test_case_334():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    bool_0 = True
    double_linked_list_1 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_8 = module_0.Queue()
    var_4 = queue_8.peek()
    queue_9 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_5 = double_linked_list_3.append(node_6)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_6 = double_linked_list_1.append(var_1)

def test_case_335():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_4.size()
    assert var_1 == 0
    queue_5 = module_0.Queue()
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_6.size()
    assert var_3 == 0
    queue_7 = module_0.Queue()
    var_4 = queue_7.peek()
    queue_8 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_5 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    queue_10 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_6 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_12 = module_0.Queue(queue_11)
    var_7 = queue_10.peek()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_15 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_6 = module_0.Node()
    var_8 = queue_14.size()
    assert var_8 == 0
    var_9 = node_5.__repr__()
    assert var_9 == 'Value: None'
    node_7 = module_0.Node()
    var_10 = node_7.__repr__()
    assert var_10 == 'Value: None'
    node_8 = module_0.Node()

def test_case_336():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    var_0 = queue_2.dequeue()
    assert var_0 == 77
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_4 = module_0.Node()
    var_3 = queue_6.size()
    assert var_3 == 0
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    queue_8 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_5 = double_linked_list_2.append(node_6)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_7 = module_0.Node()
    node_8 = module_0.Node()
    var_6 = node_8.__repr__()
    assert var_6 == 'Value: None'
    queue_10 = module_0.Queue(node_8)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_1)
    bool_0 = True
    double_linked_list_3 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    var_7 = double_linked_list_0.append(queue_3)

def test_case_337():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    var_3 = queue_3.size()
    assert var_3 == 0
    var_4 = queue_2.peek()
    assert var_4 == 77
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_5 = queue_5.size()
    assert var_5 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    node_4 = module_0.Node()
    var_6 = node_4.__repr__()
    assert var_6 == 'Value: None'
    queue_8 = module_0.Queue(node_4)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    var_7 = queue_9.dequeue()
    assert var_7 == 77
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_8 = queue_11.peek()
    queue_12 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_9 = queue_12.peek()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_2)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList(var_9)
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_10 = node_4.__repr__()
    assert var_10 == 'Value: None'

def test_case_338():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue(queue_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    var_2 = queue_4.peek()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_2)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_3 = double_linked_list_4.append(bytes_2)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_4.append(queue_7)
    queue_8 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_5 = queue_8.size()
    assert var_5 == 0
    var_6 = queue_0.peek()
    assert var_6 == 77

def test_case_339():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = queue_1.peek()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_3.size()
    assert var_2 == 0
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_340():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = var_0.__repr__()
    complex_0 = 2886.801252 + 1418.99508j
    queue_2 = module_0.Queue(complex_0)
    var_2 = queue_2.size()
    assert var_2 == 1
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(none_type_0)
    var_4 = queue_2.enqueue(set_2)
    node_3 = module_0.Node()
    var_5 = node_3.__repr__()
    assert var_5 == 'Value: None'
    queue_4 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_6 = queue_4.peek()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_7 = module_0.Node()
    queue_7 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_7 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue(queue_8)
    var_8 = queue_7.peek()
    queue_10 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_9 = double_linked_list_3.append(node_9)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_10 = queue_11.enqueue(queue_10)
    set_8 = set()
    node_10 = module_0.Node(prev=set_8)
    queue_12 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_11 = double_linked_list_5.append(set_8)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_12 = double_linked_list_2.pop()
    assert var_12 == b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_341():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_2 = module_0.Node()
    var_0 = queue_4.size()
    assert var_0 == 0
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_6.size()
    assert var_2 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    node_4 = module_0.Node(next_node=double_linked_list_1, prev=var_1)
    assert node_4.prev == 'Value: None'

def test_case_342():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_343():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = var_1.__repr__()
    assert var_2 == '0'

def test_case_344():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()

def test_case_345():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_2.peek()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'queue4.Node'
    assert var_2.data is None
    assert var_2.next is None
    assert var_2.prev == {*()}
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    assert f'{type(queue_8).__module__}.{type(queue_8).__qualname__}' == 'queue4.Queue'
    queue_9 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_5 = queue_9.size()
    assert var_5 == 0
    queue_10 = module_0.Queue()
    var_6 = queue_9.size()
    assert var_6 == 0
    queue_11 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_12 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    var_7 = double_linked_list_2.append(node_7)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_8 = queue_11.size()
    assert var_8 == 0
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    set_8 = set()
    node_8 = module_0.Node(prev=set_8)
    queue_15 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_9 = module_0.Node()
    var_9 = queue_14.size()
    assert var_9 == 0
    node_10 = module_0.Node()

def test_case_346():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    var_1 = queue_3.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    queue_5 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_2 = queue_5.size()
    assert var_2 == 0
    queue_6 = module_0.Queue()
    var_3 = queue_5.size()
    assert var_3 == 0
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'

def test_case_347():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_4.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    queue_7 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_4 = queue_7.size()
    assert var_4 == 0
    queue_8 = module_0.Queue()
    var_5 = queue_7.size()
    assert var_5 == 0
    var_6 = queue_6.peek()
    assert var_6 == 77
    node_5 = module_0.Node()
    var_7 = node_5.__repr__()
    assert var_7 == 'Value: None'
    queue_9 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_8 = queue_9.size()
    assert var_8 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_13 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_9 = double_linked_list_3.append(node_8)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_9 = module_0.Node()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_2)
    var_10 = queue_14.dequeue()
    assert var_10 == 77
    queue_15 = module_0.Queue()
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_16 = module_0.Queue(bytes_3)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_11 = double_linked_list_4.append(bytes_3)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_17 = module_0.Queue(queue_16)
    var_12 = queue_15.peek()
    var_13 = queue_17.size()
    assert var_13 == 1
    node_10 = module_0.Node(prev=node_8)

def test_case_348():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    var_2 = queue_1.peek()

def test_case_349():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = var_1.__repr__()
    assert var_2 == '0'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_6 = module_0.Queue()
    var_4 = queue_6.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    queue_8 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_5 = queue_8.size()
    assert var_5 == 0
    queue_9 = module_0.Queue()
    var_6 = queue_8.size()
    assert var_6 == 0
    queue_10 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_7 = queue_10.size()
    assert var_7 == 0
    queue_11 = module_0.Queue()
    var_8 = queue_11.peek()
    queue_12 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_13 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_9 = double_linked_list_1.append(node_6)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    queue_16 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_8 = module_0.Node()
    var_10 = queue_15.size()
    assert var_10 == 0
    var_11 = node_7.__repr__()
    assert var_11 == 'Value: None'
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    queue_17 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_12 = double_linked_list_4.append(set_8)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_20 = module_0.Queue()
    set_9 = set()
    node_10 = module_0.Node(prev=set_9)
    var_13 = queue_20.size()
    assert var_13 == 0
    queue_21 = module_0.Queue()
    queue_22 = module_0.Queue()
    set_10 = set()
    node_11 = module_0.Node(prev=set_10)
    var_14 = queue_21.peek()
    node_12 = module_0.Node(node_2, var_11)
    assert node_12.next == 'Value: None'

def test_case_350():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_2 = node_3.__repr__()
    assert var_2 == 'Value: None'
    node_4 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    queue_4 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    var_4 = queue_4.size()
    assert var_4 == 0
    queue_6 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_5 = queue_6.peek()
    var_6 = var_0.__repr__()

def test_case_351():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    var_2 = queue_3.size()
    assert var_2 == 0
    var_3 = var_2.__repr__()
    assert var_3 == '0'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = queue_6.size()
    assert var_4 == 0
    queue_7 = module_0.Queue()
    var_5 = queue_6.size()
    assert var_5 == 0
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_6 = queue_9.size()
    assert var_6 == 0
    queue_10 = module_0.Queue()
    var_7 = queue_10.peek()
    queue_11 = module_0.Queue()

def test_case_352():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.size()
    assert var_2 == 0
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_2.size()
    assert var_3 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_3.peek()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_7 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_5 = module_0.Node()
    var_5 = queue_6.size()
    assert var_5 == 0
    var_6 = node_4.__repr__()
    assert var_6 == 'Value: None'
    queue_8 = module_0.Queue()

def test_case_353():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_2.peek()
    complex_0 = 2886.801252 + 1418.99508j
    queue_3 = module_0.Queue(complex_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    var_2 = queue_3.size()
    assert var_2 == 1
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    var_4 = queue_3.dequeue()
    assert var_4 == 2886.801252 + 1418.99508j

def test_case_354():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    queue_5 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_5.size()
    assert var_2 == 0
    queue_6 = module_0.Queue()
    var_3 = queue_6.peek()
    queue_7 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_4 = queue_7.size()
    assert var_4 == 0
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_5 = queue_8.peek()
    node_5 = module_0.Node()
    var_6 = node_5.__repr__()
    assert var_6 == 'Value: None'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_1)
    queue_11 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_7 = queue_11.size()
    assert var_7 == 0
    queue_12 = module_0.Queue()
    var_8 = queue_11.size()
    assert var_8 == 0
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_9 = queue_14.peek()
    queue_15 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_10 = queue_15.size()
    assert var_10 == 0
    var_11 = queue_14.size()
    assert var_11 == 0
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    queue_16 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_10 = module_0.Node()

def test_case_355():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_1 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    node_3 = module_0.Node()
    node_4 = module_0.Node()
    var_3 = node_4.__repr__()
    assert var_3 == 'Value: None'
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_6 = module_0.Node()
    var_4 = queue_6.size()
    assert var_4 == 0
    var_5 = node_5.__repr__()
    assert var_5 == 'Value: None'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    queue_9 = module_0.Queue()
    set_3 = set()
    node_7 = module_0.Node(prev=set_3)
    var_6 = queue_9.size()
    assert var_6 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    var_7 = queue_10.peek()
    none_type_0 = None
    node_9 = module_0.Node(prev=none_type_0)
    queue_12 = module_0.Queue()
    set_5 = set()
    node_10 = module_0.Node(prev=set_5)
    queue_13 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_6 = set()
    node_11 = module_0.Node(prev=set_6)
    var_8 = double_linked_list_5.append(node_11)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_9 = queue_13.enqueue(queue_12)
    set_7 = set()
    node_12 = module_0.Node(prev=set_7)
    var_10 = node_8.__repr__()
    assert var_10 == 'Value: None'

def test_case_356():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    var_2 = queue_2.size()
    assert var_2 == 0
    var_3 = queue_1.peek()
    assert var_3 == 77
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_4 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_5 = queue_5.enqueue(none_type_0)
    none_type_1 = None
    node_3 = module_0.Node(prev=none_type_1)
    queue_6 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_6 = queue_6.size()
    assert var_6 == 0
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_7 = queue_7.peek()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_7 = module_0.Node(next_node=queue_3)

def test_case_357():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == 77
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_2 = module_0.Queue()
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Node'
    assert var_3.data is None
    assert var_3.next is None
    assert var_3.prev == {*()}
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_2)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = double_linked_list_1.append(bytes_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_5 = queue_5.peek()
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_3)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    double_linked_list_3 = module_0.DoubleLinkedList(var_5)
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_6 = double_linked_list_2.push(bytes_3)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'

def test_case_358():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_7 = module_0.Queue()
    var_3 = queue_7.peek()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_3 = module_0.Node(double_linked_list_0, var_0)
    assert node_3.next == 0
    queue_10 = module_0.Queue(node_3)

def test_case_359():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    queue_3 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    var_3 = queue_4.enqueue(set_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    var_4 = queue_5.dequeue()
    assert var_4 == 77
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_5 = queue_6.peek()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_2)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_6 = double_linked_list_1.append(bytes_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue(queue_7)
    queue_9 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_7 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    complex_0 = 2886.801252 + 1418.99508j
    queue_11 = module_0.Queue(complex_0)
    var_8 = queue_11.size()
    assert var_8 == 1
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    none_type_0 = None
    queue_12 = module_0.Queue()
    var_9 = queue_12.enqueue(none_type_0)
    var_10 = queue_11.enqueue(set_3)
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_13 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_11 = node_4.__repr__()
    assert var_11 == 'Value: None'
    queue_14 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_12 = queue_14.peek()
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_3)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    double_linked_list_4 = module_0.DoubleLinkedList(var_12)
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_16 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    node_7 = module_0.Node()

def test_case_360():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    queue_2 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_2 = queue_3.size()
    assert var_2 == 0
    var_3 = queue_2.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_6 = module_0.Node()
    var_4 = queue_5.size()
    assert var_4 == 0
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = double_linked_list_3.append(set_5)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_6 = queue_10.size()
    assert var_6 == 0
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_7 = queue_11.peek()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    none_type_0 = None
    queue_16 = module_0.Queue(none_type_0)
    queue_17 = module_0.Queue()
    set_8 = set()
    node_10 = module_0.Node(prev=set_8)
    var_8 = queue_17.size()
    assert var_8 == 0
    var_9 = var_8.__repr__()
    assert var_9 == '0'

def test_case_361():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == 77
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_1.peek()
    node_1 = module_0.Node()
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    queue_2 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    var_4 = queue_2.peek()
    var_5 = queue_4.size()
    assert var_5 == 1
    var_6 = queue_4.dequeue()
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'queue4.Queue'
    complex_0 = 2886.801252 + 1418.99508j
    queue_5 = module_0.Queue(complex_0)
    var_7 = queue_5.size()
    assert var_7 == 1
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_2)
    queue_7 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_8 = queue_7.size()
    assert var_8 == 0
    queue_8 = module_0.Queue()
    var_9 = queue_7.size()
    assert var_9 == 0
    var_10 = var_9.__repr__()
    assert var_10 == '0'
    queue_9 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_11 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    var_12 = queue_10.enqueue(set_2)
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    bool_0 = True
    double_linked_list_2 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    queue_12 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_13 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_13 = double_linked_list_3.append(node_7)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_8 = module_0.Node()
    var_14 = queue_10.size()
    assert var_14 == 2

def test_case_362():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0

def test_case_363():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_2.append(node_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_2.shift()
    assert double_linked_list_2.tail is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'queue4.Node'
    assert var_2.data is None
    assert var_2.next is None
    assert var_2.prev == {*()}
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_4 = module_0.Node()
    var_3 = queue_6.size()
    assert var_3 == 0
    queue_8 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_4 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    assert f'{type(queue_9).__module__}.{type(queue_9).__qualname__}' == 'queue4.Queue'
    var_5 = queue_9.enqueue(set_4)
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_11 = module_0.Queue()
    var_6 = queue_11.peek()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_0)
    queue_15 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_7 = queue_15.size()
    assert var_7 == 0
    queue_16 = module_0.Queue()
    var_8 = queue_15.size()
    assert var_8 == 0
    complex_0 = 2886.801252 + 1418.99508j
    queue_17 = module_0.Queue(complex_0)
    var_9 = queue_17.size()
    assert var_9 == 1
    var_10 = node_1.__repr__()
    assert var_10 == 'Value: None'

def test_case_364():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    bool_0 = True
    double_linked_list_1 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_5.peek()
    node_3 = module_0.Node()
    queue_6 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_4 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue(queue_7)
    var_5 = queue_6.peek()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None

def test_case_365():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    var_2 = queue_0.enqueue(set_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    var_3 = queue_3.peek()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_366():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_0 = None
    queue_7 = module_0.Queue(none_type_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_367():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_3.append(node_3)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    var_3 = queue_7.dequeue()
    assert var_3 == 77
    queue_8 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_2)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_4 = double_linked_list_4.append(bytes_2)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue(queue_9)
    var_5 = queue_8.peek()
    var_6 = queue_10.size()
    assert var_6 == 1
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_11 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_12 = module_0.Queue()
    var_7 = queue_12.peek()
    queue_13 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_8 = queue_13.peek()
    queue_14 = module_0.Queue(queue_13)
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_9 = var_8.__repr__()
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_3)
    queue_16 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_10 = queue_16.size()
    assert var_10 == 0
    queue_17 = module_0.Queue()
    var_11 = queue_16.size()
    assert var_11 == 0
    bytes_4 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_18 = module_0.Queue(bytes_4)
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_12 = double_linked_list_6.append(bytes_4)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    queue_19 = module_0.Queue(queue_18)
    var_13 = queue_0.enqueue(set_3)

def test_case_368():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    none_type_0 = None
    node_2 = module_0.Node(prev=none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_2 = node_3.__repr__()
    assert var_2 == 'Value: None'
    node_4 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    queue_5 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_2)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_2.append(bytes_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue(queue_6)
    var_4 = queue_5.peek()
    var_5 = queue_7.size()
    assert var_5 == 1
    queue_8 = module_0.Queue()
    set_1 = set()
    node_5 = module_0.Node(prev=set_1)
    var_6 = queue_8.peek()
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_3)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    double_linked_list_4 = module_0.DoubleLinkedList(var_6)
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_7 = queue_8.peek()

def test_case_369():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    complex_0 = 2886.801252 + 1418.99508j
    queue_2 = module_0.Queue(complex_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    var_2 = queue_2.size()
    assert var_2 == 1
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(none_type_0)
    var_4 = queue_2.enqueue(set_2)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_370():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.push(var_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'

def test_case_371():
    none_type_0 = None
    node_0 = module_0.Node(prev=none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(set_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue()

def test_case_372():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_2 = module_0.Queue(complex_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    var_1 = queue_2.size()
    assert var_1 == 1
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    var_2 = queue_3.dequeue()
    assert var_2 == 77
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_5 = module_0.Queue()
    var_3 = queue_5.peek()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_8 = module_0.Queue(set_1)

def test_case_373():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue(queue_2)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_2 = double_linked_list_6.append(set_2)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_3 = double_linked_list_7.append(node_4)
    assert f'{type(double_linked_list_7.head).__module__}.{type(double_linked_list_7.head).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_7.shift()
    assert double_linked_list_7.tail is None
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'queue4.Node'
    assert var_4.data is None
    assert var_4.next is None
    assert var_4.prev == {*()}
    var_5 = double_linked_list_4.append(var_4)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'

def test_case_374():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_3 = double_linked_list_0.remove(node_2)
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None

def test_case_375():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    var_1 = queue_1.dequeue()
    assert var_1 == 77
    queue_2 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    queue_4 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_4 = queue_6.size()
    assert var_4 == 0
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_9 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_10 = module_0.Queue()
    var_5 = queue_10.peek()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_13 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_6 = queue_13.size()
    assert var_6 == 0
    queue_14 = module_0.Queue()
    var_7 = queue_14.peek()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_15 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_8 = node_5.__repr__()
    assert var_8 == 'Value: None'
    queue_16 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_17 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_9 = double_linked_list_4.append(node_7)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_10 = double_linked_list_4.shift()
    assert double_linked_list_4.tail is None
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'queue4.Node'
    assert var_10.data is None
    assert var_10.next is None
    assert var_10.prev == {*()}
    var_11 = queue_3.size()
    assert var_11 == 11

def test_case_376():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_1 = queue_1.enqueue(set_0)
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_3.peek()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_5 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    var_6 = node_4.__repr__()
    assert var_6 == 'Value: None'
    node_5 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    var_7 = queue_7.dequeue()
    assert var_7 == 77
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_2)
    queue_9 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_8 = queue_9.size()
    assert var_8 == 0
    queue_10 = module_0.Queue()
    var_9 = queue_9.size()
    assert var_9 == 0
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_11 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_8 = module_0.Node()
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_3)
    queue_13 = module_0.Queue()
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    var_10 = queue_13.size()
    assert var_10 == 0
    queue_14 = module_0.Queue()
    var_11 = queue_13.size()
    assert var_11 == 0
    var_12 = queue_12.peek()
    assert var_12 == 77
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_377():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = double_linked_list_0.push(var_1)

def test_case_378():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_1.enqueue(queue_0)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    bool_0 = True
    double_linked_list_1 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    none_type_0 = None
    node_3 = module_0.Node(prev=none_type_0)
    complex_0 = 2886.801252 + 1418.99508j
    queue_2 = module_0.Queue(complex_0)
    var_2 = queue_2.size()
    assert var_2 == 1
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(none_type_1)
    var_4 = queue_2.enqueue(set_3)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    var_5 = queue_0.size()
    assert var_5 == 0

def test_case_379():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = queue_4.size()
    assert var_1 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_2.append(queue_5)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_4 = module_0.Node()
    queue_8 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_4 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    var_5 = queue_9.enqueue(set_4)
    queue_10 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_6 = queue_10.peek()
    queue_11 = module_0.Queue(queue_10)
    var_7 = double_linked_list_2.pop()
    assert var_7 == b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'

def test_case_380():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_3.size()
    assert var_2 == 0
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(node_1)

def test_case_381():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_0 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    bool_0 = True
    double_linked_list_4 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_4.tail).__module__}.{type(double_linked_list_4.tail).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    var_1 = queue_5.dequeue()
    assert var_1 == 77
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_2)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_2 = double_linked_list_5.append(bytes_2)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_2.enqueue(double_linked_list_0)

def test_case_382():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_2.append(node_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_9 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    node_5 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_0)
    assert f'{type(queue_10).__module__}.{type(queue_10).__qualname__}' == 'queue4.Queue'
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_2 = double_linked_list_6.append(bytes_0)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    queue_11 = module_0.Queue(queue_10)
    node_6 = module_0.Node()
    var_3 = node_6.__repr__()
    assert var_3 == 'Value: None'
    queue_12 = module_0.Queue(node_6)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_1)
    var_4 = queue_13.dequeue()
    assert var_4 == 77
    queue_14 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_15 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    queue_16 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_5 = queue_16.peek()
    node_9 = module_0.Node()
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    var_6 = double_linked_list_8.push(var_5)
    assert f'{type(double_linked_list_8.tail).__module__}.{type(double_linked_list_8.tail).__qualname__}' == 'queue4.Node'
    double_linked_list_9 = module_0.DoubleLinkedList(queue_1)
    assert f'{type(double_linked_list_9.head).__module__}.{type(double_linked_list_9.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_9.tail).__module__}.{type(double_linked_list_9.tail).__qualname__}' == 'queue4.Node'

def test_case_383():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)

def test_case_384():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    queue_3 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = double_linked_list_1.append(node_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Node'
    assert var_3.data is None
    assert var_3.next is None
    assert var_3.prev == {*()}
    queue_5 = module_0.Queue()

def test_case_385():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = var_1.__repr__()
    assert var_2 == '0'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None

def test_case_386():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_4.enqueue(queue_3)
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = double_linked_list_3.append(set_3)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    assert f'{type(queue_9).__module__}.{type(queue_9).__qualname__}' == 'queue4.Queue'
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_5 = double_linked_list_4.append(bytes_0)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue(queue_9)
    var_6 = queue_8.peek()
    var_7 = queue_10.size()
    assert var_7 == 1
    var_8 = queue_10.dequeue()
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'queue4.Queue'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_1)
    double_linked_list_5 = module_0.DoubleLinkedList()
    var_9 = double_linked_list_5.append(bytes_1)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    queue_12 = module_0.Queue(queue_11)
    var_10 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'

def test_case_387():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    var_2 = queue_4.peek()
    var_3 = double_linked_list_0.push(queue_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'

def test_case_388():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_1 = node_2.__repr__()
    assert var_1 == 'Value: None'
    none_type_0 = None
    node_3 = module_0.Node(prev=none_type_0)
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_1)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    var_4 = queue_4.size()
    assert var_4 == 0
    var_5 = queue_3.peek()
    assert var_5 == 77
    var_6 = double_linked_list_0.push(double_linked_list_0)

def test_case_389():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    var_2 = queue_0.enqueue(set_0)
    node_1 = module_0.Node()
    var_3 = node_1.__repr__()
    assert var_3 == 'Value: None'
    queue_2 = module_0.Queue(node_1)
    queue_3 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_4 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue(queue_4)
    var_5 = queue_3.peek()
    var_6 = queue_5.size()
    assert var_6 == 1
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_7 = queue_8.size()
    assert var_7 == 0
    queue_9 = module_0.Queue()

def test_case_390():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_5.size()
    assert var_2 == 0
    queue_6 = module_0.Queue()
    var_3 = queue_6.peek()
    node_2 = module_0.Node()
    var_4 = node_2.__repr__()
    assert var_4 == 'Value: None'
    queue_7 = module_0.Queue(node_2)
    complex_0 = 2886.801252 + 1418.99508j
    queue_8 = module_0.Queue(complex_0)
    var_5 = queue_8.size()
    assert var_5 == 1
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_9 = module_0.Queue()
    var_6 = queue_9.enqueue(none_type_0)
    var_7 = queue_8.enqueue(set_2)
    queue_10 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_8 = queue_10.peek()
    queue_11 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_9 = queue_11.size()
    assert var_9 == 0
    var_10 = queue_10.size()
    assert var_10 == 0
    queue_12 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_13 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_11 = double_linked_list_3.append(node_7)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_12 = double_linked_list_3.shift()
    assert double_linked_list_3.tail is None
    assert f'{type(var_12).__module__}.{type(var_12).__qualname__}' == 'queue4.Node'
    assert var_12.data is None
    assert var_12.next is None
    assert var_12.prev == {*()}
    queue_14 = module_0.Queue()

def test_case_391():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_1 = queue_7.size()
    assert var_1 == 0
    queue_8 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = var_2.__repr__()
    var_4 = node_0.__repr__()
    assert var_4 == 'Value: None'

def test_case_392():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    var_2 = queue_0.enqueue(set_0)
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_3.enqueue(queue_2)
    double_linked_list_1 = module_0.DoubleLinkedList(none_type_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_393():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_1 = queue_0.enqueue(var_0)

def test_case_394():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.push(queue_0)

def test_case_395():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()

def test_case_396():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Node'
    assert var_3.data is None
    assert var_3.next is None
    assert var_3.prev == {*()}
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_5 = module_0.Node()
    var_4 = queue_6.size()
    assert var_4 == 0
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_5 = queue_10.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_0)
    assert f'{type(queue_11).__module__}.{type(queue_11).__qualname__}' == 'queue4.Queue'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    double_linked_list_4 = module_0.DoubleLinkedList(var_5)
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    var_6 = queue_12.dequeue()
    assert var_6 == 77
    var_7 = double_linked_list_2.push(bytes_0)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'

def test_case_397():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = queue_0.size()
    assert var_1 == 0

def test_case_398():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_4 = queue_5.peek()

def test_case_399():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    node_2 = module_0.Node()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_3 = queue_7.size()
    assert var_3 == 0
    queue_8 = module_0.Queue()
    none_type_0 = None
    node_4 = module_0.Node(prev=none_type_0)
    var_4 = queue_3.peek()
    assert var_4 == 77

def test_case_400():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    node_1 = module_0.Node()

def test_case_401():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    var_2 = queue_2.size()
    assert var_2 == 0
    var_3 = queue_1.peek()
    assert var_3 == 77
    queue_4 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue(queue_5)
    var_5 = queue_4.peek()
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_6 = queue_7.peek()
    queue_8 = module_0.Queue(queue_7)
    var_7 = queue_8.enqueue(set_2)
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_4 = module_0.Node()
    complex_0 = 2886.801252 + 1418.99508j
    queue_10 = module_0.Queue(complex_0)
    var_8 = queue_10.size()
    assert var_8 == 1
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_12 = module_0.Queue()
    var_9 = queue_12.peek()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_15 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_16 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_10 = double_linked_list_5.append(node_7)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    node_8 = module_0.Node()
    var_11 = node_8.__repr__()
    assert var_11 == 'Value: None'
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    queue_17 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_18 = module_0.Queue()
    var_12 = queue_18.peek()
    var_13 = double_linked_list_3.append(var_8)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'

def test_case_402():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_1 = queue_1.enqueue(set_0)
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_5.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList(var_4)
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_5 = double_linked_list_3.append(node_5)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_6 = queue_8.enqueue(queue_7)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    queue_10 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_7 = queue_10.size()
    assert var_7 == 0
    queue_11 = module_0.Queue()
    var_8 = queue_10.size()
    assert var_8 == 0
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_2)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_9 = double_linked_list_4.append(bytes_2)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_3)
    queue_14 = module_0.Queue()
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    var_10 = queue_14.size()
    assert var_10 == 0
    queue_15 = module_0.Queue()
    var_11 = queue_14.size()
    assert var_11 == 0
    var_12 = queue_13.peek()
    assert var_12 == 77
    node_8 = module_0.Node(queue_5, prev=queue_6)

def test_case_403():
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    queue_4 = module_0.Queue(node_1)
    queue_5 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_2 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue(queue_6)
    var_3 = queue_5.peek()
    var_4 = queue_7.size()
    assert var_4 == 1
    var_5 = queue_7.dequeue()
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Queue'
    node_2 = module_0.Node()
    var_6 = node_2.__repr__()
    assert var_6 == 'Value: None'
    queue_8 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_7 = double_linked_list_4.append(node_4)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    double_linked_list_5 = module_0.DoubleLinkedList()
    queue_10 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_8 = queue_10.peek()
    queue_11 = module_0.Queue(queue_10)
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_9 = var_8.__repr__()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    queue_14 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    node_9 = module_0.Node()
    var_10 = queue_13.size()
    assert var_10 == 0
    var_11 = node_8.__repr__()
    assert var_11 == 'Value: None'
    var_12 = var_5.peek()
    assert var_12 == 77

def test_case_404():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue(none_type_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_5.size()
    assert var_0 == 0
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue(queue_7)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_3 = module_0.Node()
    var_3 = queue_10.size()
    assert var_3 == 0
    var_4 = queue_1.peek()

def test_case_405():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = queue_6.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList(var_4)
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_8 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue(queue_9)
    var_6 = queue_8.peek()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_2)
    queue_12 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_7 = queue_12.size()
    assert var_7 == 0
    queue_13 = module_0.Queue()
    var_8 = queue_12.size()
    assert var_8 == 0
    queue_14 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_9 = queue_14.size()
    assert var_9 == 0
    queue_15 = module_0.Queue()
    var_10 = queue_15.peek()
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_16 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_17 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_11 = double_linked_list_5.append(node_9)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_12 = double_linked_list_5.shift()
    assert double_linked_list_5.tail is None
    assert f'{type(var_12).__module__}.{type(var_12).__qualname__}' == 'queue4.Node'
    assert var_12.data is None
    assert var_12.next is None
    assert var_12.prev == {*()}
    var_13 = var_9.__repr__()
    assert var_13 == '0'

def test_case_406():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue(none_type_0)
    queue_4 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue(queue_5)
    var_1 = queue_4.peek()
    queue_7 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_2 = queue_7.size()
    assert var_2 == 0
    queue_8 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_8.peek()
    queue_9 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = queue_9.size()
    assert var_4 == 0
    var_5 = queue_8.size()
    assert var_5 == 0
    queue_10 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_6 = queue_10.peek()
    queue_11 = module_0.Queue(queue_10)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_12 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_7 = queue_12.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    double_linked_list_3 = module_0.DoubleLinkedList(var_7)
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_8 = double_linked_list_0.push(var_3)

def test_case_407():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = queue_1.size()
    assert var_2 == 1

def test_case_408():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = queue_0.size()
    assert var_1 == 0

def test_case_409():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = node_1.__repr__()
    assert var_3 == 'Value: None'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_4.size()
    assert var_4 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_5 = queue_5.peek()
    queue_7 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_6 = double_linked_list_1.append(node_6)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_7 = module_0.Node()
    bool_0 = True
    double_linked_list_2 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_9 = module_0.Node()
    var_7 = queue_10.size()
    assert var_7 == 0
    var_8 = node_8.__repr__()
    assert var_8 == 'Value: None'
    queue_12 = module_0.Queue()
    set_8 = set()
    node_10 = module_0.Node(prev=set_8)
    var_9 = queue_12.size()
    assert var_9 == 0
    queue_13 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_10 = queue_12.size()
    assert var_10 == 0
    queue_14 = module_0.Queue()
    set_9 = set()
    node_11 = module_0.Node(prev=set_9)
    var_11 = queue_14.peek()
    queue_15 = module_0.Queue(queue_14)
    set_10 = set()
    node_12 = module_0.Node(prev=set_10)
    var_12 = var_11.__repr__()
    queue_16 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_17 = module_0.Queue(bytes_1)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_13 = double_linked_list_5.append(bytes_1)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    queue_18 = module_0.Queue(queue_17)
    var_14 = queue_16.peek()
    var_15 = queue_18.size()
    assert var_15 == 1
    var_16 = queue_18.dequeue()
    assert f'{type(var_16).__module__}.{type(var_16).__qualname__}' == 'queue4.Queue'
    var_17 = double_linked_list_0.append(node_7)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'

def test_case_410():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    queue_1 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue(queue_2)
    var_2 = queue_1.peek()
    var_3 = queue_3.size()
    assert var_3 == 1
    var_4 = queue_3.dequeue()
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'queue4.Queue'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    queue_5 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_5 = queue_5.size()
    assert var_5 == 0
    queue_6 = module_0.Queue()
    var_6 = queue_5.size()
    assert var_6 == 0
    var_7 = queue_4.peek()
    assert var_7 == 77
    node_1 = module_0.Node()
    var_8 = node_1.__repr__()
    assert var_8 == 'Value: None'
    queue_7 = module_0.Queue(node_1)
    queue_8 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_9 = queue_8.peek()
    node_3 = module_0.Node()
    double_linked_list_1 = module_0.DoubleLinkedList(queue_2)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'

def test_case_411():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    var_5 = queue_7.enqueue(set_3)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_6 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_12 = module_0.Queue(queue_11)
    var_7 = queue_10.peek()
    var_8 = queue_12.size()
    assert var_8 == 1
    var_9 = queue_12.dequeue()
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'queue4.Queue'
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_13 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    queue_14 = module_0.Queue()
    var_10 = queue_14.peek()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_2)
    double_linked_list_2 = module_0.DoubleLinkedList()
    var_11 = double_linked_list_2.append(bytes_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    var_12 = node_5.__repr__()
    assert var_12 == 'Value: None'
    node_6 = module_0.Node()
    node_7 = module_0.Node()
    var_13 = node_7.__repr__()
    assert var_13 == 'Value: None'
    queue_16 = module_0.Queue(node_7)
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_17 = module_0.Queue(bytes_3)
    var_14 = queue_17.dequeue()
    assert var_14 == 77
    queue_18 = module_0.Queue()
    var_15 = queue_1.size()
    assert var_15 == 0

def test_case_412():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = queue_9.size()
    assert var_4 == 0
    node_4 = module_0.Node()
    queue_10 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_5 = double_linked_list_4.append(node_6)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_12 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_6 = queue_12.peek()
    node_8 = module_0.Node()
    queue_13 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_7 = queue_13.peek()
    node_10 = module_0.Node()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_8 = double_linked_list_6.push(var_7)
    assert f'{type(double_linked_list_6.tail).__module__}.{type(double_linked_list_6.tail).__qualname__}' == 'queue4.Node'
    set_8 = set()
    node_11 = module_0.Node(prev=set_8)
    queue_14 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    var_9 = double_linked_list_8.append(set_8)
    assert f'{type(double_linked_list_8.head).__module__}.{type(double_linked_list_8.head).__qualname__}' == 'queue4.Node'
    var_10 = queue_10.size()
    assert var_10 == 0

def test_case_413():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = queue_5.size()
    assert var_2 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_3 = queue_6.peek()
    complex_0 = 2886.801252 + 1418.99508j
    queue_8 = module_0.Queue(complex_0)
    assert f'{type(queue_8).__module__}.{type(queue_8).__qualname__}' == 'queue4.Queue'
    var_4 = queue_8.size()
    assert var_4 == 1
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    none_type_0 = None
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(none_type_0)
    var_6 = queue_8.enqueue(set_5)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_414():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue(none_type_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = queue_7.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    assert f'{type(queue_8).__module__}.{type(queue_8).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList(var_1)
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_5 = module_0.Node()
    var_2 = queue_10.size()
    assert var_2 == 0
    var_3 = node_4.__repr__()
    assert var_3 == 'Value: None'
    queue_12 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_13 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_4 = double_linked_list_4.append(node_7)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_4.shift()
    assert double_linked_list_4.tail is None
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Node'
    assert var_5.data is None
    assert var_5.next is None
    assert var_5.prev == {*()}
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_1)
    queue_15 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_6 = queue_15.size()
    assert var_6 == 0
    queue_16 = module_0.Queue()
    var_7 = queue_15.size()
    assert var_7 == 0
    var_8 = queue_14.peek()
    assert var_8 == 77
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    queue_17 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    node_10 = module_0.Node()
    queue_18 = module_0.Queue()
    set_8 = set()
    node_11 = module_0.Node(prev=set_8)
    queue_19 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    set_9 = set()
    node_12 = module_0.Node(prev=set_9)
    var_9 = double_linked_list_6.append(node_12)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None

def test_case_415():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_2 = module_0.Node()
    none_type_0 = None
    node_3 = module_0.Node(prev=none_type_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_5 = module_0.Node()
    var_1 = queue_5.size()
    assert var_1 == 0
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_8 = module_0.Queue()
    var_2 = queue_8.peek()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_11 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_3 = queue_11.peek()
    queue_12 = module_0.Queue(queue_11)
    assert f'{type(queue_12).__module__}.{type(queue_12).__qualname__}' == 'queue4.Queue'
    var_4 = queue_12.enqueue(set_4)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_0)
    node_8 = module_0.Node()
    var_5 = node_8.__repr__()
    assert var_5 == 'Value: None'
    queue_14 = module_0.Queue()

def test_case_416():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    queue_5 = module_0.Queue(node_3)
    var_4 = queue_5.enqueue(var_3)
    queue_6 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_5 = queue_6.size()
    assert var_5 == 0
    queue_7 = module_0.Queue()
    var_6 = queue_7.peek()
    complex_0 = 2886.801252 + 1418.99508j
    queue_8 = module_0.Queue(complex_0)
    var_7 = queue_8.size()
    assert var_7 == 1
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    none_type_0 = None
    queue_9 = module_0.Queue()
    var_8 = queue_9.enqueue(none_type_0)
    var_9 = queue_8.enqueue(set_4)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_12 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_7 = module_0.Node()
    var_10 = queue_11.size()
    assert var_10 == 0
    var_11 = queue_10.size()
    assert var_11 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_1)
    queue_14 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_12 = queue_14.size()
    assert var_12 == 0
    queue_15 = module_0.Queue()
    var_13 = queue_14.size()
    assert var_13 == 0
    var_14 = var_13.__repr__()
    assert var_14 == '0'
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_16 = module_0.Queue(bytes_2)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_15 = double_linked_list_2.append(bytes_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_17 = module_0.Queue(queue_16)
    var_16 = var_14.__repr__()
    assert var_16 == "'0'"

def test_case_417():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_5.size()
    assert var_2 == 0
    queue_6 = module_0.Queue()
    var_3 = queue_5.size()
    assert var_3 == 0
    var_4 = var_3.__repr__()
    assert var_4 == '0'
    var_5 = queue_1.peek()

def test_case_418():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    complex_0 = 2886.801252 + 1418.99508j
    queue_1 = module_0.Queue(complex_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_1 = queue_1.size()
    assert var_1 == 1
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_0)
    var_3 = queue_1.enqueue(set_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_4 = queue_1.enqueue(queue_4)

def test_case_419():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)

def test_case_420():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = node_1.__repr__()
    assert var_0 == 'Value: None'
    queue_1 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_1 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'queue4.Node'
    assert var_2.data is None
    assert var_2.next is None
    assert var_2.prev == {*()}
    queue_3 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_3 = queue_3.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    queue_5 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_4 = queue_5.size()
    assert var_4 == 0
    queue_6 = module_0.Queue()
    var_5 = queue_5.size()
    assert var_5 == 0
    none_type_0 = None
    node_6 = module_0.Node(prev=none_type_0)
    queue_7 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue(queue_8)
    var_7 = queue_7.peek()
    var_8 = queue_9.size()
    assert var_8 == 1
    node_7 = module_0.Node()
    var_9 = node_7.__repr__()
    assert var_9 == 'Value: None'
    queue_10 = module_0.Queue(node_7)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_2)
    var_10 = queue_11.dequeue()
    assert var_10 == 77
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_11 = queue_13.size()
    assert var_11 == 0
    queue_14 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None

def test_case_421():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    node_1 = module_0.Node()
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    queue_1 = module_0.Queue(node_2)
    node_3 = module_0.Node()
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    queue_2 = module_0.Queue(node_3)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    var_4 = queue_3.dequeue()
    assert var_4 == 77
    queue_4 = module_0.Queue()
    set_0 = set()
    node_4 = module_0.Node(prev=set_0)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_5 = queue_7.size()
    assert var_5 == 0
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_1 = set()
    node_5 = module_0.Node(prev=set_1)
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_2 = set()
    node_6 = module_0.Node(prev=set_2)
    var_6 = double_linked_list_3.append(node_6)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_7 = double_linked_list_3.shift()
    assert double_linked_list_3.tail is None
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'queue4.Node'
    assert var_7.data is None
    assert var_7.next is None
    assert var_7.prev == {*()}
    complex_0 = 2886.801252 + 1418.99508j
    queue_11 = module_0.Queue(complex_0)
    var_8 = queue_11.size()
    assert var_8 == 1
    set_3 = set()
    node_7 = module_0.Node(prev=set_3)
    none_type_0 = None
    queue_12 = module_0.Queue()
    var_9 = queue_12.enqueue(none_type_0)
    var_10 = queue_11.enqueue(set_3)
    queue_13 = module_0.Queue()
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    var_11 = queue_13.peek()
    node_9 = module_0.Node()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_12 = double_linked_list_4.push(var_11)
    assert f'{type(double_linked_list_4.tail).__module__}.{type(double_linked_list_4.tail).__qualname__}' == 'queue4.Node'
    node_10 = module_0.Node()

def test_case_422():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
    assert var_1.data is None
    assert var_1.next is None
    assert var_1.prev == {*()}
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_2.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_4 = queue_4.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    double_linked_list_3 = module_0.DoubleLinkedList(var_4)
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_5 = module_0.Node()
    var_5 = node_5.__repr__()
    assert var_5 == 'Value: None'
    queue_6 = module_0.Queue(node_5)
    queue_7 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_6 = queue_7.peek()
    queue_8 = module_0.Queue(queue_7)
    var_7 = queue_8.enqueue(set_5)
    queue_9 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_8 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_1)
    queue_12 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_9 = queue_12.size()
    assert var_9 == 0
    queue_13 = module_0.Queue()
    var_10 = queue_12.size()
    assert var_10 == 0
    queue_14 = module_0.Queue()
    var_11 = var_3.__repr__()
    assert var_11 == '0'

def test_case_423():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = var_0.__repr__()

def test_case_424():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_1 = queue_0.enqueue(var_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_0.append(queue_1)
    queue_2 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_4 = queue_2.peek()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_5 = queue_3.size()
    assert var_5 == 0
    var_6 = queue_2.size()
    assert var_6 == 0
    double_linked_list_1 = module_0.DoubleLinkedList(queue_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'

def test_case_425():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    var_2 = queue_3.enqueue(set_1)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_0.size()
    assert var_3 == 0

def test_case_426():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = var_0.__repr__()
    assert var_1 == "'Value: None'"

def test_case_427():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    var_4 = queue_4.enqueue(set_1)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_6 = module_0.Queue()
    var_5 = queue_6.peek()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    complex_0 = 2886.801252 + 1418.99508j
    queue_9 = module_0.Queue(complex_0)
    var_6 = queue_9.size()
    assert var_6 == 1
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    none_type_0 = None
    queue_10 = module_0.Queue()
    var_7 = queue_10.enqueue(none_type_0)
    var_8 = queue_9.enqueue(set_3)
    queue_11 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_9 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_13 = module_0.Queue(queue_12)
    var_10 = queue_11.peek()
    var_11 = queue_13.size()
    assert var_11 == 1
    var_12 = queue_13.dequeue()
    assert f'{type(var_12).__module__}.{type(var_12).__qualname__}' == 'queue4.Queue'
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_2)
    queue_15 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_13 = queue_15.size()
    assert var_13 == 0
    queue_16 = module_0.Queue()
    var_14 = queue_15.size()
    assert var_14 == 0
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_15 = queue_18.size()
    assert var_15 == 0
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_16 = queue_21.peek()
    node_7 = module_0.Node()
    double_linked_list_3 = module_0.DoubleLinkedList()
    var_17 = double_linked_list_3.push(var_16)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    queue_22 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_18 = queue_22.size()
    assert var_18 == 0
    queue_23 = module_0.Queue()
    queue_24 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_19 = queue_23.peek()
    double_linked_list_4 = module_0.DoubleLinkedList()

def test_case_428():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_1 = queue_0.enqueue(var_0)
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_3 = module_0.Node()
    var_2 = queue_3.size()
    assert var_2 == 0
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = double_linked_list_3.append(set_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_5 = queue_8.peek()
    node_6 = module_0.Node()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_6 = var_5.__repr__()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_0)
    queue_12 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_7 = queue_12.size()
    assert var_7 == 0
    queue_13 = module_0.Queue()
    var_8 = queue_12.size()
    assert var_8 == 0
    queue_14 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    queue_15 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_9 = queue_17.size()
    assert var_9 == 0
    node_9 = module_0.Node()
    var_10 = node_9.__repr__()
    assert var_10 == 'Value: None'

def test_case_429():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = double_linked_list_1.append(node_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'
    node_3 = module_0.Node()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    complex_0 = 2886.801252 + 1418.99508j
    queue_4 = module_0.Queue(complex_0)
    var_4 = queue_4.size()
    assert var_4 == 1
    var_5 = queue_0.dequeue()
    assert var_5 == 77

def test_case_430():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_4.size()
    assert var_1 == 0
    queue_5 = module_0.Queue()
    var_2 = queue_4.size()
    assert var_2 == 0
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    queue_8 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_8.size()
    assert var_4 == 0
    queue_9 = module_0.Queue()
    var_5 = queue_8.size()
    assert var_5 == 0
    var_6 = var_5.__repr__()
    assert var_6 == '0'
    queue_10 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_7 = queue_10.size()
    assert var_7 == 0
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_8 = queue_11.peek()
    node_6 = module_0.Node()
    var_9 = node_6.__repr__()
    assert var_9 == 'Value: None'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_10 = var_9.__repr__()
    assert var_10 == "'Value: None'"
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_13 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_11 = queue_15.size()
    assert var_11 == 0
    queue_16 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    queue_17 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_9 = module_0.Node()
    queue_18 = module_0.Queue()

def test_case_431():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    var_1 = queue_1.dequeue()
    assert var_1 == 77
    queue_2 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_3 = node_1.__repr__()
    assert var_3 == 'Value: None'
    node_2 = module_0.Node()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_2)
    queue_5 = module_0.Queue()
    set_0 = set()
    node_3 = module_0.Node(prev=set_0)
    var_4 = queue_5.size()
    assert var_4 == 0
    queue_6 = module_0.Queue()
    var_5 = queue_5.size()
    assert var_5 == 0
    var_6 = queue_4.peek()
    assert var_6 == 77
    queue_7 = module_0.Queue()
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    var_7 = queue_7.size()
    assert var_7 == 0
    queue_8 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_8 = queue_8.size()
    assert var_8 == 0
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_3)
    queue_15 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_9 = queue_15.size()
    assert var_9 == 0
    queue_16 = module_0.Queue()
    var_10 = queue_15.size()
    assert var_10 == 0
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    queue_20 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_9 = module_0.Node()
    var_11 = queue_19.size()
    assert var_11 == 0
    var_12 = node_8.__repr__()
    assert var_12 == 'Value: None'
    queue_21 = module_0.Queue()
    set_6 = set()
    node_10 = module_0.Node(prev=set_6)
    queue_22 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_7 = set()
    node_11 = module_0.Node(prev=set_7)
    var_13 = double_linked_list_4.append(node_11)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    bytes_4 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_23 = module_0.Queue(bytes_4)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_14 = double_linked_list_5.append(bytes_4)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_15 = double_linked_list_5.append(queue_23)
    var_16 = node_7.__repr__()
    assert var_16 == 'Value: None'

def test_case_432():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.push(var_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    none_type_0 = None
    node_2 = module_0.Node(prev=none_type_0)
    node_3 = module_0.Node()
    var_2 = node_3.__repr__()
    assert var_2 == 'Value: None'
    queue_1 = module_0.Queue()
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_3 = double_linked_list_1.append(node_5)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_6 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_7 = module_0.Node()
    var_5 = node_7.__repr__()
    assert var_5 == 'Value: None'
    node_8 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    queue_5 = module_0.Queue()
    set_3 = set()
    node_9 = module_0.Node(prev=set_3)
    var_6 = queue_5.size()
    assert var_6 == 0
    queue_6 = module_0.Queue()
    var_7 = queue_5.size()
    assert var_7 == 0
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_4 = set()
    node_10 = module_0.Node(prev=set_4)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_11 = module_0.Node()
    var_8 = queue_8.size()
    assert var_8 == 0
    var_9 = node_10.__repr__()
    assert var_9 == 'Value: None'
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    none_type_1 = None
    queue_13 = module_0.Queue(none_type_1)
    var_10 = queue_1.enqueue(var_5)

def test_case_433():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_2 = queue_7.size()
    assert var_2 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    assert f'{type(queue_8).__module__}.{type(queue_8).__qualname__}' == 'queue4.Queue'
    queue_9 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_9.size()
    assert var_3 == 0
    queue_10 = module_0.Queue()
    var_4 = queue_9.size()
    assert var_4 == 0
    var_5 = queue_8.peek()
    assert var_5 == 77
    node_4 = module_0.Node()
    var_6 = node_4.__repr__()
    assert var_6 == 'Value: None'
    queue_11 = module_0.Queue(node_4)
    queue_12 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_13 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_7 = double_linked_list_4.append(node_6)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    queue_14 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_15 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_8 = double_linked_list_6.append(set_6)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    node_9 = module_0.Node(next_node=double_linked_list_5)

def test_case_434():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()

def test_case_435():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_1 = queue_0.enqueue(none_type_0)
    queue_1 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = double_linked_list_0.append(node_3)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    var_3 = queue_1.size()
    assert var_3 == 0

def test_case_436():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_2 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    var_2 = queue_2.peek()
    var_3 = queue_4.size()
    assert var_3 == 1
    var_4 = queue_4.dequeue()
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'queue4.Queue'
    node_1 = module_0.Node()
    var_5 = node_1.__repr__()
    assert var_5 == 'Value: None'
    queue_5 = module_0.Queue(node_1)
    complex_0 = 2886.801252 + 1418.99508j
    queue_6 = module_0.Queue(complex_0)
    var_6 = queue_6.size()
    assert var_6 == 1
    node_2 = module_0.Node()
    var_7 = node_2.__repr__()
    assert var_7 == 'Value: None'

def test_case_437():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_2.append(node_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_2 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    queue_8 = module_0.Queue(queue_6)
    var_3 = queue_3.size()
    assert var_3 == 0

def test_case_438():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_0.push(queue_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'

def test_case_439():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = var_0.__repr__()
    assert var_1 == "'Value: None'"
    queue_0 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = var_2.__repr__()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_5 = node_3.__repr__()
    assert var_5 == 'Value: None'
    queue_3 = module_0.Queue(node_3)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    var_6 = queue_4.dequeue()
    assert var_6 == 77
    queue_5 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_7 = queue_6.enqueue(none_type_0)
    complex_0 = 2886.801252 + 1418.99508j
    queue_7 = module_0.Queue(complex_0)
    var_8 = queue_7.size()
    assert var_8 == 1
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    none_type_1 = None
    queue_8 = module_0.Queue()
    var_9 = queue_8.enqueue(none_type_1)
    var_10 = queue_7.enqueue(set_3)
    complex_1 = 2886.801252 + 1418.99508j
    queue_9 = module_0.Queue(complex_1)
    var_11 = queue_9.size()
    assert var_11 == 1
    queue_10 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_12 = queue_10.peek()
    queue_11 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_13 = queue_11.size()
    assert var_13 == 0
    var_14 = queue_10.size()
    assert var_14 == 0
    queue_12 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_15 = queue_12.size()
    assert var_15 == 0
    queue_13 = module_0.Queue()
    var_16 = queue_11.size()
    assert var_16 == 0

def test_case_440():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = var_1.__repr__()
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    var_4 = queue_1.peek()

def test_case_441():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = queue_4.size()
    assert var_1 == 0
    node_2 = module_0.Node()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_6 = module_0.Queue()
    var_2 = queue_6.peek()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_0)
    assert f'{type(queue_11).__module__}.{type(queue_11).__qualname__}' == 'queue4.Queue'
    queue_12 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_3 = queue_12.size()
    assert var_3 == 0
    queue_13 = module_0.Queue()
    var_4 = queue_12.size()
    assert var_4 == 0
    var_5 = queue_11.peek()
    assert var_5 == 77
    var_6 = queue_8.peek()

def test_case_442():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_0 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    var_2 = queue_2.size()
    assert var_2 == 1
    queue_3 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_3 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    queue_5 = module_0.Queue(queue_3)
    var_4 = var_1.__repr__()

def test_case_443():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = var_0.__repr__()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = var_0.__repr__()

def test_case_444():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_1 = double_linked_list_2.append(node_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_4.size()
    assert var_2 == 0
    var_3 = queue_3.enqueue(set_1)

def test_case_445():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_1 = queue_1.enqueue(set_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    var_2 = queue_4.size()
    assert var_2 == 0
    var_3 = node_1.__repr__()
    assert var_3 == 'Value: None'
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_7 = module_0.Queue()
    var_4 = queue_7.peek()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = queue_10.size()
    assert var_5 == 0
    queue_11 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_6 = queue_11.peek()
    node_6 = module_0.Node()
    queue_12 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_7 = queue_12.size()
    assert var_7 == 0
    queue_13 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_8 = queue_13.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    double_linked_list_5 = module_0.DoubleLinkedList(var_8)
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_15 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_9 = queue_15.size()
    assert var_9 == 0
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    set_8 = set()
    node_10 = module_0.Node(prev=set_8)
    var_10 = queue_16.peek()
    var_11 = queue_8.peek()

def test_case_446():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = node_1.__repr__()
    assert var_0 == 'Value: None'
    queue_1 = module_0.Queue(node_1)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue(queue_2)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    queue_5 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_5.size()
    assert var_2 == 0
    queue_6 = module_0.Queue()
    var_3 = queue_5.size()
    assert var_3 == 0
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_2)
    queue_8 = module_0.Queue()
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_3)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = double_linked_list_2.append(bytes_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue(queue_9)
    var_5 = queue_8.peek()
    var_6 = queue_10.size()
    assert var_6 == 1
    var_7 = queue_10.dequeue()
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'queue4.Queue'
    queue_11 = module_0.Queue()
    bytes_4 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_4)
    double_linked_list_3 = module_0.DoubleLinkedList()
    var_8 = double_linked_list_3.append(bytes_4)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_13 = module_0.Queue(queue_12)
    var_9 = queue_11.peek()
    var_10 = queue_13.size()
    assert var_10 == 1
    node_3 = module_0.Node(var_5, var_7)

def test_case_447():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_448():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_4.size()
    assert var_3 == 0
    var_4 = queue_3.size()
    assert var_4 == 0
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_5 = queue_5.peek()
    node_4 = module_0.Node()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_6 = var_5.__repr__()
    queue_8 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_7 = queue_8.size()
    assert var_7 == 0
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_8 = queue_9.peek()
    queue_11 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_9 = queue_11.size()
    assert var_9 == 0
    queue_12 = module_0.Queue()
    var_10 = queue_12.peek()
    node_8 = module_0.Node(next_node=queue_7)

def test_case_449():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = var_0.__repr__()
    queue_2 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    var_3 = queue_2.peek()
    var_4 = queue_4.size()
    assert var_4 == 1
    var_5 = queue_4.dequeue()
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Queue'
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    node_3 = module_0.Node()
    var_6 = queue_6.size()
    assert var_6 == 0
    var_7 = queue_5.size()
    assert var_7 == 0
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_1)
    var_8 = queue_11.dequeue()
    assert var_8 == 77
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_2)
    queue_13 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_9 = queue_13.size()
    assert var_9 == 0
    queue_14 = module_0.Queue()
    var_10 = queue_13.size()
    assert var_10 == 0
    var_11 = queue_12.peek()
    assert var_11 == 77
    queue_15 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_16 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_12 = double_linked_list_4.append(node_7)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_13 = double_linked_list_4.shift()
    assert double_linked_list_4.tail is None
    assert f'{type(var_13).__module__}.{type(var_13).__qualname__}' == 'queue4.Node'
    assert var_13.data is None
    assert var_13.next is None
    assert var_13.prev == {*()}
    var_14 = node_5.__repr__()
    assert var_14 == 'Value: None'

def test_case_450():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()

def test_case_451():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()

def test_case_452():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = var_0.__repr__()
    assert var_1 == "'Value: None'"
    queue_0 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_3 = queue_0.peek()
    var_4 = queue_2.size()
    assert var_4 == 1
    var_5 = queue_2.dequeue()
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_6 = queue_3.enqueue(none_type_0)
    var_7 = var_1.__repr__()
    assert var_7 == '"\'Value: None\'"'

def test_case_453():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_4.size()
    assert var_0 == 0
    queue_5 = module_0.Queue()
    var_1 = queue_4.size()
    assert var_1 == 0
    var_2 = var_1.__repr__()
    assert var_2 == '0'
    node_2 = module_0.Node()
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'
    queue_6 = module_0.Queue(node_2)
    none_type_0 = None
    node_3 = module_0.Node(prev=none_type_0)
    queue_7 = module_0.Queue()

def test_case_454():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue(queue_1)
    queue_4 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_4.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_2)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_6 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_3 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_7 = module_0.Node()
    var_4 = node_7.__repr__()
    assert var_4 == 'Value: None'
    node_8 = module_0.Node()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None

def test_case_455():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_0)
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_5 = module_0.Queue()
    var_2 = queue_3.enqueue(double_linked_list_1)

def test_case_456():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_3.peek()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_0.push(queue_4)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue()
    str_0 = '|\t)uZdldCAeEFK\\8'
    double_linked_list_2 = module_0.DoubleLinkedList(str_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'

def test_case_457():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_2.append(node_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    queue_7 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_3 = queue_7.peek()
    queue_8 = module_0.Queue(queue_7)
    assert f'{type(queue_8).__module__}.{type(queue_8).__qualname__}' == 'queue4.Queue'
    queue_9 = module_0.Queue(queue_7)
    queue_10 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_4 = double_linked_list_3.append(node_7)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_11.enqueue(queue_10)
    none_type_0 = None
    node_8 = module_0.Node(prev=none_type_0)
    queue_12 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_6 = queue_12.peek()
    queue_13 = module_0.Queue(queue_12)
    node_10 = module_0.Node()

def test_case_458():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_4.size()
    assert var_1 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(none_type_0)
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_4 = module_0.Node()
    node_5 = module_0.Node()
    var_3 = node_5.__repr__()
    assert var_3 == 'Value: None'
    queue_9 = module_0.Queue(node_5)
    assert f'{type(queue_9).__module__}.{type(queue_9).__qualname__}' == 'queue4.Queue'
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    var_4 = queue_6.enqueue(queue_1)

def test_case_459():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    var_2 = queue_4.size()
    assert var_2 == 0
    var_3 = node_1.__repr__()
    assert var_3 == 'Value: None'
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_4 = module_0.Node()
    queue_7 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_4 = queue_7.size()
    assert var_4 == 0
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_5 = double_linked_list_2.append(node_7)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_8 = module_0.Node()
    node_9 = module_0.Node()
    var_6 = node_9.__repr__()
    assert var_6 == 'Value: None'
    queue_12 = module_0.Queue(node_9)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_1)
    var_7 = queue_13.dequeue()
    assert var_7 == 77
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    set_6 = set()
    node_10 = module_0.Node(prev=set_6)
    var_8 = queue_15.peek()
    node_11 = module_0.Node()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_9 = double_linked_list_3.push(var_8)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    set_7 = set()
    node_12 = module_0.Node(prev=set_7)
    queue_16 = module_0.Queue()
    var_10 = var_3.__repr__()
    assert var_10 == "'Value: None'"

def test_case_460():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    var_1 = queue_1.dequeue()
    assert var_1 == 77
    queue_2 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_2.peek()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = queue_3.size()
    assert var_3 == 0
    var_4 = queue_2.size()
    assert var_4 == 0
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_5 = double_linked_list_2.append(set_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_6 = queue_7.size()
    assert var_6 == 0
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_7 = node_5.__repr__()
    assert var_7 == 'Value: None'
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_12 = module_0.Queue()
    var_8 = queue_12.peek()
    var_9 = queue_0.dequeue()
    assert var_9 == 77

def test_case_461():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bool_0 = True
    double_linked_list_2 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_2 = module_0.Node()
    var_1 = queue_3.size()
    assert var_1 == 0
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue(double_linked_list_0)

def test_case_462():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_5.peek()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_6.size()
    assert var_4 == 0
    var_5 = queue_5.size()
    assert var_5 == 0
    var_6 = node_0.__repr__()
    assert var_6 == 'Value: None'

def test_case_463():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_1.enqueue(queue_0)
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    var_3 = queue_3.enqueue(set_2)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_5 = queue_5.peek()
    queue_6 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_6 = queue_6.size()
    assert var_6 == 0
    var_7 = queue_5.size()
    assert var_7 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    var_8 = queue_7.dequeue()
    assert var_8 == 77
    queue_8 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_9 = queue_8.peek()
    node_6 = module_0.Node()
    queue_9 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_10 = queue_9.size()
    assert var_10 == 0
    complex_0 = 2886.801252 + 1418.99508j
    queue_10 = module_0.Queue(complex_0)
    var_11 = queue_10.size()
    assert var_11 == 1
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    none_type_0 = None
    queue_11 = module_0.Queue()
    var_12 = queue_11.enqueue(none_type_0)
    var_13 = queue_10.enqueue(set_7)
    queue_12 = module_0.Queue()

def test_case_464():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_2 = module_0.Node()
    var_1 = queue_3.size()
    assert var_1 == 0
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = queue_4.peek()

def test_case_465():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_1 = queue_2.size()
    assert var_1 == 0
    var_2 = node_0.__repr__()
    assert var_2 == 'Value: None'
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    var_4 = queue_5.enqueue(set_1)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_5 = queue_8.size()
    assert var_5 == 0
    node_4 = module_0.Node()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_6 = double_linked_list_3.push(queue_9)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    queue_12 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_7 = queue_12.size()
    assert var_7 == 0
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_8 = queue_13.peek()
    double_linked_list_5 = module_0.DoubleLinkedList(var_5)
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None

def test_case_466():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = var_1.__repr__()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    var_4 = queue_5.size()
    assert var_4 == 0
    var_5 = var_4.__repr__()
    assert var_5 == '0'
    queue_7 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_6 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue(queue_8)
    var_7 = queue_7.peek()
    var_8 = queue_9.size()
    assert var_8 == 1
    var_9 = queue_9.dequeue()
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'queue4.Queue'
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_2)
    queue_11 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_10 = queue_11.size()
    assert var_10 == 0
    queue_12 = module_0.Queue()
    var_11 = queue_11.size()
    assert var_11 == 0
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_13 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    queue_14 = module_0.Queue()
    var_12 = queue_14.peek()
    queue_15 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_13 = queue_15.size()
    assert var_13 == 0
    queue_16 = module_0.Queue()
    var_14 = queue_16.peek()
    queue_17 = module_0.Queue()
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    queue_18 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    set_8 = set()
    node_8 = module_0.Node(prev=set_8)
    var_15 = double_linked_list_2.append(node_8)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_16 = double_linked_list_2.shift()
    assert double_linked_list_2.tail is None
    assert f'{type(var_16).__module__}.{type(var_16).__qualname__}' == 'queue4.Node'
    assert var_16.data is None
    assert var_16.next is None
    assert var_16.prev == {*()}
    node_9 = module_0.Node()

def test_case_467():
    none_type_0 = None
    node_0 = module_0.Node(prev=none_type_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue(queue_2)
    double_linked_list_1 = module_0.DoubleLinkedList(queue_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'

def test_case_468():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_0)
    assert f'{type(queue_10).__module__}.{type(queue_10).__qualname__}' == 'queue4.Queue'
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_2 = double_linked_list_4.append(bytes_0)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_11 = module_0.Queue(queue_10)
    var_3 = queue_9.peek()
    var_4 = queue_11.size()
    assert var_4 == 1
    var_5 = queue_11.dequeue()
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Queue'
    node_4 = module_0.Node()
    var_6 = node_4.__repr__()
    assert var_6 == 'Value: None'
    double_linked_list_5 = module_0.DoubleLinkedList()
    var_7 = var_6.__repr__()
    assert var_7 == "'Value: None'"
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_12 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    var_8 = var_0.__repr__()
    assert var_8 == '0'

def test_case_469():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_0 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    var_2 = queue_2.size()
    assert var_2 == 1
    queue_3 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = double_linked_list_2.append(node_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_2.shift()
    assert double_linked_list_2.tail is None
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'queue4.Node'
    assert var_4.data is None
    assert var_4.next is None
    assert var_4.prev == {*()}
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_5 = double_linked_list_4.append(set_2)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_6 = queue_8.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    double_linked_list_6 = module_0.DoubleLinkedList(var_6)
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_2)
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    var_7 = double_linked_list_7.append(bytes_2)
    assert f'{type(double_linked_list_7.head).__module__}.{type(double_linked_list_7.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    queue_11 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_8 = queue_11.size()
    assert var_8 == 0
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_9 = queue_12.peek()
    var_10 = double_linked_list_2.push(node_7)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'

def test_case_470():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_3.peek()
    node_2 = module_0.Node()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_1 = double_linked_list_2.append(node_4)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_2 = queue_1.size()
    assert var_2 == 0

def test_case_471():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    var_0 = queue_4.dequeue()
    assert var_0 == 77
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_6.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList(var_1)
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = var_1.__repr__()

def test_case_472():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_0.append(node_3)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    var_3 = node_4.__repr__()
    assert var_3 == 'Value: None'
    node_5 = module_0.Node()
    var_4 = node_5.__repr__()
    assert var_4 == 'Value: None'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_5 = var_4.__repr__()
    assert var_5 == "'Value: None'"
    var_6 = queue_3.size()
    assert var_6 == 0

def test_case_473():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_4.size()
    assert var_1 == 0
    queue_5 = module_0.Queue()
    var_2 = queue_4.size()
    assert var_2 == 0
    var_3 = queue_3.peek()
    assert var_3 == 77
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_10 = module_0.Queue()
    var_4 = queue_10.peek()
    queue_11 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_5 = queue_11.peek()
    queue_12 = module_0.Queue(queue_11)
    queue_13 = module_0.Queue(queue_11)
    queue_14 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_6 = queue_14.peek()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_15 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_7 = node_6.__repr__()
    assert var_7 == 'Value: None'
    queue_16 = module_0.Queue()
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    var_8 = queue_16.peek()
    node_8 = module_0.Node()
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    var_9 = var_8.__repr__()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None

def test_case_474():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_0 = double_linked_list_2.append(set_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.peek()
    var_2 = double_linked_list_2.pop()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_475():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue(none_type_0)
    queue_6 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue(queue_7)
    var_2 = queue_6.peek()
    var_3 = queue_8.size()
    assert var_3 == 1
    var_4 = node_0.__repr__()
    assert var_4 == 'Value: None'

def test_case_476():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_0.append(queue_1)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_2 = module_0.Node()
    var_3 = queue_3.size()
    assert var_3 == 0
    var_4 = node_1.__repr__()
    assert var_4 == 'Value: None'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_477():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue(queue_5)
    var_2 = queue_4.peek()
    node_1 = module_0.Node()
    var_3 = node_1.__repr__()
    assert var_3 == 'Value: None'
    queue_7 = module_0.Queue(node_1)
    var_4 = queue_7.enqueue(var_3)
    queue_8 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_5 = queue_8.peek()
    node_3 = module_0.Node()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_6 = var_5.__repr__()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_7 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_12 = module_0.Queue(queue_11)
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_13 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_8 = queue_0.size()
    assert var_8 == 0
    tuple_0 = (queue_12, var_8, node_1)
    var_9 = double_linked_list_1.append(tuple_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'

def test_case_478():
    none_type_0 = None
    node_0 = module_0.Node(prev=none_type_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = queue_0.size()
    assert var_1 == 0
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    var_3 = queue_3.size()
    assert var_3 == 0
    var_4 = var_3.__repr__()
    assert var_4 == '0'
    var_5 = queue_4.enqueue(var_2)

def test_case_479():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    complex_0 = 2886.801252 + 1418.99508j
    queue_1 = module_0.Queue(complex_0)
    var_1 = queue_1.size()
    assert var_1 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_0)
    var_3 = queue_1.enqueue(set_0)
    node_1 = module_0.Node()
    var_4 = node_1.__repr__()
    assert var_4 == 'Value: None'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_5 = var_4.__repr__()
    assert var_5 == "'Value: None'"
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_6 = double_linked_list_3.append(set_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    queue_10 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_7 = queue_10.size()
    assert var_7 == 0
    queue_11 = module_0.Queue()
    var_8 = queue_10.size()
    assert var_8 == 0
    var_9 = queue_9.peek()
    assert var_9 == 77
    queue_12 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_10 = queue_12.size()
    assert var_10 == 0
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    none_type_1 = None
    queue_18 = module_0.Queue(none_type_1)
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_19 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_20 = module_0.Queue()
    var_11 = queue_20.peek()
    queue_21 = module_0.Queue()
    queue_22 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_23 = module_0.Queue()
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    queue_24 = module_0.Queue()
    queue_25 = module_0.Queue()
    double_linked_list_9 = module_0.DoubleLinkedList()
    assert double_linked_list_9.head is None
    assert double_linked_list_9.tail is None
    var_12 = queue_25.size()
    assert var_12 == 0
    node_8 = module_0.Node()
    double_linked_list_10 = module_0.DoubleLinkedList()
    assert double_linked_list_10.head is None
    assert double_linked_list_10.tail is None
    var_13 = double_linked_list_10.push(queue_21)
    assert f'{type(double_linked_list_10.tail).__module__}.{type(double_linked_list_10.tail).__qualname__}' == 'queue4.Node'

def test_case_480():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = queue_1.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_0.append(queue_2)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = queue_5.size()
    assert var_4 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()

def test_case_481():
    node_0 = module_0.Node()

def test_case_482():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    none_type_0 = None
    node_2 = module_0.Node(prev=none_type_0)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = double_linked_list_1.push(queue_2)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_3 = double_linked_list_3.append(node_5)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_3.shift()
    assert double_linked_list_3.tail is None
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'queue4.Node'
    assert var_4.data is None
    assert var_4.next is None
    assert var_4.prev == {*()}
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_7 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_5 = queue_7.size()
    assert var_5 == 0
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_6 = queue_9.size()
    assert var_6 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_7 = queue_12.peek()
    node_10 = module_0.Node()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_8 = var_7.__repr__()
    var_9 = queue_6.enqueue(var_7)

def test_case_483():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = var_0.__repr__()
    assert var_1 == "'Value: None'"
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    complex_0 = 2886.801252 + 1418.99508j
    queue_1 = module_0.Queue(complex_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_2 = queue_1.size()
    assert var_2 == 1
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_2.size()
    assert var_3 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_4 = var_3.__repr__()
    assert var_4 == '0'

def test_case_484():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.push(var_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    queue_3 = module_0.Queue(queue_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    node_3 = module_0.Node()

def test_case_485():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_0.size()
    assert var_1 == 0

def test_case_486():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = var_0.__repr__()
    assert var_1 == "'Value: None'"
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_2 = module_0.Node()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_2 = queue_1.peek()
    node_4 = module_0.Node()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_3 = var_2.__repr__()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    queue_5 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue(queue_6)
    var_5 = queue_5.peek()
    var_6 = queue_7.size()
    assert var_6 == 1
    queue_8 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_7 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    queue_10 = module_0.Queue(queue_8)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_2)
    queue_14 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_8 = queue_14.size()
    assert var_8 == 0
    queue_15 = module_0.Queue()
    var_9 = queue_14.size()
    assert var_9 == 0
    var_10 = var_9.__repr__()
    assert var_10 == '0'
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    none_type_0 = None
    queue_16 = module_0.Queue()
    var_11 = queue_16.enqueue(none_type_0)
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    queue_17 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_12 = queue_19.size()
    assert var_12 == 0
    node_9 = module_0.Node()
    queue_20 = module_0.Queue()
    set_6 = set()
    node_10 = module_0.Node(prev=set_6)
    queue_21 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_7 = set()
    node_11 = module_0.Node(prev=set_7)
    var_13 = double_linked_list_5.append(node_11)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_14 = queue_19.enqueue(queue_0)

def test_case_487():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_2 = module_0.Node()
    var_1 = queue_5.size()
    assert var_1 == 0
    var_2 = queue_4.size()
    assert var_2 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_3 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    node_4 = module_0.Node()
    queue_8 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_5 = double_linked_list_4.append(node_6)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    node_7 = module_0.Node()
    queue_10 = module_0.Queue()
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    var_6 = queue_10.peek()
    node_9 = module_0.Node()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_7 = double_linked_list_5.push(var_6)
    assert f'{type(double_linked_list_5.tail).__module__}.{type(double_linked_list_5.tail).__qualname__}' == 'queue4.Node'
    queue_11 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_8 = double_linked_list_6.append(bytes_1)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    queue_13 = module_0.Queue(queue_12)
    var_9 = queue_11.peek()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    none_type_0 = None
    queue_17 = module_0.Queue(none_type_0)
    queue_18 = module_0.Queue()
    node_10 = module_0.Node(next_node=node_3)

def test_case_488():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_0.push(queue_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_2.append(node_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_2.shift()
    assert double_linked_list_2.tail is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Node'
    assert var_3.data is None
    assert var_3.next is None
    assert var_3.prev == {*()}
    queue_7 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_4 = queue_7.size()
    assert var_4 == 0
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = queue_7.size()
    assert var_5 == 0
    var_6 = double_linked_list_3.append(var_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'

def test_case_489():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue(none_type_0)
    queue_4 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
    assert var_1.data is None
    assert var_1.next is None
    assert var_1.prev == {*()}
    node_2 = module_0.Node(next_node=var_0)

def test_case_490():
    node_0 = module_0.Node()
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = queue_4.size()
    assert var_1 == 0
    node_4 = module_0.Node()
    var_2 = node_4.__repr__()
    assert var_2 == 'Value: None'
    queue_5 = module_0.Queue(node_4)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    queue_6 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_3 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    queue_8 = module_0.Queue(queue_6)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_4 = queue_6.size()
    assert var_4 == 0
    queue_11 = module_0.Queue()

def test_case_491():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = queue_5.size()
    assert var_2 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_7.peek()
    queue_8 = module_0.Queue(queue_7)
    assert f'{type(queue_8).__module__}.{type(queue_8).__qualname__}' == 'queue4.Queue'
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_4 = var_3.__repr__()
    node_5 = module_0.Node()
    var_5 = node_5.__repr__()
    assert var_5 == 'Value: None'
    queue_9 = module_0.Queue(node_5)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_0)
    var_6 = queue_10.dequeue()
    assert var_6 == 77
    queue_11 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_7 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_8 = double_linked_list_2.append(queue_12)
    queue_13 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_14 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_9 = double_linked_list_3.append(node_7)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_8 = module_0.Node()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_2)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_10 = double_linked_list_4.append(bytes_2)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    node_9 = module_0.Node()
    set_7 = set()
    node_10 = module_0.Node(prev=set_7)
    queue_16 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_11 = double_linked_list_5.push(queue_16)
    assert f'{type(double_linked_list_5.tail).__module__}.{type(double_linked_list_5.tail).__qualname__}' == 'queue4.Node'
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_19 = module_0.Queue(bytes_3)
    queue_20 = module_0.Queue()
    set_8 = set()
    node_11 = module_0.Node(prev=set_8)
    var_12 = queue_20.size()
    assert var_12 == 0
    queue_21 = module_0.Queue()
    var_13 = queue_20.size()
    assert var_13 == 0
    var_14 = var_13.__repr__()
    assert var_14 == '0'
    queue_22 = module_0.Queue()
    set_9 = set()
    node_12 = module_0.Node(prev=set_9)
    var_15 = queue_22.peek()
    queue_23 = module_0.Queue(queue_22)
    queue_24 = module_0.Queue(queue_22)
    queue_25 = module_0.Queue()
    queue_26 = module_0.Queue()
    var_16 = queue_22.size()
    assert var_16 == 0
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None

def test_case_492():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_4.enqueue(queue_3)
    var_3 = queue_2.peek()

def test_case_493():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    queue_1 = module_0.Queue(node_1)
    var_2 = queue_1.enqueue(var_1)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    var_4 = double_linked_list_0.push(var_1)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'

def test_case_494():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None

def test_case_495():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = var_0.__repr__()
    assert var_1 == "'Value: None'"
    queue_0 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_0.size()
    assert var_3 == 0
    none_type_0 = None
    node_3 = module_0.Node(prev=none_type_0)
    var_4 = double_linked_list_0.push(var_1)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'

def test_case_496():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_0.push(queue_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_3 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_1 = double_linked_list_4.append(bytes_0)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_2 = double_linked_list_5.append(bytes_1)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue(queue_6)
    var_3 = queue_5.peek()
    var_4 = queue_7.size()
    assert var_4 == 1
    var_5 = queue_7.dequeue()
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Queue'
    double_linked_list_6 = module_0.DoubleLinkedList()

def test_case_497():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_2 = module_0.Node()
    var_1 = queue_7.size()
    assert var_1 == 0
    var_2 = queue_6.size()
    assert var_2 == 0
    queue_9 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_9.size()
    assert var_3 == 0
    queue_10 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = queue_10.peek()
    queue_11 = module_0.Queue(queue_10)
    assert f'{type(queue_11).__module__}.{type(queue_11).__qualname__}' == 'queue4.Queue'
    queue_12 = module_0.Queue(queue_10)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_5 = queue_10.size()
    assert var_5 == 0
    queue_15 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_6 = queue_15.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_16 = module_0.Queue(bytes_0)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    double_linked_list_4 = module_0.DoubleLinkedList(var_6)
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_17 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_7 = queue_17.size()
    assert var_7 == 0
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_20 = module_0.Queue(complex_0)
    var_8 = queue_20.size()
    assert var_8 == 1
    node_7 = module_0.Node()
    var_9 = node_7.__repr__()
    assert var_9 == 'Value: None'
    queue_21 = module_0.Queue(node_7)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_22 = module_0.Queue(bytes_1)
    var_10 = queue_22.dequeue()
    assert var_10 == 77
    queue_23 = module_0.Queue()
    var_11 = var_6.__repr__()

def test_case_498():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_2.append(node_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_2.shift()
    assert double_linked_list_2.tail is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'queue4.Node'
    assert var_2.data is None
    assert var_2.next is None
    assert var_2.prev == {*()}
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    queue_8 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_8.size()
    assert var_3 == 0
    queue_9 = module_0.Queue()
    var_4 = queue_8.size()
    assert var_4 == 0
    var_5 = queue_7.peek()
    assert var_5 == 77
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_6 = queue_11.peek()
    queue_12 = module_0.Queue(queue_11)
    var_7 = queue_12.enqueue(set_4)
    queue_13 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_8 = queue_13.peek()
    node_6 = module_0.Node()
    queue_14 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_9 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_16 = module_0.Queue(queue_15)
    var_10 = queue_14.peek()
    queue_17 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_18 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_11 = double_linked_list_5.append(node_8)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    queue_19 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_12 = queue_19.peek()
    queue_20 = module_0.Queue(queue_19)
    queue_21 = module_0.Queue(queue_19)
    queue_22 = module_0.Queue()
    queue_23 = module_0.Queue()
    var_13 = queue_19.size()
    assert var_13 == 0
    var_14 = double_linked_list_5.shift()
    assert double_linked_list_5.tail is None

def test_case_499():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    var_1 = queue_2.peek()
    var_2 = queue_4.size()
    assert var_2 == 1
    var_3 = queue_4.dequeue()
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Queue'
    node_0 = module_0.Node(var_1, prev=var_3)

def test_case_500():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = var_1.__repr__()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_3 = double_linked_list_3.append(node_3)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'

def test_case_501():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = var_0.__repr__()
    complex_0 = 2886.801252 + 1418.99508j
    queue_2 = module_0.Queue(complex_0)
    var_2 = queue_2.size()
    assert var_2 == 1
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(none_type_0)
    var_4 = queue_2.enqueue(set_2)
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_5 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    complex_1 = 2886.801252 + 1418.99508j
    queue_6 = module_0.Queue(complex_1)
    var_6 = queue_6.size()
    assert var_6 == 1
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_7 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_8 = module_0.Queue()
    var_7 = queue_8.peek()
    queue_9 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_8 = queue_9.size()
    assert var_8 == 0
    queue_10 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_11 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_9 = queue_13.size()
    assert var_9 == 0
    node_7 = module_0.Node()
    var_10 = queue_5.size()
    assert var_10 == 1

def test_case_502():
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_0 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    var_1 = queue_2.enqueue(none_type_0)

def test_case_503():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_4.enqueue(queue_3)
    var_3 = double_linked_list_0.pop()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Node'
    assert var_3.data is None
    assert var_3.next is None
    assert var_3.prev == {*()}

def test_case_504():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = queue_5.size()
    assert var_1 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    none_type_0 = None
    queue_10 = module_0.Queue(none_type_0)
    queue_11 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_11.peek()
    queue_12 = module_0.Queue(queue_11)
    assert f'{type(queue_12).__module__}.{type(queue_12).__qualname__}' == 'queue4.Queue'
    queue_13 = module_0.Queue(queue_11)
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_14 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_15 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_16 = module_0.Queue(bytes_0)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_3 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_17 = module_0.Queue(queue_16)
    var_4 = queue_15.peek()
    var_5 = queue_17.size()
    assert var_5 == 1
    var_6 = queue_17.dequeue()
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'queue4.Queue'
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_20 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    node_5 = module_0.Node()
    var_7 = queue_19.size()
    assert var_7 == 0
    queue_21 = module_0.Queue()
    queue_22 = module_0.Queue()
    queue_23 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_24 = module_0.Queue(bytes_1)
    var_8 = queue_24.dequeue()
    assert var_8 == 77
    queue_25 = module_0.Queue(var_5)

def test_case_505():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
    assert var_1.data is None
    assert var_1.next is None
    assert var_1.prev == {*()}
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = var_3.__repr__()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_5 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue(queue_5)
    node_4 = module_0.Node()
    var_6 = node_4.__repr__()
    assert var_6 == 'Value: None'
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_2)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_7 = double_linked_list_3.append(bytes_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_3)
    queue_9 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_8 = queue_9.size()
    assert var_8 == 0
    queue_10 = module_0.Queue()
    var_9 = queue_9.size()
    assert var_9 == 0
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_13 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_8 = module_0.Node()
    var_10 = queue_12.size()
    assert var_10 == 0
    var_11 = queue_11.size()
    assert var_11 == 0
    queue_14 = module_0.Queue()
    bytes_4 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_4)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_12 = double_linked_list_5.append(bytes_4)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    queue_16 = module_0.Queue(queue_15)
    var_13 = queue_14.peek()
    var_14 = queue_16.size()
    assert var_14 == 1
    var_15 = queue_16.dequeue()
    assert f'{type(var_15).__module__}.{type(var_15).__qualname__}' == 'queue4.Queue'
    var_16 = queue_2.peek()
    assert var_16 == 77

def test_case_506():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue(none_type_0)
    queue_4 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_4.size()
    assert var_1 == 0
    var_2 = queue_5.enqueue(none_type_0)

def test_case_507():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue(node_1)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    var_2 = queue_4.dequeue()
    assert var_2 == 77
    queue_5 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_0.append(queue_6)
    bool_0 = True
    double_linked_list_1 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    var_5 = node_0.__repr__()
    assert var_5 == 'Value: None'

def test_case_508():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = var_0.__repr__()
    assert var_1 == "'Value: None'"
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_1.size()
    assert var_2 == 0
    queue_2 = module_0.Queue()
    var_3 = queue_1.size()
    assert var_3 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_4 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_3.size()
    assert var_5 == 0
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    var_6 = queue_6.peek()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_9 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_7 = double_linked_list_4.append(node_6)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_11 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_8 = queue_11.peek()
    queue_12 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_9 = queue_12.size()
    assert var_9 == 0
    var_10 = queue_11.size()
    assert var_10 == 0
    queue_13 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_11 = queue_13.size()
    assert var_11 == 0
    queue_14 = module_0.Queue()
    set_9 = set()
    node_10 = module_0.Node(prev=set_9)
    queue_15 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_12 = double_linked_list_6.append(set_9)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    set_10 = set()
    node_11 = module_0.Node(prev=set_10)
    queue_18 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    var_13 = queue_20.size()
    assert var_13 == 0
    queue_21 = module_0.Queue()
    set_11 = set()
    node_12 = module_0.Node(prev=set_11)
    queue_22 = module_0.Queue()
    double_linked_list_9 = module_0.DoubleLinkedList()
    assert double_linked_list_9.head is None
    assert double_linked_list_9.tail is None
    queue_23 = module_0.Queue()
    queue_24 = module_0.Queue()
    double_linked_list_10 = module_0.DoubleLinkedList()
    assert double_linked_list_10.head is None
    assert double_linked_list_10.tail is None
    var_14 = double_linked_list_9.push(queue_22)
    assert f'{type(double_linked_list_9.tail).__module__}.{type(double_linked_list_9.tail).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\xce\xad\x15\xa3\x0c'
    node_13 = module_0.Node(prev=bytes_1)

def test_case_509():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    bool_0 = True
    double_linked_list_1 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = double_linked_list_3.append(node_4)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_3.shift()
    assert double_linked_list_3.tail is None
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Node'
    assert var_5.data is None
    assert var_5.next is None
    assert var_5.prev == {*()}
    queue_7 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_2)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_6 = double_linked_list_4.append(bytes_2)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue(queue_8)
    var_7 = queue_7.peek()
    var_8 = queue_9.size()
    assert var_8 == 1
    var_9 = queue_9.dequeue()
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'queue4.Queue'
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_10 = queue_4.size()
    assert var_10 == 0

def test_case_510():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    var_2 = queue_2.size()
    assert var_2 == 1
    node_0 = module_0.Node()
    var_3 = node_0.__repr__()
    assert var_3 == 'Value: None'
    queue_3 = module_0.Queue(node_0)
    queue_4 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_4 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_5 = var_4.__repr__()
    queue_6 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_6 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue(queue_7)
    var_7 = queue_6.peek()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_4 = module_0.Node()
    var_8 = queue_10.size()
    assert var_8 == 0
    queue_12 = module_0.Queue()
    node_5 = module_0.Node()
    var_9 = node_5.__repr__()
    assert var_9 == 'Value: None'
    double_linked_list_4 = module_0.DoubleLinkedList(var_1)
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None

def test_case_511():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    var_2 = queue_2.size()
    assert var_2 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = double_linked_list_3.append(node_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_7.size()
    assert var_5 == 0
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None

def test_case_512():
    none_type_0 = None
    node_0 = module_0.Node(prev=none_type_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    queue_3 = module_0.Queue(node_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'

def test_case_513():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue(queue_0)
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = queue_4.size()
    assert var_1 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_6.peek()
    node_2 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_3 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_4 = double_linked_list_3.push(var_1)

def test_case_514():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    var_1 = queue_3.size()
    assert var_1 == 0
    var_2 = queue_2.size()
    assert var_2 == 0
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_4 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_2.append(queue_6)
    queue_7 = module_0.Queue()

def test_case_515():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_0)
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = queue_3.size()
    assert var_2 == 0
    node_1 = module_0.Node()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    queue_5 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    var_4 = queue_5.size()
    assert var_4 == 0
    queue_7 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_5 = double_linked_list_4.append(node_4)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_6 = queue_7.size()
    assert var_6 == 0
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None

def test_case_516():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_4 = module_0.Node()
    var_2 = queue_5.size()
    assert var_2 == 0
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    queue_7 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_4 = double_linked_list_1.append(node_6)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_7 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    queue_10 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    var_5 = queue_10.size()
    assert var_5 == 0
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    var_6 = queue_11.peek()
    set_7 = set()
    node_10 = module_0.Node(prev=set_7)
    queue_13 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_7 = queue_15.size()
    assert var_7 == 0
    node_11 = module_0.Node()
    complex_0 = 2886.801252 + 1418.99508j
    queue_16 = module_0.Queue(complex_0)
    var_8 = queue_16.size()
    assert var_8 == 1
    set_8 = set()
    node_12 = module_0.Node(prev=set_8)
    none_type_1 = None
    queue_17 = module_0.Queue()
    var_9 = queue_17.enqueue(none_type_1)
    var_10 = queue_16.enqueue(set_8)
    complex_1 = 2886.801252 + 1418.99508j
    queue_18 = module_0.Queue(complex_1)
    var_11 = queue_18.size()
    assert var_11 == 1
    var_12 = queue_6.peek()

def test_case_517():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = var_2.__repr__()
    var_4 = queue_2.peek()

def test_case_518():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    none_type_0 = None
    var_0 = double_linked_list_0.append(none_type_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'

def test_case_519():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77
    queue_3 = module_0.Queue()
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    queue_6 = module_0.Queue(queue_4)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    queue_10 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_5 = queue_10.size()
    assert var_5 == 0
    node_4 = module_0.Node()
    var_6 = node_4.__repr__()
    assert var_6 == 'Value: None'
    queue_11 = module_0.Queue(node_4)
    var_7 = queue_11.enqueue(var_6)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_2)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_8 = double_linked_list_2.append(bytes_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_13 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_14 = module_0.Queue()

def test_case_520():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = queue_0.size()
    assert var_1 == 0
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_3 = module_0.Node()
    var_3 = queue_6.size()
    assert var_3 == 0
    var_4 = node_2.__repr__()
    assert var_4 == 'Value: None'
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_5 = queue_10.size()
    assert var_5 == 0
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue(double_linked_list_1)
    assert f'{type(queue_12).__module__}.{type(queue_12).__qualname__}' == 'queue4.Queue'

def test_case_521():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_1.peek()
    node_1 = module_0.Node()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_2 = var_1.__repr__()
    queue_4 = module_0.Queue()
    bool_0 = True
    double_linked_list_1 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'
    queue_5 = module_0.Queue(node_2)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    var_4 = queue_6.dequeue()
    assert var_4 == 77
    queue_7 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_2)
    queue_9 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_5 = queue_9.size()
    assert var_5 == 0
    queue_10 = module_0.Queue()
    var_6 = queue_9.size()
    assert var_6 == 0
    queue_11 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_3)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_7 = double_linked_list_2.append(bytes_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    var_8 = node_5.__repr__()
    assert var_8 == 'Value: None'
    node_6 = module_0.Node()
    var_9 = queue_11.peek()

def test_case_522():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    queue_6 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_2 = queue_6.size()
    assert var_2 == 0
    queue_7 = module_0.Queue()
    var_3 = queue_6.size()
    assert var_3 == 0
    queue_8 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_4 = queue_8.size()
    assert var_4 == 0
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_5 = queue_8.size()
    assert var_5 == 0
    queue_10 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_6 = queue_10.peek()
    queue_11 = module_0.Queue(queue_10)
    queue_12 = module_0.Queue(queue_10)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    none_type_1 = None
    queue_15 = module_0.Queue()
    var_7 = queue_15.enqueue(none_type_1)
    node_7 = module_0.Node()

def test_case_523():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.push(var_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    queue_7 = module_0.Queue(queue_5)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_0)
    var_4 = queue_10.dequeue()
    assert var_4 == 77
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_12 = module_0.Queue()
    var_5 = queue_12.peek()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_15 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_6 = queue_17.size()
    assert var_6 == 0
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_7 = queue_19.peek()
    node_7 = module_0.Node()
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    var_8 = var_7.__repr__()
    queue_22 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_9 = queue_22.size()
    assert var_9 == 0
    queue_23 = module_0.Queue()
    var_10 = queue_9.peek()

def test_case_524():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_1 = queue_1.enqueue(set_0)
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_3.peek()
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    node_4 = module_0.Node()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None

def test_case_525():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_1 = queue_1.enqueue(set_0)
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    var_2 = queue_4.peek()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_10 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_4 = module_0.Node()
    var_4 = queue_9.size()
    assert var_4 == 0
    var_5 = queue_8.size()
    assert var_5 == 0
    double_linked_list_2 = module_0.DoubleLinkedList(double_linked_list_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'

def test_case_526():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_2 = queue_3.size()
    assert var_2 == 0

def test_case_527():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_4.peek()
    node_2 = module_0.Node()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_2.append(node_4)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_8 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_3 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    assert f'{type(queue_9).__module__}.{type(queue_9).__qualname__}' == 'queue4.Queue'
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_4 = var_3.__repr__()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_0)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_5 = double_linked_list_4.append(bytes_0)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    node_9 = module_0.Node()
    var_6 = node_9.__repr__()
    assert var_6 == 'Value: None'
    node_10 = module_0.Node()
    var_7 = var_4.__repr__()

def test_case_528():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    queue_2 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = queue_2.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList(var_1)
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_4 = module_0.Node()
    var_2 = node_4.__repr__()
    assert var_2 == 'Value: None'
    queue_4 = module_0.Queue(node_4)
    var_3 = queue_4.enqueue(var_2)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_3.append(queue_5)
    queue_6 = module_0.Queue()

def test_case_529():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = var_0.__repr__()
    assert var_1 == "'Value: None'"
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_3 = module_0.Node()
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_3 = double_linked_list_2.append(node_5)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_6.enqueue(queue_5)
    queue_7 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_5 = queue_7.size()
    assert var_5 == 0
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_6 = queue_7.size()
    assert var_6 == 0
    bytes_0 = b'*\xf6[\x84>\x163d\x07\xfc&\xf2n\x0f\xa1f\xcc\xae'
    node_7 = module_0.Node(prev=bytes_0)

def test_case_530():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = queue_0.size()
    assert var_1 == 11

def test_case_531():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_1 = queue_0.enqueue(var_0)
    complex_0 = 2886.801252 + 1418.99508j
    queue_1 = module_0.Queue(complex_0)
    var_2 = queue_1.size()
    assert var_2 == 1
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue(queue_2)
    str_0 = 'q3_GN7v/g(<wlJqZ_'
    var_4 = queue_0.enqueue(str_0)

def test_case_532():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = queue_0.size()
    assert var_1 == 11
    queue_1 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue(queue_2)
    var_3 = queue_1.peek()
    var_4 = queue_3.size()
    assert var_4 == 1
    queue_4 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_5 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    queue_6 = module_0.Queue(queue_4)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_2)
    var_6 = queue_7.dequeue()
    assert var_6 == 77
    queue_8 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_7 = queue_8.peek()
    queue_9 = module_0.Queue()

def test_case_533():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_1 = double_linked_list_1.append(node_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'queue4.Node'
    assert var_2.data is None
    assert var_2.next is None
    assert var_2.prev == {*()}
    queue_8 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_3 = double_linked_list_2.append(node_6)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_9.enqueue(queue_8)
    queue_10 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_5 = queue_10.peek()
    queue_11 = module_0.Queue(queue_10)
    assert f'{type(queue_11).__module__}.{type(queue_11).__qualname__}' == 'queue4.Queue'
    queue_12 = module_0.Queue(queue_10)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_6 = queue_10.size()
    assert var_6 == 0
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    queue_15 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_16 = module_0.Queue()
    var_7 = queue_16.peek()
    var_8 = double_linked_list_1.push(node_1)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'

def test_case_534():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = queue_1.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_3.size()
    assert var_4 == 0
    queue_5 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_5 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    queue_7 = module_0.Queue(queue_5)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_6 = queue_5.size()
    assert var_6 == 0
    queue_10 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_7 = queue_10.peek()
    queue_11 = module_0.Queue(queue_10)
    var_8 = queue_11.enqueue(set_4)
    queue_12 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_9 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_14 = module_0.Queue(queue_13)
    var_10 = queue_12.peek()
    queue_15 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_11 = queue_15.size()
    assert var_11 == 0
    queue_16 = module_0.Queue()

def test_case_535():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue(queue_4)
    var_2 = queue_3.peek()
    var_3 = queue_5.size()
    assert var_3 == 1
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = double_linked_list_2.append(set_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None

def test_case_536():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_1.peek()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None

def test_case_537():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77
    var_3 = queue_2.peek()

def test_case_538():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_1.peek()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = var_3.__repr__()
    none_type_1 = None
    node_4 = module_0.Node(prev=none_type_1)
    queue_5 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_5 = double_linked_list_0.append(node_6)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_6 = queue_7.peek()
    queue_8 = module_0.Queue(queue_7)
    queue_9 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    queue_10 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_7 = double_linked_list_1.append(node_9)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_8 = queue_9.size()
    assert var_8 == 0
    set_9 = set()
    node_10 = module_0.Node(prev=set_9)
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_12 = module_0.Queue()
    var_9 = queue_12.peek()
    node_11 = module_0.Node()
    var_10 = node_11.__repr__()
    assert var_10 == 'Value: None'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_11 = var_10.__repr__()
    assert var_11 == "'Value: None'"
    var_12 = queue_7.size()
    assert var_12 == 0

def test_case_539():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_5.peek()
    node_2 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_4 = queue_7.peek()
    queue_8 = module_0.Queue(queue_7)
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_5 = var_4.__repr__()
    queue_9 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_6 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_13 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_7 = module_0.Node()
    var_7 = queue_12.size()
    assert var_7 == 0
    var_8 = queue_11.size()
    assert var_8 == 0
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_14 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_9 = queue_16.size()
    assert var_9 == 0
    queue_17 = module_0.Queue()
    var_10 = var_8.__repr__()
    assert var_10 == '0'

def test_case_540():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_7 = module_0.Queue(complex_0)
    var_2 = queue_7.size()
    assert var_2 == 1
    queue_8 = module_0.Queue(queue_7)

def test_case_541():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    node_2 = module_0.Node()
    node_3 = module_0.Node()

def test_case_542():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = var_0.__repr__()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_0.push(queue_3)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    queue_6 = module_0.Queue(node_3)
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = queue_9.size()
    assert var_4 == 0
    queue_10 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    none_type_0 = None
    queue_14 = module_0.Queue()
    var_5 = queue_14.enqueue(none_type_0)
    queue_15 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_6 = queue_15.peek()
    node_8 = module_0.Node()
    var_7 = var_4.__repr__()
    assert var_7 == '0'

def test_case_543():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_1 = double_linked_list_3.append(set_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    queue_8 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_8.size()
    assert var_2 == 0
    queue_9 = module_0.Queue()
    var_3 = queue_8.size()
    assert var_3 == 0
    var_4 = var_3.__repr__()
    assert var_4 == '0'
    queue_10 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_5 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_12 = module_0.Queue(queue_11)
    var_6 = queue_10.peek()
    var_7 = queue_12.size()
    assert var_7 == 1
    var_8 = queue_12.dequeue()
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'queue4.Queue'
    queue_13 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_14 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_9 = double_linked_list_5.append(node_4)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_15 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_18 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_10 = double_linked_list_7.append(node_8)
    assert f'{type(double_linked_list_7.head).__module__}.{type(double_linked_list_7.head).__qualname__}' == 'queue4.Node'
    var_11 = double_linked_list_7.shift()
    assert double_linked_list_7.tail is None
    assert f'{type(var_11).__module__}.{type(var_11).__qualname__}' == 'queue4.Node'
    assert var_11.data is None
    assert var_11.next is None
    assert var_11.prev == {*()}
    node_9 = module_0.Node(prev=queue_8)

def test_case_544():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_2 = module_0.Queue()
    node_3 = module_0.Node()
    var_1 = node_3.__repr__()
    assert var_1 == 'Value: None'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = var_1.__repr__()
    assert var_2 == "'Value: None'"
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_3 = module_0.Queue()
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    var_3 = queue_3.peek()
    node_5 = module_0.Node()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_4 = var_3.__repr__()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_6 = module_0.Node(prev=set_2)
    var_5 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    var_6 = queue_7.enqueue(set_2)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_7 = queue_9.peek()

def test_case_545():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_1 = double_linked_list_3.append(set_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_3 = var_2.__repr__()
    assert var_3 == "'Value: None'"
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_4 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    assert f'{type(queue_9).__module__}.{type(queue_9).__qualname__}' == 'queue4.Queue'
    queue_10 = module_0.Queue(queue_8)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_0)
    queue_12 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_5 = queue_12.size()
    assert var_5 == 0
    queue_13 = module_0.Queue()
    var_6 = queue_12.size()
    assert var_6 == 0
    var_7 = queue_11.peek()
    assert var_7 == 77
    var_8 = queue_3.size()
    assert var_8 == 0

def test_case_546():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_4.size()
    assert var_0 == 0
    queue_5 = module_0.Queue()
    var_1 = queue_4.size()
    assert var_1 == 0
    var_2 = var_1.__repr__()
    assert var_2 == '0'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = queue_1.enqueue(node_0)

def test_case_547():
    node_0 = module_0.Node()
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.size()
    assert var_2 == 0
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(set_0)

def test_case_548():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_1.enqueue(queue_0)
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = queue_6.size()
    assert var_3 == 0
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_10 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_4 = queue_10.peek()
    queue_11 = module_0.Queue(queue_10)
    queue_12 = module_0.Queue(queue_10)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_15 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_5 = queue_17.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_18 = module_0.Queue(bytes_0)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    double_linked_list_6 = module_0.DoubleLinkedList(var_5)
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_6 = double_linked_list_0.push(queue_14)

def test_case_549():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    node_2 = module_0.Node(set_0)

def test_case_550():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_1 = module_0.Queue(node_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    var_1 = queue_2.dequeue()
    assert var_1 == 77
    queue_3 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    queue_8 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_3 = queue_8.size()
    assert var_3 == 0
    queue_9 = module_0.Queue()
    var_4 = queue_8.size()
    assert var_4 == 0
    var_5 = var_4.__repr__()
    assert var_5 == '0'
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_6 = queue_12.size()
    assert var_6 == 0
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_7 = queue_14.peek()
    node_6 = module_0.Node()
    node_7 = module_0.Node(set_3)
    none_type_0 = None
    node_8 = module_0.Node(prev=none_type_0)
    set_4 = set()
    node_9 = module_0.Node(prev=set_4)
    queue_15 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_16 = module_0.Queue()
    var_8 = queue_16.peek()
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_9 = node_1.__repr__()
    assert var_9 == 'Value: None'

def test_case_551():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue(queue_4)
    var_3 = queue_3.peek()
    var_4 = queue_5.size()
    assert var_4 == 1
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_2)
    var_5 = queue_6.dequeue()
    assert var_5 == 77
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_3)
    queue_8 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_6 = queue_8.size()
    assert var_6 == 0
    queue_9 = module_0.Queue()
    var_7 = queue_8.size()
    assert var_7 == 0
    var_8 = queue_7.peek()
    assert var_8 == 77
    queue_10 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_9 = queue_10.size()
    assert var_9 == 0
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_10 = queue_12.peek()
    node_4 = module_0.Node()
    node_5 = module_0.Node(set_3)
    queue_13 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_11 = queue_13.size()
    assert var_11 == 0
    var_12 = queue_5.dequeue()
    assert f'{type(var_12).__module__}.{type(var_12).__qualname__}' == 'queue4.Queue'
    var_13 = var_12.__repr__()
    var_14 = var_13.__repr__()

def test_case_552():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    var_1 = var_0.__repr__()
    assert var_1 == '1'

def test_case_553():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = node_2.__repr__()
    assert var_1 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue(queue_2)
    none_type_0 = None
    node_3 = module_0.Node(prev=none_type_0)
    queue_4 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_3 = double_linked_list_2.append(node_5)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_4 = queue_6.size()
    assert var_4 == 0
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_5 = double_linked_list_2.shift()
    assert double_linked_list_2.tail is None
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Node'
    assert var_5.data is None
    assert var_5.next is None
    assert var_5.prev == {*()}

def test_case_554():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_1 = queue_1.enqueue(set_0)
    none_type_0 = None
    node_1 = module_0.Node(prev=none_type_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_3 = module_0.Node()
    var_2 = queue_3.size()
    assert var_2 == 0
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'
    var_4 = queue_3.peek()

def test_case_555():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    node_2 = module_0.Node()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_2 = var_1.__repr__()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = queue_5.peek()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_7 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_11 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_7 = module_0.Node()
    var_5 = queue_10.size()
    assert var_5 == 0
    var_6 = node_6.__repr__()
    assert var_6 == 'Value: None'
    queue_12 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_7 = queue_12.peek()
    queue_13 = module_0.Queue(queue_12)
    assert f'{type(queue_13).__module__}.{type(queue_13).__qualname__}' == 'queue4.Queue'
    queue_14 = module_0.Queue(queue_12)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_0)
    queue_16 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_8 = queue_16.size()
    assert var_8 == 0
    queue_17 = module_0.Queue()
    var_9 = queue_16.size()
    assert var_9 == 0
    var_10 = queue_15.peek()
    assert var_10 == 77
    none_type_1 = None
    node_10 = module_0.Node(prev=none_type_1)
    node_11 = module_0.Node(next_node=var_3)
    assert node_11.next == 0

def test_case_556():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    none_type_0 = None
    var_1 = queue_1.enqueue(none_type_0)

def test_case_557():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    var_2 = queue_3.size()
    assert var_2 == 0

def test_case_558():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_3 = queue_8.size()
    assert var_3 == 0
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    node_5 = module_0.Node()
    var_4 = node_5.__repr__()
    assert var_4 == 'Value: None'
    queue_9 = module_0.Queue(node_5)
    assert f'{type(queue_9).__module__}.{type(queue_9).__qualname__}' == 'queue4.Queue'
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_12 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_5 = queue_12.peek()
    queue_13 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_6 = queue_13.size()
    assert var_6 == 0
    var_7 = queue_12.size()
    assert var_7 == 0
    node_8 = module_0.Node(set_0, node_5, var_6)
    assert node_8.prev == 0

def test_case_559():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    var_2 = queue_2.size()
    assert var_2 == 0
    var_3 = var_2.__repr__()
    assert var_3 == '0'
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = double_linked_list_0.append(node_3)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)

def test_case_560():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_2 = module_0.Node()
    var_1 = queue_3.size()
    assert var_1 == 0
    var_2 = queue_2.size()
    assert var_2 == 0
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_0)
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_7 = module_0.Queue()
    var_4 = queue_7.peek()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_6 = module_0.Node()
    var_5 = queue_9.size()
    assert var_5 == 0
    var_6 = node_5.__repr__()
    assert var_6 == 'Value: None'
    queue_11 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_7 = queue_11.peek()
    queue_12 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_8 = queue_12.size()
    assert var_8 == 0
    queue_13 = module_0.Queue()
    none_type_1 = None
    var_9 = queue_13.enqueue(none_type_1)
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    queue_14 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_15 = module_0.Queue()
    var_10 = queue_15.peek()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    complex_0 = 2886.801252 + 1418.99508j
    queue_18 = module_0.Queue(complex_0)
    var_11 = queue_18.size()
    assert var_11 == 1
    queue_19 = module_0.Queue()
    set_8 = set()
    node_10 = module_0.Node(prev=set_8)
    var_12 = queue_19.peek()
    node_11 = module_0.Node()
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    var_13 = var_12.__repr__()
    node_12 = module_0.Node()

def test_case_561():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = var_1.__repr__()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    queue_5 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    queue_7 = module_0.Queue(queue_5)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_5 = queue_5.size()
    assert var_5 == 0
    queue_10 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_6 = double_linked_list_2.append(node_6)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_7 = double_linked_list_2.shift()
    assert double_linked_list_2.tail is None
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'queue4.Node'
    assert var_7.data is None
    assert var_7.next is None
    assert var_7.prev == {*()}
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    queue_13 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_8 = queue_13.peek()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_14 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_9 = queue_14.peek()
    queue_15 = module_0.Queue(queue_14)
    var_10 = queue_15.enqueue(set_8)
    queue_16 = module_0.Queue()
    set_9 = set()
    node_10 = module_0.Node(prev=set_9)
    var_11 = queue_16.peek()
    queue_17 = module_0.Queue(queue_16)
    var_12 = double_linked_list_2.append(node_9)

def test_case_562():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = queue_5.size()
    assert var_2 == 0
    node_2 = module_0.Node()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_3 = queue_8.size()
    assert var_3 == 0
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = queue_10.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_1)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    double_linked_list_6 = module_0.DoubleLinkedList(var_4)
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_12 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_13 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_5 = double_linked_list_7.append(node_6)
    assert f'{type(double_linked_list_7.head).__module__}.{type(double_linked_list_7.head).__qualname__}' == 'queue4.Node'
    var_6 = queue_12.size()
    assert var_6 == 0
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_2)
    queue_15 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_7 = queue_15.size()
    assert var_7 == 0
    queue_16 = module_0.Queue()
    var_8 = queue_15.size()
    assert var_8 == 0
    var_9 = var_8.__repr__()
    assert var_9 == '0'
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_17 = module_0.Queue(bytes_3)
    queue_18 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_10 = queue_18.size()
    assert var_10 == 0
    queue_19 = module_0.Queue()
    var_11 = queue_18.size()
    assert var_11 == 0
    var_12 = var_7.__repr__()
    assert var_12 == '0'

def test_case_563():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_0.size()
    assert var_1 == 0
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_6 = module_0.Queue()
    var_2 = queue_6.peek()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_9 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_11 = module_0.Queue(queue_10)
    var_4 = queue_9.peek()
    var_5 = queue_11.size()
    assert var_5 == 1
    var_6 = queue_11.dequeue()
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'queue4.Queue'
    double_linked_list_3 = module_0.DoubleLinkedList()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_12 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_7 = queue_12.size()
    assert var_7 == 0
    queue_13 = module_0.Queue()
    var_8 = queue_13.peek()
    queue_14 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_9 = queue_14.size()
    assert var_9 == 0
    queue_15 = module_0.Queue()
    none_type_0 = None
    var_10 = queue_15.enqueue(none_type_0)
    node_5 = module_0.Node()
    var_11 = node_5.__repr__()
    assert var_11 == 'Value: None'
    queue_16 = module_0.Queue(node_5)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_19 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    node_7 = module_0.Node()
    var_12 = queue_18.size()
    assert var_12 == 0
    var_13 = queue_17.size()
    assert var_13 == 0
    queue_20 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_14 = queue_20.peek()
    queue_21 = module_0.Queue(queue_20)
    node_9 = module_0.Node(double_linked_list_1)

def test_case_564():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_3.peek()
    node_2 = module_0.Node()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_1 = var_0.__repr__()
    node_3 = module_0.Node()
    var_2 = node_3.__repr__()
    assert var_2 == 'Value: None'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = var_2.__repr__()
    assert var_3 == "'Value: None'"
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_5 = module_0.Node()
    var_4 = queue_7.size()
    assert var_4 == 0
    var_5 = queue_6.size()
    assert var_5 == 0
    node_6 = module_0.Node(next_node=var_2, prev=queue_2)
    assert node_6.next == 'Value: None'

def test_case_565():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    var_1 = var_0.__repr__()
    assert var_1 == '1'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_2 = queue_1.size()
    assert var_2 == 0
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = queue_1.size()
    assert var_3 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_4 = queue_3.peek()
    node_2 = module_0.Node()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_5 = double_linked_list_1.push(var_4)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    var_6 = queue_4.dequeue()
    assert var_6 == 77
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_7 = queue_5.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    double_linked_list_3 = module_0.DoubleLinkedList(var_7)
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_7 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_8 = queue_7.size()
    assert var_8 == 0
    queue_8 = module_0.Queue()
    var_9 = queue_8.peek()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_10 = double_linked_list_5.append(set_4)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    queue_12 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_13 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_11 = double_linked_list_6.append(node_7)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    var_12 = double_linked_list_6.shift()
    assert double_linked_list_6.tail is None
    assert f'{type(var_12).__module__}.{type(var_12).__qualname__}' == 'queue4.Node'
    assert var_12.data is None
    assert var_12.next is None
    assert var_12.prev == {*()}
    var_13 = var_2.__repr__()
    assert var_13 == '0'

def test_case_566():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'queue4.Node'
    assert var_2.data is None
    assert var_2.next is None
    assert var_2.prev == {*()}
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    queue_7 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_3 = double_linked_list_3.append(node_7)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    var_4 = queue_9.dequeue()
    assert var_4 == 77
    var_5 = queue_8.size()
    assert var_5 == 0

def test_case_567():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = double_linked_list_1.append(node_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    node_3 = module_0.Node()
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    queue_3 = module_0.Queue(node_3)
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_5 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_4 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    queue_7 = module_0.Queue(queue_5)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_5 = queue_5.size()
    assert var_5 == 0
    queue_10 = module_0.Queue(queue_9)

def test_case_568():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_0.push(queue_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_1 = queue_5.size()
    assert var_1 == 0
    node_2 = module_0.Node()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_7 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_2 = queue_7.peek()
    queue_8 = module_0.Queue(queue_7)
    var_3 = queue_8.enqueue(set_3)
    node_5 = module_0.Node()
    node_6 = module_0.Node()
    var_4 = node_6.__repr__()
    assert var_4 == 'Value: None'
    queue_9 = module_0.Queue(node_6)
    var_5 = queue_9.enqueue(var_4)
    none_type_0 = None
    node_7 = module_0.Node(prev=none_type_0)
    queue_10 = module_0.Queue()
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    var_6 = queue_10.size()
    assert var_6 == 0
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    set_5 = set()
    node_9 = module_0.Node(prev=set_5)
    var_7 = queue_13.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_0)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    double_linked_list_6 = module_0.DoubleLinkedList(var_7)
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_8 = node_2.__repr__()
    assert var_8 == 'Value: None'

def test_case_569():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = var_0.__repr__()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    var_2 = queue_3.peek()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = queue_6.size()
    assert var_3 == 0
    node_4 = module_0.Node()
    queue_7 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_4 = queue_7.size()
    assert var_4 == 0
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = queue_7.size()
    assert var_5 == 0
    node_6 = module_0.Node()
    var_6 = node_6.__repr__()
    assert var_6 == 'Value: None'
    queue_9 = module_0.Queue(node_6)
    var_7 = queue_9.enqueue(var_6)
    queue_10 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_0)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_8 = double_linked_list_4.append(bytes_0)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_12 = module_0.Queue(queue_11)
    var_9 = queue_10.peek()
    float_0 = -3983.957
    var_10 = double_linked_list_1.append(float_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'

def test_case_570():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    var_1 = queue_1.dequeue()
    assert var_1 == 77
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_3.size()
    assert var_3 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_4 = queue_6.size()
    assert var_4 == 0
    queue_7 = module_0.Queue()
    var_5 = queue_6.size()
    assert var_5 == 0
    var_6 = var_5.__repr__()
    assert var_6 == '0'
    queue_8 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_7 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    queue_10 = module_0.Queue(queue_8)
    queue_11 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_8 = queue_11.peek()
    queue_12 = module_0.Queue(queue_11)
    queue_13 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_2)
    queue_15 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_9 = queue_15.size()
    assert var_9 == 0
    queue_16 = module_0.Queue()
    var_10 = queue_15.size()
    assert var_10 == 0
    var_11 = queue_14.peek()
    assert var_11 == 77
    queue_17 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_18 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_12 = double_linked_list_1.append(node_8)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_9 = module_0.Node()
    set_8 = set()
    node_10 = module_0.Node(prev=set_8)
    queue_19 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_13 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_13).__module__}.{type(var_13).__qualname__}' == 'queue4.Node'
    assert var_13.data is None
    assert var_13.next is None
    assert var_13.prev == {*()}

def test_case_571():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_1.peek()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_1 = queue_5.peek()
    node_4 = module_0.Node()
    node_5 = module_0.Node(set_3)
    queue_6 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_2 = queue_6.size()
    assert var_2 == 0
    queue_7 = module_0.Queue()
    var_3 = queue_7.peek()
    queue_8 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_4 = queue_8.size()
    assert var_4 == 0
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_5 = queue_9.peek()
    queue_11 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_6 = queue_11.peek()
    queue_12 = module_0.Queue(queue_11)
    queue_13 = module_0.Queue(queue_11)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    set_8 = set()
    node_10 = module_0.Node(prev=set_8)
    queue_16 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_19 = module_0.Queue()
    set_9 = set()
    node_11 = module_0.Node(prev=set_9)
    queue_20 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_10 = set()
    node_12 = module_0.Node(prev=set_10)
    var_7 = double_linked_list_4.append(node_12)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    node_13 = module_0.Node()
    node_14 = module_0.Node(node_12, prev=queue_14)

def test_case_572():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    var_1 = var_0.__repr__()
    assert var_1 == '1'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_2 = queue_2.size()
    assert var_2 == 0
    var_3 = node_0.__repr__()
    assert var_3 == 'Value: None'
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_4 = queue_4.peek()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_5 = queue_5.size()
    assert var_5 == 0
    var_6 = queue_4.size()
    assert var_6 == 0
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_7 = module_0.Queue()
    var_7 = queue_7.peek()
    queue_8 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_8 = queue_8.peek()
    node_6 = module_0.Node()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_9 = var_8.__repr__()
    queue_11 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_10 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_13 = module_0.Queue(queue_12)
    var_11 = queue_11.peek()
    var_12 = queue_13.size()
    assert var_12 == 1
    var_13 = queue_13.dequeue()
    assert f'{type(var_13).__module__}.{type(var_13).__qualname__}' == 'queue4.Queue'
    queue_14 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_14 = queue_14.size()
    assert var_14 == 0
    queue_15 = module_0.Queue()
    var_15 = double_linked_list_2.pop()
    assert var_15 == b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_573():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue(none_type_0)
    queue_4 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_5.enqueue(queue_4)
    queue_6 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue(queue_7)
    var_3 = queue_6.peek()
    queue_9 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = double_linked_list_2.append(node_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_6 = module_0.Node()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_14 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_8 = module_0.Node()
    var_5 = queue_13.size()
    assert var_5 == 0
    var_6 = node_7.__repr__()
    assert var_6 == 'Value: None'
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None

def test_case_574():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    var_1 = var_0.__repr__()
    assert var_1 == '1'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    var_2 = queue_2.peek()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_6.size()
    assert var_3 == 0
    queue_7 = module_0.Queue()
    var_4 = queue_6.size()
    assert var_4 == 0
    var_5 = var_4.__repr__()
    assert var_5 == '0'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue(queue_9)
    var_7 = queue_8.peek()
    var_8 = queue_10.size()
    assert var_8 == 1
    queue_11 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_9 = queue_11.peek()
    node_4 = module_0.Node()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_10 = var_9.__repr__()
    node_5 = module_0.Node()

def test_case_575():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = queue_0.size()
    assert var_1 == 11
    queue_1 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = queue_2.size()
    assert var_3 == 0
    var_4 = queue_1.size()
    assert var_4 == 0
    queue_3 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_5 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    queue_5 = module_0.Queue(queue_3)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_9 = module_0.Queue()
    var_6 = queue_9.peek()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_12 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_13 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_7 = double_linked_list_3.append(node_6)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_8 = queue_12.size()
    assert var_8 == 0
    var_9 = node_5.__repr__()
    assert var_9 == 'Value: None'

def test_case_576():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_1 = queue_0.enqueue(var_0)
    none_type_0 = None
    node_1 = module_0.Node(prev=none_type_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_3 = module_0.Node()
    var_2 = queue_2.size()
    assert var_2 == 0
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'
    queue_4 = module_0.Queue()
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    var_4 = queue_4.peek()
    node_5 = module_0.Node()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_5 = double_linked_list_1.push(var_4)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    set_2 = set()
    node_6 = module_0.Node(prev=set_2)
    var_6 = queue_5.size()
    assert var_6 == 0
    queue_6 = module_0.Queue()
    none_type_1 = None
    var_7 = queue_6.enqueue(none_type_1)
    set_3 = set()
    node_7 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_8 = double_linked_list_2.push(queue_7)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    var_9 = node_5.__repr__()
    assert var_9 == 'Value: None'

def test_case_577():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    var_1 = queue_2.size()
    assert var_1 == 0
    var_2 = queue_1.peek()
    assert var_2 == 77
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_3 = module_0.Node()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_5 = module_0.Node()
    var_3 = queue_6.size()
    assert var_3 == 0
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    queue_8 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_5 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    var_6 = queue_9.enqueue(set_4)
    queue_10 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_7 = queue_10.size()
    assert var_7 == 0
    queue_11 = module_0.Queue()
    none_type_0 = None
    var_8 = queue_11.enqueue(none_type_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_9 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_13 = module_0.Queue(queue_12)
    queue_14 = module_0.Queue()

def test_case_578():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_5.peek()
    node_4 = module_0.Node()
    node_5 = module_0.Node(set_2)
    var_3 = double_linked_list_0.append(node_4)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'

def test_case_579():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_1.push(set_0)

def test_case_580():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77
    var_3 = queue_0.peek()
    assert var_3 == 77

def test_case_581():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_0 = queue_1.peek()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = queue_1.enqueue(queue_1)

def test_case_582():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_0.size()
    assert var_1 == 0
    node_1 = module_0.Node()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_0.push(queue_5)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    bool_0 = True
    double_linked_list_2 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_3 = queue_10.size()
    assert var_3 == 0
    node_4 = module_0.Node()
    none_type_0 = None
    node_5 = module_0.Node(prev=none_type_0)
    node_6 = module_0.Node()
    var_4 = node_6.__repr__()
    assert var_4 == 'Value: None'
    queue_11 = module_0.Queue(node_6)
    var_5 = queue_11.peek()
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Node'
    assert var_5.data is None
    assert var_5.next is None
    assert var_5.prev is None

def test_case_583():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    var_2 = queue_0.enqueue(set_0)
    node_1 = module_0.Node()
    var_3 = node_1.__repr__()
    assert var_3 == 'Value: None'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_4 = var_3.__repr__()
    assert var_4 == "'Value: None'"
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_1 = None
    queue_5 = module_0.Queue(none_type_1)
    var_5 = var_0.__repr__()
    assert var_5 == '1'

def test_case_584():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_2 = module_0.Node()
    var_1 = queue_3.size()
    assert var_1 == 0
    var_2 = queue_2.size()
    assert var_2 == 0
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    node_4 = module_0.Node()
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    queue_6 = module_0.Queue(node_4)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    var_5 = queue_6.enqueue(var_4)
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    queue_8 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_6 = queue_8.peek()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_7 = queue_11.size()
    assert var_7 == 0
    node_8 = module_0.Node()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    queue_14 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    node_10 = module_0.Node()
    var_8 = queue_13.size()
    assert var_8 == 0
    var_9 = node_9.__repr__()
    assert var_9 == 'Value: None'
    set_7 = set()
    node_11 = module_0.Node(prev=set_7)
    queue_15 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    var_10 = double_linked_list_8.append(set_7)
    assert f'{type(double_linked_list_8.head).__module__}.{type(double_linked_list_8.head).__qualname__}' == 'queue4.Node'
    double_linked_list_9 = module_0.DoubleLinkedList()
    assert double_linked_list_9.head is None
    assert double_linked_list_9.tail is None

def test_case_585():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    queue_5 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_2)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue(queue_6)
    var_3 = queue_5.peek()
    var_4 = queue_7.size()
    assert var_4 == 1
    var_5 = queue_7.dequeue()
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    queue_9 = module_0.Queue()
    var_6 = queue_9.peek()
    double_linked_list_2 = module_0.DoubleLinkedList(var_6)

def test_case_586():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_2.size()
    assert var_1 == 0
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    complex_0 = 2886.801252 + 1418.99508j
    queue_5 = module_0.Queue(complex_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    var_3 = queue_5.size()
    assert var_3 == 1
    var_4 = queue_4.peek()

def test_case_587():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'

def test_case_588():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    complex_0 = 2886.801252 + 1418.99508j
    queue_3 = module_0.Queue(complex_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    var_0 = queue_3.size()
    assert var_0 == 1
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_1 = queue_4.enqueue(none_type_0)
    var_2 = queue_3.enqueue(set_1)
    queue_5 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue(queue_6)
    var_4 = queue_5.peek()
    var_5 = queue_7.size()
    assert var_5 == 1
    queue_8 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_6 = double_linked_list_3.append(node_3)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_7 = queue_9.enqueue(queue_8)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_8 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_11 = module_0.Queue(queue_10)
    queue_12 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_13 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_9 = double_linked_list_5.append(node_5)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_10 = double_linked_list_5.shift()
    assert double_linked_list_5.tail is None
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'queue4.Node'
    assert var_10.data is None
    assert var_10.next is None
    assert var_10.prev == {*()}
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_14 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_15 = module_0.Queue()
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    queue_16 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    queue_17 = module_0.Queue()
    var_11 = queue_17.peek()
    queue_18 = module_0.Queue()
    set_8 = set()
    node_8 = module_0.Node(prev=set_8)
    var_12 = queue_18.peek()
    queue_19 = module_0.Queue(queue_18)
    queue_20 = module_0.Queue(queue_18)
    queue_21 = module_0.Queue()
    queue_22 = module_0.Queue()
    var_13 = queue_18.size()
    assert var_13 == 0
    var_14 = queue_5.enqueue(double_linked_list_1)

def test_case_589():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_2 = queue_2.size()
    assert var_2 == 11
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    queue_4 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_4.peek()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    queue_7 = module_0.Queue(queue_5)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_2)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_5 = double_linked_list_2.append(bytes_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_3)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_6 = double_linked_list_3.append(bytes_3)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    bytes_4 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_4)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_7 = double_linked_list_4.append(bytes_4)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_13 = module_0.Queue(queue_12)
    queue_14 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_8 = queue_14.peek()
    bytes_5 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_5)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    double_linked_list_6 = module_0.DoubleLinkedList(var_8)
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    complex_0 = 2886.801252 + 1418.99508j
    queue_16 = module_0.Queue(complex_0)
    var_9 = queue_16.size()
    assert var_9 == 1
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    none_type_0 = None
    queue_17 = module_0.Queue()
    var_10 = queue_17.enqueue(none_type_0)
    var_11 = queue_16.enqueue(set_5)
    queue_18 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_12 = queue_18.peek()
    queue_19 = module_0.Queue(queue_18)
    queue_20 = module_0.Queue(queue_18)
    list_0 = [bytes_2]
    var_13 = double_linked_list_6.push(list_0)
    assert f'{type(double_linked_list_6.tail).__module__}.{type(double_linked_list_6.tail).__qualname__}' == 'queue4.Node'

def test_case_590():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_0.size()
    assert var_1 == 0
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    queue_8 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_8.peek()
    node_3 = module_0.Node()
    node_4 = module_0.Node(set_2)
    queue_9 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_11 = module_0.Queue(queue_10)
    var_5 = queue_9.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    queue_13 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_6 = queue_13.size()
    assert var_6 == 0
    queue_14 = module_0.Queue()
    var_7 = queue_13.size()
    assert var_7 == 0
    var_8 = var_7.__repr__()
    assert var_8 == '0'
    var_9 = queue_0.size()
    assert var_9 == 0

def test_case_591():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_1 = queue_1.enqueue(set_0)
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_2.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_2)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_2 = module_0.Node()

def test_case_592():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    node_1 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    queue_3 = module_0.Queue()
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    var_3 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    queue_5 = module_0.Queue(queue_3)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_4 = queue_3.size()
    assert var_4 == 0
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_4 = module_0.Node()
    var_5 = queue_9.size()
    assert var_5 == 0
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_6 = double_linked_list_3.push(queue_11)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    var_7 = queue_9.enqueue(var_5)

def test_case_593():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_2.size()
    assert var_2 == 0
    var_3 = queue_1.size()
    assert var_3 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_3 = module_0.Node()
    var_4 = queue_4.size()
    assert var_4 == 0
    queue_6 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_5 = double_linked_list_2.append(node_5)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_6 = queue_8.peek()
    node_7 = module_0.Node()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_7 = double_linked_list_3.push(var_6)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    var_8 = double_linked_list_2.shift()
    assert double_linked_list_2.tail is None
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'queue4.Node'
    assert var_8.data is None
    assert var_8.next is None
    assert var_8.prev == {*()}

def test_case_594():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue(queue_0)
    complex_0 = 2886.801252 + 1418.99508j
    queue_2 = module_0.Queue(complex_0)
    var_1 = queue_2.size()
    assert var_1 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_0)
    var_3 = queue_2.enqueue(set_0)
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_4 = queue_4.size()
    assert var_4 == 0
    queue_5 = module_0.Queue()
    none_type_1 = None
    var_5 = queue_5.enqueue(none_type_1)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    var_6 = queue_6.dequeue()
    assert var_6 == 77
    queue_7 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_2)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_7 = double_linked_list_1.append(bytes_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue(queue_8)
    var_8 = queue_7.peek()
    var_9 = queue_9.size()
    assert var_9 == 1
    queue_10 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_10 = double_linked_list_2.append(node_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_11 = queue_10.size()
    assert var_11 == 0
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_3)
    queue_13 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_12 = queue_13.size()
    assert var_12 == 0
    queue_14 = module_0.Queue()
    var_13 = queue_13.size()
    assert var_13 == 0
    var_14 = var_13.__repr__()
    assert var_14 == '0'
    queue_15 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_15 = queue_15.peek()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    bytes_4 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_16 = module_0.Queue(bytes_4)
    queue_17 = module_0.Queue()
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    var_16 = queue_17.peek()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_17 = node_6.__repr__()
    assert var_17 == 'Value: None'

def test_case_595():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    var_2 = queue_0.enqueue(set_0)
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    queue_4 = module_0.Queue(queue_2)
    node_2 = module_0.Node()
    var_4 = node_2.__repr__()
    assert var_4 == 'Value: None'
    queue_5 = module_0.Queue(node_2)
    var_5 = queue_5.enqueue(var_4)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_6 = double_linked_list_1.append(set_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    complex_1 = 2886.801252 + 1418.99508j
    queue_9 = module_0.Queue(complex_1)
    var_7 = queue_9.size()
    assert var_7 == 1
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_8 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    var_9 = queue_10.size()
    assert var_9 == 11
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_10 = queue_13.size()
    assert var_10 == 0
    node_6 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_1)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_11 = double_linked_list_5.append(bytes_1)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    queue_15 = module_0.Queue(queue_14)
    var_12 = double_linked_list_5.pop()
    assert var_12 == b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None

def test_case_596():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
    assert var_1.data is None
    assert var_1.next is None
    assert var_1.prev == {*()}
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    var_2 = queue_2.dequeue()
    assert var_2 == 77
    var_3 = queue_2.enqueue(var_2)

def test_case_597():
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_0 = double_linked_list_4.append(set_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_1 = var_0.__repr__()

def test_case_598():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = queue_4.size()
    assert var_4 == 0
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_5 = queue_6.size()
    assert var_5 == 0
    queue_7 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_6 = queue_10.size()
    assert var_6 == 0
    queue_11 = module_0.Queue()
    node_6 = module_0.Node()
    var_7 = node_6.__repr__()
    assert var_7 == 'Value: None'
    queue_12 = module_0.Queue(node_6)
    queue_13 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_14 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_8 = double_linked_list_5.append(node_8)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    node_9 = module_0.Node()
    complex_0 = 2886.801252 + 1418.99508j
    queue_15 = module_0.Queue(complex_0)
    var_9 = queue_15.size()
    assert var_9 == 1
    set_7 = set()
    node_10 = module_0.Node(prev=set_7)
    none_type_0 = None
    queue_16 = module_0.Queue()
    var_10 = queue_16.enqueue(none_type_0)
    var_11 = queue_15.enqueue(set_7)
    var_12 = node_8.__repr__()
    assert var_12 == 'Value: None'

def test_case_599():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    queue_4 = module_0.Queue(node_1)
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    queue_5 = module_0.Queue(node_2)
    var_3 = queue_5.enqueue(var_2)
    queue_6 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_4 = queue_6.size()
    assert var_4 == 0
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_5 = queue_7.peek()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    node_5 = module_0.Node()
    node_6 = module_0.Node(double_linked_list_0, prev=var_3)

def test_case_600():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    queue_3 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_2 = queue_3.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList(var_2)
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = node_0.__repr__()
    assert var_3 == 'Value: None'

def test_case_601():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_1.enqueue(queue_0)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = double_linked_list_2.append(set_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    complex_0 = 2886.801252 + 1418.99508j
    queue_5 = module_0.Queue(complex_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    var_3 = queue_5.size()
    assert var_3 == 1
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_6.peek()
    node_4 = module_0.Node()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = double_linked_list_3.push(var_4)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    queue_8 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_6 = queue_8.size()
    assert var_6 == 0
    queue_9 = module_0.Queue()
    var_7 = queue_8.size()
    assert var_7 == 0
    var_8 = var_7.__repr__()
    assert var_8 == '0'
    queue_10 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_9 = queue_10.peek()
    queue_11 = module_0.Queue(queue_10)
    queue_12 = module_0.Queue(queue_10)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_16 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_10 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_17 = module_0.Queue(queue_16)
    var_11 = queue_15.peek()
    var_12 = queue_17.size()
    assert var_12 == 1
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_18 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_13 = queue_20.size()
    assert var_13 == 0
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    queue_21 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    queue_22 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_23 = module_0.Queue(bytes_2)
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    var_14 = double_linked_list_8.append(bytes_2)
    assert f'{type(double_linked_list_8.head).__module__}.{type(double_linked_list_8.head).__qualname__}' == 'queue4.Node'
    queue_24 = module_0.Queue(queue_23)
    var_15 = queue_22.peek()
    var_16 = var_2.__repr__()

def test_case_602():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'queue4.Node'
    assert var_2.data is None
    assert var_2.next is None
    assert var_2.prev == {*()}
    queue_3 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    none_type_0 = None
    queue_9 = module_0.Queue(none_type_0)
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_11 = module_0.Queue()
    var_5 = var_2.__repr__()
    assert var_5 == 'Value: None'

def test_case_603():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_2 = module_0.Node()
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    queue_7 = module_0.Queue(queue_5)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_3 = queue_5.size()
    assert var_3 == 0
    node_4 = module_0.Node(prev=node_2)

def test_case_604():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = var_0.__repr__()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    queue_6 = module_0.Queue(queue_4)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_3 = queue_4.size()
    assert var_3 == 0
    node_4 = module_0.Node()
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    queue_9 = module_0.Queue()

def test_case_605():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    var_1 = queue_5.size()
    assert var_1 == 0
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_8 = module_0.Queue()
    var_2 = queue_8.peek()
    queue_9 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_3 = queue_9.peek()
    node_5 = module_0.Node()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_4 = var_3.__repr__()
    queue_12 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_5 = queue_12.peek()
    queue_13 = module_0.Queue(queue_12)
    assert f'{type(queue_13).__module__}.{type(queue_13).__qualname__}' == 'queue4.Queue'
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_6 = var_5.__repr__()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    none_type_0 = None
    queue_17 = module_0.Queue(none_type_0)
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_18 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_7 = node_8.__repr__()
    assert var_7 == 'Value: None'
    var_8 = node_3.__repr__()
    assert var_8 == 'Value: None'

def test_case_606():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.push(node_0)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'

def test_case_607():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = var_1.__repr__()
    assert var_2 == '0'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_3.size()
    assert var_3 == 0
    var_4 = queue_2.enqueue(queue_2)

def test_case_608():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    var_2 = queue_2.size()
    assert var_2 == 1
    queue_3 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    var_4 = node_0.__repr__()
    assert var_4 == 'Value: None'
    var_5 = node_0.__repr__()
    assert var_5 == 'Value: None'

def test_case_609():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = var_0.__repr__()
    assert var_1 == "'Value: None'"
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_1.size()
    assert var_2 == 0
    queue_2 = module_0.Queue()
    var_3 = queue_1.size()
    assert var_3 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_4 = queue_4.size()
    assert var_4 == 0
    queue_5 = module_0.Queue()
    var_5 = queue_5.peek()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_6 = double_linked_list_1.append(node_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_7 = queue_7.enqueue(queue_6)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_610():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    complex_0 = 2886.801252 + 1418.99508j
    queue_3 = module_0.Queue(complex_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    var_1 = queue_3.size()
    assert var_1 == 1
    var_2 = var_1.__repr__()
    assert var_2 == '1'
    node_2 = module_0.Node()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_1)
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    queue_7 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue(queue_8)
    var_6 = queue_7.peek()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_11 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_7 = queue_11.peek()
    queue_12 = module_0.Queue(queue_11)
    queue_13 = module_0.Queue(queue_11)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_8 = node_6.__repr__()
    assert var_8 == 'Value: None'

def test_case_611():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    var_2 = queue_0.peek()

def test_case_612():
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_0 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    queue_2 = module_0.Queue(queue_0)
    var_1 = double_linked_list_0.append(node_0)

def test_case_613():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.size()
    assert var_2 == 0
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_4 = module_0.Queue(complex_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    var_3 = queue_4.size()
    assert var_3 == 1
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(none_type_0)
    var_5 = queue_4.enqueue(set_2)
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_6 = queue_8.size()
    assert var_6 == 0
    queue_9 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_7 = queue_12.peek()
    queue_13 = module_0.Queue(queue_12)
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_14 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_15 = module_0.Queue()
    var_8 = queue_15.peek()
    queue_16 = module_0.Queue()
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    queue_17 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_8 = set()
    node_8 = module_0.Node(prev=set_8)
    var_9 = double_linked_list_4.append(node_8)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_10 = queue_17.enqueue(queue_16)
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    set_9 = set()
    node_9 = module_0.Node(prev=set_9)
    queue_20 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    node_10 = module_0.Node()
    var_11 = queue_19.size()
    assert var_11 == 0
    var_12 = queue_18.size()
    assert var_12 == 0
    queue_21 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_22 = module_0.Queue(bytes_0)
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_13 = double_linked_list_6.append(bytes_0)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    queue_23 = module_0.Queue(queue_22)
    var_14 = queue_21.peek()
    var_15 = queue_23.size()
    assert var_15 == 1
    double_linked_list_7 = module_0.DoubleLinkedList(node_10)
    assert f'{type(double_linked_list_7.head).__module__}.{type(double_linked_list_7.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_7.tail).__module__}.{type(double_linked_list_7.tail).__qualname__}' == 'queue4.Node'

def test_case_614():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    var_4 = queue_4.size()
    assert var_4 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_5 = queue_7.peek()
    queue_8 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_6 = queue_8.size()
    assert var_6 == 0
    var_7 = queue_7.size()
    assert var_7 == 0
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_8 = queue_5.size()
    assert var_8 == 0

def test_case_615():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_0 = None
    queue_4 = module_0.Queue(none_type_0)
    queue_5 = module_0.Queue(set_0)

def test_case_616():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_3 = module_0.Node()
    var_1 = queue_2.size()
    assert var_1 == 0
    var_2 = queue_1.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_3 = queue_4.peek()
    bool_0 = True
    double_linked_list_1 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = node_5.__repr__()
    assert var_4 == 'Value: None'
    node_6 = module_0.Node()
    var_5 = node_6.__repr__()
    assert var_5 == 'Value: None'
    queue_6 = module_0.Queue(node_6)
    node_7 = module_0.Node()
    var_6 = node_7.__repr__()
    assert var_6 == 'Value: None'
    queue_7 = module_0.Queue(node_7)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    var_7 = queue_8.dequeue()
    assert var_7 == 77
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    var_8 = queue_10.size()
    assert var_8 == 0
    queue_11 = module_0.Queue()
    var_9 = node_8.__repr__()
    assert var_9 == 'Value: None'
    bool_1 = True
    double_linked_list_3 = module_0.DoubleLinkedList(bool_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    queue_12 = module_0.Queue()
    set_5 = set()
    node_9 = module_0.Node(prev=set_5)
    var_10 = queue_12.peek()
    queue_13 = module_0.Queue(queue_12)
    queue_14 = module_0.Queue(queue_12)
    var_11 = double_linked_list_3.append(node_9)
    queue_15 = module_0.Queue()

def test_case_617():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_4.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    double_linked_list_4 = module_0.DoubleLinkedList(var_2)
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_2)
    queue_7 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_7.size()
    assert var_3 == 0
    queue_8 = module_0.Queue()
    var_4 = queue_7.size()
    assert var_4 == 0
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_3)
    var_5 = queue_10.dequeue()
    assert var_5 == 77
    queue_11 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_6 = queue_11.peek()
    queue_12 = module_0.Queue(queue_11)
    queue_13 = module_0.Queue(queue_11)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_18 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    node_7 = module_0.Node()
    var_7 = queue_17.size()
    assert var_7 == 0
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_21 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    node_9 = module_0.Node()
    var_8 = queue_20.size()
    assert var_8 == 0
    var_9 = node_8.__repr__()
    assert var_9 == 'Value: None'
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None

def test_case_618():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_1.peek()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = queue_2.size()
    assert var_2 == 0
    none_type_0 = None
    node_3 = module_0.Node(prev=none_type_0)
    queue_4 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_3 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    queue_6 = module_0.Queue(queue_4)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    var_5 = queue_9.size()
    assert var_5 == 11
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_2)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_6 = double_linked_list_3.append(bytes_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_11 = module_0.Queue(queue_10)
    queue_12 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_7 = queue_12.peek()
    node_7 = module_0.Node()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_8 = var_7.__repr__()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    queue_15 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_9 = module_0.Node()
    queue_16 = module_0.Queue()
    set_6 = set()
    node_10 = module_0.Node(prev=set_6)
    var_9 = queue_16.peek()
    node_11 = module_0.Node()
    var_10 = double_linked_list_0.push(var_5)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'

def test_case_619():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bytes_0 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'

def test_case_620():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_2.peek()
    node_2 = module_0.Node()
    queue_3 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    var_4 = queue_5.size()
    assert var_4 == 0
    var_5 = var_4.__repr__()
    assert var_5 == '0'
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_8 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_6 = double_linked_list_3.append(set_4)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_7 = double_linked_list_3.push(set_4)
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    none_type_0 = None
    queue_12 = module_0.Queue()
    var_8 = queue_12.enqueue(none_type_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_9 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    node_7 = module_0.Node()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_16 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    node_9 = module_0.Node()
    var_10 = queue_15.size()
    assert var_10 == 0
    var_11 = node_8.__repr__()
    assert var_11 == 'Value: None'
    queue_17 = module_0.Queue()
    set_7 = set()
    node_10 = module_0.Node(prev=set_7)
    var_12 = queue_17.peek()
    queue_18 = module_0.Queue(queue_17)
    set_8 = set()
    node_11 = module_0.Node(prev=set_8)
    var_13 = var_12.__repr__()
    var_14 = double_linked_list_3.append(double_linked_list_5)

def test_case_621():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = queue_3.size()
    assert var_1 == 0
    node_2 = module_0.Node()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_5 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_2 = double_linked_list_4.append(set_3)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_4.push(set_3)
    node_5 = module_0.Node()
    queue_9 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_4 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    assert f'{type(queue_10).__module__}.{type(queue_10).__qualname__}' == 'queue4.Queue'
    var_5 = queue_10.enqueue(set_4)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_0)
    queue_12 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_6 = queue_12.size()
    assert var_6 == 0
    queue_13 = module_0.Queue()
    var_7 = queue_12.size()
    assert var_7 == 0
    queue_14 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_1)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_8 = double_linked_list_5.append(bytes_1)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    queue_16 = module_0.Queue(queue_15)
    var_9 = queue_14.peek()
    var_10 = queue_16.size()
    assert var_10 == 1
    node_8 = module_0.Node()
    var_11 = node_8.__repr__()
    assert var_11 == 'Value: None'
    queue_17 = module_0.Queue(node_8)
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None

def test_case_622():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_1 = module_0.Node()
    bool_0 = True
    double_linked_list_2 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    var_2 = queue_1.size()
    assert var_2 == 11

def test_case_623():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = queue_0.size()
    assert var_1 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = double_linked_list_2.append(node_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    int_0 = 3622
    tuple_0 = (int_0,)
    double_linked_list_3 = module_0.DoubleLinkedList(tuple_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'

def test_case_624():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = var_2.__repr__()
    bool_0 = True
    double_linked_list_1 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    queue_6 = module_0.Queue(queue_4)
    var_5 = double_linked_list_1.append(node_3)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_7 = queue_10.size()
    assert var_7 == 0
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_14 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    node_6 = module_0.Node()
    var_8 = queue_13.size()
    assert var_8 == 0
    var_9 = queue_12.size()
    assert var_9 == 0
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    none_type_0 = None
    queue_18 = module_0.Queue(none_type_0)
    queue_19 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_10 = queue_19.peek()
    queue_20 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_11 = queue_20.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_21 = module_0.Queue(bytes_1)
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    double_linked_list_7 = module_0.DoubleLinkedList(var_11)
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    queue_22 = module_0.Queue()
    queue_23 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    queue_24 = module_0.Queue()
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    node_10 = module_0.Node()
    var_12 = queue_23.size()
    assert var_12 == 0
    double_linked_list_9 = module_0.DoubleLinkedList()
    assert double_linked_list_9.head is None
    assert double_linked_list_9.tail is None

def test_case_625():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    var_4 = queue_4.peek()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_5 = double_linked_list_0.append(node_3)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    complex_0 = 2886.801252 + 1418.99508j
    queue_7 = module_0.Queue(complex_0)
    var_6 = queue_7.size()
    assert var_6 == 1
    var_7 = var_6.__repr__()
    assert var_7 == '1'
    queue_8 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_8 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    queue_10 = module_0.Queue(queue_8)
    node_6 = module_0.Node(next_node=queue_9, prev=set_4)

def test_case_626():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
    assert var_1.data is None
    assert var_1.next is None
    assert var_1.prev == {*()}
    node_2 = module_0.Node(prev=queue_0)

def test_case_627():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    queue_3 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue(queue_4)
    var_3 = queue_3.peek()
    var_4 = queue_5.size()
    assert var_4 == 1
    var_5 = queue_5.dequeue()
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Queue'
    queue_6 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_6 = queue_6.peek()
    node_1 = module_0.Node()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_7 = var_6.__repr__()
    node_2 = module_0.Node()
    queue_9 = module_0.Queue(var_6)

def test_case_628():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_1.peek()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = queue_2.size()
    assert var_2 == 0
    var_3 = queue_2.size()
    assert var_3 == 0

def test_case_629():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_0.size()
    assert var_1 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_3 = node_1.__repr__()
    assert var_3 == 'Value: None'
    node_2 = module_0.Node()
    queue_6 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_4 = queue_6.size()
    assert var_4 == 0
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_5 = queue_7.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_6 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_7 = queue_10.size()
    assert var_7 == 0
    queue_11 = module_0.Queue()
    none_type_0 = None
    var_8 = queue_11.enqueue(none_type_0)
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_12 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None

def test_case_630():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.push(var_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_1 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_2 = queue_1.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList(var_2)
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_4 = module_0.Node(queue_1, set_1)

def test_case_631():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_0.push(queue_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.push(queue_0)

def test_case_632():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    queue_5 = module_0.Queue(queue_3)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_8 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_8.size()
    assert var_3 == 0
    queue_9 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_10 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_13 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_4 = queue_13.peek()
    queue_14 = module_0.Queue(queue_13)
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_5 = var_4.__repr__()
    bool_0 = True
    double_linked_list_2 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    queue_15 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_6 = queue_15.peek()
    queue_16 = module_0.Queue(queue_15)
    queue_17 = module_0.Queue(queue_15)
    var_7 = double_linked_list_2.append(node_6)
    var_8 = double_linked_list_1.push(queue_8)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'

def test_case_633():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    queue_3 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue(queue_4)
    var_3 = queue_3.peek()
    var_4 = queue_5.size()
    assert var_4 == 1
    var_5 = queue_5.dequeue()
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Queue'
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    node_1 = module_0.Node()
    var_6 = queue_7.size()
    assert var_6 == 0
    queue_9 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_7 = queue_9.size()
    assert var_7 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_2)
    queue_13 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_8 = queue_13.size()
    assert var_8 == 0
    queue_14 = module_0.Queue()
    var_9 = queue_13.size()
    assert var_9 == 0
    queue_15 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_10 = queue_15.size()
    assert var_10 == 0
    queue_16 = module_0.Queue()
    none_type_0 = None
    var_11 = queue_16.enqueue(none_type_0)
    double_linked_list_3 = module_0.DoubleLinkedList()

def test_case_634():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_8 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue(queue_9)
    var_3 = queue_8.peek()
    var_4 = double_linked_list_0.append(queue_3)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'

def test_case_635():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_2.peek()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    complex_0 = 2886.801252 + 1418.99508j
    queue_3 = module_0.Queue(complex_0)
    var_2 = queue_3.size()
    assert var_2 == 1
    var_3 = var_2.__repr__()
    assert var_3 == '1'
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_4.size()
    assert var_4 == 0
    queue_5 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    queue_7 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_5 = queue_7.size()
    assert var_5 == 0
    queue_8 = module_0.Queue()
    var_6 = queue_7.size()
    assert var_6 == 0
    queue_9 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_7 = queue_9.peek()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_10 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_8 = queue_12.size()
    assert var_8 == 0
    node_7 = module_0.Node()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    queue_13 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_9 = queue_13.size()
    assert var_9 == 0
    queue_14 = module_0.Queue()
    none_type_1 = None
    var_10 = queue_14.enqueue(none_type_1)
    queue_15 = module_0.Queue()
    set_9 = set()
    node_10 = module_0.Node(prev=set_9)
    queue_16 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_10 = set()
    node_11 = module_0.Node(prev=set_10)
    var_11 = double_linked_list_3.append(node_11)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_12 = queue_15.size()
    assert var_12 == 0
    double_linked_list_4 = module_0.DoubleLinkedList(set_10)

def test_case_636():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_2.peek()
    node_4 = module_0.Node()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_3 = var_2.__repr__()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    queue_5 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_4 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue(queue_6)
    var_5 = queue_5.peek()
    var_6 = queue_7.size()
    assert var_6 == 1
    var_7 = queue_7.dequeue()
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'queue4.Queue'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    var_8 = node_6.__repr__()
    assert var_8 == 'Value: None'
    node_7 = module_0.Node()
    var_9 = node_7.__repr__()
    assert var_9 == 'Value: None'
    queue_10 = module_0.Queue(node_7)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_2)
    var_10 = queue_11.dequeue()
    assert var_10 == 77
    queue_12 = module_0.Queue()
    var_11 = queue_3.size()
    assert var_11 == 0

def test_case_637():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_0 = double_linked_list_2.push(queue_3)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_6.size()
    assert var_1 == 0
    queue_7 = module_0.Queue()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    var_3 = double_linked_list_3.push(node_0)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'

def test_case_638():
    none_type_0 = None
    node_0 = module_0.Node(prev=none_type_0)
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = node_2.__repr__()
    assert var_1 == 'Value: None'

def test_case_639():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_1.push(set_0)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_3.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    double_linked_list_3 = module_0.DoubleLinkedList(var_2)
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_6.peek()
    node_4 = module_0.Node()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_4 = double_linked_list_5.push(var_3)
    assert f'{type(double_linked_list_5.tail).__module__}.{type(double_linked_list_5.tail).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_5 = queue_7.peek()
    queue_8 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_6 = queue_8.size()
    assert var_6 == 0
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_11 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    var_7 = double_linked_list_6.push(queue_11)
    assert f'{type(double_linked_list_6.tail).__module__}.{type(double_linked_list_6.tail).__qualname__}' == 'queue4.Node'
    var_8 = double_linked_list_6.push(queue_11)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_1)
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    var_9 = double_linked_list_8.append(bytes_1)
    assert f'{type(double_linked_list_8.head).__module__}.{type(double_linked_list_8.head).__qualname__}' == 'queue4.Node'
    queue_15 = module_0.Queue(queue_14)
    queue_16 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    queue_17 = module_0.Queue()
    double_linked_list_9 = module_0.DoubleLinkedList()
    assert double_linked_list_9.head is None
    assert double_linked_list_9.tail is None
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_10 = double_linked_list_9.append(node_9)
    assert f'{type(double_linked_list_9.head).__module__}.{type(double_linked_list_9.head).__qualname__}' == 'queue4.Node'
    var_11 = double_linked_list_9.shift()
    assert double_linked_list_9.tail is None
    assert f'{type(var_11).__module__}.{type(var_11).__qualname__}' == 'queue4.Node'
    assert var_11.data is None
    assert var_11.next is None
    assert var_11.prev == {*()}
    var_12 = queue_11.peek()

def test_case_640():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_0 = double_linked_list_1.push(queue_0)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_4.size()
    assert var_1 == 0
    queue_5 = module_0.Queue()
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = double_linked_list_3.append(node_3)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_7.size()
    assert var_4 == 0
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_5 = module_0.Node()
    var_5 = queue_10.size()
    assert var_5 == 0
    var_6 = node_4.__repr__()
    assert var_6 == 'Value: None'
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_14 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_15 = module_0.Queue()
    var_7 = queue_15.peek()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_18 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    node_8 = module_0.Node()
    var_8 = queue_17.size()
    assert var_8 == 0
    var_9 = queue_16.size()
    assert var_9 == 0
    queue_19 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_10 = queue_19.peek()
    queue_20 = module_0.Queue(queue_19)
    var_11 = var_6.__repr__()
    assert var_11 == "'Value: None'"

def test_case_641():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    var_1 = var_0.__repr__()
    assert var_1 == '1'
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_2 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    queue_3 = module_0.Queue(queue_1)
    var_3 = double_linked_list_0.append(node_0)
    complex_1 = 2886.801252 + 1418.99508j
    queue_4 = module_0.Queue(complex_1)
    var_4 = queue_4.size()
    assert var_4 == 1
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_5 = queue_5.enqueue(none_type_0)
    var_6 = queue_4.enqueue(set_1)
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_7 = queue_6.peek()
    node_3 = module_0.Node()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_8 = double_linked_list_1.push(var_7)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_9 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    var_10 = node_4.__repr__()
    assert var_10 == 'Value: None'
    node_5 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_11 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_12 = queue_9.peek()
    queue_10 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_13 = queue_10.size()
    assert var_13 == 0
    var_14 = queue_9.size()
    assert var_14 == 0
    queue_11 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    var_15 = queue_11.size()
    assert var_15 == 0
    queue_12 = module_0.Queue()
    var_16 = var_9.__repr__()

def test_case_642():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = queue_2.size()
    assert var_1 == 0
    var_2 = queue_1.size()
    assert var_2 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_1.append(queue_3)
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_5 = module_0.Queue()
    var_5 = queue_5.peek()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_8 = module_0.Queue()

def test_case_643():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    var_2 = queue_3.dequeue()
    assert var_2 == 77
    queue_4 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    var_4 = node_0.__repr__()
    assert var_4 == 'Value: None'
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_2)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_5 = double_linked_list_1.append(bytes_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_6 = queue_6.size()
    assert var_6 == 11
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_3 = module_0.Node()
    var_7 = queue_8.size()
    assert var_7 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_12 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_5 = module_0.Node()
    var_8 = queue_11.size()
    assert var_8 == 0
    var_9 = queue_10.size()
    assert var_9 == 0
    queue_13 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_10 = queue_13.peek()
    node_7 = module_0.Node()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_11 = var_10.__repr__()
    queue_16 = module_0.Queue()
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    var_12 = queue_16.peek()
    queue_17 = module_0.Queue(queue_16)
    var_13 = queue_17.enqueue(set_4)
    set_5 = set()
    node_9 = module_0.Node(prev=set_5)
    queue_18 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_10 = module_0.Node()
    set_6 = set()
    node_11 = module_0.Node(prev=set_6)
    queue_19 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_14 = node_11.__repr__()
    assert var_14 == 'Value: None'
    var_15 = queue_17.enqueue(var_14)

def test_case_644():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    var_1 = queue_6.dequeue()
    assert var_1 == 77
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_3 = module_0.Node()
    var_2 = queue_8.size()
    assert var_2 == 0
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_10 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_4 = double_linked_list_6.append(set_3)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_6.push(set_3)
    queue_13 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_6 = queue_13.peek()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_2)
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    double_linked_list_8 = module_0.DoubleLinkedList(var_6)
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    queue_15 = module_0.Queue()

def test_case_645():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    node_2 = module_0.Node(set_0)
    node_3 = module_0.Node()
    var_1 = node_3.__repr__()
    assert var_1 == 'Value: None'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = var_1.__repr__()
    assert var_2 == "'Value: None'"
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_5 = module_0.Node()
    var_3 = queue_2.size()
    assert var_3 == 0
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    queue_4 = module_0.Queue()
    set_2 = set()
    node_6 = module_0.Node(prev=set_2)
    var_5 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    queue_6 = module_0.Queue(queue_4)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_3 = set()
    node_7 = module_0.Node(prev=set_3)
    var_6 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    var_7 = queue_10.enqueue(set_3)
    queue_11 = module_0.Queue()
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    var_8 = queue_11.peek()
    queue_12 = module_0.Queue()
    set_5 = set()
    node_9 = module_0.Node(prev=set_5)
    var_9 = queue_12.size()
    assert var_9 == 0
    var_10 = queue_11.size()
    assert var_10 == 0
    queue_13 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_11 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_15 = module_0.Queue(queue_14)
    var_12 = queue_13.peek()
    var_13 = queue_15.size()
    assert var_13 == 1
    var_14 = queue_15.dequeue()
    assert f'{type(var_14).__module__}.{type(var_14).__qualname__}' == 'queue4.Queue'
    double_linked_list_3 = module_0.DoubleLinkedList()

def test_case_646():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_0.push(queue_1)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    var_2 = queue_1.peek()

def test_case_647():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_1 = queue_0.enqueue(var_0)
    node_1 = module_0.Node()
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    var_3 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    queue_3 = module_0.Queue(queue_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_4 = queue_1.size()
    assert var_4 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_8 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_4 = module_0.Node()
    var_5 = queue_7.size()
    assert var_5 == 0
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = queue_11.size()
    assert var_6 == 0
    node_6 = module_0.Node()
    node_7 = module_0.Node()
    var_7 = node_7.__repr__()
    assert var_7 == 'Value: None'
    queue_12 = module_0.Queue(node_7)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_0)
    var_8 = queue_13.dequeue()
    assert var_8 == 77
    queue_14 = module_0.Queue()
    var_9 = queue_12.dequeue()
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'queue4.Node'
    assert var_9.data is None
    assert var_9.next is None
    assert var_9.prev is None

def test_case_648():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    queue_5 = module_0.Queue(queue_3)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_4 = queue_3.size()
    assert var_4 == 0
    var_5 = queue_6.peek()

def test_case_649():
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    node_1 = module_0.Node()
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    queue_4 = module_0.Queue(node_1)
    var_3 = queue_4.enqueue(var_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = queue_5.peek()

def test_case_650():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_0.push(queue_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue(queue_4)
    var_3 = queue_3.peek()
    var_4 = queue_5.size()
    assert var_4 == 1
    var_5 = queue_5.dequeue()
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Queue'
    var_6 = double_linked_list_1.push(queue_5)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'

def test_case_651():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
    assert var_1.data is None
    assert var_1.next is None
    assert var_1.prev == {*()}
    queue_2 = module_0.Queue()

def test_case_652():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue(none_type_0)
    queue_4 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_4.peek()
    node_1 = module_0.Node()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_1 = var_0.__repr__()
    queue_7 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_7.size()
    assert var_2 == 0
    queue_8 = module_0.Queue()
    none_type_1 = None
    var_3 = queue_8.enqueue(none_type_1)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_9 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = queue_11.size()
    assert var_4 == 0
    queue_12 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_13 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = queue_15.size()
    assert var_5 == 0
    node_5 = module_0.Node()
    node_6 = module_0.Node()
    var_6 = node_6.__repr__()
    assert var_6 == 'Value: None'
    queue_16 = module_0.Queue(node_6)
    assert f'{type(queue_16).__module__}.{type(queue_16).__qualname__}' == 'queue4.Queue'
    var_7 = queue_16.enqueue(var_6)
    queue_17 = module_0.Queue()

def test_case_653():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = queue_0.size()
    assert var_1 == 0
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    var_2 = queue_3.dequeue()
    assert var_2 == 77
    var_3 = queue_0.enqueue(queue_1)

def test_case_654():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.push(var_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = var_2.__repr__()
    assert var_3 == "'Value: None'"
    bool_0 = True
    double_linked_list_2 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_4 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    queue_3 = module_0.Queue(queue_1)
    var_5 = double_linked_list_2.append(node_3)
    queue_4 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_6 = double_linked_list_3.append(node_5)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_6 = module_0.Node()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    queue_6 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_7 = double_linked_list_5.append(set_4)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_8 = double_linked_list_5.push(set_4)
    queue_9 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    queue_10 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    var_9 = double_linked_list_6.append(node_9)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_0)
    queue_12 = module_0.Queue()
    set_7 = set()
    node_10 = module_0.Node(prev=set_7)
    var_10 = queue_12.size()
    assert var_10 == 0
    queue_13 = module_0.Queue()
    var_11 = queue_12.size()
    assert var_11 == 0
    var_12 = var_11.__repr__()
    assert var_12 == '0'
    set_8 = set()
    node_11 = module_0.Node(prev=set_8)
    queue_14 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    var_13 = double_linked_list_8.append(set_8)
    assert f'{type(double_linked_list_8.head).__module__}.{type(double_linked_list_8.head).__qualname__}' == 'queue4.Node'
    none_type_0 = None
    node_12 = module_0.Node(none_type_0)
    var_14 = var_5.__repr__()

def test_case_655():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    var_2 = queue_2.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_4 = node_2.__repr__()
    assert var_4 == 'Value: None'
    node_3 = module_0.Node()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_7 = module_0.Queue()
    var_5 = queue_7.peek()
    node_5 = module_0.Node()
    var_6 = node_5.__repr__()
    assert var_6 == 'Value: None'
    queue_8 = module_0.Queue(node_5)
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_7 = node_6.__repr__()
    assert var_7 == 'Value: None'
    complex_0 = 2886.801252 + 1418.99508j
    queue_10 = module_0.Queue(complex_0)
    var_8 = queue_10.size()
    assert var_8 == 1
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    none_type_0 = None
    queue_11 = module_0.Queue()
    var_9 = queue_11.enqueue(none_type_0)
    var_10 = queue_10.enqueue(set_4)
    node_8 = module_0.Node(next_node=queue_8)

def test_case_656():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    bool_0 = True
    double_linked_list_1 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_1.pop()
    assert var_1 is True
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_657():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    queue_2 = module_0.Queue()
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    var_1 = queue_2.size()
    assert var_1 == 0
    var_2 = queue_1.peek()
    assert var_2 == 77
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_4.peek()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_2)
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = queue_6.size()
    assert var_4 == 0
    queue_7 = module_0.Queue()
    var_5 = queue_6.size()
    assert var_5 == 0
    double_linked_list_1 = module_0.DoubleLinkedList(set_2)

def test_case_658():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    node_3 = module_0.Node()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.push(var_1)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_5 = module_0.Node()
    var_3 = queue_3.size()
    assert var_3 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    queue_6 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_4 = queue_6.size()
    assert var_4 == 0
    queue_7 = module_0.Queue()
    var_5 = queue_6.size()
    assert var_5 == 0
    var_6 = var_5.__repr__()
    assert var_6 == '0'
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_9 = module_0.Queue()
    var_7 = queue_9.peek()
    var_8 = queue_1.size()
    assert var_8 == 0

def test_case_659():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_1.enqueue(queue_0)
    queue_2 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    var_3 = queue_2.peek()
    var_4 = queue_4.size()
    assert var_4 == 1
    node_2 = module_0.Node()
    var_5 = node_2.__repr__()
    assert var_5 == 'Value: None'
    queue_5 = module_0.Queue(node_2)
    var_6 = queue_5.enqueue(var_5)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_7 = double_linked_list_3.append(set_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_5 = module_0.Node()
    var_8 = queue_10.size()
    assert var_8 == 0
    var_9 = node_4.__repr__()
    assert var_9 == 'Value: None'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    queue_13 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_10 = queue_13.size()
    assert var_10 == 0
    queue_14 = module_0.Queue()
    var_11 = queue_13.size()
    assert var_11 == 0
    var_12 = var_11.__repr__()
    assert var_12 == '0'
    var_13 = queue_9.enqueue(queue_9)

def test_case_660():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_1.size()
    assert var_0 == 0

def test_case_661():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = var_0.__repr__()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_0.append(node_3)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Node'
    assert var_3.data is None
    assert var_3.next is None
    assert var_3.prev == {*()}
    queue_5 = module_0.Queue()

def test_case_662():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    var_0 = queue_4.dequeue()
    assert var_0 == 77
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    bytes_2 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_9 = module_0.Queue(bytes_2)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_12 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_12.peek()
    queue_13 = module_0.Queue(queue_12)
    queue_14 = module_0.Queue(queue_12)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    var_2 = queue_12.size()
    assert var_2 == 0
    queue_17 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_18 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = double_linked_list_2.append(node_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_18.enqueue(queue_17)
    var_5 = queue_1.peek()

def test_case_663():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    var_0 = queue_4.dequeue()
    assert var_0 == 77
    queue_5 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_1.append(queue_7)
    queue_8 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_2)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = double_linked_list_2.append(bytes_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue(queue_9)
    var_5 = queue_8.peek()
    var_6 = queue_10.size()
    assert var_6 == 1
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_7 = double_linked_list_4.append(set_2)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_8 = double_linked_list_2.shift()
    assert var_8 == b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    assert double_linked_list_2.tail is None

def test_case_664():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_5 = module_0.Queue()
    var_2 = queue_5.peek()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_2.append(queue_8)
    queue_9 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_5 = queue_9.size()
    assert var_5 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_6 = queue_11.peek()
    queue_12 = module_0.Queue(queue_11)
    complex_0 = 2886.801252 + 1418.99508j
    queue_13 = module_0.Queue(complex_0)
    var_7 = queue_13.size()
    assert var_7 == 1
    node_4 = module_0.Node()
    var_8 = node_4.__repr__()
    assert var_8 == 'Value: None'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_9 = var_8.__repr__()
    assert var_9 == "'Value: None'"
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None

def test_case_665():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_3.size()
    assert var_0 == 0
    queue_4 = module_0.Queue()
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_6.size()
    assert var_3 == 0
    queue_8 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    queue_10 = module_0.Queue(queue_8)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_5 = queue_8.size()
    assert var_5 == 0
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_13 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_6 = queue_15.size()
    assert var_6 == 0
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_16 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    bytes_1 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_19 = module_0.Queue(bytes_1)
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_20 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_21 = module_0.Queue()
    queue_22 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    bool_0 = True
    double_linked_list_7 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_7.head).__module__}.{type(double_linked_list_7.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_7.tail).__module__}.{type(double_linked_list_7.tail).__qualname__}' == 'queue4.Node'
    queue_23 = module_0.Queue()
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    var_7 = queue_23.peek()
    queue_24 = module_0.Queue(queue_23)
    queue_25 = module_0.Queue(queue_23)
    var_8 = double_linked_list_7.append(node_7)
    node_8 = module_0.Node()
    queue_26 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_9 = queue_26.peek()
    node_10 = module_0.Node()
    node_11 = module_0.Node(set_8)
    var_10 = queue_0.size()
    assert var_10 == 0

def test_case_666():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_1 = queue_0.enqueue(var_0)
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    bool_0 = True
    double_linked_list_1 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = var_2.__repr__()
    assert var_3 == "'Value: None'"
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_5 = queue_3.size()
    assert var_5 == 11
    queue_4 = module_0.Queue()
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    var_6 = queue_4.size()
    assert var_6 == 0
    queue_5 = module_0.Queue()
    var_7 = queue_5.peek()
    var_8 = queue_5.peek()

def test_case_667():
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_0 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    queue_2 = module_0.Queue(queue_0)
    var_1 = double_linked_list_0.append(node_0)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    var_3 = node_1.__repr__()
    assert var_3 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_1.append(queue_5)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_6 = queue_8.size()
    assert var_6 == 0
    queue_9 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_4 = module_0.Node()
    node_5 = module_0.Node(next_node=var_4, prev=var_6)
    assert node_5.prev == 0

def test_case_668():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    var_1 = var_0.__repr__()

def test_case_669():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_2 = module_0.Queue(var_0)

def test_case_670():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node()
    var_1 = node_2.__repr__()
    assert var_1 == 'Value: None'
    queue_1 = module_0.Queue(node_2)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    node_3 = module_0.Node()
    var_2 = queue_0.peek()

def test_case_671():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_0)
    var_3 = var_2.__repr__()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = queue_5.size()
    assert var_4 == 0
    queue_6 = module_0.Queue()
    var_5 = node_2.__repr__()
    assert var_5 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    queue_8 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_6 = queue_8.size()
    assert var_6 == 0
    queue_9 = module_0.Queue()
    var_7 = queue_8.size()
    assert var_7 == 0
    queue_10 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    none_type_1 = None
    queue_11 = module_0.Queue()
    var_8 = queue_11.enqueue(none_type_1)
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_12 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_13 = module_0.Queue()
    var_9 = queue_13.peek()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    queue_16 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_8 = module_0.Node()
    var_10 = queue_15.size()
    assert var_10 == 0
    var_11 = node_7.__repr__()
    assert var_11 == 'Value: None'
    str_0 = '[["}"Kn}e&[L&Rdr'
    node_9 = module_0.Node(next_node=str_0)

def test_case_672():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    queue_4 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_2 = queue_4.peek()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_3 = queue_5.peek()
    queue_6 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_4 = queue_6.size()
    assert var_4 == 0
    var_5 = queue_5.size()
    assert var_5 == 0
    queue_7 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue(queue_8)
    var_7 = queue_7.peek()
    var_8 = queue_9.size()
    assert var_8 == 1
    queue_10 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_9 = double_linked_list_3.append(node_9)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_10 = queue_11.enqueue(queue_10)
    set_8 = set()
    node_10 = module_0.Node(prev=set_8)
    queue_12 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_11 = double_linked_list_4.push(queue_12)
    assert f'{type(double_linked_list_4.tail).__module__}.{type(double_linked_list_4.tail).__qualname__}' == 'queue4.Node'
    var_12 = double_linked_list_4.push(queue_12)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_2)
    queue_16 = module_0.Queue()
    set_9 = set()
    node_11 = module_0.Node(prev=set_9)
    var_13 = queue_16.size()
    assert var_13 == 0
    queue_17 = module_0.Queue()
    var_14 = queue_16.size()
    assert var_14 == 0
    var_15 = queue_15.peek()
    assert var_15 == 77
    node_12 = module_0.Node()
    var_16 = node_12.__repr__()
    assert var_16 == 'Value: None'
    queue_18 = module_0.Queue(node_12)
    var_17 = queue_18.enqueue(var_16)
    queue_19 = module_0.Queue()

def test_case_673():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = var_0.__repr__()
    queue_3 = module_0.Queue()

def test_case_674():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = var_0.__repr__()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    node_3 = module_0.Node()
    node_4 = module_0.Node()
    var_3 = node_4.__repr__()
    assert var_3 == 'Value: None'
    queue_9 = module_0.Queue(node_4)
    assert f'{type(queue_9).__module__}.{type(queue_9).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_0)
    var_4 = queue_10.dequeue()
    assert var_4 == 77
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    queue_13 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_5 = double_linked_list_0.append(node_6)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_6 = queue_13.enqueue(queue_12)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    queue_16 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_8 = module_0.Node()
    var_7 = queue_15.size()
    assert var_7 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_17 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_8 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_9 = module_0.Node()
    var_9 = node_9.__repr__()
    assert var_9 == 'Value: None'
    node_10 = module_0.Node()
    node_11 = module_0.Node()

def test_case_675():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_1 = queue_6.peek()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    complex_0 = 2886.801252 + 1418.99508j
    queue_7 = module_0.Queue(complex_0)
    var_2 = queue_7.size()
    assert var_2 == 1
    queue_8 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_3 = double_linked_list_4.append(node_5)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_10 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    bytes_1 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_13 = module_0.Queue(bytes_1)
    queue_14 = module_0.Queue()
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    var_4 = queue_14.peek()
    queue_15 = module_0.Queue(queue_14)
    queue_16 = module_0.Queue(queue_14)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    var_5 = queue_14.size()
    assert var_5 == 0
    queue_19 = module_0.Queue()
    set_8 = set()
    node_8 = module_0.Node(prev=set_8)
    var_6 = queue_19.size()
    assert var_6 == 0
    queue_20 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_7 = queue_19.size()
    assert var_7 == 0
    queue_21 = module_0.Queue()

def test_case_676():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_2 = queue_2.size()
    assert var_2 == 11
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_3 = module_0.Node()
    queue_4 = module_0.Queue(double_linked_list_1)

def test_case_677():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    var_2 = queue_2.size()
    assert var_2 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_1.push(queue_3)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    var_4 = queue_1.size()
    assert var_4 == 11

def test_case_678():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    none_type_0 = None
    node_1 = module_0.Node(prev=none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    var_2 = queue_1.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_3 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    queue_6 = module_0.Queue(queue_4)
    queue_7 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_4 = double_linked_list_0.append(node_5)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Node'
    assert var_5.data is None
    assert var_5.next is None
    assert var_5.prev == {*()}
    node_6 = module_0.Node()
    var_6 = node_6.__repr__()
    assert var_6 == 'Value: None'
    queue_9 = module_0.Queue(node_6)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_1)
    var_7 = queue_10.dequeue()
    assert var_7 == 77
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    queue_13 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    var_8 = double_linked_list_1.append(node_8)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_9 = queue_12.size()
    assert var_9 == 0
    queue_14 = module_0.Queue()
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    var_10 = queue_14.peek()
    queue_15 = module_0.Queue(queue_14)
    queue_16 = module_0.Queue(queue_14)
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    var_11 = queue_14.size()
    assert var_11 == 0
    set_7 = set()
    node_10 = module_0.Node(prev=set_7)
    queue_19 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_22 = module_0.Queue()

def test_case_679():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_1.push(set_0)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    queue_5 = module_0.Queue(queue_3)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_8 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = queue_8.peek()
    queue_9 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_5 = queue_9.size()
    assert var_5 == 0
    var_6 = queue_8.size()
    assert var_6 == 0
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_11 = module_0.Queue()
    var_7 = queue_11.peek()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_14 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_0)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_8 = double_linked_list_4.append(bytes_0)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_16 = module_0.Queue(queue_15)
    var_9 = queue_14.peek()
    var_10 = double_linked_list_4.pop()
    assert var_10 == b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None

def test_case_680():
    node_0 = module_0.Node()
    node_1 = module_0.Node()
    var_0 = node_1.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_1)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    var_1 = queue_1.dequeue()
    assert var_1 == 77
    queue_2 = module_0.Queue()
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    queue_3 = module_0.Queue(node_2)
    var_3 = queue_3.enqueue(var_2)
    queue_4 = module_0.Queue()
    var_4 = queue_4.size()
    assert var_4 == 0

def test_case_681():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_0 = double_linked_list_2.append(set_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_2.push(set_0)
    var_2 = queue_1.size()
    assert var_2 == 0

def test_case_682():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_0.push(queue_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_2 = queue_3.size()
    assert var_2 == 11
    queue_4 = module_0.Queue()

def test_case_683():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    node_2 = module_0.Node()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    queue_5 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_4 = queue_5.peek()
    node_5 = module_0.Node()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_7 = module_0.Node()
    var_5 = queue_7.size()
    assert var_5 == 0
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    queue_9 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_10 = module_0.Queue()
    set_5 = set()
    node_9 = module_0.Node(prev=set_5)
    var_6 = queue_10.peek()
    var_7 = queue_1.enqueue(bytes_0)

def test_case_684():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None

def test_case_685():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    var_1 = var_0.__repr__()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_5.peek()
    node_3 = module_0.Node()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_4 = var_3.__repr__()
    complex_0 = 2886.801252 + 1418.99508j
    queue_8 = module_0.Queue(complex_0)
    assert f'{type(queue_8).__module__}.{type(queue_8).__qualname__}' == 'queue4.Queue'
    var_5 = queue_8.size()
    assert var_5 == 1
    var_6 = var_5.__repr__()
    assert var_6 == '1'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    queue_10 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_7 = queue_10.size()
    assert var_7 == 0
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_8 = queue_10.size()
    assert var_8 == 0
    queue_12 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_9 = queue_12.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    double_linked_list_4 = module_0.DoubleLinkedList(var_9)
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_14 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_10 = queue_16.size()
    assert var_10 == 0
    queue_17 = module_0.Queue()
    var_11 = queue_1.peek()

def test_case_686():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_687():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.size()
    assert var_2 == 0
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    queue_8 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_5 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    var_6 = queue_9.enqueue(set_4)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None

def test_case_688():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    var_2 = queue_2.size()
    assert var_2 == 1
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_4 = queue_3.size()
    assert var_4 == 11
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_5 = module_0.Queue()
    var_5 = queue_5.peek()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_2)
    queue_9 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_6 = queue_9.peek()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_10 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_7 = queue_10.size()
    assert var_7 == 0
    queue_11 = module_0.Queue()
    var_8 = queue_11.peek()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    queue_12 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_13 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_9 = double_linked_list_6.append(node_7)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    node_8 = module_0.Node()
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    queue_14 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    bytes_3 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_17 = module_0.Queue(bytes_3)
    bytes_4 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_18 = module_0.Queue(bytes_4)
    queue_19 = module_0.Queue()
    set_7 = set()
    node_10 = module_0.Node(prev=set_7)
    var_10 = queue_19.size()
    assert var_10 == 0
    queue_20 = module_0.Queue()
    var_11 = queue_19.size()
    assert var_11 == 0
    node_11 = module_0.Node()

def test_case_689():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    var_2 = queue_1.peek()
    node_3 = module_0.Node()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.push(var_2)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_4 = double_linked_list_2.append(node_5)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_3.enqueue(queue_2)
    queue_4 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_6 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    queue_6 = module_0.Queue(queue_4)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_7 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_7 = module_0.Node(var_3)

def test_case_690():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_7 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    var_2 = queue_6.size()
    assert var_2 == 0
    var_3 = queue_5.size()
    assert var_3 == 0
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(none_type_0)
    var_5 = var_4.__repr__()
    node_4 = module_0.Node()
    var_6 = node_4.__repr__()
    assert var_6 == 'Value: None'
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_7 = node_5.__repr__()
    assert var_7 == 'Value: None'
    queue_10 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_8 = double_linked_list_2.append(node_7)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_0)
    queue_13 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_9 = queue_13.peek()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_10 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    node_10 = module_0.Node()
    var_11 = queue_14.size()
    assert var_11 == 11
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_2)
    queue_16 = module_0.Queue()
    set_8 = set()
    node_11 = module_0.Node(prev=set_8)
    var_12 = queue_16.peek()
    queue_17 = module_0.Queue(queue_16)
    set_9 = set()
    node_12 = module_0.Node(prev=set_9)
    var_13 = var_12.__repr__()
    var_14 = node_2.__repr__()
    assert var_14 == 'Value: None'

def test_case_691():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_6.size()
    assert var_1 == 0
    queue_7 = module_0.Queue()
    var_2 = queue_6.size()
    assert var_2 == 0
    var_3 = var_2.__repr__()
    assert var_3 == '0'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_9 = module_0.Queue()
    var_4 = queue_9.peek()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_12 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_5 = queue_12.peek()
    queue_13 = module_0.Queue(queue_12)
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_6 = var_5.__repr__()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    none_type_0 = None
    queue_14 = module_0.Queue()
    var_7 = queue_14.enqueue(none_type_0)
    var_8 = var_7.__repr__()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_15 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_9 = double_linked_list_2.push(queue_15)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_18 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_10 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    node_7 = module_0.Node()
    var_11 = queue_18.size()
    assert var_11 == 11
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None

def test_case_692():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = queue_2.size()
    assert var_1 == 0
    complex_0 = 2886.801252 + 1418.99508j
    queue_3 = module_0.Queue(complex_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    var_2 = queue_3.size()
    assert var_2 == 1
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    node_5 = module_0.Node()
    queue_5 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_5 = queue_5.peek()
    queue_6 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_6 = queue_6.size()
    assert var_6 == 0
    var_7 = queue_5.size()
    assert var_7 == 0
    queue_7 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    var_8 = queue_7.size()
    assert var_8 == 0
    queue_8 = module_0.Queue()
    var_9 = queue_8.peek()
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    bytes_1 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_12 = module_0.Queue(bytes_1)
    set_7 = set()
    node_10 = module_0.Node(prev=set_7)
    queue_13 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None

def test_case_693():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_1 = queue_0.enqueue(var_0)
    queue_1 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue(queue_2)
    var_3 = queue_1.peek()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bytes_1 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_7 = module_0.Queue(bytes_1)
    queue_8 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_4 = double_linked_list_2.append(node_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    queue_10 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_5 = queue_10.size()
    assert var_5 == 0
    queue_11 = module_0.Queue()
    var_6 = node_5.__repr__()
    assert var_6 == 'Value: None'
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_12 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_7 = queue_14.size()
    assert var_7 == 0
    node_7 = module_0.Node()
    queue_15 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    var_8 = queue_15.peek()
    queue_16 = module_0.Queue(queue_15)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_17 = module_0.Queue(bytes_2)
    var_9 = queue_17.dequeue()
    assert var_9 == 77
    var_10 = queue_13.size()
    assert var_10 == 0

def test_case_694():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_2 = module_0.Node()
    var_0 = queue_2.size()
    assert var_0 == 0
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_5 = module_0.Queue()
    var_2 = queue_5.peek()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    assert f'{type(queue_8).__module__}.{type(queue_8).__qualname__}' == 'queue4.Queue'
    queue_9 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_3 = queue_9.size()
    assert var_3 == 0
    queue_10 = module_0.Queue()
    var_4 = queue_9.size()
    assert var_4 == 0
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_5 = queue_13.peek()
    queue_14 = module_0.Queue(queue_13)
    var_6 = queue_14.enqueue(set_4)
    complex_0 = 2886.801252 + 1418.99508j
    queue_15 = module_0.Queue(complex_0)
    var_7 = queue_15.size()
    assert var_7 == 1
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_8 = queue_11.peek()

def test_case_695():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_2 = queue_2.size()
    assert var_2 == 11
    complex_0 = 2886.801252 + 1418.99508j
    queue_3 = module_0.Queue(complex_0)
    var_3 = queue_3.size()
    assert var_3 == 1
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    double_linked_list_4 = module_0.DoubleLinkedList(queue_2)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_4.tail).__module__}.{type(double_linked_list_4.tail).__qualname__}' == 'queue4.Node'

def test_case_696():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_2 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_2.append(node_4)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    queue_5 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    none_type_0 = None
    var_4 = queue_6.enqueue(none_type_0)
    queue_7 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue(queue_8)
    var_6 = queue_7.peek()
    var_7 = queue_0.enqueue(set_0)

def test_case_697():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = queue_0.size()
    assert var_1 == 0
    var_2 = queue_1.size()
    assert var_2 == 0

def test_case_698():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    none_type_0 = None
    var_1 = queue_1.enqueue(none_type_0)
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()

def test_case_699():
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_0 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_1.append(node_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_1 = double_linked_list_0.append(double_linked_list_1)

def test_case_700():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
    assert var_1.data is None
    assert var_1.next is None
    assert var_1.prev == {*()}
    complex_0 = 2886.801252 + 1418.99508j
    queue_2 = module_0.Queue(complex_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    var_2 = queue_2.size()
    assert var_2 == 1
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(none_type_0)
    var_4 = queue_2.enqueue(set_2)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_5 = queue_5.size()
    assert var_5 == 0
    queue_6 = module_0.Queue()
    var_6 = queue_5.size()
    assert var_6 == 0
    queue_7 = module_0.Queue()
    var_7 = node_2.__repr__()
    assert var_7 == 'Value: None'

def test_case_701():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(prev=none_type_1)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_1 = queue_1.enqueue(set_0)
    queue_2 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    var_3 = queue_2.peek()
    var_4 = queue_4.size()
    assert var_4 == 1
    var_5 = queue_4.dequeue()
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Queue'
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_6 = double_linked_list_1.append(node_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_7 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'queue4.Node'
    assert var_7.data is None
    assert var_7.next is None
    assert var_7.prev == {*()}
    queue_9 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_8 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    queue_11 = module_0.Queue(queue_9)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_9 = queue_9.size()
    assert var_9 == 0
    var_10 = queue_2.enqueue(queue_3)

def test_case_702():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    bool_0 = True
    double_linked_list_1 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_5.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    double_linked_list_3 = module_0.DoubleLinkedList(var_1)
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_7 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_2 = double_linked_list_5.append(bytes_1)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue(queue_8)
    var_3 = queue_7.peek()
    var_4 = queue_9.size()
    assert var_4 == 1
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_10 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_11 = module_0.Queue()
    var_5 = queue_11.peek()
    node_4 = module_0.Node()
    var_6 = node_4.__repr__()
    assert var_6 == 'Value: None'
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_7 = queue_13.peek()
    node_6 = module_0.Node()
    node_7 = module_0.Node(set_4)
    queue_14 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    queue_15 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    var_8 = double_linked_list_7.append(node_9)
    assert f'{type(double_linked_list_7.head).__module__}.{type(double_linked_list_7.head).__qualname__}' == 'queue4.Node'
    var_9 = queue_14.size()
    assert var_9 == 0
    double_linked_list_8 = module_0.DoubleLinkedList(queue_3)
    assert f'{type(double_linked_list_8.head).__module__}.{type(double_linked_list_8.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_8.tail).__module__}.{type(double_linked_list_8.tail).__qualname__}' == 'queue4.Node'

def test_case_703():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = queue_0.size()
    assert var_1 == 11
    node_1 = module_0.Node()
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = var_2.__repr__()
    assert var_3 == "'Value: None'"
    complex_0 = 2886.801252 + 1418.99508j
    queue_1 = module_0.Queue(complex_0)
    var_4 = queue_1.size()
    assert var_4 == 1
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_5 = queue_2.enqueue(none_type_0)
    var_6 = queue_1.enqueue(set_0)
    node_3 = module_0.Node()
    var_7 = node_3.__repr__()
    assert var_7 == 'Value: None'
    queue_3 = module_0.Queue(node_3)
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_704():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    var_1 = queue_4.dequeue()
    assert var_1 == 77
    var_2 = queue_1.enqueue(queue_2)

def test_case_705():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_0.size()
    assert var_0 == 0

def test_case_706():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    queue_2 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = queue_2.peek()
    node_4 = module_0.Node()
    node_5 = module_0.Node(set_2)
    queue_3 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_3 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    var_4 = queue_5.enqueue(set_4)
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    queue_7 = module_0.Queue()
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    var_5 = queue_7.peek()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_8 = module_0.Queue()
    set_7 = set()
    node_10 = module_0.Node(prev=set_7)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_8 = set()
    node_11 = module_0.Node(prev=set_8)
    var_6 = double_linked_list_2.append(node_11)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_7 = queue_9.enqueue(queue_8)
    var_8 = var_4.__repr__()

def test_case_707():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    var_1 = queue_1.dequeue()
    assert var_1 == 77
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_0 = None
    queue_6 = module_0.Queue(none_type_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_3 = queue_7.size()
    assert var_3 == 11
    queue_8 = module_0.Queue()
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    var_4 = queue_8.peek()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_708():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    var_2 = queue_0.enqueue(set_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_3.peek()
    node_3 = module_0.Node()
    bool_0 = True
    double_linked_list_1 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    queue_6 = module_0.Queue(queue_4)
    var_5 = double_linked_list_1.append(node_4)
    var_6 = double_linked_list_1.pop()
    assert var_6 is True

def test_case_709():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    queue_2 = module_0.Queue(node_1)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    var_2 = queue_3.dequeue()
    assert var_2 == 77
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_4 = module_0.Node()
    var_3 = queue_9.size()
    assert var_3 == 0
    var_4 = queue_8.size()
    assert var_4 == 0
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_1)
    queue_14 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_5 = queue_14.size()
    assert var_5 == 0
    queue_15 = module_0.Queue()
    var_6 = queue_14.size()
    assert var_6 == 0
    queue_16 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    none_type_0 = None
    queue_17 = module_0.Queue()
    var_7 = queue_17.enqueue(none_type_0)
    node_7 = module_0.Node(queue_12)

def test_case_710():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_0)
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_2 = queue_1.size()
    assert var_2 == 0
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    queue_4 = module_0.Queue(queue_2)
    node_2 = module_0.Node()
    var_4 = node_2.__repr__()
    assert var_4 == 'Value: None'
    queue_5 = module_0.Queue(node_2)
    var_5 = queue_5.enqueue(var_4)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_4 = module_0.Node()
    var_6 = queue_6.size()
    assert var_6 == 0
    complex_0 = 2886.801252 + 1418.99508j
    queue_7 = module_0.Queue(complex_0)
    var_7 = queue_7.size()
    assert var_7 == 1
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    none_type_0 = None
    queue_8 = module_0.Queue()
    var_8 = queue_8.enqueue(none_type_0)
    var_9 = queue_7.enqueue(set_3)
    node_6 = module_0.Node()
    var_10 = node_6.__repr__()
    assert var_10 == 'Value: None'
    queue_9 = module_0.Queue(node_6)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_1)
    var_11 = queue_10.dequeue()
    assert var_11 == 77
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    queue_13 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    var_12 = double_linked_list_2.append(node_8)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_9 = module_0.Node()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None

def test_case_711():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_0)
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_2 = module_0.Node()
    var_2 = double_linked_list_0.pop()
    assert var_2 == b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'

def test_case_712():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = double_linked_list_2.append(set_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_2.push(set_1)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_3 = queue_6.size()
    assert var_3 == 0
    queue_7 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_4 = double_linked_list_5.push(queue_8)
    assert f'{type(double_linked_list_5.tail).__module__}.{type(double_linked_list_5.tail).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_5.push(queue_8)
    queue_11 = module_0.Queue(double_linked_list_5)

def test_case_713():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_2.append(set_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_2)
    queue_9 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = queue_9.size()
    assert var_4 == 0
    queue_10 = module_0.Queue()
    var_5 = queue_9.size()
    assert var_5 == 0
    queue_11 = module_0.Queue()
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_3)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_6 = double_linked_list_3.append(bytes_3)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_13 = module_0.Queue(queue_12)
    var_7 = queue_11.peek()
    var_8 = queue_13.size()
    assert var_8 == 1
    var_9 = queue_6.enqueue(var_8)

def test_case_714():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_4 = node_2.__repr__()
    assert var_4 == 'Value: None'
    node_3 = module_0.Node()
    var_5 = queue_2.enqueue(var_0)

def test_case_715():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    var_4 = queue_4.size()
    assert var_4 == 0
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_2)
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_5 = queue_7.size()
    assert var_5 == 0
    queue_8 = module_0.Queue()
    var_6 = queue_7.size()
    assert var_6 == 0
    var_7 = var_6.__repr__()
    assert var_7 == '0'
    double_linked_list_0 = module_0.DoubleLinkedList(queue_5)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'

def test_case_716():
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_0 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'

def test_case_717():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    var_2 = var_1.__repr__()
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_2.size()
    assert var_3 == 0
    queue_3 = module_0.Queue()
    none_type_1 = None
    var_4 = queue_3.enqueue(none_type_1)
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_5 = queue_6.size()
    assert var_5 == 0
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_6 = double_linked_list_2.append(node_5)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_6 = module_0.Node()
    node_7 = module_0.Node(double_linked_list_0, queue_9)

def test_case_718():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    queue_3 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = double_linked_list_1.append(node_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'queue4.Node'
    assert var_2.data is None
    assert var_2.next is None
    assert var_2.prev == {*()}
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_3 = module_0.Node()
    var_3 = queue_6.size()
    assert var_3 == 0
    var_4 = queue_5.size()
    assert var_4 == 0
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None

def test_case_719():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_1.enqueue(queue_0)
    var_2 = queue_1.size()
    assert var_2 == 1

def test_case_720():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    var_2 = queue_3.size()
    assert var_2 == 0
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    var_4 = queue_6.enqueue(set_3)
    queue_7 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_5 = queue_7.peek()
    node_5 = module_0.Node()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = double_linked_list_2.push(var_5)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_7 = queue_8.size()
    assert var_7 == 0
    queue_9 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_8 = double_linked_list_3.append(node_8)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_9 = queue_9.size()
    assert var_9 == 0
    queue_11 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_10 = queue_11.peek()
    node_10 = module_0.Node()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_11 = var_10.__repr__()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()

def test_case_721():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_2 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    node_4 = module_0.Node()
    queue_6 = module_0.Queue()
    set_1 = set()
    node_5 = module_0.Node(prev=set_1)
    var_4 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    queue_8 = module_0.Queue(queue_6)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_2 = set()
    node_6 = module_0.Node(prev=set_2)
    var_5 = queue_11.size()
    assert var_5 == 0
    queue_12 = module_0.Queue()
    set_3 = set()
    node_7 = module_0.Node(prev=set_3)
    var_6 = queue_12.peek()
    node_8 = module_0.Node()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_7 = var_6.__repr__()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_2)
    queue_16 = module_0.Queue()
    set_4 = set()
    node_9 = module_0.Node(prev=set_4)
    var_8 = queue_16.size()
    assert var_8 == 0
    queue_17 = module_0.Queue()
    var_9 = queue_16.size()
    assert var_9 == 0
    var_10 = var_9.__repr__()
    assert var_10 == '0'
    queue_18 = module_0.Queue()
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_19 = module_0.Queue(bytes_3)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_11 = double_linked_list_4.append(bytes_3)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_20 = module_0.Queue(queue_19)
    var_12 = queue_18.peek()
    var_13 = queue_20.size()
    assert var_13 == 1
    double_linked_list_5 = module_0.DoubleLinkedList(queue_18)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_5.tail).__module__}.{type(double_linked_list_5.tail).__qualname__}' == 'queue4.Node'

def test_case_722():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = queue_1.peek()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_4.peek()
    node_3 = module_0.Node()
    node_4 = module_0.Node(set_2)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    queue_6 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_4 = queue_6.peek()
    node_6 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    var_5 = queue_7.dequeue()
    assert var_5 == 77
    var_6 = queue_4.size()
    assert var_6 == 0

def test_case_723():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()

def test_case_724():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    var_2 = queue_4.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_4 = node_2.__repr__()
    assert var_4 == 'Value: None'
    node_3 = module_0.Node()
    var_5 = var_2.__repr__()

def test_case_725():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = double_linked_list_2.append(set_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_2.push(set_0)
    var_4 = double_linked_list_0.pop()
    assert var_4 == b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None

def test_case_726():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = queue_5.size()
    assert var_2 == 0
    node_3 = module_0.Node()
    node_4 = module_0.Node()
    var_3 = node_4.__repr__()
    assert var_3 == 'Value: None'
    queue_6 = module_0.Queue(node_4)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    queue_7 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_4 = queue_7.peek()
    node_6 = module_0.Node()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_8 = module_0.Node()
    var_5 = queue_9.size()
    assert var_5 == 0
    queue_11 = module_0.Queue()
    set_5 = set()
    node_9 = module_0.Node(prev=set_5)
    queue_12 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_6 = set()
    node_10 = module_0.Node(prev=set_6)
    var_6 = double_linked_list_3.append(node_10)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_7 = queue_12.enqueue(queue_11)
    bool_0 = True
    double_linked_list_4 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_4.tail).__module__}.{type(double_linked_list_4.tail).__qualname__}' == 'queue4.Node'
    queue_13 = module_0.Queue()
    set_7 = set()
    node_11 = module_0.Node(prev=set_7)
    var_8 = queue_13.peek()
    queue_14 = module_0.Queue(queue_13)
    queue_15 = module_0.Queue(queue_13)
    var_9 = double_linked_list_4.append(node_11)
    var_10 = queue_8.size()
    assert var_10 == 0

def test_case_727():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_0.size()
    assert var_0 == 0
    complex_0 = 2886.801252 + 1418.99508j
    queue_1 = module_0.Queue(complex_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_1 = queue_1.size()
    assert var_1 == 1
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_0)
    var_3 = queue_1.enqueue(set_1)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = queue_6.peek()
    queue_7 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_5 = queue_7.size()
    assert var_5 == 0
    var_6 = queue_6.size()
    assert var_6 == 0
    node_6 = module_0.Node()
    var_7 = node_6.__repr__()
    assert var_7 == 'Value: None'
    var_8 = queue_3.size()
    assert var_8 == 0

def test_case_728():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    var_3 = queue_4.peek()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_7 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_4 = double_linked_list_4.append(node_5)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_8.enqueue(queue_7)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_11 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    node_7 = module_0.Node()
    var_6 = queue_10.size()
    assert var_6 == 0
    var_7 = queue_9.size()
    assert var_7 == 0
    queue_12 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_0)
    assert f'{type(queue_13).__module__}.{type(queue_13).__qualname__}' == 'queue4.Queue'
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_8 = double_linked_list_6.append(bytes_0)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    queue_14 = module_0.Queue(queue_13)
    var_9 = queue_12.peek()
    var_10 = queue_14.size()
    assert var_10 == 1
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_1)
    queue_16 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_11 = queue_16.size()
    assert var_11 == 0
    queue_17 = module_0.Queue()
    var_12 = queue_16.size()
    assert var_12 == 0
    var_13 = var_12.__repr__()
    assert var_13 == '0'
    node_9 = module_0.Node()
    var_14 = node_9.__repr__()
    assert var_14 == 'Value: None'
    queue_18 = module_0.Queue(node_9)
    var_15 = queue_18.enqueue(var_14)
    complex_0 = 2886.801252 + 1418.99508j
    queue_19 = module_0.Queue(complex_0)
    var_16 = queue_19.size()
    assert var_16 == 1
    set_8 = set()
    node_10 = module_0.Node(prev=set_8)
    none_type_0 = None
    queue_20 = module_0.Queue()
    var_17 = queue_20.enqueue(none_type_0)
    var_18 = queue_19.enqueue(set_8)
    queue_21 = module_0.Queue()

def test_case_729():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_730():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    node_0 = module_0.Node()
    queue_3 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    queue_5 = module_0.Queue(queue_3)
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None

def test_case_731():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    var_2 = queue_2.size()
    assert var_2 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_4.peek()
    node_2 = module_0.Node()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_4 = var_3.__repr__()
    queue_7 = module_0.Queue()
    node_3 = module_0.Node()
    var_5 = node_3.__repr__()
    assert var_5 == 'Value: None'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = var_5.__repr__()
    assert var_6 == "'Value: None'"
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None

def test_case_732():
    float_0 = -3043.800134
    str_0 = 'O,S|'
    str_1 = 'm'
    bool_0 = False
    tuple_0 = (float_0, str_0, str_1, bool_0)
    double_linked_list_0 = module_0.DoubleLinkedList(tuple_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'

def test_case_733():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = queue_3.size()
    assert var_1 == 0
    node_3 = module_0.Node()
    node_4 = module_0.Node()
    var_2 = node_4.__repr__()
    assert var_2 == 'Value: None'
    queue_4 = module_0.Queue(node_4)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    var_3 = queue_5.dequeue()
    assert var_3 == 77
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_4 = queue_7.peek()
    queue_8 = module_0.Queue(queue_7)
    queue_9 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_5 = queue_9.peek()
    node_7 = module_0.Node()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_6 = var_5.__repr__()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    queue_13 = module_0.Queue()
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    var_7 = queue_13.size()
    assert var_7 == 0
    queue_14 = module_0.Queue()
    var_8 = queue_13.size()
    assert var_8 == 0
    var_9 = queue_12.peek()
    assert var_9 == 77
    queue_15 = module_0.Queue()
    set_5 = set()
    node_9 = module_0.Node(prev=set_5)
    var_10 = queue_15.peek()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_16 = module_0.Queue(bytes_2)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    double_linked_list_3 = module_0.DoubleLinkedList(var_10)
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_17 = module_0.Queue()
    set_6 = set()
    node_10 = module_0.Node(prev=set_6)
    var_11 = queue_17.peek()
    queue_18 = module_0.Queue(queue_17)
    set_7 = set()
    node_11 = module_0.Node(prev=set_7)
    var_12 = var_11.__repr__()
    var_13 = node_7.__repr__()
    assert var_13 == 'Value: None'

def test_case_734():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_3.peek()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_1 = double_linked_list_2.push(queue_6)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue()

def test_case_735():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_3 = queue_3.size()
    assert var_3 == 11
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(none_type_0)
    var_5 = var_4.__repr__()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_6 = queue_5.size()
    assert var_6 == 0
    queue_6 = module_0.Queue()
    var_7 = node_3.__repr__()
    assert var_7 == 'Value: None'
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_5 = module_0.Node()
    var_8 = queue_8.size()
    assert var_8 == 0
    var_9 = node_4.__repr__()
    assert var_9 == 'Value: None'
    queue_10 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_10 = queue_10.peek()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_2)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    double_linked_list_3 = module_0.DoubleLinkedList(var_10)
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_12 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_11 = queue_12.size()
    assert var_11 == 0
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_12 = queue_13.peek()
    queue_15 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_13 = queue_15.peek()
    queue_16 = module_0.Queue(queue_15)
    queue_17 = module_0.Queue(queue_15)
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    node_10 = module_0.Node()
    var_14 = node_10.__repr__()
    assert var_14 == 'Value: None'
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_15 = var_14.__repr__()
    assert var_15 == "'Value: None'"
    set_8 = set()
    node_11 = module_0.Node(prev=set_8)
    queue_20 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_21 = module_0.Queue()
    queue_22 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    var_16 = double_linked_list_7.append(set_8)
    assert f'{type(double_linked_list_7.head).__module__}.{type(double_linked_list_7.head).__qualname__}' == 'queue4.Node'
    var_17 = double_linked_list_7.push(set_8)
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None

def test_case_736():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.push(var_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    queue_1 = module_0.Queue(node_2)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    var_3 = queue_2.dequeue()
    assert var_3 == 77
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_4 = queue_4.size()
    assert var_4 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_5 = queue_5.peek()
    node_5 = module_0.Node()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    queue_8 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_6 = queue_8.size()
    assert var_6 == 0
    queue_9 = module_0.Queue()
    var_7 = queue_8.size()
    assert var_7 == 0
    queue_10 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_8 = queue_10.peek()
    queue_11 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    var_9 = queue_11.size()
    assert var_9 == 0
    queue_12 = module_0.Queue()
    none_type_0 = None
    var_10 = queue_12.enqueue(none_type_0)
    queue_13 = module_0.Queue()
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    var_11 = queue_13.size()
    assert var_11 == 0
    queue_14 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_12 = queue_13.size()
    assert var_12 == 0
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_3 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    var_13 = queue_11.peek()

def test_case_737():
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_0 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.peek()
    node_2 = module_0.Node()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_2 = var_1.__repr__()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = var_3.__repr__()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_5 = double_linked_list_3.push(queue_8)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    var_6 = double_linked_list_3.push(queue_8)
    queue_11 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_7 = queue_11.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_0)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    double_linked_list_6 = module_0.DoubleLinkedList(var_7)
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_13 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_8 = queue_13.peek()
    node_8 = module_0.Node()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    queue_14 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    bytes_1 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_17 = module_0.Queue(bytes_1)
    queue_18 = module_0.Queue()
    set_8 = set()
    node_10 = module_0.Node(prev=set_8)
    var_9 = queue_18.peek()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_19 = module_0.Queue(bytes_2)
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    double_linked_list_9 = module_0.DoubleLinkedList(var_9)
    assert double_linked_list_9.head is None
    assert double_linked_list_9.tail is None
    double_linked_list_10 = module_0.DoubleLinkedList()
    assert double_linked_list_10.head is None
    assert double_linked_list_10.tail is None
    queue_20 = module_0.Queue()
    set_9 = set()
    node_11 = module_0.Node(prev=set_9)
    queue_21 = module_0.Queue()
    double_linked_list_11 = module_0.DoubleLinkedList()
    assert double_linked_list_11.head is None
    assert double_linked_list_11.tail is None
    set_10 = set()
    node_12 = module_0.Node(prev=set_10)
    var_10 = double_linked_list_11.append(node_12)
    assert f'{type(double_linked_list_11.head).__module__}.{type(double_linked_list_11.head).__qualname__}' == 'queue4.Node'
    var_11 = queue_20.size()
    assert var_11 == 0
    var_12 = queue_7.size()
    assert var_12 == 1

def test_case_738():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_2 = module_0.Node()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_6 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_1 = queue_6.size()
    assert var_1 == 0
    queue_7 = module_0.Queue()
    none_type_0 = None
    var_2 = queue_7.enqueue(none_type_0)
    queue_8 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_3 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    assert f'{type(queue_9).__module__}.{type(queue_9).__qualname__}' == 'queue4.Queue'
    queue_10 = module_0.Queue(queue_8)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_4 = queue_8.size()
    assert var_4 == 0
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_13 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    node_7 = module_0.Node()
    var_5 = node_7.__repr__()
    assert var_5 == 'Value: None'
    var_6 = queue_9.size()
    assert var_6 == 1

def test_case_739():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_3 = module_0.Node()
    var_1 = queue_2.size()
    assert var_1 == 0
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    queue_4 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_3 = queue_4.peek()
    node_5 = module_0.Node()
    node_6 = module_0.Node(set_2)
    complex_0 = 2886.801252 + 1418.99508j
    queue_5 = module_0.Queue(complex_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    var_4 = queue_5.size()
    assert var_4 == 1
    queue_6 = module_0.Queue()
    set_3 = set()
    node_7 = module_0.Node(prev=set_3)
    var_5 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = queue_9.size()
    assert var_6 == 0
    set_5 = set()
    node_9 = module_0.Node(prev=set_5)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_0)
    queue_12 = module_0.Queue()
    set_6 = set()
    node_10 = module_0.Node(prev=set_6)
    var_7 = queue_12.peek()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_13 = module_0.Queue()

def test_case_740():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_0 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue(queue_4)
    var_1 = queue_3.peek()
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_6.peek()
    node_2 = module_0.Node()
    queue_7 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_7.peek()
    queue_8 = module_0.Queue(queue_7)
    queue_9 = module_0.Queue(queue_7)
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_4 = double_linked_list_4.append(set_3)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_4.push(set_3)
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_13 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_6 = double_linked_list_6.append(set_4)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    queue_16 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_7 = queue_16.peek()
    node_7 = module_0.Node()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    var_8 = double_linked_list_7.push(var_7)
    assert f'{type(double_linked_list_7.tail).__module__}.{type(double_linked_list_7.tail).__qualname__}' == 'queue4.Node'
    var_9 = queue_8.dequeue()
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'queue4.Queue'

def test_case_741():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_1 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    node_3 = module_0.Node()
    complex_0 = 2886.801252 + 1418.99508j
    queue_3 = module_0.Queue(complex_0)
    var_3 = queue_3.size()
    assert var_3 == 1
    queue_4 = module_0.Queue()
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    var_4 = queue_4.size()
    assert var_4 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_5 = queue_5.peek()
    node_6 = module_0.Node()

def test_case_742():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_0.push(queue_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.peek()
    node_2 = module_0.Node()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_2 = var_1.__repr__()
    queue_6 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_4 = queue_7.size()
    assert var_4 == 11
    queue_8 = module_0.Queue()
    float_0 = -3043.800134
    str_0 = 'O,S|'
    str_1 = 'm'
    bool_0 = False
    tuple_0 = (float_0, str_0, str_1, bool_0)
    double_linked_list_3 = module_0.DoubleLinkedList(tuple_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    bool_1 = True
    double_linked_list_4 = module_0.DoubleLinkedList(bool_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_4.tail).__module__}.{type(double_linked_list_4.tail).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_5 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    queue_11 = module_0.Queue(queue_9)
    var_6 = double_linked_list_4.append(node_4)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    queue_13 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_7 = queue_13.size()
    assert var_7 == 0
    queue_14 = module_0.Queue()
    var_8 = queue_13.size()
    assert var_8 == 0
    var_9 = var_8.__repr__()
    assert var_9 == '0'
    var_10 = queue_9.peek()

def test_case_743():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    var_1 = var_0.__repr__()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    var_4 = queue_5.peek()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    bool_0 = True
    double_linked_list_2 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_2).__module__}.{type(double_linked_list_2).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None

def test_case_744():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = var_1.__repr__()
    assert var_2 == '0'
    float_0 = -3043.800134
    str_0 = 'O,S|'
    str_1 = 'm'
    bool_0 = False
    tuple_0 = (float_0, str_0, str_1, bool_0)
    double_linked_list_0 = module_0.DoubleLinkedList(tuple_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_2 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_2)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = double_linked_list_3.append(bytes_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue(queue_6)
    var_5 = queue_5.peek()
    var_6 = queue_7.size()
    assert var_6 == 1
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_7 = double_linked_list_5.append(set_2)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_8 = double_linked_list_5.push(set_2)
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_3)
    var_9 = queue_11.dequeue()
    assert var_9 == 77
    queue_12 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_10 = queue_12.size()
    assert var_10 == 0
    queue_13 = module_0.Queue()
    var_11 = double_linked_list_5.push(queue_1)

def test_case_745():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    complex_0 = 2886.801252 + 1418.99508j
    queue_1 = module_0.Queue(complex_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_0 = queue_1.size()
    assert var_0 == 1
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'

def test_case_746():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = queue_0.size()
    assert var_1 == 0
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = double_linked_list_1.push(queue_3)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_1.push(queue_3)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_7 = module_0.Queue()
    node_4 = module_0.Node()
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    queue_8 = module_0.Queue(node_4)
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_5 = double_linked_list_5.append(set_3)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_6 = double_linked_list_5.push(set_3)
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_12 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    node_7 = module_0.Node()
    var_7 = queue_12.size()
    assert var_7 == 0
    float_0 = -3043.800134
    str_0 = 'O,S|'
    str_1 = 'm'
    bool_0 = False
    tuple_0 = (float_0, str_0, str_1, bool_0)
    double_linked_list_7 = module_0.DoubleLinkedList(tuple_0)
    assert f'{type(double_linked_list_7.head).__module__}.{type(double_linked_list_7.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_7.tail).__module__}.{type(double_linked_list_7.tail).__qualname__}' == 'queue4.Node'
    none_type_0 = None
    node_8 = module_0.Node(prev=none_type_0)
    queue_13 = module_0.Queue()

def test_case_747():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_0 = queue_1.size()
    assert var_0 == 0
    complex_0 = 2886.801252 + 1418.99508j
    queue_3 = module_0.Queue(complex_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    var_1 = queue_3.size()
    assert var_1 == 1
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_2 = module_0.Node()
    var_2 = var_0.__repr__()
    assert var_2 == '0'

def test_case_748():
    none_type_0 = None
    queue_0 = module_0.Queue(none_type_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'

def test_case_749():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = queue_5.size()
    assert var_2 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    var_3 = queue_6.dequeue()
    assert var_3 == 77
    queue_7 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_7.peek()
    var_5 = queue_7.size()
    assert var_5 == 0

def test_case_750():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_2.size()
    assert var_3 == 0
    node_3 = module_0.Node()
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    queue_4 = module_0.Queue(node_3)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    var_5 = queue_5.dequeue()
    assert var_5 == 77
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    queue_8 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_7 = queue_8.peek()
    node_6 = module_0.Node()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_8 = var_7.__repr__()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_2)
    var_9 = queue_6.enqueue(var_4)

def test_case_751():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_3.peek()
    node_3 = module_0.Node()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.push(var_2)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    complex_0 = 2886.801252 + 1418.99508j
    queue_4 = module_0.Queue(complex_0)
    var_4 = queue_4.size()
    assert var_4 == 1
    var_5 = var_4.__repr__()
    assert var_5 == '1'
    none_type_0 = None
    node_4 = module_0.Node(prev=none_type_0)
    node_5 = module_0.Node()

def test_case_752():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    none_type_0 = None
    node_3 = module_0.Node(prev=none_type_0)
    complex_0 = 2886.801252 + 1418.99508j
    queue_2 = module_0.Queue(complex_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    var_1 = queue_2.size()
    assert var_1 == 1
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_0.push(queue_1)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'

def test_case_753():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_1 = queue_1.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_1)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    bool_0 = True
    double_linked_list_3 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    queue_5 = module_0.Queue(queue_3)
    var_3 = double_linked_list_3.append(node_2)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    bytes_1 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_9 = module_0.Queue(bytes_1)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_2)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_4 = double_linked_list_5.append(bytes_2)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    queue_11 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_5 = queue_11.peek()
    queue_12 = module_0.Queue(queue_11)
    queue_13 = module_0.Queue(queue_11)
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_14 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    var_6 = queue_16.size()
    assert var_6 == 0
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_17 = module_0.Queue(bytes_3)
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    var_7 = double_linked_list_8.append(bytes_3)
    assert f'{type(double_linked_list_8.head).__module__}.{type(double_linked_list_8.head).__qualname__}' == 'queue4.Node'
    node_6 = module_0.Node()
    var_8 = node_6.__repr__()
    assert var_8 == 'Value: None'
    node_7 = module_0.Node()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    queue_18 = module_0.Queue()
    double_linked_list_9 = module_0.DoubleLinkedList()
    assert double_linked_list_9.head is None
    assert double_linked_list_9.tail is None
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    double_linked_list_10 = module_0.DoubleLinkedList()
    assert double_linked_list_10.head is None
    assert double_linked_list_10.tail is None
    var_9 = double_linked_list_9.push(queue_18)
    assert f'{type(double_linked_list_9.tail).__module__}.{type(double_linked_list_9.tail).__qualname__}' == 'queue4.Node'
    node_9 = module_0.Node(next_node=double_linked_list_6)

def test_case_754():
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_0 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    queue_2 = module_0.Queue(queue_0)
    var_1 = double_linked_list_0.append(node_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    var_4 = queue_6.enqueue(set_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_3 = module_0.Node()
    var_5 = queue_8.size()
    assert var_5 == 0
    var_6 = queue_7.size()
    assert var_6 == 0
    queue_10 = module_0.Queue()

def test_case_755():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.push(var_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    queue_1 = module_0.Queue(node_2)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    var_3 = queue_2.dequeue()
    assert var_3 == 77
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_4 = queue_4.size()
    assert var_4 == 0
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_5 = queue_4.size()
    assert var_5 == 0
    queue_6 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_7 = module_0.Queue(complex_0)
    var_6 = queue_7.size()
    assert var_6 == 1
    node_4 = module_0.Node()
    var_7 = node_4.__repr__()
    assert var_7 == 'Value: None'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_8 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_9 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_9 = double_linked_list_4.append(node_6)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_10 = queue_9.size()
    assert var_10 == 0
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_2)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_11 = double_linked_list_5.append(bytes_2)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    node_7 = module_0.Node()
    var_12 = queue_11.size()
    assert var_12 == 11
    complex_1 = 2886.801252 + 1418.99508j
    queue_12 = module_0.Queue(complex_1)
    var_13 = queue_12.size()
    assert var_13 == 1
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_14 = double_linked_list_4.pop()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    assert f'{type(var_14).__module__}.{type(var_14).__qualname__}' == 'queue4.Node'
    assert var_14.data is None
    assert var_14.next is None
    assert var_14.prev == {*()}

def test_case_756():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    none_type_0 = None
    var_1 = queue_1.enqueue(none_type_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_3.peek()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = queue_6.size()
    assert var_3 == 0
    node_4 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    complex_0 = 2886.801252 + 1418.99508j
    queue_8 = module_0.Queue(complex_0)
    var_5 = queue_8.size()
    assert var_5 == 1
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_9 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_10 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_6 = double_linked_list_5.append(node_7)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_7 = double_linked_list_5.shift()
    assert double_linked_list_5.tail is None
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'queue4.Node'
    assert var_7.data is None
    assert var_7.next is None
    assert var_7.prev == {*()}
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    none_type_1 = None
    queue_11 = module_0.Queue()
    var_8 = queue_11.enqueue(none_type_1)
    var_9 = var_8.__repr__()
    var_10 = var_5.__repr__()
    assert var_10 == '1'

def test_case_757():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_2.peek()
    node_2 = module_0.Node()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_3 = var_2.__repr__()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_4 = queue_6.size()
    assert var_4 == 0
    queue_7 = module_0.Queue()
    var_5 = queue_6.size()
    assert var_5 == 0
    var_6 = var_5.__repr__()
    assert var_6 == '0'
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_9 = module_0.Queue()
    var_7 = queue_9.peek()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_10 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_8 = double_linked_list_1.push(queue_10)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    none_type_0 = None
    queue_13 = module_0.Queue()
    var_9 = queue_13.enqueue(none_type_0)
    queue_14 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_10 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_16 = module_0.Queue(queue_15)
    var_11 = queue_14.peek()
    var_12 = queue_16.size()
    assert var_12 == 1
    var_13 = queue_16.dequeue()
    assert f'{type(var_13).__module__}.{type(var_13).__qualname__}' == 'queue4.Queue'
    queue_17 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_14 = queue_17.peek()
    queue_18 = module_0.Queue(queue_17)
    queue_19 = module_0.Queue(queue_17)
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    var_15 = queue_17.size()
    assert var_15 == 0
    var_16 = queue_2.enqueue(var_13)

def test_case_758():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_0.size()
    assert var_0 == 0
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'

def test_case_759():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_2.size()
    assert var_1 == 1

def test_case_760():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_3 = double_linked_list_2.push(queue_5)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_2.push(queue_5)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_5 = double_linked_list_0.pop()
    assert var_5 == b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None

def test_case_761():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_6.size()
    assert var_2 == 0
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_7.peek()
    queue_9 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_4 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    assert f'{type(queue_10).__module__}.{type(queue_10).__qualname__}' == 'queue4.Queue'
    queue_11 = module_0.Queue(queue_9)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_5 = queue_9.size()
    assert var_5 == 0
    queue_14 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_15 = module_0.Queue(complex_0)
    var_6 = queue_15.size()
    assert var_6 == 1
    node_5 = module_0.Node()
    var_7 = node_5.__repr__()
    assert var_7 == 'Value: None'
    queue_16 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_8 = queue_16.peek()
    node_7 = module_0.Node()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_9 = double_linked_list_2.push(var_8)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    queue_17 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_10 = queue_17.peek()
    queue_18 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_11 = queue_18.size()
    assert var_11 == 0
    queue_19 = module_0.Queue()
    var_12 = node_9.__repr__()
    assert var_12 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_20 = module_0.Queue(bytes_0)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_13 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_14 = double_linked_list_3.append(queue_20)
    queue_21 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_22 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_15 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_23 = module_0.Queue(queue_22)
    var_16 = queue_21.peek()
    var_17 = queue_23.size()
    assert var_17 == 1
    var_18 = queue_23.dequeue()
    assert f'{type(var_18).__module__}.{type(var_18).__qualname__}' == 'queue4.Queue'
    var_19 = node_0.__repr__()
    assert var_19 == 'Value: None'

def test_case_762():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.push(var_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_2.enqueue(queue_1)
    queue_3 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = queue_3.peek()
    queue_4 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_5 = queue_4.size()
    assert var_5 == 0
    var_6 = queue_3.size()
    assert var_6 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_7 = module_0.Node()
    var_7 = queue_6.size()
    assert var_7 == 0
    complex_0 = 2886.801252 + 1418.99508j
    queue_8 = module_0.Queue(complex_0)
    var_8 = queue_8.size()
    assert var_8 == 1
    var_9 = var_8.__repr__()
    assert var_9 == '1'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    queue_10 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_10 = queue_10.size()
    assert var_10 == 0
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None

def test_case_763():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_1 = queue_1.peek()
    node_2 = module_0.Node()
    node_3 = module_0.Node(set_0)
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_0.push(queue_2)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_0.push(queue_2)
    bool_0 = True
    double_linked_list_2 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_4 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    queue_7 = module_0.Queue(queue_5)
    var_5 = double_linked_list_2.append(node_5)
    str_0 = 'arf{ _37\th4-E=n'
    queue_8 = module_0.Queue(str_0)

def test_case_764():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    complex_0 = 2886.801252 + 1418.99508j
    queue_1 = module_0.Queue(complex_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_0 = queue_1.size()
    assert var_0 == 1
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_0.append(queue_2)
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = node_1.__repr__()
    assert var_4 == 'Value: None'
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_5 = module_0.Queue()
    var_5 = queue_5.peek()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    complex_1 = 2886.801252 + 1418.99508j
    queue_9 = module_0.Queue(complex_1)
    var_6 = queue_9.size()
    assert var_6 == 1
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_5 = module_0.Node()
    var_7 = var_0.__repr__()
    assert var_7 == '1'

def test_case_765():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 0

def test_case_766():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == 77
    var_1 = queue_0.peek()
    assert var_1 == 249

def test_case_767():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    node_1 = module_0.Node()
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_2 = module_0.Queue(complex_0)
    var_2 = queue_2.size()
    assert var_2 == 1
    node_3 = module_0.Node()
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    none_type_0 = None
    queue_3 = module_0.Queue(none_type_0)
    queue_4 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue(queue_5)
    var_5 = queue_4.peek()
    var_6 = queue_6.size()
    assert var_6 == 1
    var_7 = queue_6.dequeue()
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'queue4.Queue'
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_2)
    double_linked_list_2 = module_0.DoubleLinkedList()
    var_8 = double_linked_list_2.append(bytes_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue()
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    var_9 = queue_8.peek()
    queue_9 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_10 = double_linked_list_3.append(node_6)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_11 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_11 = queue_11.peek()
    queue_12 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    var_12 = queue_12.size()
    assert var_12 == 0
    var_13 = queue_11.size()
    assert var_13 == 0
    var_14 = queue_1.enqueue(queue_11)
    var_15 = var_14.__repr__()

def test_case_768():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = queue_0.size()
    assert var_1 == 0
    var_2 = double_linked_list_0.push(double_linked_list_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'

def test_case_769():
    int_0 = -3616
    queue_0 = module_0.Queue(int_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == -3616

def test_case_770():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue(queue_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    queue_3 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    var_3 = queue_3.size()
    assert var_3 == 0
    var_4 = queue_2.peek()
    assert var_4 == 77
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_5 = double_linked_list_2.append(set_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue()
    var_6 = queue_8.size()
    assert var_6 == 0
    var_7 = queue_2.peek()
    assert var_7 == 77

def test_case_771():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_2 = module_0.Node()
    var_1 = queue_2.size()
    assert var_1 == 0
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    queue_3 = module_0.Queue()

def test_case_772():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_0.size()
    assert var_1 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_6.size()
    assert var_2 == 0
    queue_7 = module_0.Queue()
    var_3 = queue_6.size()
    assert var_3 == 0
    var_4 = var_3.__repr__()
    assert var_4 == '0'
    queue_8 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_5 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue(queue_9)
    var_6 = queue_8.peek()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(none_type_0)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_14 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_8 = queue_14.peek()
    node_4 = module_0.Node()
    node_5 = module_0.Node(set_3)
    bool_0 = True
    var_9 = queue_8.enqueue(bool_0)

def test_case_773():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_2 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    var_3 = queue_2.peek()
    var_4 = queue_4.size()
    assert var_4 == 1
    node_1 = module_0.Node()
    var_5 = node_1.__repr__()
    assert var_5 == 'Value: None'
    bool_0 = True
    double_linked_list_1 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_6 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    queue_7 = module_0.Queue(queue_5)
    var_7 = double_linked_list_1.append(node_2)
    queue_8 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_8 = queue_8.peek()
    queue_9 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_9 = queue_9.size()
    assert var_9 == 0
    var_10 = queue_8.size()
    assert var_10 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_11 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    bool_1 = True
    double_linked_list_3 = module_0.DoubleLinkedList(bool_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None

def test_case_774():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0, prev=none_type_0)

def test_case_775():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = var_0.__repr__()
    assert var_1 == "'Value: None'"
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_3 = double_linked_list_3.push(queue_1)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    complex_0 = 2886.801252 + 1418.99508j
    queue_4 = module_0.Queue(complex_0)
    var_4 = queue_4.size()
    assert var_4 == 1
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_5 = queue_5.enqueue(none_type_0)
    var_6 = queue_4.enqueue(set_1)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    none_type_1 = None
    queue_9 = module_0.Queue()
    var_7 = queue_9.enqueue(none_type_1)
    var_8 = var_7.__repr__()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    queue_12 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_9 = queue_12.peek()
    queue_13 = module_0.Queue(queue_12)
    queue_14 = module_0.Queue(queue_12)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    var_10 = queue_12.size()
    assert var_10 == 0
    queue_17 = module_0.Queue()

def test_case_776():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_3.peek()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_4.size()
    assert var_2 == 0
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_4 = double_linked_list_1.append(node_5)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Node'
    assert var_5.data is None
    assert var_5.next is None
    assert var_5.prev == {*()}
    queue_7 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_6 = queue_7.peek()
    node_7 = module_0.Node()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_7 = double_linked_list_2.push(var_6)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_8 = queue_8.size()
    assert var_8 == 0
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_9 = queue_9.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_0)
    var_10 = queue_11.dequeue()
    assert var_10 == 77
    var_11 = queue_11.peek()
    assert var_11 == 249
    queue_12 = module_0.Queue()
    set_8 = set()
    node_10 = module_0.Node(prev=set_8)
    var_12 = queue_12.size()
    assert var_12 == 0
    queue_13 = module_0.Queue()
    var_13 = node_10.__repr__()
    assert var_13 == 'Value: None'
    set_9 = set()
    node_11 = module_0.Node(prev=set_9)
    queue_14 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_14 = queue_16.size()
    assert var_14 == 0
    var_15 = queue_0.peek()

def test_case_777():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue(queue_2)
    var_2 = queue_1.peek()
    var_3 = queue_3.size()
    assert var_3 == 1
    queue_4 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_4 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    queue_6 = module_0.Queue(queue_4)
    queue_7 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_5 = queue_7.peek()
    queue_8 = module_0.Queue(queue_7)
    queue_9 = module_0.Queue(queue_7)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_2)
    var_6 = queue_12.dequeue()
    assert var_6 == 77
    var_7 = queue_12.peek()
    assert var_7 == 249
    queue_13 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_8 = queue_13.peek()
    queue_14 = module_0.Queue(queue_13)
    queue_15 = module_0.Queue(queue_13)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    var_9 = queue_13.size()
    assert var_9 == 0
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_778():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_1 = queue_1.dequeue()
    assert var_1 == 77
    var_2 = queue_1.peek()
    assert var_2 == 249
    queue_2 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = double_linked_list_0.append(node_3)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_3.enqueue(queue_2)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_5 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_6 = queue_5.size()
    assert var_6 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_7 = double_linked_list_2.append(node_6)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_8 = queue_9.size()
    assert var_8 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_9 = queue_10.peek()
    var_10 = var_7.__repr__()

def test_case_779():
    node_0 = module_0.Node()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    var_0 = queue_0.size()
    assert var_0 == 0
    node_3 = module_0.Node()
    var_1 = node_3.__repr__()
    assert var_1 == 'Value: None'
    queue_1 = module_0.Queue(node_3)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    var_2 = queue_2.dequeue()
    assert var_2 == 77
    queue_3 = module_0.Queue()
    bool_0 = True
    double_linked_list_1 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_780():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    var_1 = queue_3.peek()
    var_2 = node_0.__repr__()
    assert var_2 == 'Value: None'

def test_case_781():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_0 = None
    queue_6 = module_0.Queue(none_type_0)
    queue_7 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_8 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_4 = module_0.Node()
    var_3 = queue_9.size()
    assert var_3 == 0
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    none_type_1 = None
    queue_10 = module_0.Queue()
    var_4 = queue_10.enqueue(none_type_1)
    var_5 = var_4.__repr__()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_6 = module_0.Node()
    queue_12 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_7 = queue_12.peek()
    queue_13 = module_0.Queue(queue_12)
    queue_14 = module_0.Queue(queue_12)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None

def test_case_782():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bytes_0 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_4.size()
    assert var_0 == 0
    queue_5 = module_0.Queue()
    none_type_0 = None
    var_1 = queue_5.enqueue(none_type_0)
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Node'
    assert var_3.data is None
    assert var_3.next is None
    assert var_3.prev == {*()}
    queue_8 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_4 = double_linked_list_2.append(node_5)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_9.enqueue(queue_8)
    queue_10 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_6 = queue_10.size()
    assert var_6 == 0
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    var_7 = queue_11.peek()
    set_8 = set()
    node_8 = module_0.Node(prev=set_8)
    queue_13 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_8 = double_linked_list_4.append(set_8)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_16 = module_0.Queue(bytes_1)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_9 = double_linked_list_5.append(bytes_1)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    node_9 = module_0.Node()
    var_10 = node_9.__repr__()
    assert var_10 == 'Value: None'
    queue_17 = module_0.Queue(node_9)
    queue_18 = module_0.Queue()
    set_9 = set()
    node_10 = module_0.Node(prev=set_9)
    var_11 = queue_18.peek()
    queue_19 = module_0.Queue()
    set_10 = set()
    node_11 = module_0.Node(prev=set_10)
    var_12 = queue_19.size()
    assert var_12 == 0
    var_13 = queue_18.size()
    assert var_13 == 0
    var_14 = node_3.__repr__()
    assert var_14 == 'Value: None'

def test_case_783():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == 77
    var_1 = queue_0.peek()
    assert var_1 == 249
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_2 = queue_1.peek()
    node_1 = module_0.Node()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_3 = var_2.__repr__()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    node_2 = module_0.Node()
    var_4 = node_2.__repr__()
    assert var_4 == 'Value: None'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_5 = var_4.__repr__()
    assert var_5 == "'Value: None'"
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_2)
    queue_6 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_6 = queue_6.size()
    assert var_6 == 0
    queue_7 = module_0.Queue()
    var_7 = queue_6.size()
    assert var_7 == 0
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_5 = module_0.Node()
    var_8 = queue_8.size()
    assert var_8 == 0
    var_9 = node_4.__repr__()
    assert var_9 == 'Value: None'
    var_10 = double_linked_list_1.append(var_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'

def test_case_784():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    none_type_0 = None
    var_1 = queue_1.enqueue(none_type_0)
    var_2 = var_0.__repr__()
    assert var_2 == '0'

def test_case_785():
    str_0 = "d^_Z'j<ceXum|X7"
    node_0 = module_0.Node(str_0)

def test_case_786():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_1 = queue_1.enqueue(set_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    var_3 = queue_4.size()
    assert var_3 == 0
    var_4 = var_3.__repr__()
    assert var_4 == '0'
    node_2 = module_0.Node()
    var_5 = node_2.__repr__()
    assert var_5 == 'Value: None'
    queue_6 = module_0.Queue(node_2)
    queue_7 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_6 = double_linked_list_0.append(node_4)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    var_7 = node_5.__repr__()
    assert var_7 == 'Value: None'
    complex_0 = 2886.801252 + 1418.99508j
    queue_9 = module_0.Queue(complex_0)
    var_8 = queue_9.size()
    assert var_8 == 1
    var_9 = var_8.__repr__()
    assert var_9 == '1'
    queue_10 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_10 = queue_10.peek()
    node_7 = module_0.Node()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_11 = double_linked_list_1.push(var_10)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    var_12 = node_3.__repr__()
    assert var_12 == 'Value: None'

def test_case_787():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = queue_2.size()
    assert var_1 == 0
    node_2 = module_0.Node()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_4 = queue_5.size()
    assert var_4 == 0
    queue_6 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    queue_8 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_5 = queue_8.size()
    assert var_5 == 0
    queue_9 = module_0.Queue()
    var_6 = queue_8.size()
    assert var_6 == 0
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_7 = double_linked_list_4.append(set_4)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_8 = double_linked_list_4.push(set_4)
    var_9 = queue_11.enqueue(queue_1)

def test_case_788():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    node_2 = module_0.Node(set_0)
    queue_1 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_2 = queue_2.size()
    assert var_2 == 0
    var_3 = queue_1.size()
    assert var_3 == 0
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = double_linked_list_1.append(set_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_1.push(set_3)
    queue_6 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_6 = queue_6.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    double_linked_list_3 = module_0.DoubleLinkedList(var_6)
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_8 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_7 = double_linked_list_5.append(set_5)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    node_8 = module_0.Node()
    var_8 = node_8.__repr__()
    assert var_8 == 'Value: None'
    queue_11 = module_0.Queue(node_8)
    var_9 = queue_11.enqueue(var_8)
    queue_12 = module_0.Queue()
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    var_10 = queue_12.size()
    assert var_10 == 0
    queue_13 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_11 = queue_12.size()
    assert var_11 == 0
    queue_14 = module_0.Queue()
    set_7 = set()
    node_10 = module_0.Node(prev=set_7)
    queue_15 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    set_8 = set()
    node_11 = module_0.Node(prev=set_8)
    var_12 = double_linked_list_7.append(node_11)
    assert f'{type(double_linked_list_7.head).__module__}.{type(double_linked_list_7.head).__qualname__}' == 'queue4.Node'
    node_12 = module_0.Node()
    queue_16 = module_0.Queue()

def test_case_789():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_4.peek()
    node_4 = module_0.Node()
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    queue_6 = module_0.Queue(node_4)
    var_5 = queue_6.enqueue(var_4)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_6 = queue_8.size()
    assert var_6 == 0
    queue_9 = module_0.Queue()
    none_type_0 = None
    var_7 = queue_9.enqueue(none_type_0)
    var_8 = queue_3.size()
    assert var_8 == 0

def test_case_790():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    var_2 = queue_2.size()
    assert var_2 == 1
    queue_3 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_3 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    queue_5 = module_0.Queue(queue_3)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_5 = var_3.__repr__()

def test_case_791():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue(queue_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = queue_2.size()
    assert var_3 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    queue_8 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = queue_8.size()
    assert var_4 == 0
    queue_9 = module_0.Queue()
    var_5 = queue_8.size()
    assert var_5 == 0
    var_6 = queue_7.peek()
    assert var_6 == 77
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()

def test_case_792():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    var_1 = queue_1.dequeue()
    assert var_1 == 77
    queue_2 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    queue_4 = module_0.Queue()
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = queue_6.size()
    assert var_3 == 0
    complex_0 = 2886.801252 + 1418.99508j
    queue_8 = module_0.Queue(complex_0)
    var_4 = queue_8.size()
    assert var_4 == 1
    var_5 = var_4.__repr__()
    assert var_5 == '1'
    queue_9 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_6 = queue_9.peek()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_2)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    double_linked_list_4 = module_0.DoubleLinkedList(var_6)
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_11 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_7 = queue_11.peek()
    node_5 = module_0.Node()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_8 = double_linked_list_6.push(var_7)
    assert f'{type(double_linked_list_6.tail).__module__}.{type(double_linked_list_6.tail).__qualname__}' == 'queue4.Node'
    complex_1 = 1851.002 - 2261.566174j
    list_0 = [complex_1, complex_1, complex_1, complex_1]
    double_linked_list_7 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_7.tail).__module__}.{type(double_linked_list_7.tail).__qualname__}' == 'queue4.Node'
    var_9 = queue_10.peek()
    assert var_9 == 77

def test_case_793():
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_0 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    queue_2 = module_0.Queue(queue_0)
    var_1 = double_linked_list_0.append(node_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_2 = module_0.Node()
    var_2 = queue_3.size()
    assert var_2 == 0
    node_3 = module_0.Node()
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = var_3.__repr__()
    assert var_4 == "'Value: None'"
    queue_4 = module_0.Queue()
    var_5 = queue_4.size()
    assert var_5 == 0

def test_case_794():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue(node_1)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    var_2 = queue_4.dequeue()
    assert var_2 == 77
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = queue_6.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_3)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    bool_0 = True
    double_linked_list_3 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    complex_0 = 2886.801252 + 1418.99508j
    queue_8 = module_0.Queue(complex_0)
    var_4 = queue_8.size()
    assert var_4 == 1
    var_5 = var_4.__repr__()
    assert var_5 == '1'
    node_3 = module_0.Node()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0, prev=none_type_0)
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    double_linked_list_5 = module_0.DoubleLinkedList(double_linked_list_0)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_5.tail).__module__}.{type(double_linked_list_5.tail).__qualname__}' == 'queue4.Node'

def test_case_795():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue(queue_0)
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_2.peek()
    node_1 = module_0.Node()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = var_1.__repr__()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_1.push(queue_5)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_4 = queue_8.size()
    assert var_4 == 0
    queue_9 = module_0.Queue()
    var_5 = queue_9.peek()
    var_6 = double_linked_list_0.append(queue_5)

def test_case_796():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = queue_3.size()
    assert var_1 == 0
    node_2 = module_0.Node()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_4.peek()
    node_4 = module_0.Node()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = var_2.__repr__()
    queue_7 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_8 = module_0.Queue(complex_0)
    assert f'{type(queue_8).__module__}.{type(queue_8).__qualname__}' == 'queue4.Queue'
    var_4 = queue_8.size()
    assert var_4 == 1
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    none_type_0 = None
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(none_type_0)
    var_6 = queue_8.enqueue(set_3)
    queue_10 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_7 = queue_10.size()
    assert var_7 == 0
    queue_11 = module_0.Queue()
    none_type_1 = None
    var_8 = queue_11.enqueue(none_type_1)
    var_9 = var_7.__repr__()
    assert var_9 == '0'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_0)
    queue_13 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_10 = queue_13.size()
    assert var_10 == 0
    queue_14 = module_0.Queue()
    var_11 = queue_13.size()
    assert var_11 == 0
    var_12 = var_11.__repr__()
    assert var_12 == '0'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_13 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_8 = module_0.Node()
    var_14 = node_8.__repr__()
    assert var_14 == 'Value: None'
    node_9 = module_0.Node()
    var_15 = node_5.__repr__()
    assert var_15 == 'Value: None'

def test_case_797():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_1)
    var_5 = var_4.__repr__()
    var_6 = var_5.__repr__()

def test_case_798():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = var_0.__repr__()
    assert var_1 == "'Value: None'"
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    node_3 = module_0.Node(prev=set_0)

def test_case_799():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'

def test_case_800():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_0.push(queue_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bytes_0 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_6 = module_0.Queue(bytes_0)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_1 = queue_7.enqueue(none_type_0)
    var_2 = var_1.__repr__()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_3 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_3.append(queue_8)
    var_5 = var_2.__repr__()

def test_case_801():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_2 = queue_2.size()
    assert var_2 == 11
    var_3 = queue_1.peek()

def test_case_802():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = queue_0.size()
    assert var_1 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    var_4 = queue_4.size()
    assert var_4 == 0
    var_5 = queue_3.peek()
    assert var_5 == 77
    var_6 = node_0.__repr__()
    assert var_6 == 'Value: None'

def test_case_803():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = var_0.__repr__()
    queue_3 = module_0.Queue()
    node_2 = module_0.Node(var_0)

def test_case_804():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = double_linked_list_1.push(queue_2)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_1.push(queue_2)
    int_0 = -3616
    queue_5 = module_0.Queue(int_0)
    var_3 = queue_5.dequeue()
    assert var_3 == -3616
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    bytes_0 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_9 = module_0.Queue(bytes_0)
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    var_4 = queue_11.size()
    assert var_4 == 0
    queue_13 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_5 = queue_13.peek()
    node_7 = module_0.Node()
    double_linked_list_6 = module_0.DoubleLinkedList()
    var_6 = double_linked_list_6.push(var_5)
    assert f'{type(double_linked_list_6.tail).__module__}.{type(double_linked_list_6.tail).__qualname__}' == 'queue4.Node'
    var_7 = double_linked_list_6.append(var_5)

def test_case_805():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_5.size()
    assert var_1 == 0
    queue_6 = module_0.Queue()
    var_2 = queue_6.peek()
    queue_7 = module_0.Queue()
    var_3 = queue_7.size()
    assert var_3 == 0
    var_4 = queue_6.size()
    assert var_4 == 0

def test_case_806():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.size()
    assert var_1 == 0
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bytes_1 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_6 = module_0.Queue(bytes_1)
    var_2 = queue_1.peek()
    assert var_2 == 77

def test_case_807():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    node_1 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    node_2 = module_0.Node()
    var_1 = node_2.__repr__()
    assert var_1 == 'Value: None'
    queue_4 = module_0.Queue(node_2)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    var_2 = queue_5.dequeue()
    assert var_2 == 77
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_3 = queue_7.size()
    assert var_3 == 0
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_4 = queue_0.size()
    assert var_4 == 0

def test_case_808():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    queue_1 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue(queue_2)
    var_2 = queue_1.peek()
    complex_0 = 2886.801252 + 1418.99508j
    queue_4 = module_0.Queue(complex_0)
    var_3 = queue_4.size()
    assert var_3 == 1
    queue_5 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_4 = queue_5.peek()
    queue_6 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_5 = queue_6.size()
    assert var_5 == 0
    var_6 = queue_5.size()
    assert var_6 == 0
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_8 = module_0.Queue()
    var_7 = queue_8.peek()
    float_0 = -3043.800134
    str_0 = 'O,S|'
    str_1 = 'm'
    bool_0 = False
    tuple_0 = (float_0, str_0, str_1, bool_0)
    double_linked_list_3 = module_0.DoubleLinkedList(tuple_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_2)
    queue_10 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_8 = queue_10.size()
    assert var_8 == 0
    queue_11 = module_0.Queue()
    var_9 = queue_10.size()
    assert var_9 == 0
    var_10 = var_9.__repr__()
    assert var_10 == '0'
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    none_type_0 = None
    queue_12 = module_0.Queue()
    var_11 = queue_12.enqueue(none_type_0)
    var_12 = var_11.__repr__()
    var_13 = queue_0.enqueue(tuple_0)

def test_case_809():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_0 = double_linked_list_4.append(set_2)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_1 = queue_7.peek()
    queue_8 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_2 = queue_8.size()
    assert var_2 == 0
    var_3 = queue_7.size()
    assert var_3 == 0
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_9 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    bytes_0 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_12 = module_0.Queue(bytes_0)
    assert f'{type(queue_12).__module__}.{type(queue_12).__qualname__}' == 'queue4.Queue'
    queue_13 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_4 = queue_13.size()
    assert var_4 == 0
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_16 = module_0.Queue(complex_0)
    var_5 = queue_16.size()
    assert var_5 == 1
    node_7 = module_0.Node()
    var_6 = node_7.__repr__()
    assert var_6 == 'Value: None'
    queue_17 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    queue_18 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_7 = double_linked_list_6.append(node_9)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    var_8 = double_linked_list_6.shift()
    assert double_linked_list_6.tail is None
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'queue4.Node'
    assert var_8.data is None
    assert var_8.next is None
    assert var_8.prev == {*()}
    queue_19 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_20 = module_0.Queue(bytes_1)
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    var_9 = double_linked_list_7.append(bytes_1)
    assert f'{type(double_linked_list_7.head).__module__}.{type(double_linked_list_7.head).__qualname__}' == 'queue4.Node'
    queue_21 = module_0.Queue(queue_20)
    var_10 = queue_19.peek()
    var_11 = queue_21.size()
    assert var_11 == 1
    set_9 = set()
    queue_22 = module_0.Queue()
    var_12 = queue_22.enqueue(set_9)

def test_case_810():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    var_1 = var_0.__repr__()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_2 = queue_1.dequeue()
    assert var_2 == 77
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    var_3 = queue_3.size()
    assert var_3 == 0
    var_4 = node_1.__repr__()
    assert var_4 == 'Value: None'
    bool_0 = True
    double_linked_list_1 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    complex_0 = 2886.801252 + 1418.99508j
    queue_5 = module_0.Queue(complex_0)
    var_5 = queue_5.size()
    assert var_5 == 1
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    none_type_1 = None
    queue_6 = module_0.Queue()
    var_6 = queue_6.enqueue(none_type_1)
    var_7 = queue_5.enqueue(set_2)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_8 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue(queue_7)
    queue_9 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_9 = queue_9.peek()
    queue_10 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_10 = queue_10.size()
    assert var_10 == 0
    queue_11 = module_0.Queue()
    var_11 = node_5.__repr__()
    assert var_11 == 'Value: None'
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_12 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_12 = queue_3.peek()

def test_case_811():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = var_1.__repr__()
    assert var_2 == "'Value: None'"
    complex_0 = 2886.801252 + 1418.99508j
    queue_1 = module_0.Queue(complex_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_3 = queue_1.size()
    assert var_3 == 1
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_2 = module_0.Node()
    var_4 = node_2.__repr__()
    assert var_4 == 'Value: None'
    queue_2 = module_0.Queue(node_2)
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_5 = double_linked_list_4.append(set_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_6 = double_linked_list_4.push(set_1)
    var_7 = double_linked_list_2.append(double_linked_list_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'

def test_case_812():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_5.size()
    assert var_1 == 0
    queue_6 = module_0.Queue()
    var_2 = queue_5.size()
    assert var_2 == 0
    var_3 = var_2.__repr__()
    assert var_3 == '0'
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = queue_7.peek()
    node_3 = module_0.Node()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_5 = var_4.__repr__()
    complex_0 = 2886.801252 + 1418.99508j
    queue_10 = module_0.Queue(complex_0)
    var_6 = queue_10.size()
    assert var_6 == 1
    var_7 = var_6.__repr__()
    assert var_7 == '1'
    var_8 = queue_4.size()
    assert var_8 == 11

def test_case_813():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_4 = module_0.Node()
    var_1 = queue_3.size()
    assert var_1 == 0
    var_2 = node_3.__repr__()
    assert var_2 == 'Value: None'
    queue_5 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    none_type_0 = None
    var_4 = queue_6.enqueue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    queue_8 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_5 = queue_8.size()
    assert var_5 == 0
    queue_9 = module_0.Queue()
    var_6 = queue_8.size()
    assert var_6 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_7 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_8 = double_linked_list_2.append(queue_10)
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    none_type_1 = None
    node_8 = module_0.Node(none_type_1, prev=none_type_1)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    queue_13 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_10 = module_0.Node()
    var_9 = queue_12.size()
    assert var_9 == 0
    queue_14 = module_0.Queue()
    var_10 = queue_14.size()
    assert var_10 == 0
    set_7 = set()
    node_11 = module_0.Node(prev=set_7)
    queue_15 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    bytes_2 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_18 = module_0.Queue(bytes_2)
    var_11 = queue_16.peek()

def test_case_814():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0

def test_case_815():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    node_4 = module_0.Node()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = var_1.__repr__()
    queue_5 = module_0.Queue()
    int_0 = -3616
    queue_6 = module_0.Queue(int_0)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    var_3 = queue_6.dequeue()
    assert var_3 == -3616
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    var_4 = queue_7.dequeue()
    assert var_4 == 77
    queue_8 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_5 = queue_8.size()
    assert var_5 == 0
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    node_6 = module_0.Node()

def test_case_816():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    none_type_0 = None
    var_1 = queue_1.enqueue(none_type_0)
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    none_type_1 = None
    var_3 = queue_3.enqueue(none_type_1)
    var_4 = var_2.__repr__()
    assert var_4 == '0'
    none_type_2 = None
    node_2 = module_0.Node(prev=none_type_2)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_5 = queue_5.size()
    assert var_5 == 0
    queue_7 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_6 = queue_7.peek()
    queue_8 = module_0.Queue(queue_7)
    assert f'{type(queue_8).__module__}.{type(queue_8).__qualname__}' == 'queue4.Queue'
    queue_9 = module_0.Queue(queue_7)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_12 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_7 = double_linked_list_2.push(queue_12)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    none_type_3 = None
    queue_15 = module_0.Queue()
    var_8 = queue_15.enqueue(none_type_3)
    var_9 = var_8.__repr__()
    queue_16 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_17 = module_0.Queue(bytes_0)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_10 = double_linked_list_4.append(bytes_0)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_18 = module_0.Queue(queue_17)
    var_11 = queue_16.peek()
    var_12 = queue_18.size()
    assert var_12 == 1
    queue_19 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_20 = module_0.Queue(complex_0)
    var_13 = queue_20.size()
    assert var_13 == 1
    node_7 = module_0.Node()
    var_14 = node_7.__repr__()
    assert var_14 == 'Value: None'
    var_15 = queue_12.peek()

def test_case_817():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == 77
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = queue_1.peek()

def test_case_818():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    var_1 = var_0.__repr__()
    assert var_1 == '1'
    queue_1 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue(queue_2)
    var_3 = queue_1.peek()
    var_4 = queue_3.size()
    assert var_4 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = double_linked_list_3.append(set_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_6 = double_linked_list_3.push(set_1)
    var_7 = node_1.__repr__()
    assert var_7 == 'Value: None'

def test_case_819():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    var_2 = queue_2.size()
    assert var_2 == 1
    var_3 = queue_2.dequeue()
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    queue_4 = module_0.Queue()
    var_4 = queue_4.peek()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    var_5 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_6 = queue_8.peek()
    node_3 = module_0.Node()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_2)
    double_linked_list_4 = module_0.DoubleLinkedList()
    var_7 = double_linked_list_4.append(bytes_2)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_8 = double_linked_list_4.append(queue_9)
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_10 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    node_5 = module_0.Node()
    queue_11 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_12 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_9 = double_linked_list_6.append(node_7)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    var_10 = double_linked_list_6.shift()
    assert double_linked_list_6.tail is None
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'queue4.Node'
    assert var_10.data is None
    assert var_10.next is None
    assert var_10.prev == {*()}
    queue_13 = module_0.Queue(set_3)

def test_case_820():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_1)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    queue_5 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_2 = queue_5.peek()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    float_0 = -3043.800134
    str_0 = 'O,S|'
    str_1 = 'm'
    bool_0 = False
    tuple_0 = (float_0, str_0, str_1, bool_0)
    double_linked_list_4 = module_0.DoubleLinkedList(tuple_0)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_4.tail).__module__}.{type(double_linked_list_4.tail).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_3 = queue_6.size()
    assert var_3 == 0
    queue_7 = module_0.Queue()
    var_4 = node_5.__repr__()
    assert var_4 == 'Value: None'
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_8 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_5 = double_linked_list_5.push(queue_8)
    assert f'{type(double_linked_list_5.tail).__module__}.{type(double_linked_list_5.tail).__qualname__}' == 'queue4.Node'
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_11 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_2)
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    var_6 = double_linked_list_8.append(bytes_2)
    assert f'{type(double_linked_list_8.head).__module__}.{type(double_linked_list_8.head).__qualname__}' == 'queue4.Node'
    double_linked_list_9 = module_0.DoubleLinkedList()
    assert double_linked_list_9.head is None
    assert double_linked_list_9.tail is None
    var_7 = queue_0.enqueue(var_3)

def test_case_821():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_1 = module_0.Queue(node_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    var_2 = queue_2.dequeue()
    assert var_2 == 77
    queue_3 = module_0.Queue()
    var_3 = var_0.__repr__()

def test_case_822():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue(queue_4)
    var_2 = queue_3.peek()
    var_3 = queue_5.size()
    assert var_3 == 1
    var_4 = queue_5.dequeue()
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'queue4.Queue'
    none_type_0 = None
    node_1 = module_0.Node(prev=none_type_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    queue_7 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_5 = queue_7.peek()
    node_3 = module_0.Node()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_6 = var_5.__repr__()
    queue_10 = module_0.Queue()
    var_7 = queue_4.dequeue()
    assert var_7 == 77

def test_case_823():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    var_2 = queue_0.enqueue(set_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = queue_4.size()
    assert var_3 == 0
    node_2 = module_0.Node()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_1 = None
    queue_8 = module_0.Queue(none_type_1)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    queue_10 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_4 = queue_10.size()
    assert var_4 == 0
    queue_11 = module_0.Queue()
    var_5 = queue_10.size()
    assert var_5 == 0
    var_6 = queue_9.peek()
    assert var_6 == 77
    node_4 = module_0.Node()
    var_7 = node_4.__repr__()
    assert var_7 == 'Value: None'
    queue_12 = module_0.Queue(node_4)
    queue_13 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_8 = queue_13.peek()
    queue_14 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_9 = queue_14.peek()
    node_7 = module_0.Node()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    var_10 = var_9.__repr__()
    queue_17 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    queue_18 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_11 = double_linked_list_2.push(queue_18)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    var_12 = double_linked_list_2.push(queue_18)
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    queue_21 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_10 = module_0.Node()
    var_13 = queue_21.size()
    assert var_13 == 0
    var_14 = node_9.__repr__()
    assert var_14 == 'Value: None'
    var_15 = queue_2.peek()

def test_case_824():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bytes_0 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    node_3 = module_0.Node()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_0 = double_linked_list_2.push(queue_7)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node(prev=double_linked_list_3)

def test_case_825():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    str_0 = "d^_Z'j<ceXum|X7"
    node_1 = module_0.Node(str_0)
    queue_2 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_0 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_3.enqueue(queue_2)
    var_2 = node_1.__repr__()
    assert var_2 == "Value: d^_Z'j<ceXum|X7"

def test_case_826():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_1.enqueue(queue_0)
    bool_0 = True
    double_linked_list_1 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    queue_4 = module_0.Queue(queue_2)
    var_3 = double_linked_list_1.append(node_2)
    var_4 = double_linked_list_1.push(var_1)

def test_case_827():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_1.peek()
    node_1 = module_0.Node()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_2 = var_1.__repr__()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_3 = double_linked_list_3.append(set_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_8 = module_0.Queue()
    var_4 = queue_8.peek()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_9 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_10 = module_0.Queue()
    var_5 = queue_10.peek()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_13 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_6 = queue_13.size()
    assert var_6 == 0
    queue_14 = module_0.Queue()
    var_7 = queue_14.peek()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None

def test_case_828():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.size()
    assert var_2 == 0
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    var_4 = queue_3.enqueue(set_2)
    node_3 = module_0.Node()
    var_5 = node_3.__repr__()
    assert var_5 == 'Value: None'
    queue_4 = module_0.Queue(node_3)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_6 = queue_6.peek()
    node_5 = module_0.Node()
    node_6 = module_0.Node(set_3)
    node_7 = module_0.Node()
    var_7 = node_7.__repr__()
    assert var_7 == 'Value: None'
    queue_7 = module_0.Queue(node_7)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    var_8 = queue_8.dequeue()
    assert var_8 == 77
    queue_9 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_9 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_11 = module_0.Queue(queue_10)
    complex_0 = 2886.801252 + 1418.99508j
    queue_12 = module_0.Queue(complex_0)
    var_10 = queue_12.size()
    assert var_10 == 1
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    none_type_0 = None
    queue_13 = module_0.Queue()
    var_11 = queue_13.enqueue(none_type_0)
    var_12 = queue_12.enqueue(set_4)
    var_13 = double_linked_list_0.append(complex_0)

def test_case_829():
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_0 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = var_0.__repr__()
    var_2 = queue_0.size()
    assert var_2 == 0

def test_case_830():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_1.enqueue(queue_0)
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_2.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList(var_2)
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_3 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_4 = queue_4.size()
    assert var_4 == 11
    queue_5 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_5 = queue_5.size()
    assert var_5 == 0
    queue_6 = module_0.Queue()
    var_6 = queue_6.peek()
    queue_7 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_7 = queue_7.size()
    assert var_7 == 0
    queue_8 = module_0.Queue()
    none_type_0 = None
    var_8 = queue_8.enqueue(none_type_0)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_2)
    var_9 = queue_9.dequeue()
    assert var_9 == 77
    var_10 = queue_9.peek()
    assert var_10 == 249
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_3)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_11 = double_linked_list_4.append(bytes_3)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_11 = module_0.Queue(queue_10)
    queue_12 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_12 = queue_12.size()
    assert var_12 == 0
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_15 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_16 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None

def test_case_831():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_4.peek()
    node_4 = module_0.Node()
    node_5 = module_0.Node(set_2)
    node_6 = module_0.Node()
    var_3 = node_6.__repr__()
    assert var_3 == 'Value: None'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = var_3.__repr__()
    assert var_4 == "'Value: None'"
    node_7 = module_0.Node(var_0)
    assert node_7.data == 0

def test_case_832():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_6.peek()
    node_3 = module_0.Node()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_3 = var_2.__repr__()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    var_4 = queue_9.dequeue()
    assert var_4 == 77
    none_type_0 = None
    node_4 = module_0.Node(prev=none_type_0)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_12 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_6 = module_0.Node()
    var_5 = queue_11.size()
    assert var_5 == 0
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_2)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_6 = double_linked_list_3.append(bytes_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_14 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_7 = queue_14.size()
    assert var_7 == 0
    queue_15 = module_0.Queue()
    none_type_1 = None
    var_8 = queue_15.enqueue(none_type_1)
    var_9 = var_7.__repr__()
    assert var_9 == '0'
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None

def test_case_833():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    node_1 = module_0.Node()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_2.append(node_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_2 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_3 = var_2.__repr__()
    queue_7 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_4 = queue_7.size()
    assert var_4 == 0
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = queue_7.size()
    assert var_5 == 0
    queue_9 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_6 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    queue_11 = module_0.Queue(queue_9)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_7 = queue_11.size()
    assert var_7 == 1
    node_8 = module_0.Node()
    var_8 = node_8.__repr__()
    assert var_8 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_0)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_9 = double_linked_list_4.append(bytes_0)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_15 = module_0.Queue(queue_14)
    str_0 = "d^_Z'j<ceXum|X7"
    node_9 = module_0.Node(str_0)
    queue_16 = module_0.Queue()
    set_7 = set()
    node_10 = module_0.Node(prev=set_7)
    var_10 = queue_16.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_17 = module_0.Queue(bytes_1)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    double_linked_list_6 = module_0.DoubleLinkedList(var_10)
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    none_type_0 = None
    queue_21 = module_0.Queue(none_type_0)
    var_11 = queue_11.size()
    assert var_11 == 1

def test_case_834():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_835():
    float_0 = -3043.800134
    str_0 = 'O,S|'
    str_1 = 'm'
    bool_0 = False
    tuple_0 = (float_0, str_0, str_1, bool_0)
    double_linked_list_0 = module_0.DoubleLinkedList(tuple_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    var_2 = queue_2.size()
    assert var_2 == 1
    var_3 = queue_2.dequeue()
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Queue'
    str_2 = "d^_Z'j<ceXum|X7"
    node_0 = module_0.Node(str_2)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    var_4 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    queue_4 = module_0.Queue()
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    var_5 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    queue_6 = module_0.Queue(queue_4)
    var_6 = queue_3.enqueue(bool_0)

def test_case_836():
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_0 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    queue_2 = module_0.Queue(queue_0)
    var_1 = double_linked_list_0.append(node_0)
    node_1 = module_0.Node()
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    queue_3 = module_0.Queue(node_2)
    queue_4 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_4 = queue_7.peek()
    node_5 = module_0.Node()
    int_0 = -3616
    queue_8 = module_0.Queue(int_0)
    var_5 = queue_8.dequeue()
    assert var_5 == -3616
    none_type_0 = None
    node_6 = module_0.Node(none_type_0, prev=none_type_0)
    set_3 = set()
    node_7 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    node_8 = module_0.Node()
    var_6 = queue_9.size()
    assert var_6 == 0
    queue_10 = module_0.Queue()

def test_case_837():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_3 = module_0.Node()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_0)
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_2 = double_linked_list_2.push(queue_4)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_2.push(queue_4)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_7 = module_0.Node()
    var_4 = queue_8.size()
    assert var_4 == 0
    var_5 = queue_7.size()
    assert var_5 == 0
    queue_10 = module_0.Queue(node_2)

def test_case_838():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    var_1 = queue_6.peek()
    queue_7 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_8 = module_0.Queue(complex_0)
    var_2 = queue_8.size()
    assert var_2 == 1
    queue_9 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_11 = module_0.Queue(queue_10)
    var_4 = queue_9.peek()
    queue_12 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_13 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_5 = double_linked_list_3.append(node_4)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_6 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_15 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_7 = queue_15.peek()
    node_7 = module_0.Node()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None

def test_case_839():
    node_0 = module_0.Node()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bytes_0 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_0 = queue_6.size()
    assert var_0 == 0
    queue_7 = module_0.Queue()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_5 = module_0.Node()
    var_1 = queue_9.size()
    assert var_1 == 0
    var_2 = node_4.__repr__()
    assert var_2 == 'Value: None'
    queue_11 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_3 = queue_11.peek()
    queue_12 = module_0.Queue(queue_11)
    queue_13 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    queue_14 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    var_4 = double_linked_list_4.append(node_8)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    node_9 = module_0.Node()
    queue_15 = module_0.Queue()
    set_6 = set()
    node_10 = module_0.Node(prev=set_6)
    var_5 = queue_15.size()
    assert var_5 == 0
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    var_6 = queue_17.enqueue(set_2)

def test_case_840():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = queue_0.size()
    assert var_1 == 11
    queue_1 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_3 = queue_5.size()
    assert var_3 == 0
    node_4 = module_0.Node()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_4 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    queue_8 = module_0.Queue(queue_6)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_5 = queue_6.size()
    assert var_5 == 0
    queue_11 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_6 = queue_11.peek()
    queue_12 = module_0.Queue(queue_11)
    queue_13 = module_0.Queue(queue_11)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_7 = queue_13.size()
    assert var_7 == 1
    var_8 = queue_14.size()
    assert var_8 == 0

def test_case_841():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    none_type_0 = None
    node_1 = module_0.Node(prev=none_type_0)
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_2.append(node_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_5.enqueue(queue_4)
    queue_6 = module_0.Queue()

def test_case_842():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue(none_type_0)
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_2 = module_0.Node()
    var_0 = queue_6.size()
    assert var_0 == 0
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_4 = module_0.Node()
    var_1 = queue_9.size()
    assert var_1 == 0
    var_2 = queue_8.size()
    assert var_2 == 0
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    node_6 = module_0.Node(next_node=queue_7)

def test_case_843():
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_0 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    none_type_0 = None
    node_0 = module_0.Node(prev=none_type_0)
    var_0 = double_linked_list_0.append(none_type_0)

def test_case_844():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    var_2 = queue_3.size()
    assert var_2 == 0
    var_3 = queue_2.peek()
    assert var_3 == 77
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_8 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_4 = queue_8.peek()
    node_4 = module_0.Node()
    node_5 = module_0.Node(set_2)
    float_0 = -3043.800134
    str_0 = 'O,S|'
    str_1 = 'm'
    bool_0 = False
    tuple_0 = (float_0, str_0, str_1, bool_0)
    double_linked_list_3 = module_0.DoubleLinkedList(tuple_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_5 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_11 = module_0.Queue(queue_10)
    var_6 = queue_9.peek()
    queue_12 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_7 = queue_12.peek()
    queue_13 = module_0.Queue(queue_12)
    queue_14 = module_0.Queue(queue_12)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_2)
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_8 = var_6.__repr__()

def test_case_845():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_0 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    none_type_0 = None
    node_1 = module_0.Node(prev=none_type_0)
    var_1 = double_linked_list_0.append(none_type_0)
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = queue_5.size()
    assert var_2 == 0
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_3 = queue_9.size()
    assert var_3 == 0
    int_0 = -3616
    queue_10 = module_0.Queue(int_0)
    var_4 = queue_10.dequeue()
    assert var_4 == -3616
    float_0 = -3043.800134
    str_0 = 'O,S|'
    str_1 = 'm'
    bool_0 = False
    tuple_0 = (float_0, str_0, str_1, bool_0)
    double_linked_list_5 = module_0.DoubleLinkedList(tuple_0)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_5.tail).__module__}.{type(double_linked_list_5.tail).__qualname__}' == 'queue4.Node'
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    var_5 = double_linked_list_7.append(set_3)
    assert f'{type(double_linked_list_7.head).__module__}.{type(double_linked_list_7.head).__qualname__}' == 'queue4.Node'
    none_type_1 = None
    queue_14 = module_0.Queue(none_type_1)
    queue_15 = module_0.Queue()

def test_case_846():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    node_1 = module_0.Node(next_node=var_0)
    assert node_1.next == 0

def test_case_847():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'

def test_case_848():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    queue_3 = module_0.Queue(queue_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_2 = queue_3.size()
    assert var_2 == 1
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    queue_8 = module_0.Queue(queue_6)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_11 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = queue_13.size()
    assert var_4 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_0)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_1)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_6 = double_linked_list_5.append(bytes_1)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_7 = double_linked_list_5.append(queue_15)
    queue_16 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_17 = module_0.Queue(bytes_2)
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_8 = double_linked_list_6.append(bytes_2)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    queue_18 = module_0.Queue(queue_17)
    var_9 = queue_16.peek()
    var_10 = queue_18.size()
    assert var_10 == 1
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_19 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    node_4 = module_0.Node()
    var_11 = queue_19.size()
    assert var_11 == 0
    var_12 = queue_1.peek()

def test_case_849():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    node_1 = module_0.Node()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_3 = module_0.Node()
    var_1 = queue_4.size()
    assert var_1 == 0
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    queue_6 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_3 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue(queue_7)
    var_4 = queue_6.peek()
    var_5 = queue_8.size()
    assert var_5 == 1
    var_6 = queue_8.dequeue()
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'queue4.Queue'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    queue_10 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_7 = queue_10.size()
    assert var_7 == 0
    queue_11 = module_0.Queue()
    var_8 = queue_10.size()
    assert var_8 == 0
    var_9 = queue_9.peek()
    assert var_9 == 77
    str_0 = "d^_Z'j<ceXum|X7"
    node_5 = module_0.Node(str_0)
    queue_12 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    queue_13 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_10 = double_linked_list_4.append(node_7)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_11 = queue_13.enqueue(queue_12)
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    queue_14 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    queue_15 = module_0.Queue()
    var_12 = queue_15.peek()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    double_linked_list_7 = module_0.DoubleLinkedList()
    double_linked_list_8 = module_0.DoubleLinkedList()

def test_case_850():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == 77
    int_0 = -3616
    queue_1 = module_0.Queue(int_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_1 = queue_1.dequeue()
    assert var_1 == -3616
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    var_2 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue(queue_2)
    var_3 = queue_1.enqueue(var_0)

def test_case_851():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_1.push(set_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    queue_8 = module_0.Queue(queue_6)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_4 = queue_6.size()
    assert var_4 == 0
    var_5 = queue_10.peek()

def test_case_852():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = queue_1.size()
    assert var_1 == 11
    queue_2 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_2)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = double_linked_list_2.append(bytes_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_5 = queue_7.size()
    assert var_5 == 0
    queue_8 = module_0.Queue()
    var_6 = queue_8.peek()
    complex_0 = 2886.801252 + 1418.99508j
    queue_9 = module_0.Queue(complex_0)
    var_7 = queue_9.size()
    assert var_7 == 1
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    none_type_0 = None
    queue_10 = module_0.Queue()
    var_8 = queue_10.enqueue(none_type_0)
    var_9 = queue_9.enqueue(set_4)
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    bytes_3 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_14 = module_0.Queue(bytes_3)
    node_7 = module_0.Node(next_node=bytes_1, prev=var_2)

def test_case_853():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = var_0.__repr__()
    assert var_1 == "'Value: None'"
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_2 = queue_0.dequeue()
    assert var_2 == 77
    queue_1 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_3 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    queue_3 = module_0.Queue(queue_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_4 = queue_3.size()
    assert var_4 == 1
    queue_6 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_5 = queue_6.size()
    assert var_5 == 0
    queue_7 = module_0.Queue()
    var_6 = queue_7.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_7 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_10 = module_0.Queue()
    var_8 = queue_10.peek()
    queue_11 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_9 = queue_11.peek()
    queue_12 = module_0.Queue(queue_11)
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_10 = var_9.__repr__()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_2)
    queue_14 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_11 = queue_14.size()
    assert var_11 == 0
    queue_15 = module_0.Queue()
    var_12 = queue_14.size()
    assert var_12 == 0
    var_13 = queue_13.peek()
    assert var_13 == 77
    queue_16 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_14 = queue_16.peek()
    queue_17 = module_0.Queue(queue_16)
    queue_18 = module_0.Queue(queue_16)
    node_8 = module_0.Node()
    var_15 = node_8.__repr__()
    assert var_15 == 'Value: None'
    queue_19 = module_0.Queue(node_8)
    var_16 = queue_19.enqueue(var_15)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_17 = double_linked_list_3.push(var_4)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'

def test_case_854():
    node_0 = module_0.Node()
    none_type_0 = None
    queue_0 = module_0.Queue(none_type_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_0 = queue_1.dequeue()
    assert var_0 == 77
    var_1 = queue_1.peek()
    assert var_1 == 249
    queue_2 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    none_type_1 = None
    var_3 = queue_3.enqueue(none_type_1)
    var_4 = var_2.__repr__()
    assert var_4 == '0'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    queue_5 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_5 = queue_5.size()
    assert var_5 == 0
    queue_6 = module_0.Queue()
    var_6 = queue_5.size()
    assert var_6 == 0
    node_3 = module_0.Node(next_node=var_5)
    assert node_3.next == 0
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_5 = module_0.Node()
    var_7 = queue_7.size()
    assert var_7 == 0
    queue_8 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_8 = double_linked_list_1.append(node_7)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_9 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'queue4.Node'
    assert var_9.data is None
    assert var_9.next is None
    assert var_9.prev == {*()}
    var_10 = queue_9.size()
    assert var_10 == 0

def test_case_855():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_2.enqueue(queue_1)
    none_type_0 = None
    node_3 = module_0.Node(prev=none_type_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_4 = module_0.Node()
    var_3 = node_4.__repr__()
    assert var_3 == 'Value: None'
    bool_0 = True
    double_linked_list_2 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_2).__module__}.{type(double_linked_list_2).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_4 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    queue_5 = module_0.Queue(queue_3)
    var_5 = double_linked_list_2.append(node_5)
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_3 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    none_type_1 = None
    node_6 = module_0.Node(prev=none_type_1)
    var_6 = double_linked_list_3.append(none_type_1)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    var_7 = queue_7.dequeue()
    assert var_7 == 77
    var_8 = queue_7.peek()
    assert var_8 == 249
    queue_8 = module_0.Queue()

def test_case_856():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue(queue_0)
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    none_type_0 = None
    var_2 = queue_3.enqueue(none_type_0)
    var_3 = var_2.__repr__()

def test_case_857():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    float_0 = -3043.800134
    str_0 = 'O,S|'
    str_1 = 'm'
    bool_0 = False
    tuple_0 = (float_0, str_0, str_1, bool_0)
    double_linked_list_2 = module_0.DoubleLinkedList(tuple_0)
    assert f'{type(double_linked_list_2).__module__}.{type(double_linked_list_2).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_3 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_2 = double_linked_list_4.append(bytes_0)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue(queue_4)
    var_3 = queue_3.peek()
    var_4 = queue_5.size()
    assert var_4 == 1
    var_5 = queue_5.dequeue()
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Queue'
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_8 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    node_2 = module_0.Node()
    var_6 = queue_7.size()
    assert var_6 == 0
    var_7 = node_1.__repr__()
    assert var_7 == 'Value: None'
    queue_9 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_10 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_8 = double_linked_list_6.append(node_4)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    var_9 = queue_9.size()
    assert var_9 == 0
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_11 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    node_6 = module_0.Node()

def test_case_858():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    none_type_0 = None
    var_1 = queue_1.enqueue(none_type_0)
    str_0 = "d^_Z'j<ceXum|X7"
    node_1 = module_0.Node(str_0)
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_1)
    queue_3 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_4 = queue_3.size()
    assert var_4 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    queue_6 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_5 = queue_6.size()
    assert var_5 == 0
    queue_7 = module_0.Queue()
    var_6 = queue_6.size()
    assert var_6 == 0
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_10 = module_0.Queue(complex_0)
    var_7 = queue_10.size()
    assert var_7 == 1
    node_5 = module_0.Node()
    var_8 = node_5.__repr__()
    assert var_8 == 'Value: None'
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_11 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    bytes_1 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_14 = module_0.Queue(bytes_1)
    queue_15 = module_0.Queue()

def test_case_859():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_0.push(queue_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.push(queue_0)
    queue_3 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue(queue_4)
    var_3 = queue_3.peek()
    var_4 = queue_5.size()
    assert var_4 == 1
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_9 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_10 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_5 = double_linked_list_5.append(node_3)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_6 = double_linked_list_5.shift()
    assert double_linked_list_5.tail is None
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'queue4.Node'
    assert var_6.data is None
    assert var_6.next is None
    assert var_6.prev == {*()}
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_1)
    queue_12 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_7 = queue_12.size()
    assert var_7 == 0
    queue_13 = module_0.Queue()
    var_8 = queue_12.size()
    assert var_8 == 0
    queue_14 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_2)
    queue_16 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_9 = queue_16.size()
    assert var_9 == 0
    queue_17 = module_0.Queue()
    var_10 = queue_16.size()
    assert var_10 == 0
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_18 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    node_7 = module_0.Node()
    var_11 = queue_18.size()
    assert var_11 == 0
    node_8 = module_0.Node(queue_5, var_6, queue_7)

def test_case_860():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    var_3 = queue_4.peek()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_4 = queue_5.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList(var_4)
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_7 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_5 = queue_7.size()
    assert var_5 == 0
    queue_8 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_6 = queue_7.size()
    assert var_6 == 0
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_9 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_7 = double_linked_list_5.push(queue_9)
    assert f'{type(double_linked_list_5.tail).__module__}.{type(double_linked_list_5.tail).__qualname__}' == 'queue4.Node'
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_12 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    bytes_1 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_15 = module_0.Queue(bytes_1)
    none_type_0 = None
    node_7 = module_0.Node(prev=none_type_0)
    queue_16 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_8 = queue_16.peek()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_17 = module_0.Queue(bytes_2)
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    double_linked_list_9 = module_0.DoubleLinkedList(var_8)
    assert double_linked_list_9.head is None
    assert double_linked_list_9.tail is None
    var_9 = double_linked_list_7.append(node_4)
    assert f'{type(double_linked_list_7.head).__module__}.{type(double_linked_list_7.head).__qualname__}' == 'queue4.Node'

def test_case_861():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_0.size()
    assert var_1 == 0
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = queue_6.size()
    assert var_2 == 0
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_862():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()

def test_case_863():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_2 = module_0.Node()
    var_1 = queue_4.size()
    assert var_1 == 0
    var_2 = double_linked_list_0.shift()
    assert var_2 is True
    assert double_linked_list_0.tail is None

def test_case_864():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    node_1 = module_0.Node(next_node=var_0)
    assert node_1.next == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_5.peek()
    node_4 = module_0.Node()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_4 = var_3.__repr__()
    queue_8 = module_0.Queue()
    var_5 = queue_8.size()
    assert var_5 == 0
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_10 = module_0.Queue()
    var_6 = queue_10.peek()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_7 = double_linked_list_2.push(queue_10)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'

def test_case_865():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = var_0.__repr__()
    queue_3 = module_0.Queue()
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_0 = None
    queue_7 = module_0.Queue(none_type_0)
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    none_type_1 = None
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(none_type_1)
    var_4 = queue_5.enqueue(queue_1)

def test_case_866():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_1 = queue_0.enqueue(var_0)
    queue_1 = module_0.Queue()

def test_case_867():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    float_0 = -3043.800134
    str_0 = 'O,S|'
    str_1 = 'm'
    bool_0 = False
    tuple_0 = (float_0, str_0, str_1, bool_0)
    double_linked_list_1 = module_0.DoubleLinkedList(tuple_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_4 = queue_8.size()
    assert var_4 == 0
    queue_9 = module_0.Queue()
    none_type_0 = None
    var_5 = queue_9.enqueue(none_type_0)
    var_6 = var_4.__repr__()
    assert var_6 == '0'
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_7 = queue_12.size()
    assert var_7 == 0
    node_6 = module_0.Node()
    node_7 = module_0.Node()
    var_8 = node_7.__repr__()
    assert var_8 == 'Value: None'
    queue_13 = module_0.Queue(node_7)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_1)
    var_9 = queue_14.dequeue()
    assert var_9 == 77
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_10 = queue_16.peek()
    node_9 = module_0.Node()
    queue_17 = module_0.Queue()
    set_7 = set()
    node_10 = module_0.Node(prev=set_7)
    var_11 = queue_17.size()
    assert var_11 == 0
    queue_18 = module_0.Queue()
    var_12 = node_10.__repr__()
    assert var_12 == 'Value: None'
    var_13 = double_linked_list_1.pop()
    assert var_13 is False

def test_case_868():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None

def test_case_869():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    var_1 = var_0.__repr__()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    var_3 = queue_3.enqueue(queue_3)

def test_case_870():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = node_1.__repr__()
    assert var_0 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_1.append(queue_1)
    queue_2 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = queue_2.peek()
    node_3 = module_0.Node()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_4 = queue_3.size()
    assert var_4 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_5 = queue_5.peek()
    node_6 = module_0.Node()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_6 = var_5.__repr__()
    queue_8 = module_0.Queue()
    str_0 = "d^_Z'j<ceXum|X7"
    node_7 = module_0.Node(str_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    var_7 = queue_9.dequeue()
    assert var_7 == 77
    var_8 = queue_9.peek()
    assert var_8 == 249
    queue_10 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_2)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_9 = double_linked_list_2.append(bytes_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_12 = module_0.Queue(queue_11)
    var_10 = queue_10.peek()
    var_11 = queue_12.size()
    assert var_11 == 1
    queue_13 = module_0.Queue()
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    var_12 = queue_13.peek()
    node_9 = module_0.Node()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_13 = var_12.__repr__()
    node_10 = module_0.Node()

def test_case_871():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    var_1 = queue_1.dequeue()
    assert var_1 == 77
    var_2 = queue_1.peek()
    assert var_2 == 249
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = queue_4.peek()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_4 = queue_5.size()
    assert var_4 == 0
    var_5 = queue_4.size()
    assert var_5 == 0
    queue_6 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_6 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    queue_8 = module_0.Queue(queue_6)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_7 = queue_8.size()
    assert var_7 == 1
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_2)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_8 = double_linked_list_2.append(bytes_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    var_9 = queue_11.size()
    assert var_9 == 11
    node_6 = module_0.Node()

def test_case_872():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue(queue_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_7.size()
    assert var_3 == 0
    queue_8 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    var_4 = queue_9.dequeue()
    assert var_4 == 77
    none_type_0 = None
    queue_10 = module_0.Queue(none_type_0)
    queue_11 = module_0.Queue()

def test_case_873():
    none_type_0 = None
    queue_0 = module_0.Queue(none_type_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    complex_0 = 2886.801252 + 1418.99508j
    queue_1 = module_0.Queue(complex_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_0 = queue_1.size()
    assert var_0 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bytes_0 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_5 = module_0.Queue(bytes_0)
    complex_1 = 2886.801252 + 1418.99508j
    queue_6 = module_0.Queue(complex_1)
    var_1 = queue_6.size()
    assert var_1 == 1
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_2 = queue_7.enqueue(none_type_1)
    var_3 = queue_6.enqueue(set_1)
    queue_8 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = queue_8.size()
    assert var_4 == 0
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    node_3 = module_0.Node(bytes_0)

def test_case_874():
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_0 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    var_2 = queue_3.size()
    assert var_2 == 0
    var_3 = var_2.__repr__()
    assert var_3 == '0'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    bytes_1 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_8 = module_0.Queue(bytes_1)
    queue_9 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_9.peek()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_2)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    double_linked_list_3 = module_0.DoubleLinkedList(var_4)
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_3)
    queue_12 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_5 = queue_12.peek()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_6 = queue_3.peek()

def test_case_875():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    var_1 = queue_1.dequeue()
    assert var_1 == 77
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = queue_4.peek()
    node_3 = module_0.Node()
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_5 = var_4.__repr__()
    assert var_5 == "'Value: None'"
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    var_6 = queue_6.dequeue()
    assert var_6 == 77
    queue_7 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_7 = queue_7.peek()
    node_5 = module_0.Node()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_8 = var_7.__repr__()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_2)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_9 = double_linked_list_1.append(bytes_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_7 = module_0.Node()
    var_10 = queue_11.size()
    assert var_10 == 0
    var_11 = node_6.__repr__()
    assert var_11 == 'Value: None'
    node_8 = module_0.Node()

def test_case_876():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    var_2 = queue_2.peek()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_3.peek()
    node_2 = module_0.Node()
    node_3 = module_0.Node(set_1)
    node_4 = module_0.Node()

def test_case_877():
    int_0 = -3616
    queue_0 = module_0.Queue(int_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == -3616
    var_1 = queue_0.enqueue(queue_0)

def test_case_878():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_2.size()
    assert var_1 == 1
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = queue_7.size()
    assert var_2 == 0
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_11 = module_0.Queue(queue_10)
    var_4 = queue_9.peek()
    var_5 = queue_11.size()
    assert var_5 == 1
    var_6 = queue_11.dequeue()
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'queue4.Queue'
    node_2 = module_0.Node()
    var_7 = node_2.__repr__()
    assert var_7 == 'Value: None'
    queue_12 = module_0.Queue(node_2)
    queue_13 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_8 = queue_13.peek()
    queue_14 = module_0.Queue(queue_13)
    queue_15 = module_0.Queue(queue_13)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    node_4 = module_0.Node(var_3, var_6)

def test_case_879():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    none_type_0 = None
    var_1 = queue_1.enqueue(none_type_0)
    var_2 = var_0.__repr__()
    assert var_2 == '0'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_4 = node_1.__repr__()
    assert var_4 == 'Value: None'
    node_2 = module_0.Node()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_5 = queue_3.enqueue(none_type_1)
    queue_4 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_6 = queue_4.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList(var_6)
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_5 = module_0.Node()
    var_7 = node_5.__repr__()
    assert var_7 == 'Value: None'
    complex_0 = 2886.801252 + 1418.99508j
    queue_6 = module_0.Queue(complex_0)
    var_8 = queue_6.size()
    assert var_8 == 1
    var_9 = var_8.__repr__()
    assert var_9 == '1'
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_10 = queue_3.enqueue(var_2)

def test_case_880():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_3 = module_0.Node()
    var_2 = queue_5.size()
    assert var_2 == 0
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_4 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_4).__module__}.{type(double_linked_list_4).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_4.tail).__module__}.{type(double_linked_list_4.tail).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue()

def test_case_881():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_4 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_0 = double_linked_list_4.append(bytes_0)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue(queue_5)
    var_1 = queue_4.peek()
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_5.append(node_3)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_3 = queue_9.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_1)
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    double_linked_list_7 = module_0.DoubleLinkedList(var_3)
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_11 = module_0.Queue()
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    node_6 = module_0.Node()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_4 = queue_13.size()
    assert var_4 == 0
    queue_14 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_2)
    var_5 = double_linked_list_0.push(node_2)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'

def test_case_882():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_0.push(queue_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_1 = queue_4.size()
    assert var_1 == 0
    var_2 = queue_1.size()
    assert var_2 == 0

def test_case_883():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    var_3 = queue_3.size()
    assert var_3 == 0
    var_4 = var_3.__repr__()
    assert var_4 == '0'
    node_2 = module_0.Node()
    var_5 = node_2.__repr__()
    assert var_5 == 'Value: None'
    queue_5 = module_0.Queue(node_2)
    var_6 = queue_5.enqueue(var_5)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_7 = node_3.__repr__()
    assert var_7 == 'Value: None'
    node_4 = module_0.Node()
    var_8 = node_4.__repr__()
    assert var_8 == 'Value: None'
    queue_7 = module_0.Queue(node_4)
    queue_8 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_9 = double_linked_list_1.append(node_6)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_10 = queue_8.size()
    assert var_10 == 0
    node_7 = module_0.Node()
    var_11 = node_7.__repr__()
    assert var_11 == 'Value: None'
    queue_10 = module_0.Queue(node_7)
    var_12 = queue_10.enqueue(var_11)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    var_13 = queue_12.peek()
    node_9 = module_0.Node()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_14 = double_linked_list_2.push(double_linked_list_1)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'

def test_case_884():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_2.size()
    assert var_1 == 1
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_7.size()
    assert var_2 == 0
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = queue_7.size()
    assert var_3 == 0
    queue_9 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_9.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    double_linked_list_3 = module_0.DoubleLinkedList(var_4)
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_11 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_2)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_5 = double_linked_list_5.append(bytes_2)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    queue_13 = module_0.Queue(queue_12)
    var_6 = queue_11.peek()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_16 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    node_5 = module_0.Node()
    var_7 = queue_15.size()
    assert var_7 == 0
    var_8 = queue_14.size()
    assert var_8 == 0
    complex_0 = 2886.801252 + 1418.99508j
    queue_17 = module_0.Queue(complex_0)
    var_9 = queue_17.size()
    assert var_9 == 1
    var_10 = var_9.__repr__()
    assert var_10 == '1'
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_18 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    queue_21 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_11 = queue_21.peek()
    node_8 = module_0.Node()
    node_9 = module_0.Node(set_6)
    var_12 = double_linked_list_5.push(queue_8)

def test_case_885():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_1.enqueue(queue_0)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_3 = var_2.__repr__()
    var_4 = queue_1.peek()
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'queue4.Queue'

def test_case_886():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue(queue_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = queue_2.size()
    assert var_3 == 0
    queue_7 = module_0.Queue()
    var_4 = queue_7.size()
    assert var_4 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_5 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_6 = node_2.__repr__()
    assert var_6 == 'Value: None'
    node_3 = module_0.Node()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_10 = module_0.Queue()
    var_7 = queue_10.peek()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_887():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77
    var_3 = queue_0.enqueue(queue_2)

def test_case_888():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = var_1.__repr__()
    assert var_2 == '0'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    var_3 = queue_3.size()
    assert var_3 == 0
    var_4 = node_1.__repr__()
    assert var_4 == 'Value: None'
    var_5 = queue_0.peek()
    assert var_5 == 77

def test_case_889():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bytes_0 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_2 = module_0.Node()
    var_0 = queue_4.size()
    assert var_0 == 0
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_3 = queue_5.size()
    assert var_3 == 11
    queue_6 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_4 = queue_6.size()
    assert var_4 == 0
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = queue_6.size()
    assert var_5 == 0
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_6 = module_0.Node()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None

def test_case_890():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == 77
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'

def test_case_891():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_1.enqueue(queue_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = var_2.__repr__()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_5 = module_0.Node()
    var_4 = queue_5.size()
    assert var_4 == 0
    var_5 = node_4.__repr__()
    assert var_5 == 'Value: None'
    queue_6 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_6 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    queue_8 = module_0.Queue(queue_6)
    node_7 = module_0.Node()

def test_case_892():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    queue_3 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = double_linked_list_2.append(node_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    var_4 = queue_6.size()
    assert var_4 == 0
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_2)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = double_linked_list_3.append(bytes_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_6 = double_linked_list_3.append(queue_7)
    complex_0 = 2886.801252 + 1418.99508j
    queue_8 = module_0.Queue(complex_0)
    var_7 = queue_8.size()
    assert var_7 == 1
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None

def test_case_893():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = queue_3.size()
    assert var_3 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_2.append(queue_5)
    var_6 = var_0.__repr__()
    assert var_6 == '0'

def test_case_894():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77
    float_0 = -3043.800134
    str_0 = 'O,S|'
    str_1 = 'm'
    bool_0 = False
    tuple_0 = (float_0, str_0, str_1, bool_0)
    double_linked_list_0 = module_0.DoubleLinkedList(tuple_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_3 = module_0.Node()
    var_3 = queue_4.size()
    assert var_3 == 0
    var_4 = queue_3.size()
    assert var_4 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_5 = queue_8.peek()
    node_5 = module_0.Node()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = double_linked_list_2.push(var_5)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_7 = queue_9.size()
    assert var_7 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_8 = queue_11.size()
    assert var_8 == 0
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_14 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_9 = double_linked_list_4.append(set_6)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_10 = double_linked_list_2.append(queue_3)

def test_case_895():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_1.push(set_0)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    none_type_0 = None
    var_3 = queue_4.enqueue(none_type_0)
    var_4 = var_2.__repr__()
    assert var_4 == '0'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    var_5 = queue_5.dequeue()
    assert var_5 == 77
    var_6 = queue_5.peek()
    assert var_6 == 249
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_3 = module_0.Node()
    var_7 = queue_6.size()
    assert var_7 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    queue_8 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_8 = queue_8.size()
    assert var_8 == 0
    queue_9 = module_0.Queue()
    var_9 = queue_8.size()
    assert var_9 == 0
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None

def test_case_896():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    node_1 = module_0.Node()
    var_2 = queue_0.dequeue()
    assert var_2 == 77

def test_case_897():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bytes_0 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_0 = double_linked_list_1.push(queue_4)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None

def test_case_898():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    var_2 = queue_3.size()
    assert var_2 == 1

def test_case_899():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    bool_1 = True
    double_linked_list_1 = module_0.DoubleLinkedList(bool_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    queue_6 = module_0.Queue(queue_4)
    var_3 = double_linked_list_1.append(node_1)
    node_2 = module_0.Node()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    int_0 = -3616
    queue_8 = module_0.Queue(int_0)
    var_4 = queue_8.dequeue()
    assert var_4 == -3616
    var_5 = queue_8.enqueue(queue_8)
    queue_9 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_6 = queue_9.peek()
    node_5 = module_0.Node()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_7 = var_6.__repr__()
    queue_12 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_8 = queue_12.peek()
    queue_13 = module_0.Queue(queue_12)
    queue_14 = module_0.Queue(queue_12)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    var_9 = queue_12.size()
    assert var_9 == 0
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    none_type_0 = None
    queue_17 = module_0.Queue()
    var_10 = queue_17.enqueue(none_type_0)
    var_11 = var_10.__repr__()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_18 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    var_12 = double_linked_list_3.push(queue_18)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    var_13 = var_5.__repr__()

def test_case_900():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    var_2 = queue_1.size()
    assert var_2 == 0
    queue_2 = module_0.Queue()
    var_3 = queue_2.size()
    assert var_3 == 0
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = queue_5.size()
    assert var_4 == 0
    node_4 = module_0.Node()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_5 = queue_6.peek()
    queue_7 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_6 = queue_7.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    double_linked_list_5 = module_0.DoubleLinkedList(var_6)
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_9 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_7 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    queue_11 = module_0.Queue(queue_9)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_2)
    var_8 = queue_12.dequeue()
    assert var_8 == 77
    queue_13 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    queue_14 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    var_9 = double_linked_list_7.append(node_9)
    assert f'{type(double_linked_list_7.head).__module__}.{type(double_linked_list_7.head).__qualname__}' == 'queue4.Node'
    var_10 = double_linked_list_7.shift()
    assert double_linked_list_7.tail is None
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'queue4.Node'
    assert var_10.data is None
    assert var_10.next is None
    assert var_10.prev == {*()}
    set_7 = set()
    node_10 = module_0.Node(prev=set_7)
    queue_15 = module_0.Queue()
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    double_linked_list_9 = module_0.DoubleLinkedList()
    assert double_linked_list_9.head is None
    assert double_linked_list_9.tail is None
    var_11 = double_linked_list_9.append(set_7)
    assert f'{type(double_linked_list_9.head).__module__}.{type(double_linked_list_9.head).__qualname__}' == 'queue4.Node'
    var_12 = double_linked_list_9.push(set_7)
    none_type_0 = None
    queue_18 = module_0.Queue(none_type_0)

def test_case_901():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = queue_1.size()
    assert var_2 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    var_4 = queue_4.size()
    assert var_4 == 0
    var_5 = queue_3.peek()
    assert var_5 == 77
    var_6 = queue_3.size()
    assert var_6 == 11

def test_case_902():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_1 = queue_0.enqueue(var_0)
    queue_1 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_2 = module_0.Queue(complex_0)
    var_2 = queue_2.size()
    assert var_2 == 1
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue(queue_4)
    var_4 = queue_3.peek()
    queue_6 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_5 = double_linked_list_2.append(node_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    str_0 = "d^_Z'j<ceXum|X7"
    node_3 = module_0.Node(str_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_10 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_6 = queue_10.peek()
    queue_11 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_7 = queue_11.size()
    assert var_7 == 0
    var_8 = queue_10.size()
    assert var_8 == 0
    queue_12 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_13 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_9 = double_linked_list_4.append(node_7)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_10 = double_linked_list_4.shift()
    assert double_linked_list_4.tail is None
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'queue4.Node'
    assert var_10.data is None
    assert var_10.next is None
    assert var_10.prev == {*()}
    var_11 = queue_1.peek()

def test_case_903():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(node_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'

def test_case_904():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = queue_0.peek()
    assert var_1 == 2886.801252 + 1418.99508j

def test_case_905():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_0.size()
    assert var_0 == 0
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = queue_2.peek()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_4 = module_0.Node(next_node=double_linked_list_0)

def test_case_906():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_3.peek()
    node_2 = module_0.Node()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = var_2.__repr__()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    queue_7 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_5 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue(queue_8)
    var_6 = queue_7.peek()
    var_7 = queue_9.size()
    assert var_7 == 1
    queue_10 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_8 = double_linked_list_2.append(node_5)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_6 = module_0.Node()
    queue_12 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_13 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_9 = double_linked_list_3.append(node_8)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_14 = module_0.Queue(node_7)
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_4 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_4.tail).__module__}.{type(double_linked_list_4.tail).__qualname__}' == 'queue4.Node'
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_2)
    queue_16 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_10 = queue_16.size()
    assert var_10 == 0
    queue_17 = module_0.Queue()
    var_11 = queue_16.size()
    assert var_11 == 0
    node_10 = module_0.Node(next_node=var_10)
    assert node_10.next == 0
    var_12 = var_7.__repr__()
    assert var_12 == '1'

def test_case_907():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_0.push(queue_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue(node_1)
    var_2 = queue_3.enqueue(var_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_5.size()
    assert var_3 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_5 = node_2.__repr__()
    assert var_5 == 'Value: None'
    node_3 = module_0.Node()
    var_6 = queue_6.dequeue()
    assert var_6 == 77
    queue_7 = module_0.Queue()
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    var_7 = queue_7.peek()
    queue_8 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_8 = queue_8.size()
    assert var_8 == 0
    var_9 = queue_7.size()
    assert var_9 == 0
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    none_type_0 = None
    queue_9 = module_0.Queue()
    var_10 = queue_9.enqueue(none_type_0)
    var_11 = var_10.__repr__()
    queue_10 = module_0.Queue(var_10)

def test_case_908():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_3 = module_0.Node()
    var_2 = queue_3.size()
    assert var_2 == 0
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = node_4.__repr__()
    assert var_3 == 'Value: None'
    var_4 = var_2.__repr__()
    assert var_4 == '0'

def test_case_909():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(node_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    var_1 = double_linked_list_0.push(node_1)

def test_case_910():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_1 = queue_0.peek()

def test_case_911():
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_0 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    none_type_0 = None
    var_3 = queue_4.enqueue(none_type_0)
    var_4 = var_2.__repr__()
    assert var_4 == '0'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    var_5 = queue_5.dequeue()
    assert var_5 == 77
    queue_6 = module_0.Queue()
    complex_1 = 2886.801252 + 1418.99508j
    queue_7 = module_0.Queue(complex_1)
    var_6 = queue_7.size()
    assert var_6 == 1
    var_7 = var_6.__repr__()
    assert var_7 == '1'
    complex_2 = 1851.002 - 2261.566174j
    list_1 = [complex_2, complex_2, complex_2, complex_2]
    double_linked_list_2 = module_0.DoubleLinkedList(list_1)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    none_type_1 = None
    node_3 = module_0.Node(prev=none_type_1)
    var_8 = double_linked_list_2.append(none_type_1)
    queue_8 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_9 = queue_8.peek()
    node_5 = module_0.Node()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_10 = double_linked_list_3.push(var_9)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    var_11 = queue_9.dequeue()
    assert var_11 == 77
    none_type_2 = None
    node_6 = module_0.Node(prev=none_type_2)
    var_12 = var_1.__repr__()
    assert var_12 == '0'

def test_case_912():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    var_3 = queue_4.size()
    assert var_3 == 0
    bool_0 = True
    double_linked_list_1 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_4 = queue_5.size()
    assert var_4 == 0
    queue_6 = module_0.Queue()
    none_type_0 = None
    var_5 = queue_6.enqueue(none_type_0)
    var_6 = var_4.__repr__()
    assert var_6 == '0'
    complex_0 = 2886.801252 + 1418.99508j
    queue_7 = module_0.Queue(complex_0)
    var_7 = queue_7.size()
    assert var_7 == 1
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    none_type_1 = None
    queue_8 = module_0.Queue()
    var_8 = queue_8.enqueue(none_type_1)
    var_9 = queue_7.enqueue(set_3)
    complex_1 = 2886.801252 + 1418.99508j
    queue_9 = module_0.Queue(complex_1)
    var_10 = queue_9.size()
    assert var_10 == 1
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    complex_2 = 2886.801252 + 1418.99508j
    queue_10 = module_0.Queue(complex_2)
    var_11 = queue_10.size()
    assert var_11 == 1
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_12 = queue_10.peek()
    assert var_12 == 2886.801252 + 1418.99508j
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_13 = queue_10.size()
    assert var_13 == 1

def test_case_913():
    int_0 = -3616
    queue_0 = module_0.Queue(int_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == -3616
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    bool_0 = True
    double_linked_list_1 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    queue_5 = module_0.Queue(queue_3)
    var_3 = double_linked_list_1.append(node_1)
    node_2 = module_0.Node()
    var_4 = node_2.__repr__()
    assert var_4 == 'Value: None'
    queue_6 = module_0.Queue(node_2)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    var_5 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_6 = queue_7.size()
    assert var_6 == 11
    str_0 = "d^_Z'j<ceXum|X7"
    node_4 = module_0.Node(str_0)
    queue_8 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_7 = double_linked_list_3.append(node_6)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_8 = double_linked_list_3.append(queue_9)

def test_case_914():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    complex_0 = 2886.801252 + 1418.99508j
    queue_2 = module_0.Queue(complex_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    var_1 = queue_2.size()
    assert var_1 == 1
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_3.peek()
    bytes_0 = b'\x89\x1a\x06z'
    queue_4 = module_0.Queue(bytes_0)

def test_case_915():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_3.size()
    assert var_0 == 0
    queue_4 = module_0.Queue()
    var_1 = queue_3.size()
    assert var_1 == 0
    var_2 = queue_2.peek()
    assert var_2 == 77
    node_2 = module_0.Node()
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = var_3.__repr__()
    assert var_4 == "'Value: None'"
    node_3 = module_0.Node(next_node=node_0, prev=queue_2)

def test_case_916():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == 77
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue(none_type_0)
    queue_6 = module_0.Queue(queue_4)

def test_case_917():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_0.push(queue_1)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_1 = double_linked_list_3.append(set_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_3 = queue_9.size()
    assert var_3 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_11.peek()
    node_4 = module_0.Node()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_5 = var_4.__repr__()
    int_0 = -3616
    queue_14 = module_0.Queue(int_0)
    var_6 = queue_14.dequeue()
    assert var_6 == -3616
    var_7 = queue_14.enqueue(queue_14)
    node_5 = module_0.Node()
    var_8 = node_5.__repr__()
    assert var_8 == 'Value: None'
    queue_15 = module_0.Queue(node_5)
    double_linked_list_6 = module_0.DoubleLinkedList()
    var_9 = double_linked_list_4.append(double_linked_list_4)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'

def test_case_918():
    none_type_0 = None
    queue_0 = module_0.Queue(none_type_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_2.size()
    assert var_1 == 0
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue(queue_4)
    var_3 = queue_3.peek()
    var_4 = queue_5.size()
    assert var_4 == 1
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_5 = double_linked_list_1.append(node_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_6 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'queue4.Node'
    assert var_6.data is None
    assert var_6.next is None
    assert var_6.prev == {*()}
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_6 = module_0.Node()
    var_7 = queue_9.size()
    assert var_7 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_1)
    queue_12 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_8 = queue_12.size()
    assert var_8 == 0
    queue_13 = module_0.Queue()
    var_9 = queue_12.size()
    assert var_9 == 0
    var_10 = var_9.__repr__()
    assert var_10 == '0'
    node_8 = module_0.Node()
    var_11 = node_8.__repr__()
    assert var_11 == 'Value: None'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_12 = var_11.__repr__()
    assert var_12 == "'Value: None'"
    bool_0 = True
    set_6 = {var_12, var_8, node_1, bool_0}
    node_9 = module_0.Node(set_6)
    assert len(node_9.data) == 4

def test_case_919():
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    var_0 = queue_0.size()
    assert var_0 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    var_2 = queue_0.enqueue(set_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    var_3 = queue_3.peek()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    none_type_1 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None

def test_case_920():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_6.peek()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_7 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_4 = queue_7.size()
    assert var_4 == 0
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_5 = queue_8.peek()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_10 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_11 = module_0.Queue()
    var_6 = queue_11.peek()
    var_7 = queue_11.size()
    assert var_7 == 0

def test_case_921():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(node_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    var_1 = double_linked_list_0.push(queue_2)

def test_case_922():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = double_linked_list_2.append(node_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_2.shift()
    assert double_linked_list_2.tail is None
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'queue4.Node'
    assert var_4.data is None
    assert var_4.next is None
    assert var_4.prev == {*()}
    queue_7 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_5 = queue_7.size()
    assert var_5 == 0
    queue_8 = module_0.Queue()
    var_6 = node_3.__repr__()
    assert var_6 == 'Value: None'
    queue_9 = module_0.Queue()

def test_case_923():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_1 = double_linked_list_3.append(set_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_5.peek()
    node_3 = module_0.Node()
    complex_0 = 2886.801252 + 1418.99508j
    queue_6 = module_0.Queue(complex_0)
    var_4 = queue_6.size()
    assert var_4 == 1
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_5 = queue_9.size()
    assert var_5 == 0
    queue_10 = module_0.Queue()
    var_6 = node_5.__repr__()
    assert var_6 == 'Value: None'
    var_7 = var_2.__repr__()
    assert var_7 == "'Value: None'"

def test_case_924():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_3.size()
    assert var_0 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_1 = double_linked_list_2.append(node_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_6.size()
    assert var_2 == 0
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_5 = module_0.Node()
    var_3 = queue_9.size()
    assert var_3 == 0
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_0)
    assert f'{type(queue_11).__module__}.{type(queue_11).__qualname__}' == 'queue4.Queue'
    queue_12 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_5 = queue_12.size()
    assert var_5 == 0
    queue_13 = module_0.Queue()
    var_6 = queue_12.size()
    assert var_6 == 0
    queue_14 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_15 = module_0.Queue(complex_0)
    var_7 = queue_15.size()
    assert var_7 == 1
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_8 = queue_15.peek()
    assert var_8 == 2886.801252 + 1418.99508j
    none_type_0 = None
    node_7 = module_0.Node(prev=none_type_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_16 = module_0.Queue(bytes_1)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_9 = double_linked_list_5.append(bytes_1)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_17 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    var_10 = double_linked_list_7.push(queue_17)
    assert f'{type(double_linked_list_7.tail).__module__}.{type(double_linked_list_7.tail).__qualname__}' == 'queue4.Node'
    node_9 = module_0.Node()

def test_case_925():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    var_1 = queue_1.dequeue()
    assert var_1 == 77
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue(node_1)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_0)
    complex_0 = 2886.801252 + 1418.99508j
    queue_8 = module_0.Queue(complex_0)
    var_5 = queue_8.size()
    assert var_5 == 1
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = queue_8.peek()
    assert var_6 == 2886.801252 + 1418.99508j
    queue_9 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_7 = queue_9.peek()
    node_5 = module_0.Node()
    queue_10 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_8 = double_linked_list_3.append(node_7)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_12 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_9 = queue_14.size()
    assert var_9 == 0
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_2)
    queue_16 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_10 = queue_16.size()
    assert var_10 == 0
    queue_17 = module_0.Queue()
    var_11 = queue_16.size()
    assert var_11 == 0
    int_0 = -3616
    queue_18 = module_0.Queue(int_0)
    var_12 = queue_18.dequeue()
    assert var_12 == -3616
    var_13 = queue_18.enqueue(queue_18)
    var_14 = queue_15.enqueue(queue_14)

def test_case_926():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_5.peek()
    node_2 = module_0.Node()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_2 = var_1.__repr__()
    queue_8 = module_0.Queue()
    bool_0 = True
    double_linked_list_2 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_2).__module__}.{type(double_linked_list_2).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    queue_11 = module_0.Queue(queue_9)
    var_4 = double_linked_list_2.append(node_3)
    none_type_0 = None
    node_4 = module_0.Node(prev=none_type_0)
    queue_12 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_5 = queue_12.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_0)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    double_linked_list_4 = module_0.DoubleLinkedList(var_5)
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_6 = queue_5.enqueue(set_3)

def test_case_927():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_3 = queue_5.peek()
    node_5 = module_0.Node()
    var_4 = node_5.__repr__()
    assert var_4 == 'Value: None'
    queue_7 = module_0.Queue(node_5)
    var_5 = queue_7.enqueue(var_4)
    queue_8 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_6 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_6 = module_0.Node()
    var_7 = node_6.__repr__()
    assert var_7 == 'Value: None'
    node_7 = module_0.Node()
    var_8 = queue_9.dequeue()
    assert var_8 == 77
    queue_10 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    var_9 = queue_10.size()
    assert var_9 == 0
    queue_11 = module_0.Queue()
    none_type_0 = None
    var_10 = queue_11.enqueue(none_type_0)
    queue_12 = module_0.Queue()
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    var_11 = queue_12.peek()
    node_10 = module_0.Node()

def test_case_928():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_0.push(queue_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.push(queue_0)
    node_1 = module_0.Node()
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    queue_3 = module_0.Queue(node_1)
    var_3 = queue_3.enqueue(var_2)
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = double_linked_list_2.push(queue_4)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_5 = queue_7.peek()
    node_4 = module_0.Node()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_6 = double_linked_list_4.push(var_5)
    assert f'{type(double_linked_list_4.tail).__module__}.{type(double_linked_list_4.tail).__qualname__}' == 'queue4.Node'
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None

def test_case_929():
    str_0 = "d^_Z'j<ceXum|X7"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = queue_2.peek()

def test_case_930():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue(queue_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_3 = module_0.Node()
    var_2 = queue_8.size()
    assert var_2 == 0
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_3 = queue_12.size()
    assert var_3 == 0
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_4 = node_2.__repr__()
    assert var_4 == 'Value: None'

def test_case_931():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = queue_0.size()
    assert var_1 == 11
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    none_type_0 = None
    node_1 = module_0.Node(prev=none_type_0)
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    var_2 = queue_4.peek()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_3 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    queue_8 = module_0.Queue()
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    var_4 = queue_8.size()
    assert var_4 == 0
    queue_9 = module_0.Queue()
    node_5 = module_0.Node()
    var_5 = node_5.__repr__()
    assert var_5 == 'Value: None'
    queue_10 = module_0.Queue(node_5)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_2)
    var_6 = queue_11.dequeue()
    assert var_6 == 77
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    set_2 = set()
    node_6 = module_0.Node(prev=set_2)
    var_7 = queue_13.size()
    assert var_7 == 0
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    set_3 = set()
    node_7 = module_0.Node(prev=set_3)
    var_8 = queue_16.peek()
    queue_17 = module_0.Queue(queue_16)
    queue_18 = module_0.Queue(queue_16)
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    queue_21 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    node_9 = module_0.Node()
    var_9 = queue_20.size()
    assert var_9 == 0
    var_10 = double_linked_list_1.append(var_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'

def test_case_932():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    int_0 = -3616
    queue_2 = module_0.Queue(int_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    var_0 = queue_2.dequeue()
    assert var_0 == -3616
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.size()
    assert var_1 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_3 = queue_4.size()
    assert var_3 == 11
    var_4 = double_linked_list_1.pop()
    assert var_4 == b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_933():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 0
    node_0 = module_0.Node()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    var_3 = queue_4.size()
    assert var_3 == 0
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    node_3 = module_0.Node()
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_5 = var_4.__repr__()
    assert var_5 == "'Value: None'"
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    queue_7 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_6 = queue_7.size()
    assert var_6 == 0
    queue_8 = module_0.Queue()
    var_7 = queue_7.size()
    assert var_7 == 0
    queue_9 = module_0.Queue()
    bool_0 = True
    double_linked_list_3 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_8 = queue_10.peek()
    queue_11 = module_0.Queue(queue_10)
    queue_12 = module_0.Queue(queue_10)
    var_9 = double_linked_list_3.append(node_5)
    node_6 = module_0.Node(var_6, prev=var_1)
    assert node_6.data == 0
    assert node_6.prev == 'Value: None'

def test_case_934():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.enqueue(var_0)

def test_case_935():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = var_0.__repr__()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    var_3 = queue_4.size()
    assert var_3 == 0
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    bool_0 = True
    double_linked_list_1 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_4 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    queue_7 = module_0.Queue(queue_5)
    var_5 = double_linked_list_1.append(node_3)
    queue_8 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_6 = queue_8.size()
    assert var_6 == 0
    queue_9 = module_0.Queue()
    var_7 = queue_9.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_8 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_11 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_12 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_9 = double_linked_list_4.append(node_6)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_10 = double_linked_list_4.shift()
    assert double_linked_list_4.tail is None
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'queue4.Node'
    assert var_10.data is None
    assert var_10.next is None
    assert var_10.prev == {*()}
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_1)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_11 = double_linked_list_5.append(bytes_1)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    node_7 = module_0.Node()
    var_12 = node_7.__repr__()
    assert var_12 == 'Value: None'
    node_8 = module_0.Node()
    var_13 = node_8.__repr__()
    assert var_13 == 'Value: None'

def test_case_936():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    node_1 = module_0.Node()
    queue_1 = module_0.Queue(var_1)
    var_2 = queue_1.enqueue(queue_0)

def test_case_937():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_5.peek()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_2 = queue_8.size()
    assert var_2 == 0
    queue_9 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_1)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_3 = double_linked_list_5.append(bytes_1)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    queue_11 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_4 = queue_11.peek()
    node_6 = module_0.Node()
    node_7 = module_0.Node(set_4)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_2)
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_5 = double_linked_list_6.append(bytes_2)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    queue_13 = module_0.Queue()
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    double_linked_list_9 = module_0.DoubleLinkedList()
    assert double_linked_list_9.head is None
    assert double_linked_list_9.tail is None
    var_6 = queue_14.size()
    assert var_6 == 0
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    double_linked_list_10 = module_0.DoubleLinkedList()
    assert double_linked_list_10.head is None
    assert double_linked_list_10.tail is None
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_18 = module_0.Queue(bytes_3)
    var_7 = queue_18.dequeue()
    assert var_7 == 77
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    queue_19 = module_0.Queue()
    double_linked_list_11 = module_0.DoubleLinkedList()
    assert double_linked_list_11.head is None
    assert double_linked_list_11.tail is None
    node_10 = module_0.Node()
    var_8 = queue_9.peek()

def test_case_938():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_2.size()
    assert var_2 == 0
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = queue_4.size()
    assert var_3 == 0
    complex_0 = 2886.801252 + 1418.99508j
    queue_6 = module_0.Queue(complex_0)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    var_4 = queue_6.size()
    assert var_4 == 1
    var_5 = var_4.__repr__()
    assert var_5 == '1'
    node_3 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    queue_8 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_6 = queue_8.size()
    assert var_6 == 0
    queue_9 = module_0.Queue()
    var_7 = queue_8.size()
    assert var_7 == 0
    var_8 = queue_7.peek()
    assert var_8 == 77
    queue_10 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_9 = double_linked_list_2.append(node_6)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_7 = module_0.Node()
    node_8 = module_0.Node(set_1, prev=var_4)
    assert node_8.prev == 1

def test_case_939():
    str_0 = "d^_Z'j<ceXum|X7"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    float_0 = -3043.800134
    str_1 = 'O,S|'
    str_2 = 'm'
    bool_0 = False
    tuple_0 = (float_0, str_1, str_2, bool_0)
    double_linked_list_0 = module_0.DoubleLinkedList(tuple_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    node_3 = module_0.Node()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_2 = queue_3.peek()
    node_5 = module_0.Node()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = var_2.__repr__()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_4 = double_linked_list_1.append(node_7)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_8.enqueue(queue_7)
    var_6 = double_linked_list_1.push(node_0)

def test_case_940():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_1 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    none_type_0 = None
    node_1 = module_0.Node(prev=none_type_0)
    var_1 = double_linked_list_1.append(none_type_0)
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_2 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    int_0 = -3616
    queue_3 = module_0.Queue(int_0)
    var_3 = queue_3.dequeue()
    assert var_3 == -3616
    queue_4 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_4 = double_linked_list_4.append(node_5)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    float_0 = -3043.800134
    str_0 = 'O,S|'
    str_1 = 'm'
    bool_0 = False
    tuple_0 = (float_0, str_0, str_1, bool_0)
    double_linked_list_6 = module_0.DoubleLinkedList(tuple_0)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_6.tail).__module__}.{type(double_linked_list_6.tail).__qualname__}' == 'queue4.Node'
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_8 = module_0.DoubleLinkedList()
    var_5 = double_linked_list_8.append(set_4)
    assert f'{type(double_linked_list_8.head).__module__}.{type(double_linked_list_8.head).__qualname__}' == 'queue4.Node'
    complex_1 = 2886.801252 + 1418.99508j
    queue_11 = module_0.Queue(complex_1)
    var_6 = queue_11.size()
    assert var_6 == 1
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    none_type_1 = None
    queue_12 = module_0.Queue()
    var_7 = queue_12.enqueue(none_type_1)
    var_8 = queue_11.enqueue(set_5)
    var_9 = queue_2.size()
    assert var_9 == 11

def test_case_941():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_1.size()
    assert var_1 == 0
    complex_0 = 2886.801252 + 1418.99508j
    queue_2 = module_0.Queue(complex_0)
    var_2 = queue_2.size()
    assert var_2 == 1
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(none_type_0)
    var_4 = queue_2.enqueue(set_1)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_3 = module_0.Node()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1, prev=none_type_1)
    complex_1 = 2886.801252 + 1418.99508j
    queue_5 = module_0.Queue(complex_1)
    var_5 = queue_5.size()
    assert var_5 == 1
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_6 = queue_6.size()
    assert var_6 == 0
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_7 = queue_6.size()
    assert var_7 == 0
    queue_8 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_8 = queue_8.size()
    assert var_8 == 0
    queue_9 = module_0.Queue()
    var_9 = queue_9.peek()
    queue_10 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_10 = queue_10.size()
    assert var_10 == 0
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    node_8 = module_0.Node(next_node=var_4, prev=var_4)

def test_case_942():
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_0 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    none_type_0 = None
    node_0 = module_0.Node(prev=none_type_0)
    var_0 = double_linked_list_0.append(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_1.append(queue_0)
    var_3 = queue_0.dequeue()
    assert var_3 == 77

def test_case_943():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_2 = module_0.Node()
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_4 = module_0.Node()
    var_3 = queue_5.size()
    assert var_3 == 0
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    queue_7 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_5 = double_linked_list_5.append(node_6)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_6 = queue_7.size()
    assert var_6 == 0
    var_7 = var_6.__repr__()
    assert var_7 == '0'

def test_case_944():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == 77
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    var_2 = queue_2.size()
    assert var_2 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_4 = node_1.__repr__()
    assert var_4 == 'Value: None'
    node_2 = module_0.Node()
    double_linked_list_1 = module_0.DoubleLinkedList(bytes_0)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'

def test_case_945():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    var_3 = queue_5.size()
    assert var_3 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = queue_7.size()
    assert var_4 == 0
    queue_8 = module_0.Queue()
    var_5 = queue_7.size()
    assert var_5 == 0
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_6 = queue_10.size()
    assert var_6 == 0
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_2)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_7 = double_linked_list_0.append(bytes_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_12 = module_0.Queue(queue_11)
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    none_type_0 = None
    queue_13 = module_0.Queue()
    var_8 = queue_13.enqueue(none_type_0)
    var_9 = var_8.__repr__()
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_3)
    var_10 = queue_14.dequeue()
    assert var_10 == 77
    queue_15 = module_0.Queue()

def test_case_946():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue()
    var_2 = queue_3.size()
    assert var_2 == 0
    complex_0 = 2886.801252 + 1418.99508j
    queue_4 = module_0.Queue(complex_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    var_3 = queue_4.size()
    assert var_3 == 1
    var_4 = var_3.__repr__()
    assert var_4 == '1'
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_2 = module_0.Node()
    var_5 = queue_6.size()
    assert var_5 == 0
    var_6 = node_1.__repr__()
    assert var_6 == 'Value: None'
    queue_8 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_7 = queue_8.peek()
    node_4 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    queue_10 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_8 = queue_10.size()
    assert var_8 == 0
    queue_11 = module_0.Queue()
    var_9 = queue_10.size()
    assert var_9 == 0
    queue_12 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_1)
    queue_14 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_10 = queue_14.size()
    assert var_10 == 0
    queue_15 = module_0.Queue()
    var_11 = queue_14.size()
    assert var_11 == 0
    var_12 = var_11.__repr__()
    assert var_12 == '0'
    node_7 = module_0.Node()
    var_13 = node_7.__repr__()
    assert var_13 == 'Value: None'
    queue_16 = module_0.Queue(node_7)
    var_14 = queue_12.peek()

def test_case_947():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    none_type_0 = None
    queue_3 = module_0.Queue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_2 = module_0.Node()
    var_2 = queue_6.size()
    assert var_2 == 0
    var_3 = node_1.__repr__()
    assert var_3 == 'Value: None'
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_4 = queue_10.size()
    assert var_4 == 0
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_5 = queue_12.peek()
    queue_13 = module_0.Queue(queue_12)
    queue_14 = module_0.Queue(queue_12)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_6 = queue_17.peek()
    queue_18 = module_0.Queue(queue_17)
    queue_19 = module_0.Queue(queue_17)
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    var_7 = queue_19.size()
    assert var_7 == 1
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_22 = module_0.Queue(bytes_1)
    queue_23 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_8 = queue_23.size()
    assert var_8 == 0
    queue_24 = module_0.Queue()
    var_9 = queue_23.size()
    assert var_9 == 0
    var_10 = queue_22.peek()
    assert var_10 == 77
    queue_25 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_11 = queue_25.peek()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_26 = module_0.Queue(bytes_2)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    double_linked_list_6 = module_0.DoubleLinkedList(var_11)
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None

def test_case_948():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    var_1 = queue_1.size()
    assert var_1 == 0
    node_3 = module_0.Node()
    var_2 = node_3.__repr__()
    assert var_2 == 'Value: None'
    queue_2 = module_0.Queue(node_3)
    var_3 = queue_2.enqueue(var_2)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = queue_6.size()
    assert var_4 == 0
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_5 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    var_6 = queue_9.enqueue(set_2)
    double_linked_list_3 = module_0.DoubleLinkedList(queue_4)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'

def test_case_949():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_1.peek()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = double_linked_list_1.push(queue_2)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_2 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    var_3 = node_4.__repr__()
    assert var_3 == 'Value: None'
    node_5 = module_0.Node()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_6 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_7 = module_0.Node()
    var_4 = queue_6.size()
    assert var_4 == 0
    var_5 = node_6.__repr__()
    assert var_5 == 'Value: None'
    node_8 = module_0.Node(next_node=double_linked_list_2, prev=var_3)
    assert node_8.prev == 'Value: None'

def test_case_950():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_0)
    queue_1 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue(queue_2)
    var_3 = queue_1.peek()
    var_4 = queue_3.size()
    assert var_4 == 1
    var_5 = queue_3.dequeue()
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Queue'
    node_0 = module_0.Node()

def test_case_951():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    complex_0 = 2886.801252 + 1418.99508j
    queue_1 = module_0.Queue(complex_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_1 = queue_1.size()
    assert var_1 == 1
    node_1 = module_0.Node()
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    complex_1 = 2886.801252 + 1418.99508j
    queue_2 = module_0.Queue(complex_1)
    var_3 = queue_2.size()
    assert var_3 == 1
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_4 = queue_2.peek()
    assert var_4 == 2886.801252 + 1418.99508j
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    bytes_0 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_8 = module_0.Queue(bytes_0)
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_5 = queue_11.size()
    assert var_5 == 0
    bool_0 = True
    double_linked_list_5 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_5.tail).__module__}.{type(double_linked_list_5.tail).__qualname__}' == 'queue4.Node'
    queue_12 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_6 = queue_12.size()
    assert var_6 == 0
    queue_13 = module_0.Queue()
    none_type_0 = None
    var_7 = queue_13.enqueue(none_type_0)
    var_8 = var_6.__repr__()
    assert var_8 == '0'
    complex_2 = 1851.002 - 2261.566174j
    list_0 = [complex_2, complex_2, complex_2, complex_2]
    double_linked_list_6 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_6.tail).__module__}.{type(double_linked_list_6.tail).__qualname__}' == 'queue4.Node'
    none_type_1 = None
    node_5 = module_0.Node(prev=none_type_1)
    var_9 = double_linked_list_6.append(none_type_1)
    double_linked_list_7 = module_0.DoubleLinkedList(set_0)

def test_case_952():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    none_type_0 = None
    var_1 = queue_1.enqueue(none_type_0)
    node_1 = module_0.Node()
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    queue_2 = module_0.Queue(node_1)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    var_3 = queue_2.enqueue(var_2)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bytes_0 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_7 = module_0.Queue(bytes_0)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_9 = module_0.Queue()
    var_4 = queue_9.peek()
    node_4 = module_0.Node()
    var_5 = node_4.__repr__()
    assert var_5 == 'Value: None'
    queue_10 = module_0.Queue(node_4)
    var_6 = queue_10.enqueue(var_5)
    queue_11 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_7 = queue_11.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    double_linked_list_3 = module_0.DoubleLinkedList(var_7)
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_2)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_8 = double_linked_list_4.append(bytes_2)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_3)
    queue_15 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_9 = queue_15.size()
    assert var_9 == 0
    queue_16 = module_0.Queue()
    var_10 = queue_15.size()
    assert var_10 == 0
    queue_17 = module_0.Queue()
    int_0 = -3616
    queue_18 = module_0.Queue(int_0)
    var_11 = queue_18.dequeue()
    assert var_11 == -3616
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_19 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    node_8 = module_0.Node()
    queue_20 = module_0.Queue()

def test_case_953():
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_1 = module_0.Node()
    var_0 = node_1.__repr__()
    assert var_0 == 'Value: None'
    queue_1 = module_0.Queue(node_1)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    var_1 = queue_2.dequeue()
    assert var_1 == 77
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(var_1)

def test_case_954():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue(none_type_0)
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_4 = module_0.Queue(node_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    var_1 = queue_4.enqueue(var_0)
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_0.push(queue_5)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_0.push(queue_5)
    complex_0 = 2886.801252 + 1418.99508j
    queue_8 = module_0.Queue(complex_0)
    var_4 = queue_8.size()
    assert var_4 == 1
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_9 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_5 = queue_9.size()
    assert var_5 == 0
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_6 = queue_9.size()
    assert var_6 == 0
    queue_11 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_7 = queue_11.peek()
    node_4 = module_0.Node()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_8 = double_linked_list_4.push(var_7)
    assert f'{type(double_linked_list_4.tail).__module__}.{type(double_linked_list_4.tail).__qualname__}' == 'queue4.Node'
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_14 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    node_6 = module_0.Node()
    var_9 = queue_13.size()
    assert var_9 == 0
    var_10 = node_5.__repr__()
    assert var_10 == 'Value: None'
    queue_15 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    queue_16 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_17 = module_0.Queue()
    var_11 = queue_17.peek()
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    queue_20 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    queue_21 = module_0.Queue()
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    var_12 = double_linked_list_8.append(node_9)
    assert f'{type(double_linked_list_8.head).__module__}.{type(double_linked_list_8.head).__qualname__}' == 'queue4.Node'
    var_13 = queue_21.enqueue(queue_20)
    double_linked_list_9 = module_0.DoubleLinkedList()
    assert double_linked_list_9.head is None
    assert double_linked_list_9.tail is None

def test_case_955():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_1 = double_linked_list_0.pop()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
    assert var_1.data is None
    assert var_1.next is None
    assert var_1.prev == {*()}

def test_case_956():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = var_0.__repr__()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_3 = module_0.Node()
    var_2 = queue_2.size()
    assert var_2 == 0
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'
    var_4 = var_2.__repr__()
    assert var_4 == '0'

def test_case_957():
    str_0 = "d^_Z'j<ceXum|X7"
    node_0 = module_0.Node(str_0)
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_0 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    queue_2 = module_0.Queue(queue_0)
    var_1 = double_linked_list_0.append(node_1)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0, prev=none_type_0)
    queue_5 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue(queue_6)
    var_4 = queue_5.peek()
    var_5 = queue_7.size()
    assert var_5 == 1
    var_6 = queue_7.dequeue()
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'queue4.Queue'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    queue_9 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_7 = queue_9.size()
    assert var_7 == 0
    queue_10 = module_0.Queue()
    var_8 = queue_9.size()
    assert var_8 == 0
    var_9 = var_8.__repr__()
    assert var_9 == '0'
    var_10 = queue_4.enqueue(var_7)

def test_case_958():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    node_2 = module_0.Node(set_0)
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_1 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    complex_1 = 2886.801252 + 1418.99508j
    queue_3 = module_0.Queue(complex_1)
    var_2 = queue_3.size()
    assert var_2 == 1
    node_3 = module_0.Node()
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    queue_4 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue(queue_5)
    var_5 = queue_4.peek()
    var_6 = queue_6.size()
    assert var_6 == 1
    var_7 = queue_6.dequeue()
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'queue4.Queue'
    queue_7 = module_0.Queue()
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    var_8 = queue_7.size()
    assert var_8 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    var_9 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    var_10 = node_5.__repr__()
    assert var_10 == 'Value: None'
    node_6 = module_0.Node()
    queue_9 = module_0.Queue(var_10)
    var_11 = queue_9.enqueue(queue_8)
    complex_2 = 2886.801252 + 1418.99508j
    queue_10 = module_0.Queue(complex_2)
    var_12 = queue_10.size()
    assert var_12 == 1
    double_linked_list_4 = module_0.DoubleLinkedList()
    var_13 = queue_0.size()
    assert var_13 == 0

def test_case_959():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_4.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    double_linked_list_3 = module_0.DoubleLinkedList(var_1)
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_2 = double_linked_list_6.append(set_2)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue()
    var_3 = queue_9.size()
    assert var_3 == 0
    var_4 = queue_8.enqueue(queue_0)

def test_case_960():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    complex_0 = 2886.801252 + 1418.99508j
    queue_1 = module_0.Queue(complex_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_1 = queue_1.size()
    assert var_1 == 1
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    var_3 = queue_3.enqueue(set_1)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_3 = module_0.Node()
    var_4 = queue_4.size()
    assert var_4 == 0
    var_5 = queue_4.peek()

def test_case_961():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = double_linked_list_1.append(node_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_1.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = double_linked_list_2.append(node_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_7 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_4 = queue_7.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    double_linked_list_5 = module_0.DoubleLinkedList(var_4)
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    float_0 = -3043.800134
    str_0 = 'O,S|'
    str_1 = 'm'
    bool_0 = False
    tuple_0 = (float_0, str_0, str_1, bool_0)
    double_linked_list_7 = module_0.DoubleLinkedList(tuple_0)
    assert f'{type(double_linked_list_7.head).__module__}.{type(double_linked_list_7.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_7.tail).__module__}.{type(double_linked_list_7.tail).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_5 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    queue_11 = module_0.Queue(queue_9)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_6 = queue_11.size()
    assert var_6 == 1
    queue_14 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_7 = queue_14.peek()
    node_7 = module_0.Node()
    var_8 = queue_2.enqueue(bytes_1)

def test_case_962():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_2 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_2).__module__}.{type(double_linked_list_2).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    none_type_0 = None
    node_1 = module_0.Node(prev=none_type_0)
    var_1 = double_linked_list_2.append(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    var_3 = queue_4.size()
    assert var_3 == 0
    var_4 = var_3.__repr__()
    assert var_4 == '0'
    var_5 = queue_0.size()
    assert var_5 == 0

def test_case_963():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    var_2 = queue_2.dequeue()
    assert var_2 == 77
    queue_3 = module_0.Queue()
    var_3 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Node'
    assert var_3.data is None
    assert var_3.next is None
    assert var_3.prev == {*()}

def test_case_964():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.enqueue(var_0)
    queue_2 = module_0.Queue()

def test_case_965():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_2.peek()
    node_1 = module_0.Node()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_0.append(node_3)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    var_3 = double_linked_list_1.append(queue_3)

def test_case_966():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_4.peek()
    node_2 = module_0.Node()
    node_3 = module_0.Node(set_1)
    complex_0 = 2886.801252 + 1418.99508j
    queue_5 = module_0.Queue(complex_0)
    var_3 = queue_5.size()
    assert var_3 == 1
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_0)
    var_5 = queue_5.enqueue(set_2)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_6 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    queue_8 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_7 = queue_8.peek()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_2)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList(var_7)
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_10 = module_0.Queue()
    complex_1 = 2886.801252 + 1418.99508j
    queue_11 = module_0.Queue(complex_1)
    var_8 = queue_11.size()
    assert var_8 == 1
    node_7 = module_0.Node()
    var_9 = node_7.__repr__()
    assert var_9 == 'Value: None'
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_3)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_10 = double_linked_list_3.append(bytes_3)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_13 = module_0.Queue(queue_12)
    queue_14 = module_0.Queue()
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    var_11 = queue_14.size()
    assert var_11 == 0
    queue_15 = module_0.Queue()
    var_12 = queue_15.size()
    assert var_12 == 0
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    bytes_4 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_16 = module_0.Queue(bytes_4)
    queue_17 = module_0.Queue()
    set_5 = set()
    node_9 = module_0.Node(prev=set_5)
    var_13 = queue_17.size()
    assert var_13 == 0
    queue_18 = module_0.Queue()
    var_14 = queue_17.size()
    assert var_14 == 0
    set_6 = set()
    node_10 = module_0.Node(prev=set_6)
    queue_19 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_15 = double_linked_list_6.append(set_6)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    var_16 = double_linked_list_6.push(set_6)
    var_17 = queue_7.size()
    assert var_17 == 11

def test_case_967():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = queue_0.size()
    assert var_1 == 11
    queue_1 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue(node_1)
    queue_4 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    var_4 = var_3.__repr__()

def test_case_968():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    node_2 = module_0.Node()
    node_3 = module_0.Node(set_1)
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_4 = module_0.Queue()
    var_2 = queue_4.peek()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_7 = module_0.Queue()
    var_3 = queue_7.size()
    assert var_3 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    queue_9 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_4 = queue_9.size()
    assert var_4 == 0
    queue_10 = module_0.Queue()
    var_5 = queue_9.size()
    assert var_5 == 0
    queue_11 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None

def test_case_969():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    node_2 = module_0.Node(set_0)
    queue_1 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = queue_1.size()
    assert var_2 == 0
    bool_0 = True
    double_linked_list_1 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_3 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    queue_5 = module_0.Queue(queue_3)
    var_4 = double_linked_list_1.append(node_4)
    node_5 = module_0.Node()
    var_5 = node_5.__repr__()
    assert var_5 == 'Value: None'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = var_5.__repr__()
    assert var_6 == "'Value: None'"
    bool_1 = True
    double_linked_list_3 = module_0.DoubleLinkedList(bool_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    node_6 = module_0.Node()
    var_7 = node_6.__repr__()
    assert var_7 == 'Value: None'
    queue_6 = module_0.Queue(node_6)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    var_8 = queue_7.dequeue()
    assert var_8 == 77
    queue_8 = module_0.Queue()
    set_3 = set()
    node_7 = module_0.Node(prev=set_3)
    none_type_0 = None
    queue_9 = module_0.Queue()
    var_9 = queue_9.enqueue(none_type_0)
    var_10 = var_9.__repr__()
    complex_0 = 2886.801252 + 1418.99508j
    queue_10 = module_0.Queue(complex_0)
    var_11 = queue_10.size()
    assert var_11 == 1
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    queue_11 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_12 = queue_13.size()
    assert var_12 == 0
    node_9 = module_0.Node()
    node_10 = module_0.Node()

def test_case_970():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'

def test_case_971():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    var_2 = double_linked_list_0.append(queue_3)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'

def test_case_972():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    var_2 = queue_2.size()
    assert var_2 == 1
    var_3 = queue_2.dequeue()
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Queue'
    node_0 = module_0.Node()
    var_4 = node_0.__repr__()
    assert var_4 == 'Value: None'
    queue_3 = module_0.Queue(node_0)
    var_5 = queue_3.enqueue(var_4)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    var_6 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_7 = double_linked_list_1.append(queue_4)
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_2 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_8 = node_1.__repr__()
    assert var_8 == 'Value: None'
    queue_5 = module_0.Queue(node_1)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_2)
    var_9 = queue_6.dequeue()
    assert var_9 == 77
    queue_7 = module_0.Queue()
    node_2 = module_0.Node()

def test_case_973():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = queue_0.size()
    assert var_1 == 11
    queue_1 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_1.size()
    assert var_2 == 0
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = queue_2.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_5 = queue_5.peek()
    int_0 = -3616
    queue_6 = module_0.Queue(int_0)
    var_6 = queue_6.dequeue()
    assert var_6 == -3616
    var_7 = queue_6.enqueue(queue_6)
    queue_7 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_8 = queue_7.size()
    assert var_8 == 0
    queue_8 = module_0.Queue()
    var_9 = node_4.__repr__()
    assert var_9 == 'Value: None'
    queue_9 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_2)
    double_linked_list_2 = module_0.DoubleLinkedList()
    var_10 = double_linked_list_2.append(bytes_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_11 = module_0.Queue(queue_10)
    var_11 = queue_9.peek()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_3)
    queue_13 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_12 = queue_13.peek()
    double_linked_list_3 = module_0.DoubleLinkedList()
    var_13 = double_linked_list_1.shift()
    assert var_13 == b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    assert double_linked_list_1.tail is None

def test_case_974():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()

def test_case_975():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    var_2 = queue_3.peek()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_5 = module_0.Queue()
    node_3 = module_0.Node()
    complex_0 = 2886.801252 + 1418.99508j
    queue_6 = module_0.Queue(complex_0)
    var_3 = queue_6.size()
    assert var_3 == 1
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_0)
    var_5 = queue_6.enqueue(set_3)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_6 = queue_10.peek()
    queue_11 = module_0.Queue(queue_10)
    queue_12 = module_0.Queue(queue_10)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_7 = queue_12.size()
    assert var_7 == 1
    complex_1 = 1851.002 - 2261.566174j
    list_0 = [complex_1, complex_1, complex_1, complex_1]
    double_linked_list_1 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    none_type_1 = None
    node_6 = module_0.Node(prev=none_type_1)
    var_8 = double_linked_list_1.append(none_type_1)
    complex_2 = 2886.801252 + 1418.99508j
    queue_15 = module_0.Queue(complex_2)
    var_9 = queue_15.size()
    assert var_9 == 1
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_16 = module_0.Queue()

def test_case_976():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    queue_1 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_2.enqueue(queue_1)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    node_4 = module_0.Node()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_0 = None
    queue_7 = module_0.Queue(none_type_0)
    int_0 = -3616
    queue_8 = module_0.Queue(int_0)
    var_5 = queue_8.dequeue()
    assert var_5 == -3616
    queue_9 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_6 = queue_9.size()
    assert var_6 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_7 = queue_12.peek()
    node_7 = module_0.Node()
    node_8 = module_0.Node(set_3)
    set_4 = set()
    node_9 = module_0.Node(prev=set_4)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_2)
    queue_14 = module_0.Queue()
    set_5 = set()
    node_10 = module_0.Node(prev=set_5)
    var_8 = queue_14.peek()
    double_linked_list_3 = module_0.DoubleLinkedList()
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_3)
    queue_16 = module_0.Queue()
    set_6 = set()
    node_11 = module_0.Node(prev=set_6)
    var_9 = queue_16.size()
    assert var_9 == 0
    queue_17 = module_0.Queue()
    var_10 = queue_16.size()
    assert var_10 == 0
    var_11 = var_10.__repr__()
    assert var_11 == '0'
    var_12 = var_1.__repr__()

def test_case_977():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    str_0 = "d^_Z'j<ceXum|X7"
    node_1 = module_0.Node(str_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    int_0 = -3616
    queue_1 = module_0.Queue(int_0)
    var_2 = queue_1.dequeue()
    assert var_2 == -3616
    var_3 = queue_1.enqueue(queue_1)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    set_0 = set()
    node_3 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    node_4 = module_0.Node()
    var_4 = queue_2.size()
    assert var_4 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    var_5 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    set_1 = set()
    node_5 = module_0.Node(prev=set_1)
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_6 = queue_4.enqueue(none_type_1)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_2)
    double_linked_list_4 = module_0.DoubleLinkedList()
    var_7 = double_linked_list_4.append(bytes_2)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    node_6 = module_0.Node()
    var_8 = node_6.__repr__()
    assert var_8 == 'Value: None'
    node_7 = module_0.Node()
    set_2 = set()
    node_8 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    var_9 = queue_7.size()
    assert var_9 == 0
    var_10 = node_3.__repr__()
    assert var_10 == 'Value: None'

def test_case_978():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_0.append(queue_3)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_2)
    queue_5 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_4 = queue_5.peek()
    node_3 = module_0.Node()
    node_4 = module_0.Node(set_1)
    complex_0 = 2886.801252 + 1418.99508j
    queue_6 = module_0.Queue(complex_0)
    var_5 = queue_6.size()
    assert var_5 == 1
    var_6 = var_5.__repr__()
    assert var_6 == '1'
    queue_7 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_7 = queue_7.size()
    assert var_7 == 0
    queue_8 = module_0.Queue()
    none_type_1 = None
    var_8 = queue_8.enqueue(none_type_1)
    var_9 = var_7.__repr__()
    assert var_9 == '0'
    var_10 = queue_8.size()
    assert var_10 == 1

def test_case_979():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_1 = queue_0.enqueue(var_0)
    queue_1 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_1.peek()
    node_2 = module_0.Node()
    var_3 = queue_0.size()
    assert var_3 == 2

def test_case_980():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    node_1 = module_0.Node()
    var_2 = queue_0.dequeue()
    assert var_2 == 77
    bool_0 = False
    node_2 = module_0.Node(queue_0, bool_0)

def test_case_981():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = var_0.__repr__()
    complex_0 = 2886.801252 + 1418.99508j
    queue_2 = module_0.Queue(complex_0)
    var_2 = queue_2.size()
    assert var_2 == 1
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = queue_2.peek()
    assert var_3 == 2886.801252 + 1418.99508j
    node_2 = module_0.Node()
    node_3 = module_0.Node(node_0, prev=set_1)

def test_case_982():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_4.enqueue(queue_3)
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_5 = module_0.Node()
    var_4 = queue_5.size()
    assert var_4 == 0
    var_5 = node_4.__repr__()
    assert var_5 == 'Value: None'
    var_6 = node_4.__repr__()
    assert var_6 == 'Value: None'

def test_case_983():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    complex_0 = 2886.801252 + 1418.99508j
    queue_2 = module_0.Queue(complex_0)
    var_1 = queue_2.size()
    assert var_1 == 1
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_0)
    var_3 = queue_2.enqueue(set_1)
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = queue_4.size()
    assert var_4 == 0
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_5 = double_linked_list_0.append(node_4)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_6 = queue_5.size()
    assert var_6 == 0
    int_0 = -3616
    queue_7 = module_0.Queue(int_0)
    var_7 = queue_7.dequeue()
    assert var_7 == -3616
    var_8 = queue_7.enqueue(queue_7)
    var_9 = var_4.__repr__()
    assert var_9 == '0'

def test_case_984():
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_0 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    none_type_0 = None
    node_0 = module_0.Node(prev=none_type_0)
    var_0 = double_linked_list_0.append(none_type_0)
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_2 = module_0.Node()
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_1 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_2 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    node_4 = module_0.Node()

def test_case_985():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    var_3 = queue_2.enqueue(queue_2)

def test_case_986():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.enqueue(var_0)
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_3.enqueue(queue_2)
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_5 = module_0.Node()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_7 = module_0.Node()
    var_4 = queue_5.size()
    assert var_4 == 0
    var_5 = node_6.__repr__()
    assert var_5 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    queue_7 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_6 = queue_7.size()
    assert var_6 == 0
    queue_8 = module_0.Queue()
    var_7 = queue_7.size()
    assert var_7 == 0
    queue_9 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_1)
    var_8 = queue_10.dequeue()
    assert var_8 == 77
    var_9 = queue_10.peek()
    assert var_9 == 249
    var_10 = queue_3.size()
    assert var_10 == 1

def test_case_987():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = queue_1.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    var_4 = node_1.__repr__()
    assert var_4 == 'Value: None'
    node_2 = module_0.Node(var_0, prev=var_1)
    assert node_2.data == 0
    assert node_2.prev == 0

def test_case_988():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_1 = module_0.Queue(double_linked_list_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'

def test_case_989():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.push(var_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    dict_0 = {}
    node_2 = module_0.Node(var_0, dict_0)

def test_case_990():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    var_2 = queue_2.size()
    assert var_2 == 0
    node_1 = module_0.Node(next_node=var_1)
    assert node_1.next == 0
    queue_4 = module_0.Queue()

def test_case_991():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    var_1 = queue_1.dequeue()
    assert var_1 == 77
    queue_2 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = double_linked_list_0.append(node_4)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_5 = double_linked_list_2.append(set_4)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    queue_13 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_6 = queue_13.size()
    assert var_6 == 0
    queue_14 = module_0.Queue()
    var_7 = queue_13.size()
    assert var_7 == 0
    node_8 = module_0.Node(next_node=var_6)
    assert node_8.next == 0
    complex_0 = 2886.801252 + 1418.99508j
    queue_15 = module_0.Queue(complex_0)
    var_8 = queue_15.size()
    assert var_8 == 1
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    queue_16 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_9 = node_9.__repr__()
    assert var_9 == 'Value: None'
    queue_17 = module_0.Queue(double_linked_list_3)
    set_7 = set()
    node_10 = module_0.Node(prev=set_7)
    queue_18 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_10 = queue_20.size()
    assert var_10 == 0
    queue_21 = module_0.Queue()
    set_8 = set()
    node_11 = module_0.Node(prev=set_8)
    var_11 = queue_21.peek()
    var_12 = queue_1.size()
    assert var_12 == 10

def test_case_992():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_3 = node_0.__repr__()
    assert var_3 == 'Value: None'
    node_1 = module_0.Node()
    queue_2 = module_0.Queue(var_3)
    var_4 = queue_2.enqueue(queue_1)
    complex_0 = 2886.801252 + 1418.99508j
    queue_3 = module_0.Queue(complex_0)
    var_5 = queue_3.size()
    assert var_5 == 1
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_6 = module_0.Queue()
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    var_6 = queue_6.peek()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_2)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    double_linked_list_5 = module_0.DoubleLinkedList(var_6)
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_8 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    var_7 = queue_10.size()
    assert var_7 == 0
    queue_11 = module_0.Queue()
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_3)
    double_linked_list_9 = module_0.DoubleLinkedList()
    assert double_linked_list_9.head is None
    assert double_linked_list_9.tail is None
    var_8 = double_linked_list_9.append(bytes_3)
    assert f'{type(double_linked_list_9.head).__module__}.{type(double_linked_list_9.head).__qualname__}' == 'queue4.Node'
    queue_13 = module_0.Queue(queue_12)
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_14 = module_0.Queue()
    double_linked_list_10 = module_0.DoubleLinkedList()
    assert double_linked_list_10.head is None
    assert double_linked_list_10.tail is None
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    double_linked_list_11 = module_0.DoubleLinkedList()
    assert double_linked_list_11.head is None
    assert double_linked_list_11.tail is None
    var_9 = double_linked_list_11.append(set_2)
    assert f'{type(double_linked_list_11.head).__module__}.{type(double_linked_list_11.head).__qualname__}' == 'queue4.Node'
    var_10 = node_4.__repr__()
    assert var_10 == 'Value: None'
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_17 = module_0.Queue()
    double_linked_list_12 = module_0.DoubleLinkedList()
    assert double_linked_list_12.head is None
    assert double_linked_list_12.tail is None
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    double_linked_list_13 = module_0.DoubleLinkedList()
    assert double_linked_list_13.head is None
    assert double_linked_list_13.tail is None
    var_11 = queue_19.size()
    assert var_11 == 0
    node_6 = module_0.Node()
    var_12 = queue_3.enqueue(var_8)

def test_case_993():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    var_2 = queue_3.size()
    assert var_2 == 0
    var_3 = queue_2.peek()
    assert var_3 == 77
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    var_4 = queue_6.peek()
    float_0 = -3043.800134
    str_0 = 'O,S|'
    str_1 = 'm'
    bool_0 = False
    tuple_0 = (float_0, str_0, str_1, bool_0)
    double_linked_list_3 = module_0.DoubleLinkedList(tuple_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    var_5 = var_4.__repr__()

def test_case_994():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_0 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_2.enqueue(queue_1)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    var_3 = node_4.__repr__()
    assert var_3 == 'Value: None'
    node_5 = module_0.Node()
    var_4 = queue_3.dequeue()
    assert var_4 == 77
    queue_4 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue(queue_5)
    var_6 = queue_4.peek()
    var_7 = queue_6.size()
    assert var_7 == 1
    queue_7 = module_0.Queue()
    var_8 = queue_7.size()
    assert var_8 == 0
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_2)
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_3)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_9 = double_linked_list_4.append(bytes_3)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_10 = double_linked_list_4.append(queue_9)
    queue_10 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_11 = module_0.Queue(complex_0)
    var_11 = queue_11.size()
    assert var_11 == 1
    node_6 = module_0.Node()
    var_12 = node_6.__repr__()
    assert var_12 == 'Value: None'
    node_7 = module_0.Node(next_node=queue_1)

def test_case_995():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == 77
    var_1 = queue_0.peek()
    assert var_1 == 249
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_2 = queue_2.peek()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_2)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList(var_2)
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_4.peek()
    none_type_0 = None
    queue_5 = module_0.Queue(none_type_0)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_3 = module_0.Node()
    var_4 = queue_6.size()
    assert var_4 == 0
    var_5 = node_2.__repr__()
    assert var_5 == 'Value: None'
    queue_7 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_6 = queue_7.peek()
    queue_8 = module_0.Queue(queue_7)
    queue_9 = module_0.Queue(queue_7)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_7 = queue_9.size()
    assert var_7 == 1
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_12 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_13 = module_0.Queue()
    var_8 = queue_13.peek()
    bool_0 = True
    double_linked_list_5 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_5.tail).__module__}.{type(double_linked_list_5.tail).__qualname__}' == 'queue4.Node'
    queue_14 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_9 = queue_14.peek()
    queue_15 = module_0.Queue(queue_14)
    queue_16 = module_0.Queue(queue_14)
    var_10 = double_linked_list_5.append(node_6)
    var_11 = double_linked_list_0.push(queue_6)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'

def test_case_996():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = queue_0.peek()
    assert var_1 == 2886.801252 + 1418.99508j
    complex_1 = 1851.002 - 2261.566174j
    list_0 = [complex_1, complex_1, complex_1, complex_1]
    double_linked_list_1 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_2 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    queue_5 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_3 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue(queue_6)
    var_4 = queue_5.peek()
    queue_8 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_5 = queue_8.size()
    assert var_5 == 0
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_6 = queue_9.peek()
    var_7 = queue_7.size()
    assert var_7 == 1

def test_case_997():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = var_1.__repr__()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1, prev=none_type_1)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    var_3 = queue_3.dequeue()
    assert var_3 == 77
    var_4 = queue_3.peek()
    assert var_4 == 249
    var_5 = var_4.__repr__()
    assert var_5 == '249'

def test_case_998():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_1.append(node_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_2.enqueue(var_0)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_2 = queue_6.size()
    assert var_2 == 0
    node_3 = module_0.Node()
    node_4 = module_0.Node()
    var_3 = node_4.__repr__()
    assert var_3 == 'Value: None'
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_4 = var_3.__repr__()
    assert var_4 == "'Value: None'"
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    queue_8 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_5 = queue_8.peek()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_9 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_6 = queue_9.size()
    assert var_6 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_7 = queue_10.peek()
    node_9 = module_0.Node()
    var_8 = node_9.__repr__()
    assert var_8 == 'Value: None'
    queue_12 = module_0.Queue(node_9)
    double_linked_list_6 = module_0.DoubleLinkedList(queue_10)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_6.tail).__module__}.{type(double_linked_list_6.tail).__qualname__}' == 'queue4.Node'

def test_case_999():
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_0 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    queue_2 = module_0.Queue(queue_0)
    var_1 = double_linked_list_0.append(node_0)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    str_0 = "d^_Z'j<ceXum|X7"
    node_2 = module_0.Node(str_0)
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_4 = queue_7.peek()
    queue_8 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_5 = queue_8.size()
    assert var_5 == 0
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_6 = queue_8.size()
    assert var_6 == 0
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_5 = module_0.Node()

def test_case_1000():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_1.enqueue(queue_0)
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue()

def test_case_1001():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_5 = module_0.Queue()
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    var_3 = queue_6.dequeue()
    assert var_3 == 77
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_9 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    var_5 = queue_10.enqueue(set_3)
    var_6 = queue_1.peek()

def test_case_1002():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_2.append(queue_4)
    queue_5 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_5 = queue_5.peek()
    none_type_0 = None
    node_3 = module_0.Node(prev=none_type_0)
    var_6 = double_linked_list_1.pop()
    assert var_6 == b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_1003():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = queue_0.size()
    assert var_0 == 0

def test_case_1004():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'queue4.Node'
    assert var_2.data is None
    assert var_2.next is None
    assert var_2.prev == {*()}
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_2 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_2).__module__}.{type(double_linked_list_2).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_2.pop()
    assert var_3 == 1851.002 - 2261.566174j

def test_case_1005():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    none_type_0 = None
    queue_1 = module_0.Queue(none_type_0)
    queue_2 = module_0.Queue()

def test_case_1006():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue(queue_0)
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    var_2 = var_1.__repr__()
    none_type_1 = None
    queue_3 = module_0.Queue(none_type_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_2 = module_0.Node()
    var_3 = queue_5.size()
    assert var_3 == 0
    var_4 = node_1.__repr__()
    assert var_4 == 'Value: None'
    node_3 = module_0.Node(set_1)

def test_case_1007():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    queue_5 = module_0.Queue(node_3)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    var_4 = queue_6.dequeue()
    assert var_4 == 77
    queue_7 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_5 = node_4.__repr__()
    assert var_5 == 'Value: None'
    queue_9 = module_0.Queue(double_linked_list_2)
    var_6 = queue_4.dequeue()
    assert var_6 == 77

def test_case_1008():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = queue_4.size()
    assert var_2 == 0
    node_4 = module_0.Node()
    queue_5 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    none_type_0 = None
    var_4 = queue_6.enqueue(none_type_0)
    var_5 = var_3.__repr__()
    assert var_5 == '0'
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_6 = queue_8.size()
    assert var_6 == 0
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_7 = double_linked_list_5.append(set_6)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_8 = double_linked_list_5.push(set_6)
    queue_13 = module_0.Queue()

def test_case_1009():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_4 = queue_6.peek()
    node_6 = module_0.Node()
    node_7 = module_0.Node(set_4)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_5 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_8 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    var_6 = double_linked_list_4.append(node_9)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_7 = queue_9.enqueue(queue_8)
    queue_10 = module_0.Queue()
    set_7 = set()
    node_10 = module_0.Node(prev=set_7)
    var_8 = queue_10.size()
    assert var_8 == 0
    queue_11 = module_0.Queue()
    var_9 = node_10.__repr__()
    assert var_9 == 'Value: None'
    var_10 = double_linked_list_4.shift()
    assert double_linked_list_4.tail is None
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'queue4.Node'
    assert var_10.data is None
    assert var_10.next is None
    assert var_10.prev == {*()}

def test_case_1010():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = var_1.__repr__()
    assert var_2 == '0'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_3 = queue_8.size()
    assert var_3 == 0
    queue_9 = module_0.Queue()

def test_case_1011():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_1 = queue_1.size()
    assert var_1 == 11
    queue_2 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = double_linked_list_2.append(node_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_3.enqueue(queue_2)
    queue_4 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = queue_4.peek()
    node_5 = module_0.Node()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = double_linked_list_3.push(var_4)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    var_6 = queue_5.size()
    assert var_6 == 0
    queue_6 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_7 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    node_6 = module_0.Node()
    var_8 = node_6.__repr__()
    assert var_8 == 'Value: None'
    node_7 = module_0.Node()
    var_9 = queue_2.size()
    assert var_9 == 0

def test_case_1012():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_2 = module_0.Node()
    var_1 = queue_4.size()
    assert var_1 == 0
    var_2 = queue_3.size()
    assert var_2 == 0
    var_3 = queue_0.size()
    assert var_3 == 0

def test_case_1013():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    queue_5 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_3 = queue_5.peek()
    queue_6 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    var_5 = node_5.__repr__()
    assert var_5 == 'Value: None'
    node_6 = module_0.Node()
    var_6 = queue_7.dequeue()
    assert var_6 == 77
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_7 = node_7.__repr__()
    assert var_7 == 'Value: None'
    queue_9 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    var_8 = queue_9.peek()
    node_9 = module_0.Node()
    var_9 = node_9.__repr__()
    assert var_9 == 'Value: None'
    set_6 = set()
    node_10 = module_0.Node(prev=set_6)
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_11 = module_0.Node()
    var_10 = queue_10.size()
    assert var_10 == 0
    var_11 = node_10.__repr__()
    assert var_11 == 'Value: None'
    queue_11 = module_0.Queue()
    set_7 = set()
    node_12 = module_0.Node(prev=set_7)
    var_12 = queue_11.peek()
    queue_12 = module_0.Queue(queue_11)
    var_13 = queue_12.enqueue(set_7)
    var_14 = queue_6.peek()

def test_case_1014():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    none_type_0 = None
    node_0 = module_0.Node(prev=none_type_0)
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    float_0 = -3043.800134
    str_0 = 'O,S|'
    str_1 = 'm'
    bool_0 = False
    tuple_0 = (float_0, str_0, str_1, bool_0)
    double_linked_list_2 = module_0.DoubleLinkedList(tuple_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()

def test_case_1015():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_2.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_3.append(node_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_2 = queue_5.size()
    assert var_2 == 0

def test_case_1016():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    node_1 = module_0.Node()
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    queue_1 = module_0.Queue(node_2)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    var_3 = queue_2.dequeue()
    assert var_3 == 77
    queue_3 = module_0.Queue()
    set_0 = set()
    node_3 = module_0.Node(prev=set_0)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = queue_6.size()
    assert var_4 == 0
    node_4 = module_0.Node()
    queue_7 = module_0.Queue()
    set_1 = set()
    node_5 = module_0.Node(prev=set_1)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_2 = set()
    node_6 = module_0.Node(prev=set_2)
    var_5 = double_linked_list_3.append(node_6)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_6 = double_linked_list_3.shift()
    assert double_linked_list_3.tail is None
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'queue4.Node'
    assert var_6.data is None
    assert var_6.next is None
    assert var_6.prev == {*()}
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_2)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_7 = double_linked_list_4.append(bytes_2)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue(queue_9)
    complex_0 = 2886.801252 + 1418.99508j
    queue_11 = module_0.Queue(complex_0)
    var_8 = queue_11.size()
    assert var_8 == 1
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_9 = queue_11.peek()
    assert var_9 == 2886.801252 + 1418.99508j
    queue_12 = module_0.Queue()
    set_3 = set()
    node_7 = module_0.Node(prev=set_3)
    queue_13 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    var_10 = double_linked_list_6.append(node_8)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    queue_14 = module_0.Queue(node_7)
    var_11 = queue_11.enqueue(var_0)

def test_case_1017():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_1.size()
    assert var_0 == 0
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_2 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_2).__module__}.{type(double_linked_list_2).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    none_type_0 = None
    node_1 = module_0.Node(prev=none_type_0)
    var_1 = double_linked_list_2.append(none_type_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_1 = None
    queue_6 = module_0.Queue(none_type_1)
    queue_7 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = double_linked_list_3.append(node_3)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue(node_2)
    queue_10 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_3 = double_linked_list_4.append(node_5)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_11.enqueue(queue_10)
    queue_12 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_5 = queue_12.peek()
    queue_13 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_6 = queue_13.size()
    assert var_6 == 0
    queue_14 = module_0.Queue()
    var_7 = queue_14.size()
    assert var_7 == 0
    queue_15 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_16 = module_0.Queue(bytes_0)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_8 = double_linked_list_5.append(bytes_0)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    queue_17 = module_0.Queue(queue_16)
    var_9 = queue_15.peek()
    var_10 = queue_17.size()
    assert var_10 == 1
    var_11 = node_1.__repr__()
    assert var_11 == 'Value: None'

def test_case_1018():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bytes_0 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    str_0 = "d^_Z'j<ceXum|X7"
    node_1 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_0 = queue_4.peek()
    node_3 = module_0.Node()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_1 = double_linked_list_1.append(node_5)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue(node_4)
    queue_8 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_2 = queue_8.size()
    assert var_2 == 0
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_3 = queue_9.peek()
    node_8 = module_0.Node()
    var_4 = node_8.__repr__()
    assert var_4 == 'Value: None'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_5 = var_4.__repr__()
    assert var_5 == "'Value: None'"
    var_6 = queue_0.size()
    assert var_6 == 0

def test_case_1019():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_1020():
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_0 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    queue_2 = module_0.Queue(queue_0)
    var_1 = double_linked_list_0.append(node_0)
    var_2 = queue_1.size()
    assert var_2 == 1

def test_case_1021():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue(queue_5)
    var_3 = queue_4.peek()
    var_4 = queue_6.size()
    assert var_4 == 1
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_5 = queue_7.size()
    assert var_5 == 0
    queue_8 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_6 = queue_8.size()
    assert var_6 == 0
    queue_9 = module_0.Queue()
    var_7 = node_3.__repr__()
    assert var_7 == 'Value: None'
    node_4 = module_0.Node()
    var_8 = node_4.__repr__()
    assert var_8 == 'Value: None'
    queue_10 = module_0.Queue(node_4)
    var_9 = queue_10.enqueue(var_8)
    queue_11 = module_0.Queue()
    node_5 = module_0.Node()

def test_case_1022():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_0.push(queue_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.push(queue_0)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_3.peek()
    node_2 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    var_4 = queue_5.size()
    assert var_4 == 0
    node_4 = module_0.Node(next_node=var_3)
    assert node_4.next == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = double_linked_list_3.append(set_3)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_11 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_6 = queue_11.size()
    assert var_6 == 0
    queue_12 = module_0.Queue()
    var_7 = queue_12.peek()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_13 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_14 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_15 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_8 = queue_17.size()
    assert var_8 == 0
    var_9 = queue_3.size()
    assert var_9 == 0

def test_case_1023():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_1 = queue_0.enqueue(var_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_0.append(queue_1)
    var_4 = node_0.__repr__()
    assert var_4 == 'Value: None'

def test_case_1024():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_1 = module_0.Queue(double_linked_list_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_3.size()
    assert var_2 == 0
    var_3 = queue_2.size()
    assert var_3 == 0
    node_3 = module_0.Node()
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    var_5 = queue_5.peek()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    float_0 = 1621.9633
    var_6 = queue_8.enqueue(float_0)

def test_case_1025():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = queue_0.size()
    assert var_1 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    var_3 = queue_3.size()
    assert var_3 == 0
    var_4 = var_3.__repr__()
    assert var_4 == '0'
    var_5 = var_2.__repr__()
    assert var_5 == '0'

def test_case_1026():
    bytes_0 = b"\x0f\xb7)'\x9b\x0e^9B"
    node_0 = module_0.Node(next_node=bytes_0)

def test_case_1027():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    var_3 = queue_4.size()
    assert var_3 == 0
    node_2 = module_0.Node(next_node=set_0)

def test_case_1028():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == 77
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_0 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    none_type_0 = None
    node_0 = module_0.Node(prev=none_type_0)
    var_1 = double_linked_list_0.append(none_type_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_1.append(queue_1)
    none_type_1 = None
    queue_2 = module_0.Queue(none_type_1)
    var_4 = queue_1.enqueue(var_3)

def test_case_1029():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_1 = module_0.Node()
    queue_3 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_0 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue(queue_4)
    var_1 = queue_3.peek()
    var_2 = queue_5.size()
    assert var_2 == 1
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_3 = queue_8.size()
    assert var_3 == 0
    queue_9 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_4 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    var_5 = queue_10.enqueue(set_2)
    var_6 = queue_5.size()
    assert var_6 == 1

def test_case_1030():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_3.peek()
    node_4 = module_0.Node()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_4 = double_linked_list_0.push(var_3)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    var_5 = node_1.__repr__()
    assert var_5 == 'Value: None'

def test_case_1031():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = queue_1.peek()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = double_linked_list_2.append(node_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_6.size()
    assert var_4 == 0
    queue_8 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_5 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    assert f'{type(queue_9).__module__}.{type(queue_9).__qualname__}' == 'queue4.Queue'
    queue_10 = module_0.Queue(queue_8)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_6 = queue_10.size()
    assert var_6 == 1
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_0)
    queue_14 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_7 = queue_14.size()
    assert var_7 == 0
    queue_15 = module_0.Queue()
    var_8 = queue_14.size()
    assert var_8 == 0
    var_9 = queue_13.peek()
    assert var_9 == 77
    complex_0 = 2886.801252 + 1418.99508j
    queue_16 = module_0.Queue(complex_0)
    var_10 = queue_16.size()
    assert var_10 == 1
    queue_17 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_11 = queue_17.peek()
    queue_18 = module_0.Queue(queue_17)
    queue_19 = module_0.Queue(queue_17)
    complex_1 = 2886.801252 + 1418.99508j
    queue_20 = module_0.Queue(complex_1)
    var_12 = queue_20.size()
    assert var_12 == 1
    var_13 = var_12.__repr__()
    assert var_13 == '1'
    queue_21 = module_0.Queue()
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    var_14 = queue_21.peek()
    node_8 = module_0.Node()
    var_15 = node_8.__repr__()
    assert var_15 == 'Value: None'
    queue_22 = module_0.Queue(node_8)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None

def test_case_1032():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    var_2 = queue_2.size()
    assert var_2 == 1
    var_3 = queue_2.dequeue()
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_4 = queue_3.peek()
    node_1 = module_0.Node()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_5 = queue_4.size()
    assert var_5 == 0
    queue_5 = module_0.Queue()
    var_6 = queue_5.size()
    assert var_6 == 0
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    node_4 = module_0.Node()
    var_7 = queue_6.size()
    assert var_7 == 0
    bytes_1 = b"\x0f\xb7)'\x9b\x0e^9B"
    node_5 = module_0.Node(next_node=bytes_1)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_2)
    queue_8 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_8 = queue_8.size()
    assert var_8 == 0
    queue_9 = module_0.Queue()
    var_9 = queue_8.size()
    assert var_9 == 0
    var_10 = queue_7.peek()
    assert var_10 == 77
    int_0 = -3616
    queue_10 = module_0.Queue(int_0)
    var_11 = queue_10.dequeue()
    var_12 = queue_10.enqueue(queue_10)
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    none_type_0 = None
    queue_11 = module_0.Queue()
    var_13 = queue_11.enqueue(none_type_0)
    var_14 = var_13.__repr__()
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_3)
    double_linked_list_2 = module_0.DoubleLinkedList()
    var_15 = double_linked_list_2.append(bytes_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_8 = module_0.Node()
    var_16 = node_8.__repr__()
    assert var_16 == 'Value: None'
    node_9 = module_0.Node()
    var_17 = var_4.__repr__()

def test_case_1033():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = queue_0.size()
    assert var_1 == 11
    node_1 = module_0.Node()
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = var_2.__repr__()
    assert var_3 == "'Value: None'"
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_3 = module_0.Node()
    var_4 = queue_1.size()
    assert var_4 == 0
    none_type_0 = None
    queue_2 = module_0.Queue(none_type_0)
    queue_3 = module_0.Queue()
    node_4 = module_0.Node()
    var_5 = double_linked_list_0.pop()
    assert var_5 == b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None

def test_case_1034():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = var_0.__repr__()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    var_3 = queue_4.size()
    assert var_3 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_4 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    queue_7 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_5 = double_linked_list_1.append(node_5)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_6 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'queue4.Node'
    assert var_6.data is None
    assert var_6.next is None
    assert var_6.prev == {*()}
    queue_9 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_7 = double_linked_list_2.append(node_7)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_8 = queue_10.enqueue(queue_9)
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_9 = queue_13.size()
    assert var_9 == 0
    node_9 = module_0.Node()
    double_linked_list_5 = module_0.DoubleLinkedList(node_8)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_5.tail).__module__}.{type(double_linked_list_5.tail).__qualname__}' == 'queue4.Node'

def test_case_1035():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    queue_10 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_4 = queue_10.peek()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_11 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_12 = module_0.Queue()
    var_5 = queue_12.peek()
    queue_13 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_6 = queue_13.peek()
    queue_14 = module_0.Queue(queue_13)
    queue_15 = module_0.Queue(queue_13)
    var_7 = node_8.__repr__()
    assert var_7 == 'Value: None'

def test_case_1036():
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_0 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    queue_2 = module_0.Queue(queue_0)
    var_1 = double_linked_list_0.append(node_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_0 = None
    queue_6 = module_0.Queue(none_type_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = queue_9.size()
    assert var_2 == 0
    node_2 = module_0.Node()
    queue_10 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_10.peek()
    node_4 = module_0.Node()
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    queue_11 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_5 = queue_11.peek()
    node_6 = module_0.Node()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_6 = var_5.__repr__()
    node_7 = module_0.Node()

def test_case_1037():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_2.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    var_5 = queue_6.enqueue(set_2)
    queue_7 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_6 = queue_7.size()
    assert var_6 == 0
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_7 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_8 = var_7.__repr__()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_12 = module_0.Queue()
    node_7 = module_0.Node()
    queue_13 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_9 = queue_13.peek()
    queue_14 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList(var_2)
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None

def test_case_1038():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue(queue_4)
    var_2 = queue_3.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_2)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_3 = double_linked_list_3.append(bytes_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue(queue_7)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_4 = queue_9.size()
    assert var_4 == 0
    none_type_0 = None
    queue_10 = module_0.Queue(none_type_0)
    queue_11 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_5 = queue_11.peek()
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_3)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    double_linked_list_6 = module_0.DoubleLinkedList(var_5)
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_13 = module_0.Queue()
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    double_linked_list_9 = module_0.DoubleLinkedList()
    assert double_linked_list_9.head is None
    assert double_linked_list_9.tail is None
    var_6 = queue_15.size()
    assert var_6 == 0
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_7 = queue_17.peek()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_18 = module_0.Queue()
    double_linked_list_10 = module_0.DoubleLinkedList()
    assert double_linked_list_10.head is None
    assert double_linked_list_10.tail is None
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    double_linked_list_11 = module_0.DoubleLinkedList()
    assert double_linked_list_11.head is None
    assert double_linked_list_11.tail is None
    var_8 = double_linked_list_11.append(set_5)
    assert f'{type(double_linked_list_11.head).__module__}.{type(double_linked_list_11.head).__qualname__}' == 'queue4.Node'
    var_9 = node_5.__repr__()
    assert var_9 == 'Value: None'
    node_6 = module_0.Node(prev=var_0)

def test_case_1039():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_1040():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue(none_type_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None

def test_case_1041():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    var_1 = var_0.__repr__()
    assert var_1 == '1'
    node_0 = module_0.Node()
    var_2 = node_0.__repr__()
    assert var_2 == 'Value: None'
    queue_1 = module_0.Queue()

def test_case_1042():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = double_linked_list_2.append(set_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_4 = module_0.Node()
    var_3 = queue_4.size()
    assert var_3 == 0
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    queue_5 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_5 = queue_5.peek()
    node_6 = module_0.Node()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_6 = var_5.__repr__()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_3 = set()
    node_7 = module_0.Node(prev=set_3)
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_8 = module_0.Node()
    var_7 = queue_9.size()
    assert var_7 == 0
    var_8 = node_7.__repr__()
    assert var_8 == 'Value: None'
    int_0 = -3616
    queue_11 = module_0.Queue(int_0)
    var_9 = queue_11.dequeue()
    assert var_9 == -3616
    var_10 = queue_11.enqueue(queue_11)
    node_9 = module_0.Node(var_8, var_1, var_4)
    assert node_9.data == 'Value: None'
    assert node_9.next == 'Value: None'
    assert node_9.prev == 'Value: None'

def test_case_1043():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_2.size()
    assert var_1 == 1
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_5.size()
    assert var_2 == 0
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_6.peek()
    node_3 = module_0.Node()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_4 = double_linked_list_0.push(var_3)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_5 = double_linked_list_2.append(set_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_6 = double_linked_list_2.push(set_3)
    complex_0 = 2886.801252 + 1418.99508j
    queue_10 = module_0.Queue(complex_0)
    var_7 = queue_10.size()
    assert var_7 == 1
    var_8 = var_7.__repr__()
    assert var_8 == '1'
    node_5 = module_0.Node()
    var_9 = node_5.__repr__()
    assert var_9 == 'Value: None'
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()

def test_case_1044():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    none_type_0 = None
    queue_3 = module_0.Queue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_1 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    complex_1 = 1851.002 - 2261.566174j
    list_1 = [complex_1, complex_1, complex_1, complex_1]
    double_linked_list_2 = module_0.DoubleLinkedList(list_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    none_type_1 = None
    node_2 = module_0.Node(prev=none_type_1)
    var_3 = double_linked_list_2.append(none_type_1)
    queue_5 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_4 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    queue_7 = module_0.Queue(queue_5)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_5 = queue_7.size()
    assert var_5 == 1
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_6 = double_linked_list_3.push(queue_10)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    var_7 = double_linked_list_3.push(queue_10)
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_13 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_8 = double_linked_list_6.append(set_3)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    var_9 = double_linked_list_6.push(set_3)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_16 = module_0.Queue(bytes_1)
    var_10 = queue_16.dequeue()
    assert var_10 == 77
    var_11 = queue_16.peek()
    assert var_11 == 249
    queue_17 = module_0.Queue(queue_14)

def test_case_1045():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_4 = queue_5.size()
    assert var_4 == 0
    queue_7 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_5 = queue_7.peek()
    node_5 = module_0.Node()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_6 = double_linked_list_1.push(var_5)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_7 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue(queue_9)
    var_8 = queue_8.peek()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    none_type_0 = None
    queue_14 = module_0.Queue()
    var_9 = queue_14.enqueue(none_type_0)
    var_10 = var_9.__repr__()
    queue_15 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    queue_16 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_11 = double_linked_list_5.append(node_9)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_12 = queue_16.enqueue(queue_15)
    set_9 = set()
    node_10 = module_0.Node(prev=set_9)
    queue_17 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    var_13 = double_linked_list_6.push(queue_17)
    assert f'{type(double_linked_list_6.tail).__module__}.{type(double_linked_list_6.tail).__qualname__}' == 'queue4.Node'
    set_10 = set()
    node_11 = module_0.Node(prev=set_10)
    none_type_1 = None
    queue_20 = module_0.Queue()
    var_14 = queue_20.enqueue(none_type_1)
    var_15 = var_13.__repr__()

def test_case_1046():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = queue_0.size()
    assert var_1 == 11
    queue_1 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_1.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList(var_2)
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    none_type_0 = None
    queue_3 = module_0.Queue(none_type_0)
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = queue_4.peek()
    node_3 = module_0.Node()
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_5 = queue_6.size()
    assert var_5 == 0
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    none_type_1 = None
    queue_8 = module_0.Queue()
    var_6 = queue_8.enqueue(none_type_1)
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_9 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    node_7 = module_0.Node()
    var_7 = queue_9.size()
    assert var_7 == 0
    var_8 = var_0.__repr__()

def test_case_1047():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_1 = queue_1.enqueue(set_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    none_type_0 = None
    queue_3 = module_0.Queue(none_type_0)
    queue_4 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    queue_6 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = queue_6.size()
    assert var_3 == 0
    queue_7 = module_0.Queue()
    var_4 = queue_6.size()
    assert var_4 == 0
    bool_0 = True
    double_linked_list_1 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_0.append(set_1)

def test_case_1048():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(node_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\xde|'
    node_2 = module_0.Node(queue_1, prev=bytes_0)

def test_case_1049():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue(none_type_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_0 = double_linked_list_2.append(set_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    float_0 = -3043.800134
    str_0 = 'O,S|'
    str_1 = 'm'
    bool_0 = False
    tuple_0 = (float_0, str_0, str_1, bool_0)
    double_linked_list_3 = module_0.DoubleLinkedList(tuple_0)
    assert f'{type(double_linked_list_3).__module__}.{type(double_linked_list_3).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue()
    var_1 = queue_7.size()
    assert var_1 == 0
    queue_8 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_2 = double_linked_list_4.append(bytes_0)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue(queue_9)
    queue_11 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_11.peek()
    node_2 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_4 = double_linked_list_5.append(bytes_1)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_5 = queue_12.size()
    assert var_5 == 11
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_13 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_6 = node_4.__repr__()
    assert var_6 == 'Value: None'
    queue_14 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_15 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_7 = double_linked_list_7.append(node_6)
    assert f'{type(double_linked_list_7.head).__module__}.{type(double_linked_list_7.head).__qualname__}' == 'queue4.Node'
    var_8 = double_linked_list_7.shift()
    assert double_linked_list_7.tail is None
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'queue4.Node'
    assert var_8.data is None
    assert var_8.next is None
    assert var_8.prev == {*()}
    var_9 = queue_5.enqueue(set_3)

def test_case_1050():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    queue_5 = module_0.Queue(queue_3)
    float_0 = -3043.800134
    str_0 = 'O,S|'
    str_1 = 'm'
    bool_0 = False
    tuple_0 = (float_0, str_0, str_1, bool_0)
    double_linked_list_0 = module_0.DoubleLinkedList(tuple_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_4 = module_0.Node()
    queue_7 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_3 = double_linked_list_2.append(node_6)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_7.size()
    assert var_4 == 0
    queue_9 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_5 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    queue_11 = module_0.Queue(queue_9)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_6 = queue_9.size()
    assert var_6 == 0
    str_2 = "d^_Z'j<ceXum|X7"
    node_8 = module_0.Node(str_2)
    queue_14 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_7 = queue_14.size()
    assert var_7 == 0
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    var_8 = queue_16.peek()
    complex_0 = 2886.801252 + 1418.99508j
    queue_17 = module_0.Queue(complex_0)
    var_9 = queue_17.size()
    assert var_9 == 1
    set_8 = set()
    node_10 = module_0.Node(prev=set_8)
    none_type_0 = None
    queue_18 = module_0.Queue()
    var_10 = queue_18.enqueue(none_type_0)
    var_11 = queue_17.enqueue(set_8)
    queue_19 = module_0.Queue()
    var_12 = queue_8.peek()

def test_case_1051():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_3 = module_0.Node()
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_7 = module_0.Queue(complex_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    var_3 = queue_7.size()
    assert var_3 == 1
    node_4 = module_0.Node()
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    queue_8 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_5 = double_linked_list_1.append(node_6)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_6 = queue_9.enqueue(queue_8)
    node_7 = module_0.Node()
    var_7 = node_7.__repr__()
    assert var_7 == 'Value: None'
    var_8 = node_3.__repr__()
    assert var_8 == 'Value: None'

def test_case_1052():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_2)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = double_linked_list_2.append(bytes_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'
    node_3 = module_0.Node()
    var_4 = queue_3.dequeue()
    assert var_4 == 77
    queue_4 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_5 = queue_4.size()
    assert var_5 == 0
    queue_5 = module_0.Queue()
    var_6 = node_4.__repr__()
    assert var_6 == 'Value: None'
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_3 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_3)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_7 = double_linked_list_4.append(bytes_3)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    var_8 = node_5.__repr__()
    assert var_8 == 'Value: None'
    node_6 = module_0.Node()
    bytes_4 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_4)
    queue_8 = module_0.Queue()
    set_3 = set()
    node_7 = module_0.Node(prev=set_3)
    var_9 = queue_8.size()
    assert var_9 == 0
    queue_9 = module_0.Queue()
    var_10 = queue_9.size()
    assert var_10 == 0
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    none_type_0 = None
    queue_10 = module_0.Queue(none_type_0)
    queue_11 = module_0.Queue()
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    var_11 = queue_11.size()
    assert var_11 == 0
    queue_12 = module_0.Queue()
    none_type_1 = None
    var_12 = queue_12.enqueue(none_type_1)
    queue_13 = module_0.Queue()

def test_case_1053():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_1 = module_0.Queue(double_linked_list_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_1 = var_0.__repr__()
    assert var_1 == "'Value: None'"

def test_case_1054():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.size()
    assert var_2 == 0
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_2.peek()
    node_3 = module_0.Node()
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_5 = queue_3.size()
    assert var_5 == 0
    queue_4 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_6 = double_linked_list_1.append(node_6)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue(node_5)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_7 = node_0.__repr__()
    assert var_7 == 'Value: None'

def test_case_1055():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    var_1 = var_0.__repr__()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_3 = node_1.__repr__()
    assert var_3 == 'Value: None'
    node_2 = module_0.Node()
    queue_2 = module_0.Queue(var_3)
    var_4 = queue_2.enqueue(queue_1)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_5 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_6 = var_5.__repr__()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_7 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    none_type_1 = None
    queue_6 = module_0.Queue(none_type_1)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()

def test_case_1056():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_2 = module_0.Node()
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_3 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    queue_4 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_1 = queue_4.peek()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    none_type_0 = None
    queue_5 = module_0.Queue(none_type_0)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None

def test_case_1057():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_2 = module_0.Queue()
    var_0 = queue_2.peek()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    complex_0 = 2886.801252 + 1418.99508j
    queue_5 = module_0.Queue(complex_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    var_1 = queue_5.size()
    assert var_1 == 1
    var_2 = var_1.__repr__()
    assert var_2 == '1'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_7.size()
    assert var_3 == 0
    queue_8 = module_0.Queue()
    var_4 = queue_7.size()
    assert var_4 == 0
    queue_9 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_5 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_6 = var_5.__repr__()
    node_5 = module_0.Node()
    var_7 = node_5.__repr__()
    assert var_7 == 'Value: None'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_8 = var_7.__repr__()
    assert var_8 == "'Value: None'"
    queue_11 = module_0.Queue()
    var_9 = queue_11.size()
    assert var_9 == 0
    bool_0 = True
    double_linked_list_4 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_4.tail).__module__}.{type(double_linked_list_4.tail).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    queue_13 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_10 = queue_13.size()
    assert var_10 == 0
    queue_14 = module_0.Queue()
    var_11 = queue_13.size()
    assert var_11 == 0
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_12 = queue_16.size()
    assert var_12 == 0
    queue_17 = module_0.Queue()
    var_13 = node_7.__repr__()
    assert var_13 == 'Value: None'
    double_linked_list_5 = module_0.DoubleLinkedList(queue_11)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_5.tail).__module__}.{type(double_linked_list_5.tail).__qualname__}' == 'queue4.Node'

def test_case_1058():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_0 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = queue_1.peek()
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_1 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    var_2 = node_0.__repr__()
    assert var_2 == 'Value: None'

def test_case_1059():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = queue_0.size()
    assert var_1 == 11
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    str_0 = "d^_Z'j<ceXum|X7"
    node_3 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    set_0 = set()
    node_4 = module_0.Node(prev=set_0)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_4 = queue_6.peek()
    set_1 = set()
    node_5 = module_0.Node(prev=set_1)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_2)
    queue_8 = module_0.Queue()
    set_2 = set()
    node_6 = module_0.Node(prev=set_2)
    var_5 = queue_8.peek()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    str_1 = "d^_Z'j<ceXum|X7"
    node_7 = module_0.Node(str_1)
    queue_9 = module_0.Queue()
    set_3 = set()
    node_8 = module_0.Node(prev=set_3)
    var_6 = queue_9.peek()
    node_9 = module_0.Node()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_7 = double_linked_list_4.push(var_6)
    assert f'{type(double_linked_list_4.tail).__module__}.{type(double_linked_list_4.tail).__qualname__}' == 'queue4.Node'
    dict_0 = {}
    node_10 = module_0.Node(var_6, dict_0)
    node_11 = module_0.Node()
    var_8 = node_11.__repr__()
    assert var_8 == 'Value: None'
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_9 = var_8.__repr__()
    assert var_9 == "'Value: None'"
    set_4 = set()
    node_12 = module_0.Node(prev=set_4)
    queue_10 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    var_10 = double_linked_list_7.append(set_4)
    assert f'{type(double_linked_list_7.head).__module__}.{type(double_linked_list_7.head).__qualname__}' == 'queue4.Node'
    var_11 = node_12.__repr__()
    assert var_11 == 'Value: None'
    node_13 = module_0.Node(prev=node_4)

def test_case_1060():
    node_0 = module_0.Node()
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = queue_3.size()
    assert var_1 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_2 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    var_3 = node_4.__repr__()
    assert var_3 == 'Value: None'
    node_5 = module_0.Node()
    queue_6 = module_0.Queue(var_3)
    var_4 = queue_6.enqueue(queue_5)
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_7 = module_0.Node()
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    bool_0 = True
    double_linked_list_6 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_6.tail).__module__}.{type(double_linked_list_6.tail).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue()
    set_5 = set()
    node_9 = module_0.Node(prev=set_5)
    var_5 = queue_9.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_1)
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    double_linked_list_8 = module_0.DoubleLinkedList(var_5)
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    set_6 = set()
    node_10 = module_0.Node(prev=set_6)
    none_type_0 = None
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(none_type_0)
    var_7 = var_6.__repr__()
    queue_12 = module_0.Queue()
    set_7 = set()
    node_11 = module_0.Node(prev=set_7)
    var_8 = queue_12.size()
    assert var_8 == 0
    queue_13 = module_0.Queue()
    none_type_1 = None
    var_9 = queue_13.enqueue(none_type_1)
    var_10 = double_linked_list_8.push(node_0)
    assert f'{type(double_linked_list_8.tail).__module__}.{type(double_linked_list_8.tail).__qualname__}' == 'queue4.Node'

def test_case_1061():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = var_0.__repr__()
    assert var_1 == '1'

def test_case_1062():
    bytes_0 = b"\x0f\xb7)'\x9b\x0e^9B"
    node_0 = module_0.Node(next_node=bytes_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_2 = module_0.Node()
    var_1 = node_2.__repr__()
    assert var_1 == 'Value: None'
    none_type_0 = None
    queue_1 = module_0.Queue(none_type_0)
    none_type_1 = None
    node_3 = module_0.Node(prev=none_type_1)
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = node_4.__repr__()
    assert var_2 == 'Value: None'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_6 = module_0.Node(prev=set_2)
    var_4 = queue_4.peek()
    node_7 = module_0.Node()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_5 = double_linked_list_2.push(var_4)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    dict_0 = {}
    node_8 = module_0.Node(var_4, dict_0)
    set_3 = set()
    node_9 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_6 = queue_6.size()
    assert var_6 == 0
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_7 = var_2.__repr__()
    assert var_7 == "'Value: None'"

def test_case_1063():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = var_0.__repr__()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    none_type_0 = None
    var_3 = queue_5.enqueue(none_type_0)
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_4 = queue_6.peek()
    node_4 = module_0.Node()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_5 = double_linked_list_0.push(var_4)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    dict_0 = {}
    node_5 = module_0.Node(var_4, dict_0)
    var_6 = queue_2.size()
    assert var_6 == 0

def test_case_1064():
    str_0 = "d^_Z'j<ceXum|X7"
    node_0 = module_0.Node(str_0)
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    var_2 = queue_0.enqueue(set_0)
    queue_2 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = queue_2.size()
    assert var_3 == 0
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_4 = queue_2.size()
    assert var_4 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    bool_0 = True
    double_linked_list_1 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_5 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    queue_7 = module_0.Queue(queue_5)
    var_6 = double_linked_list_1.append(node_3)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_5 = module_0.Node()
    var_7 = queue_9.size()
    assert var_7 == 0
    var_8 = queue_8.size()
    assert var_8 == 0
    queue_11 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_9 = queue_11.peek()
    node_7 = module_0.Node()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_10 = var_9.__repr__()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_11 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_8 = module_0.Node()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_2)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_12 = double_linked_list_4.append(bytes_2)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    node_9 = module_0.Node()
    var_13 = node_9.__repr__()
    assert var_13 == 'Value: None'
    node_10 = module_0.Node()
    node_11 = module_0.Node()

def test_case_1065():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    queue_2 = module_0.Queue()

def test_case_1066():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 0
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_3 = queue_3.size()
    assert var_3 == 11
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_0 = None
    queue_7 = module_0.Queue(none_type_0)
    queue_8 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_4 = queue_8.peek()
    queue_9 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_5 = queue_9.size()
    assert var_5 == 0
    var_6 = queue_8.size()
    assert var_6 == 0
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_7 = queue_12.size()
    assert var_7 == 0
    node_5 = module_0.Node()
    complex_0 = 2886.801252 + 1418.99508j
    queue_13 = module_0.Queue(complex_0)
    var_8 = queue_13.size()
    assert var_8 == 1
    var_9 = var_8.__repr__()
    assert var_9 == '1'
    var_10 = double_linked_list_2.push(double_linked_list_0)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'

def test_case_1067():
    none_type_0 = None
    node_0 = module_0.Node(prev=none_type_0)
    float_0 = -3043.800134
    str_0 = 'O,S|'
    str_1 = 'm'
    bool_0 = False
    tuple_0 = (float_0, str_0, str_1, bool_0)
    double_linked_list_0 = module_0.DoubleLinkedList(tuple_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.enqueue(var_0)
    int_0 = -3616
    queue_2 = module_0.Queue(int_0)
    var_2 = queue_2.dequeue()
    assert var_2 == -3616
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    queue_4 = module_0.Queue(double_linked_list_2)
    var_4 = var_3.__repr__()
    assert var_4 == "'Value: None'"
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    queue_6 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_5 = queue_6.size()
    assert var_5 == 0
    queue_7 = module_0.Queue()
    none_type_1 = None
    var_6 = queue_7.enqueue(none_type_1)
    var_7 = queue_1.size()
    assert var_7 == 0

def test_case_1068():
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_0 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    none_type_0 = None
    node_0 = module_0.Node(prev=none_type_0)
    var_0 = double_linked_list_0.append(none_type_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_2 = queue_0.peek()
    var_3 = queue_2.size()
    assert var_3 == 1
    var_4 = queue_2.dequeue()
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_5 = queue_3.peek()
    queue_4 = module_0.Queue()
    node_2 = module_0.Node()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    var_6 = queue_6.size()
    assert var_6 == 0
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_12 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    node_5 = module_0.Node()
    var_7 = queue_11.size()
    assert var_7 == 0
    var_8 = node_4.__repr__()
    assert var_8 == 'Value: None'
    str_0 = "d^_Z'j<ceXum|X7"
    node_6 = module_0.Node(str_0)
    queue_13 = module_0.Queue()
    set_3 = set()
    node_7 = module_0.Node(prev=set_3)
    var_9 = queue_13.size()
    assert var_9 == 0
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_10 = queue_15.peek()
    node_8 = module_0.Node()

def test_case_1069():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_6.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    double_linked_list_5 = module_0.DoubleLinkedList(var_1)
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    node_3 = module_0.Node()
    var_2 = node_3.__repr__()
    assert var_2 == 'Value: None'
    queue_8 = module_0.Queue(node_3)
    var_3 = queue_8.enqueue(var_2)
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    queue_10 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_11 = module_0.Queue()
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_4 = double_linked_list_8.append(node_6)
    assert f'{type(double_linked_list_8.head).__module__}.{type(double_linked_list_8.head).__qualname__}' == 'queue4.Node'
    node_7 = module_0.Node()
    str_0 = "d^_Z'j<ceXum|X7"
    node_8 = module_0.Node(str_0)
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    queue_12 = module_0.Queue()
    double_linked_list_9 = module_0.DoubleLinkedList()
    assert double_linked_list_9.head is None
    assert double_linked_list_9.tail is None
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    bytes_1 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_15 = module_0.Queue(bytes_1)
    queue_16 = module_0.Queue()
    set_7 = set()
    node_10 = module_0.Node(prev=set_7)
    queue_17 = module_0.Queue()
    double_linked_list_10 = module_0.DoubleLinkedList()
    assert double_linked_list_10.head is None
    assert double_linked_list_10.tail is None
    set_8 = set()
    node_11 = module_0.Node(prev=set_8)
    var_5 = double_linked_list_10.append(node_11)
    assert f'{type(double_linked_list_10.head).__module__}.{type(double_linked_list_10.head).__qualname__}' == 'queue4.Node'
    var_6 = queue_17.enqueue(queue_16)
    node_12 = module_0.Node()
    var_7 = node_12.__repr__()
    assert var_7 == 'Value: None'
    queue_18 = module_0.Queue(node_12)
    var_8 = queue_18.enqueue(var_7)
    queue_19 = module_0.Queue()
    double_linked_list_11 = module_0.DoubleLinkedList()
    assert double_linked_list_11.head is None
    assert double_linked_list_11.tail is None

def test_case_1070():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = var_0.__repr__()
    assert var_1 == "'Value: None'"
    node_1 = module_0.Node()
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    queue_0 = module_0.Queue(node_1)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    var_3 = queue_1.dequeue()
    assert var_3 == 77
    queue_2 = module_0.Queue()
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_4 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    queue_7 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_5 = queue_7.size()
    assert var_5 == 0
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_6 = queue_10.size()
    assert var_6 == 0
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    queue_11 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    var_7 = double_linked_list_8.append(set_4)
    assert f'{type(double_linked_list_8.head).__module__}.{type(double_linked_list_8.head).__qualname__}' == 'queue4.Node'
    var_8 = double_linked_list_8.push(set_4)
    queue_14 = module_0.Queue()

def test_case_1071():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    var_1 = queue_3.peek()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_2 = double_linked_list_2.push(queue_6)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue()

def test_case_1072():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bytes_0 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    complex_0 = 2886.801252 + 1418.99508j
    queue_6 = module_0.Queue(complex_0)
    var_1 = queue_6.size()
    assert var_1 == 1
    var_2 = var_1.__repr__()
    assert var_2 == '1'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_8 = module_0.Queue()
    var_3 = queue_8.peek()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    none_type_0 = None
    queue_11 = module_0.Queue(none_type_0)
    queue_12 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_4 = queue_12.peek()
    queue_13 = module_0.Queue(queue_12)
    queue_14 = module_0.Queue(queue_12)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_5 = queue_17.peek()
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_20 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    var_6 = double_linked_list_3.append(node_7)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_7 = double_linked_list_3.shift()
    assert double_linked_list_3.tail is None
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'queue4.Node'
    assert var_7.data is None
    assert var_7.next is None
    assert var_7.prev == {*()}
    node_8 = module_0.Node(set_4)

def test_case_1073():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = queue_5.size()
    assert var_2 == 0
    node_3 = module_0.Node()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_5 = module_0.Node()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(none_type_0)
    var_4 = var_3.__repr__()
    str_0 = "d^_Z'j<ceXum|X7"
    node_7 = module_0.Node(str_0)
    queue_8 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    var_5 = queue_8.peek()
    queue_9 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_10 = module_0.Queue(complex_0)
    assert f'{type(queue_10).__module__}.{type(queue_10).__qualname__}' == 'queue4.Queue'
    var_6 = queue_10.size()
    assert var_6 == 1
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_11 = module_0.Queue()
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    var_7 = queue_11.peek()
    queue_12 = module_0.Queue(queue_11)
    set_7 = set()
    node_10 = module_0.Node(prev=set_7)
    var_8 = var_7.__repr__()
    set_8 = set()
    node_11 = module_0.Node(prev=set_8)
    queue_13 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_9 = queue_15.size()
    assert var_9 == 0
    queue_16 = module_0.Queue()
    set_9 = set()
    node_12 = module_0.Node(prev=set_9)
    queue_17 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    var_10 = queue_18.size()
    assert var_10 == 0
    var_11 = queue_0.enqueue(var_1)

def test_case_1074():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue(queue_4)
    var_2 = queue_3.peek()
    var_3 = queue_5.size()
    assert var_3 == 1
    var_4 = queue_5.dequeue()
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'queue4.Queue'
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    none_type_0 = None
    queue_9 = module_0.Queue(none_type_0)
    var_5 = queue_6.size()
    assert var_5 == 0

def test_case_1075():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_1 = queue_0.enqueue(var_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_2.peek()
    node_2 = module_0.Node()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_3 = var_2.__repr__()
    queue_5 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    queue_7 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_4 = queue_7.size()
    assert var_4 == 0
    queue_8 = module_0.Queue()
    var_5 = queue_7.size()
    assert var_5 == 0
    queue_9 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_6 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    var_7 = node_4.__repr__()
    assert var_7 == 'Value: None'
    node_5 = module_0.Node()
    queue_11 = module_0.Queue(var_7)
    var_8 = queue_11.enqueue(queue_10)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_1076():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_2.size()
    assert var_2 == 0
    var_3 = queue_1.size()
    assert var_3 == 0
    queue_3 = module_0.Queue()
    var_4 = queue_3.size()
    assert var_4 == 0
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_5 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    queue_6 = module_0.Queue(queue_4)
    queue_7 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_6 = double_linked_list_1.append(node_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue(node_3)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_1)
    var_7 = queue_10.dequeue()
    assert var_7 == 77
    var_8 = queue_10.peek()
    assert var_8 == 249
    var_9 = double_linked_list_0.append(set_0)

def test_case_1077():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = queue_0.peek()
    assert var_1 == 2886.801252 + 1418.99508j
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    var_3 = queue_3.size()
    assert var_3 == 0
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    complex_1 = 2886.801252 + 1418.99508j
    queue_4 = module_0.Queue(complex_1)
    var_4 = queue_4.size()
    assert var_4 == 1
    var_5 = var_4.__repr__()
    assert var_5 == '1'
    node_1 = module_0.Node()
    var_6 = node_1.__repr__()
    assert var_6 == 'Value: None'
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_7 = queue_6.size()
    assert var_7 == 0
    queue_7 = module_0.Queue()
    none_type_0 = None
    var_8 = queue_7.enqueue(none_type_0)
    queue_8 = module_0.Queue(none_type_0)

def test_case_1078():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue(none_type_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_4.size()
    assert var_0 == 0
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_5.peek()
    node_2 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_2 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    none_type_1 = None
    node_3 = module_0.Node(prev=none_type_1)
    var_2 = double_linked_list_2.append(none_type_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_5 = module_0.Node()
    var_3 = queue_10.size()
    assert var_3 == 0
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    node_6 = module_0.Node()
    var_5 = node_6.__repr__()
    assert var_5 == 'Value: None'
    queue_12 = module_0.Queue(node_6)
    set_3 = set()
    node_7 = module_0.Node(prev=set_3)
    none_type_2 = None
    queue_13 = module_0.Queue()
    var_6 = queue_13.enqueue(none_type_2)
    var_7 = var_6.__repr__()
    node_8 = module_0.Node()

def test_case_1079():
    int_0 = -3616
    queue_0 = module_0.Queue(int_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == -3616
    var_1 = queue_0.enqueue(queue_0)
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_2 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    queue_5 = module_0.Queue(queue_3)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    queue_10 = module_0.Queue(queue_8)
    var_5 = double_linked_list_0.append(node_2)
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    bytes_0 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_14 = module_0.Queue(bytes_0)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    none_type_0 = None
    queue_18 = module_0.Queue(none_type_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_21 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    node_5 = module_0.Node()
    var_6 = queue_20.size()
    assert var_6 == 0
    var_7 = node_4.__repr__()
    assert var_7 == 'Value: None'
    complex_0 = 2886.801252 + 1418.99508j
    queue_22 = module_0.Queue(complex_0)
    var_8 = queue_22.size()
    assert var_8 == 1
    double_linked_list_4 = module_0.DoubleLinkedList()
    var_9 = queue_22.peek()
    int_1 = 2
    node_6 = module_0.Node(next_node=int_1, prev=queue_13)

def test_case_1080():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_2 = module_0.Queue(complex_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    var_0 = queue_2.size()
    assert var_0 == 1
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    var_3 = queue_4.size()
    assert var_3 == 0
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = queue_0.size()
    assert var_4 == 0

def test_case_1081():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_0 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    node_2 = module_0.Node()
    queue_3 = module_0.Queue(var_1)
    var_2 = queue_3.enqueue(queue_2)
    queue_4 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    none_type_0 = None
    var_4 = queue_5.enqueue(none_type_0)
    var_5 = var_3.__repr__()
    assert var_5 == '0'
    node_4 = module_0.Node()
    var_6 = node_4.__repr__()
    assert var_6 == 'Value: None'
    queue_6 = module_0.Queue(node_4)
    var_7 = queue_6.enqueue(var_6)
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_8 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_8 = queue_8.size()
    assert var_8 == 0
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_9 = queue_8.size()
    assert var_9 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_1)
    var_10 = queue_10.dequeue()
    assert var_10 == 77
    queue_11 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_11 = queue_11.peek()
    queue_12 = module_0.Queue(queue_11)
    var_12 = queue_12.enqueue(set_4)
    none_type_1 = None
    node_8 = module_0.Node(prev=none_type_1)
    var_13 = node_4.__repr__()
    assert var_13 == 'Value: None'

def test_case_1082():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = queue_0.size()
    assert var_1 == 0
    var_2 = queue_1.peek()

def test_case_1083():
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_0 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    none_type_0 = None
    node_0 = module_0.Node(prev=none_type_0)
    var_0 = double_linked_list_0.append(none_type_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_1 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList(var_1)
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    queue_3 = module_0.Queue(double_linked_list_4)
    var_3 = var_2.__repr__()
    assert var_3 == "'Value: None'"
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_4 = double_linked_list_5.append(bytes_1)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_5 = node_3.__repr__()
    assert var_5 == 'Value: None'
    node_4 = module_0.Node()
    queue_5 = module_0.Queue(var_5)
    var_6 = queue_5.enqueue(queue_4)
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    node_6 = module_0.Node()
    var_7 = queue_6.size()
    assert var_7 == 0
    node_7 = module_0.Node()
    var_8 = node_7.__repr__()
    assert var_8 == 'Value: None'
    queue_7 = module_0.Queue(node_7)
    var_9 = queue_7.enqueue(var_8)
    queue_8 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_2)
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    var_10 = double_linked_list_7.append(bytes_2)
    assert f'{type(double_linked_list_7.head).__module__}.{type(double_linked_list_7.head).__qualname__}' == 'queue4.Node'
    node_8 = module_0.Node()
    var_11 = node_8.__repr__()
    assert var_11 == 'Value: None'
    node_9 = module_0.Node()
    set_3 = set()
    node_10 = module_0.Node(prev=set_3)
    queue_10 = module_0.Queue()
    set_4 = set()
    node_11 = module_0.Node(prev=set_4)
    var_12 = queue_10.peek()
    node_12 = module_0.Node()
    var_13 = node_12.__repr__()
    assert var_13 == 'Value: None'
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None

def test_case_1084():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'
    node_3 = module_0.Node()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_4 = queue_4.peek()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_5 = queue_6.size()
    assert var_5 == 0
    queue_7 = module_0.Queue()
    none_type_0 = None
    var_6 = queue_7.enqueue(none_type_0)
    node_6 = module_0.Node()

def test_case_1085():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    queue_5 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_2 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue(queue_6)
    var_3 = queue_5.peek()
    var_4 = queue_7.size()
    assert var_4 == 1
    queue_8 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_5 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    var_6 = queue_9.enqueue(set_2)
    queue_10 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_7 = queue_10.size()
    assert var_7 == 0
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_8 = queue_10.size()
    assert var_8 == 0
    var_9 = queue_11.peek()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    none_type_0 = None
    queue_12 = module_0.Queue()
    var_10 = queue_12.enqueue(none_type_0)
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_13 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_14 = module_0.Queue()
    var_11 = queue_14.peek()
    var_12 = queue_13.peek()

def test_case_1086():
    complex_0 = -1161.9557 + 1889.1364j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1

def test_case_1087():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_0 = None
    queue_6 = module_0.Queue(none_type_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_3 = module_0.Node()

def test_case_1088():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    none_type_0 = None
    var_1 = queue_1.enqueue(none_type_0)
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_2.peek()
    node_2 = module_0.Node()
    node_3 = module_0.Node(set_1)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    var_3 = queue_3.dequeue()
    assert var_3 == 77
    var_4 = queue_3.peek()
    assert var_4 == 249
    queue_4 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_5 = queue_4.size()
    assert var_5 == 0
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_6 = queue_4.size()
    assert var_6 == 0
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_7 = double_linked_list_2.append(set_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue()

def test_case_1089():
    int_0 = -3616
    queue_0 = module_0.Queue(int_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == -3616
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue(none_type_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    queue_6 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_6.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    double_linked_list_3 = module_0.DoubleLinkedList(var_2)
    queue_8 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = queue_8.size()
    assert var_3 == 0
    queue_9 = module_0.Queue()
    var_4 = queue_0.size()
    assert var_4 == 0

def test_case_1090():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_4.peek()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_3 = double_linked_list_2.append(node_4)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_5.size()
    assert var_4 == 0
    int_0 = -3616
    queue_7 = module_0.Queue(int_0)
    var_5 = queue_7.dequeue()
    assert var_5 == -3616
    var_6 = queue_7.enqueue(queue_7)
    node_5 = module_0.Node()
    node_6 = module_0.Node()
    var_7 = node_6.__repr__()
    assert var_7 == 'Value: None'
    queue_8 = module_0.Queue(node_6)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    var_8 = queue_9.dequeue()
    assert var_8 == 77
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_13 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    node_8 = module_0.Node()
    var_9 = queue_12.size()
    assert var_9 == 0
    var_10 = node_7.__repr__()
    assert var_10 == 'Value: None'
    none_type_0 = None
    queue_14 = module_0.Queue(none_type_0)
    none_type_1 = None
    node_9 = module_0.Node(none_type_1)
    var_11 = queue_1.peek()

def test_case_1091():
    float_0 = -3043.800134
    str_0 = 'O,S|'
    str_1 = 'm'
    bool_0 = False
    tuple_0 = (float_0, str_0, str_1, bool_0)
    double_linked_list_0 = module_0.DoubleLinkedList(tuple_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_1 = double_linked_list_4.append(set_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None

def test_case_1092():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_0.size()
    assert var_1 == 0
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_7 = module_0.Queue()
    var_2 = queue_7.size()
    assert var_2 == 0
    queue_8 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_8.peek()
    node_3 = module_0.Node()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_5 = module_0.Node()
    var_4 = queue_9.size()
    assert var_4 == 0
    var_5 = node_4.__repr__()
    assert var_5 == 'Value: None'
    queue_10 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_6 = queue_10.peek()
    node_7 = module_0.Node()
    var_7 = node_7.__repr__()
    assert var_7 == 'Value: None'
    queue_11 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    var_8 = queue_11.size()
    assert var_8 == 0
    queue_12 = module_0.Queue()
    none_type_0 = None
    var_9 = queue_12.enqueue(none_type_0)
    queue_13 = module_0.Queue()

def test_case_1093():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    queue_3 = module_0.Queue(double_linked_list_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_4.size()
    assert var_4 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_5 = module_0.Node()
    var_5 = queue_7.size()
    assert var_5 == 0
    var_6 = queue_6.size()
    assert var_6 == 0
    str_0 = "d^_Z'j<ceXum|X7"
    node_6 = module_0.Node(str_0)
    queue_9 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_7 = queue_9.size()
    assert var_7 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_8 = queue_11.peek()
    complex_0 = 2886.801252 + 1418.99508j
    queue_12 = module_0.Queue(complex_0)
    var_9 = queue_12.size()
    assert var_9 == 1
    var_10 = var_9.__repr__()
    assert var_10 == '1'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_0)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_11 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_8 = module_0.Node()
    none_type_0 = None
    queue_14 = module_0.Queue(none_type_0)
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    queue_18 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_10 = module_0.Node()
    var_12 = queue_17.size()
    assert var_12 == 0
    var_13 = node_9.__repr__()
    assert var_13 == 'Value: None'
    set_7 = set()
    node_11 = module_0.Node(prev=set_7)
    queue_19 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    node_12 = module_0.Node(prev=var_13)
    assert node_12.prev == 'Value: None'

def test_case_1094():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bytes_0 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    var_0 = queue_4.size()
    assert var_0 == 0
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = double_linked_list_2.append(set_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_8.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_3 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    node_4 = module_0.Node()
    queue_10 = module_0.Queue(var_4)
    var_5 = queue_10.enqueue(queue_9)
    node_5 = module_0.Node()

def test_case_1095():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_0.push(queue_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    var_2 = queue_4.enqueue(set_1)
    complex_0 = -1161.9557 + 1889.1364j
    queue_5 = module_0.Queue(complex_0)
    var_3 = queue_5.size()
    assert var_3 == 1
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_1096():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    none_type_0 = None
    var_1 = queue_2.enqueue(none_type_0)
    var_2 = var_0.__repr__()
    assert var_2 == '0'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_7.size()
    assert var_3 == 0
    queue_8 = module_0.Queue()
    var_4 = node_2.__repr__()
    assert var_4 == 'Value: None'
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_5 = double_linked_list_4.append(set_3)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_6 = double_linked_list_4.push(set_3)
    queue_12 = module_0.Queue()
    var_7 = queue_12.size()
    assert var_7 == 0
    int_0 = -3616
    queue_13 = module_0.Queue(int_0)
    assert f'{type(queue_13).__module__}.{type(queue_13).__qualname__}' == 'queue4.Queue'
    var_8 = queue_13.dequeue()
    assert var_8 == -3616
    var_9 = queue_13.enqueue(queue_13)
    var_10 = queue_0.size()
    assert var_10 == 0

def test_case_1097():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'queue4.Node'
    assert var_2.data is None
    assert var_2.next is None
    assert var_2.prev == {*()}

def test_case_1098():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    node_2 = module_0.Node()
    node_3 = module_0.Node(set_1)
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    node_5 = module_0.Node(next_node=queue_2)

def test_case_1099():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_7.peek()
    node_3 = module_0.Node()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_4 = var_3.__repr__()
    complex_0 = 2886.801252 + 1418.99508j
    queue_10 = module_0.Queue(complex_0)
    var_5 = queue_10.size()
    assert var_5 == 1
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_4 = module_0.Node()

def test_case_1100():
    str_0 = "d^_Z'j<ceXum|X7"
    node_0 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = queue_2.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    var_3 = queue_4.size()
    assert var_3 == 0
    node_3 = module_0.Node(next_node=var_2)
    assert node_3.next == 0
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    node_5 = module_0.Node(next_node=str_0, prev=node_0)

def test_case_1101():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_1 = module_0.Queue(double_linked_list_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_1 = var_0.__repr__()
    assert var_1 == "'Value: None'"
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()

def test_case_1102():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_1 = queue_0.enqueue(var_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    var_2 = queue_4.peek()
    complex_0 = 2886.801252 + 1418.99508j
    queue_5 = module_0.Queue(complex_0)
    var_3 = queue_5.size()
    assert var_3 == 1
    var_4 = var_3.__repr__()
    assert var_4 == '1'
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_5 = node_2.__repr__()
    assert var_5 == 'Value: None'
    queue_7 = module_0.Queue(double_linked_list_2)
    var_6 = var_5.__repr__()
    assert var_6 == "'Value: None'"
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_7 = queue_10.size()
    assert var_7 == 0
    node_4 = module_0.Node()
    queue_11 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_8 = queue_11.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_0)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    double_linked_list_6 = module_0.DoubleLinkedList(var_8)
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_13 = module_0.Queue()
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    node_7 = module_0.Node()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    queue_14 = module_0.Queue()
    double_linked_list_9 = module_0.DoubleLinkedList()
    assert double_linked_list_9.head is None
    assert double_linked_list_9.tail is None
    node_9 = module_0.Node(next_node=double_linked_list_4)

def test_case_1103():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_1 = queue_0.enqueue(var_0)
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bytes_0 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_4 = module_0.Queue(bytes_0)
    queue_5 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_5.peek()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_6.size()
    assert var_3 == 0
    var_4 = queue_5.size()
    assert var_4 == 0
    queue_7 = module_0.Queue()

def test_case_1104():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_1.peek()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_3 = module_0.Node()
    var_1 = queue_3.size()
    assert var_1 == 0
    var_2 = queue_2.size()
    assert var_2 == 0
    complex_0 = 2886.801252 + 1418.99508j
    queue_5 = module_0.Queue(complex_0)
    var_3 = queue_5.size()
    assert var_3 == 1
    node_4 = module_0.Node()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_4 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    var_5 = queue_7.enqueue(set_4)
    node_7 = module_0.Node(next_node=node_2)

def test_case_1105():
    float_0 = -3043.800134
    str_0 = 'O,S|'
    str_1 = 'm'
    bool_0 = False
    tuple_0 = (float_0, str_0, str_1, bool_0)
    double_linked_list_0 = module_0.DoubleLinkedList(tuple_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    queue_3 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = var_2.__repr__()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    var_4 = queue_5.dequeue()
    assert var_4 == 77
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_2)
    queue_8 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_5 = queue_8.peek()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_9 = module_0.Queue(node_1)

def test_case_1106():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue(none_type_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    none_type_1 = None
    node_0 = module_0.Node(prev=none_type_1)
    queue_4 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_0 = queue_4.size()
    assert var_0 == 0
    queue_5 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    node_3 = module_0.Node()
    var_1 = node_3.__repr__()
    assert var_1 == 'Value: None'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_4 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_4).__module__}.{type(double_linked_list_4).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_4.tail).__module__}.{type(double_linked_list_4.tail).__qualname__}' == 'queue4.Node'
    none_type_2 = None
    node_5 = module_0.Node(prev=none_type_2)
    var_2 = double_linked_list_4.append(none_type_2)
    var_3 = double_linked_list_4.pop()
    assert var_3 == 1851.002 - 2261.566174j

def test_case_1107():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue(double_linked_list_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Node'
    assert var_3.data is None
    assert var_3.next is None
    assert var_3.prev == {*()}
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    var_4 = queue_8.dequeue()
    assert var_4 == 77
    queue_9 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_5 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_11 = module_0.Queue(queue_10)
    var_6 = queue_9.peek()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    complex_0 = 2886.801252 + 1418.99508j
    queue_12 = module_0.Queue(complex_0)
    var_7 = queue_12.size()
    assert var_7 == 1
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    none_type_1 = None
    queue_13 = module_0.Queue()
    var_8 = queue_13.enqueue(none_type_1)
    var_9 = queue_12.enqueue(set_5)
    var_10 = queue_8.dequeue()
    assert var_10 == 249

def test_case_1108():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = var_0.__repr__()
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    var_3 = queue_3.size()
    assert var_3 == 0
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_1 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    none_type_0 = None
    node_3 = module_0.Node(none_type_0, prev=none_type_0)
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = queue_5.size()
    assert var_4 == 0
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_7 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_5 = node_5.__repr__()
    assert var_5 == 'Value: None'
    queue_8 = module_0.Queue(double_linked_list_4)
    var_6 = var_5.__repr__()
    assert var_6 == "'Value: None'"
    bool_0 = True
    double_linked_list_5 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_5.tail).__module__}.{type(double_linked_list_5.tail).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_7 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    queue_11 = module_0.Queue(queue_9)
    var_8 = double_linked_list_5.append(node_6)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_14 = module_0.Queue()

def test_case_1109():
    list_0 = []
    node_0 = module_0.Node(list_0)

def test_case_1110():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_0.size()
    assert var_1 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_3 = queue_5.size()
    assert var_3 == 11
    queue_6 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_4 = queue_6.peek()
    node_3 = module_0.Node()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_5 = double_linked_list_1.push(var_4)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    dict_0 = {}
    node_4 = module_0.Node(var_4, dict_0)
    none_type_0 = None
    node_5 = module_0.Node(prev=none_type_0)
    queue_7 = module_0.Queue()
    set_2 = set()
    node_6 = module_0.Node(prev=set_2)
    var_6 = queue_7.size()
    assert var_6 == 0
    set_3 = set()
    node_7 = module_0.Node(prev=set_3)
    none_type_1 = None
    queue_8 = module_0.Queue()
    var_7 = queue_8.enqueue(none_type_1)
    var_8 = var_7.__repr__()
    node_8 = module_0.Node()
    var_9 = node_8.__repr__()
    assert var_9 == 'Value: None'
    queue_9 = module_0.Queue(node_8)
    var_10 = queue_9.enqueue(var_9)
    set_4 = set()
    node_9 = module_0.Node(prev=set_4)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_11 = double_linked_list_2.push(queue_10)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_12 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    set_5 = set()
    node_10 = module_0.Node(prev=set_5)
    queue_14 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_15 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_16 = module_0.Queue(var_5)

def test_case_1111():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    node_1 = module_0.Node()
    queue_1 = module_0.Queue(var_1)
    var_2 = queue_1.enqueue(queue_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    queue_3 = module_0.Queue()
    set_0 = set()
    node_3 = module_0.Node(prev=set_0)
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    var_4 = queue_3.size()
    assert var_4 == 0
    node_4 = module_0.Node(next_node=var_3)
    assert node_4.next == 0
    set_1 = set()
    node_5 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_8 = module_0.Queue()
    set_2 = set()
    node_6 = module_0.Node(prev=set_2)
    var_5 = queue_8.peek()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_2)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    double_linked_list_4 = module_0.DoubleLinkedList(var_5)
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_3 = set()
    node_7 = module_0.Node(prev=set_3)
    queue_10 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_6 = double_linked_list_5.push(queue_10)
    assert f'{type(double_linked_list_5.tail).__module__}.{type(double_linked_list_5.tail).__qualname__}' == 'queue4.Node'
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    none_type_1 = None
    queue_16 = module_0.Queue(none_type_1)
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    complex_0 = 2886.801252 + 1418.99508j
    queue_17 = module_0.Queue(complex_0)
    var_7 = queue_17.size()
    assert var_7 == 1
    var_8 = node_3.__repr__()
    assert var_8 == 'Value: None'

def test_case_1112():
    complex_0 = -1161.9557 + 1889.1364j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bytes_0 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_4 = module_0.Queue(bytes_0)
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_5.size()
    assert var_2 == 0
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(none_type_0)
    queue_8 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_4 = queue_8.size()
    assert var_4 == 0
    queue_9 = module_0.Queue()
    var_5 = node_4.__repr__()
    assert var_5 == 'Value: None'
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_6 = queue_11.size()
    assert var_6 == 0
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_13 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_7 = queue_13.size()
    assert var_7 == 0
    queue_14 = module_0.Queue()
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    var_8 = queue_14.peek()
    node_8 = module_0.Node()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    var_9 = var_8.__repr__()
    queue_17 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    queue_18 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None

def test_case_1113():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77
    queue_3 = module_0.Queue()
    var_3 = queue_3.size()
    assert var_3 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_4 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_5 = node_1.__repr__()
    assert var_5 == 'Value: None'
    node_2 = module_0.Node()
    var_6 = queue_4.dequeue()
    assert var_6 == 77
    node_3 = module_0.Node()
    var_7 = node_3.__repr__()
    assert var_7 == 'Value: None'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_8 = var_7.__repr__()
    assert var_8 == "'Value: None'"
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    var_9 = queue_6.peek()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_6 = module_0.Node()
    var_10 = queue_10.size()
    assert var_10 == 0
    queue_12 = module_0.Queue()
    set_3 = set()
    node_7 = module_0.Node(prev=set_3)
    var_11 = queue_12.peek()
    queue_13 = module_0.Queue(queue_12)
    queue_14 = module_0.Queue(queue_12)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_2)
    queue_16 = module_0.Queue()
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    var_12 = queue_16.size()
    assert var_12 == 0
    queue_17 = module_0.Queue()
    var_13 = queue_16.size()
    assert var_13 == 0
    var_14 = var_13.__repr__()
    assert var_14 == '0'
    var_15 = queue_13.peek()
    assert f'{type(var_15).__module__}.{type(var_15).__qualname__}' == 'queue4.Queue'

def test_case_1114():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = var_0.__repr__()

def test_case_1115():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == 77
    var_1 = queue_0.peek()
    assert var_1 == 249
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_2 = queue_1.size()
    assert var_2 == 0
    var_3 = node_0.__repr__()
    assert var_3 == 'Value: None'
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_1 = None
    queue_5 = module_0.Queue(none_type_1)
    node_3 = module_0.Node(none_type_0, prev=node_2)

def test_case_1116():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.enqueue(var_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue(queue_2)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_0)
    var_4 = var_3.__repr__()
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_5 = queue_5.size()
    assert var_5 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_6 = queue_7.peek()
    node_5 = module_0.Node()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_7 = var_6.__repr__()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_8 = node_6.__repr__()
    assert var_8 == 'Value: None'
    queue_11 = module_0.Queue(double_linked_list_2)
    var_9 = queue_3.enqueue(node_3)

def test_case_1117():
    bytes_0 = b'?\xa7\xee3t\xe0\x87\xaa'
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 0

def test_case_1118():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'

def test_case_1119():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()

def test_case_1120():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_1 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'

def test_case_1121():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bool_0 = False
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.push(queue_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'

def test_case_1122():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'

def test_case_1123():
    str_0 = '\rD'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    with pytest.raises(ValueError):
        double_linked_list_0.remove(str_0)

def test_case_1124():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_0 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_1 = queue_4.peek()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    with pytest.raises(IndexError):
        double_linked_list_0.pop()

def test_case_1125():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_0 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_1 = queue_3.size()
    assert var_1 == 0

def test_case_1126():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_2.size()
    assert var_1 == 0
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)

def test_case_1127():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_2.peek()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)

def test_case_1128():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_1 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)

def test_case_1129():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_2 = double_linked_list_0.append(node_4)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_1130():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()

def test_case_1131():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_3.peek()

def test_case_1132():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_5.size()
    assert var_3 == 0
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_6 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_4 = double_linked_list_1.append(node_6)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue()
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    with pytest.raises(IndexError):
        double_linked_list_2.shift()

def test_case_1133():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0

def test_case_1134():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()

def test_case_1135():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.size()
    assert var_1 == 0
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_2 = double_linked_list_2.append(node_4)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_6 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_3 = queue_6.size()
    assert var_3 == 0
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()

def test_case_1136():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_0.append(node_3)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_3 = queue_5.size()
    assert var_3 == 0
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_6 = module_0.Node()
    var_4 = node_6.__repr__()
    assert var_4 == 'Value: None'
    queue_7 = module_0.Queue()

def test_case_1137():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()

def test_case_1138():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_1 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_5 = module_0.Node()
    var_2 = node_5.__repr__()
    assert var_2 == 'Value: None'
    queue_5 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()

def test_case_1139():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()

def test_case_1140():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    var_1 = queue_3.peek()
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_1141():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_0.size()
    assert var_2 == 0
    queue_2 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_2.size()
    assert var_3 == 0

def test_case_1142():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.size()
    assert var_1 == 0
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    queue_4 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_3 = double_linked_list_0.append(node_4)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_4.size()
    assert var_4 == 0
    queue_6 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_5 = double_linked_list_1.append(node_6)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'

def test_case_1143():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_2.size()
    assert var_1 == 0
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_2 = queue_4.peek()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    var_3 = queue_6.peek()
    queue_7 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    var_4 = double_linked_list_2.append(node_7)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'

def test_case_1144():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_2.peek()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    node_4 = module_0.Node()
    var_3 = node_4.__repr__()
    assert var_3 == 'Value: None'
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_4 = queue_4.size()
    assert var_4 == 0
    queue_5 = module_0.Queue()

def test_case_1145():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_1 = queue_0.size()
    assert var_1 == 0
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_0.append(node_4)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_1.size()
    assert var_3 == 0
    queue_3 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_4 = double_linked_list_1.append(node_6)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_5 = queue_5.peek()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_1146():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None

def test_case_1147():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'

def test_case_1148():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'

def test_case_1149():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_2.peek()
    queue_3 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_3 = double_linked_list_1.append(node_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_4 = queue_6.size()
    assert var_4 == 0
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_8 = module_0.Node()
    var_5 = node_8.__repr__()
    assert var_5 == 'Value: None'
    queue_8 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_6 = queue_8.size()
    assert var_6 == 0
    queue_9 = module_0.Queue()
    set_9 = set()
    node_10 = module_0.Node(prev=set_9)
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_11 = module_0.Queue()
    var_7 = queue_11.peek()

def test_case_1150():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_1 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_3 = queue_4.size()
    assert var_3 == 0
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_6 = module_0.Node()
    var_4 = node_6.__repr__()
    assert var_4 == 'Value: None'
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_7 = module_0.Queue()
    var_5 = queue_7.peek()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_6 = queue_9.peek()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    queue_10 = module_0.Queue()
    set_9 = set()
    node_10 = module_0.Node(prev=set_9)
    var_7 = queue_10.size()
    assert var_7 == 0
    queue_11 = module_0.Queue()

def test_case_1151():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_3 = double_linked_list_1.append(node_5)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_5.size()
    assert var_4 == 0
    queue_7 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_5 = queue_7.size()
    assert var_5 == 0
    queue_8 = module_0.Queue()

def test_case_1152():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'

def test_case_1153():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_4 = double_linked_list_2.append(node_6)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_7 = module_0.Node()
    var_5 = node_7.__repr__()
    assert var_5 == 'Value: None'
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_10 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_6 = queue_10.size()
    assert var_6 == 0

def test_case_1154():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    node_3 = module_0.Node()
    var_2 = node_3.__repr__()
    assert var_2 == 'Value: None'
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_3 = queue_5.peek()
    queue_6 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_4 = queue_6.size()
    assert var_4 == 0
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_8 = module_0.Queue()
    var_5 = queue_8.peek()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_9 = module_0.Node()
    queue_11 = module_0.Queue()
    set_8 = set()
    node_10 = module_0.Node(prev=set_8)
    queue_12 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_9 = set()
    node_11 = module_0.Node(prev=set_9)
    var_6 = double_linked_list_4.append(node_11)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_7 = queue_11.size()
    assert var_7 == 0

def test_case_1155():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_3.peek()
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_2 = double_linked_list_1.append(node_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_4.size()
    assert var_3 == 0
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    var_4 = queue_7.peek()
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_8 = module_0.Node()
    queue_9 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_9 = set()
    node_10 = module_0.Node(prev=set_9)
    var_5 = double_linked_list_4.append(node_10)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    node_11 = module_0.Node()
    var_6 = node_11.__repr__()
    assert var_6 == 'Value: None'
    queue_11 = module_0.Queue()

def test_case_1156():
    int_0 = 2538
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    with pytest.raises(ValueError):
        double_linked_list_0.remove(int_0)

def test_case_1157():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_3 = module_0.Node()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_1 = double_linked_list_2.append(node_5)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_5.size()
    assert var_2 == 0
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)

def test_case_1158():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = queue_4.peek()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    var_3 = queue_6.peek()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_8 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_7 = module_0.Node()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    node_8 = module_0.Node()
    var_4 = node_8.__repr__()
    assert var_4 == 'Value: None'

def test_case_1159():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    var_1 = queue_3.peek()
    queue_4 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_2 = double_linked_list_2.append(node_5)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_7 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_3 = queue_7.size()
    assert var_3 == 0
    queue_8 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    queue_9 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_4 = queue_9.size()
    assert var_4 == 0
    with pytest.raises(IndexError):
        double_linked_list_3.pop()

def test_case_1160():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_1 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'

def test_case_1161():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    var_1 = queue_3.peek()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    node_2 = module_0.Node(var_0)
    assert node_2.data == 0

def test_case_1162():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    var_1 = queue_4.peek()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    var_2 = queue_6.peek()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_4 = module_0.Node()
    queue_10 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_3 = queue_10.size()
    assert var_3 == 0
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_12 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_4 = queue_12.peek()
    queue_13 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    queue_14 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_5 = double_linked_list_5.append(node_9)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    with pytest.raises(IndexError):
        double_linked_list_2.shift()

def test_case_1163():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    var_2 = queue_5.peek()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    assert f'{type(queue_8).__module__}.{type(queue_8).__qualname__}' == 'queue4.Queue'
    queue_9 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_9.size()
    assert var_3 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_4 = queue_11.peek()
    queue_12 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_13 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_5 = double_linked_list_3.append(node_6)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    queue_14 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_8 = set()
    node_8 = module_0.Node(prev=set_8)

def test_case_1164():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_0 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_2 = queue_3.peek()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_5 = module_0.Queue()
    var_3 = queue_5.peek()
    queue_6 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_4 = queue_6.size()
    assert var_4 == 0
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    node_9 = module_0.Node()
    var_5 = node_9.__repr__()
    assert var_5 == 'Value: None'
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_8 = set()
    node_10 = module_0.Node(prev=set_8)
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_11 = module_0.Queue()
    var_6 = queue_11.peek()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None

def test_case_1165():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()

def test_case_1166():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_4.peek()
    node_2 = module_0.Node()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_2.append(node_4)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_5.size()
    assert var_3 == 0

def test_case_1167():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_0 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_1 = double_linked_list_2.append(node_4)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_3.size()
    assert var_2 == 0
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_6 = module_0.Node()
    queue_6 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_3 = queue_6.size()
    assert var_3 == 0

def test_case_1168():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_1 = queue_2.peek()
    node_4 = module_0.Node()

def test_case_1169():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = queue_3.size()
    assert var_2 == 0

def test_case_1170():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_4.size()
    assert var_1 == 0
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_5 = module_0.Node()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    none_type_0 = None
    queue_10 = module_0.Queue(none_type_0)
    node_6 = module_0.Node()
    var_2 = node_6.__repr__()
    assert var_2 == 'Value: None'
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_12 = module_0.Queue()
    var_3 = queue_12.peek()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = queue_13.peek()

def test_case_1171():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()

def test_case_1172():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    none_type_0 = None
    var_0 = queue_0.size()
    assert var_0 == 11

def test_case_1173():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    queue_2 = module_0.Queue()
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    var_2 = queue_2.size()
    assert var_2 == 0
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_5 = module_0.Queue()
    var_3 = queue_5.peek()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_8 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = double_linked_list_2.append(node_4)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_8.size()
    assert var_5 == 0
    queue_10 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_6 = double_linked_list_3.append(node_6)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'

def test_case_1174():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    var_1 = queue_2.size()
    assert var_1 == 0
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    var_3 = queue_5.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)

def test_case_1175():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 0
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bool_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'

def test_case_1176():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue(none_type_0)
    node_0 = module_0.Node(next_node=none_type_0)
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'

def test_case_1177():
    int_0 = -2459
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(int_0)

def test_case_1178():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue(none_type_0)
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_3 = module_0.Node()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    assert f'{type(queue_9).__module__}.{type(queue_9).__qualname__}' == 'queue4.Queue'
    queue_10 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_2 = queue_10.size()
    assert var_2 == 0
    queue_11 = module_0.Queue()
    var_3 = queue_10.size()
    assert var_3 == 0
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_12 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_13 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_4 = queue_13.size()
    assert var_4 == 0
    queue_14 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_5 = queue_14.peek()

def test_case_1179():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    var_0 = queue_3.peek()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    var_1 = queue_7.peek()
    queue_8 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    assert f'{type(queue_9).__module__}.{type(queue_9).__qualname__}' == 'queue4.Queue'
    queue_10 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_10.size()
    assert var_2 == 0
    queue_11 = module_0.Queue()
    var_3 = queue_10.size()
    assert var_3 == 0
    var_4 = queue_9.peek()
    assert var_4 == 77
    var_5 = queue_3.size()
    assert var_5 == 0

def test_case_1180():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_1 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'queue4.Node'
    assert var_2.data is None
    assert var_2.next is None
    assert var_2.prev == {*()}
    queue_5 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_3 = double_linked_list_2.append(node_5)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_5.size()
    assert var_4 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'

def test_case_1181():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    var_1 = queue_3.peek()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_1182():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Node'
    assert var_3.data is None
    assert var_3.next is None
    assert var_3.prev == {*()}
    queue_4 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_4 = queue_4.size()
    assert var_4 == 0
    node_5 = module_0.Node()
    var_5 = node_5.__repr__()
    assert var_5 == 'Value: None'
    queue_5 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_6 = queue_5.size()
    assert var_6 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_7 = queue_8.peek()

def test_case_1183():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    var_3 = queue_4.size()
    assert var_3 == 0
    var_4 = queue_3.peek()
    assert var_4 == 77
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_5 = queue_3.dequeue()
    assert var_5 == 77

def test_case_1184():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0

def test_case_1185():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_4.size()
    assert var_1 == 0
    queue_5 = module_0.Queue()
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_6.peek()
    node_3 = module_0.Node()
    queue_7 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_4 = double_linked_list_1.append(node_5)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_5 = double_linked_list_2.append(node_7)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_6 = double_linked_list_2.shift()
    assert double_linked_list_2.tail is None
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'queue4.Node'
    assert var_6.data is None
    assert var_6.next is None
    assert var_6.prev == {*()}

def test_case_1186():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_1.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    var_2 = queue_3.size()
    assert var_2 == 0
    var_3 = queue_2.peek()
    assert var_3 == 77
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_4 = double_linked_list_0.append(node_4)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_5 = queue_7.size()
    assert var_5 == 0
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    none_type_0 = None
    queue_13 = module_0.Queue(none_type_0)
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_14 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_7 = module_0.Node()
    queue_15 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_6 = queue_15.size()
    assert var_6 == 0
    queue_16 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    queue_17 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None

def test_case_1187():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = double_linked_list_1.append(node_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'queue4.Node'
    assert var_2.data is None
    assert var_2.next is None
    assert var_2.prev == {*()}
    node_2 = module_0.Node()
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    var_4 = queue_4.peek()
    queue_5 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_5 = queue_5.size()
    assert var_5 == 0
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_7 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_6 = queue_7.peek()
    node_7 = module_0.Node()
    queue_8 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_7 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)

def test_case_1188():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'

def test_case_1189():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = queue_5.peek()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_2 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    queue_8 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_3 = double_linked_list_1.append(node_6)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_0)
    queue_11 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_4 = queue_11.size()
    assert var_4 == 0
    queue_12 = module_0.Queue()
    var_5 = queue_11.size()
    assert var_5 == 0
    queue_13 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    queue_14 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_6 = double_linked_list_2.append(node_9)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_7 = double_linked_list_2.shift()
    assert double_linked_list_2.tail is None
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'queue4.Node'
    assert var_7.data is None
    assert var_7.next is None
    assert var_7.prev == {*()}
    set_9 = set()
    node_10 = module_0.Node(prev=set_9)
    queue_15 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_10 = set()
    node_11 = module_0.Node(prev=set_10)

def test_case_1190():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    queue_3 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    var_2 = queue_3.size()
    assert var_2 == 0

def test_case_1191():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.peek()

def test_case_1192():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_0 = None
    queue_8 = module_0.Queue(none_type_0)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_9 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_3 = module_0.Node()

def test_case_1193():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_4 = module_0.Node()
    var_2 = node_4.__repr__()
    assert var_2 == 'Value: None'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_4 = double_linked_list_3.append(node_6)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_3.shift()
    assert double_linked_list_3.tail is None
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Node'
    assert var_5.data is None
    assert var_5.next is None
    assert var_5.prev == {*()}
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_2)
    queue_11 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_6 = queue_11.size()
    assert var_6 == 0
    queue_12 = module_0.Queue()
    var_7 = queue_11.size()
    assert var_7 == 0
    var_8 = queue_10.peek()
    assert var_8 == 77
    queue_13 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_9 = queue_13.peek()
    queue_14 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_10 = queue_14.peek()
    queue_15 = module_0.Queue(queue_14)

def test_case_1194():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    var_2 = queue_3.size()
    assert var_2 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    queue_8 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_4 = double_linked_list_1.append(node_5)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_8.size()
    assert var_5 == 0
    queue_10 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    var_6 = double_linked_list_2.append(node_7)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_7 = double_linked_list_2.shift()
    assert double_linked_list_2.tail is None
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'queue4.Node'
    assert var_7.data is None
    assert var_7.next is None
    assert var_7.prev == {*()}
    queue_12 = module_0.Queue()
    set_8 = set()
    node_8 = module_0.Node(prev=set_8)
    var_8 = queue_12.size()
    assert var_8 == 0
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    set_9 = set()
    node_9 = module_0.Node(prev=set_9)
    queue_15 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_16 = module_0.Queue()
    var_9 = queue_16.peek()
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_19 = module_0.Queue()
    set_10 = set()
    node_10 = module_0.Node(prev=set_10)
    var_10 = queue_19.size()
    assert var_10 == 0
    set_11 = set()
    node_11 = module_0.Node(prev=set_11)
    queue_20 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_21 = module_0.Queue()
    var_11 = queue_21.peek()

def test_case_1195():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'queue4.Node'
    assert var_2.data is None
    assert var_2.next is None
    assert var_2.prev == {*()}
    queue_2 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_4 = double_linked_list_1.append(node_5)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_4.size()
    assert var_5 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    queue_7 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_6 = queue_7.size()
    assert var_6 == 0
    queue_8 = module_0.Queue()
    var_7 = queue_7.size()
    assert var_7 == 0
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_8 = queue_11.peek()
    node_8 = module_0.Node()

def test_case_1196():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_1 = queue_0.size()
    assert var_1 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    var_3 = queue_2.size()
    assert var_3 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_4 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    var_5 = queue_6.peek()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_1197():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    node_2 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    queue_4 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    var_3 = queue_4.size()
    assert var_3 == 0
    var_4 = queue_3.peek()
    assert var_4 == 77
    queue_6 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)

def test_case_1198():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue(none_type_0)
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    queue_6 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_6.size()
    assert var_2 == 0
    queue_7 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_3 = double_linked_list_1.append(node_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_4 = queue_9.size()
    assert var_4 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_5 = queue_11.peek()
    queue_12 = module_0.Queue(queue_11)
    assert f'{type(queue_12).__module__}.{type(queue_12).__qualname__}' == 'queue4.Queue'
    queue_13 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_6 = queue_13.size()
    assert var_6 == 0
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_16 = module_0.Queue(bytes_0)
    queue_17 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_7 = queue_17.size()
    assert var_7 == 0
    queue_18 = module_0.Queue()
    var_8 = queue_17.size()
    assert var_8 == 0
    var_9 = queue_16.peek()
    assert var_9 == 77
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    queue_19 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_1199():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_5.size()
    assert var_1 == 0
    queue_6 = module_0.Queue()
    var_2 = queue_5.size()
    assert var_2 == 0
    var_3 = queue_4.peek()
    assert var_3 == 77
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    queue_10 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_5 = double_linked_list_2.append(node_4)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_6 = queue_14.size()
    assert var_6 == 0
    node_6 = module_0.Node()
    var_7 = node_6.__repr__()
    assert var_7 == 'Value: None'

def test_case_1200():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_6.peek()
    node_4 = module_0.Node()

def test_case_1201():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    var_1 = queue_7.peek()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_0)
    assert f'{type(queue_10).__module__}.{type(queue_10).__qualname__}' == 'queue4.Queue'
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_5 = module_0.Node()
    var_2 = node_5.__repr__()
    assert var_2 == 'Value: None'
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_3 = queue_13.size()
    assert var_3 == 0

def test_case_1202():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_1.peek()
    node_3 = module_0.Node()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue(none_type_0)
    queue_6 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_2 = queue_6.size()
    assert var_2 == 0
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    assert f'{type(queue_9).__module__}.{type(queue_9).__qualname__}' == 'queue4.Queue'
    queue_10 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_3 = queue_10.size()
    assert var_3 == 0
    queue_11 = module_0.Queue()
    var_4 = queue_10.size()
    assert var_4 == 0
    var_5 = queue_9.peek()
    assert var_5 == 77
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_14 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_15 = module_0.Queue()
    var_6 = queue_15.peek()
    queue_16 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_7 = queue_16.size()
    assert var_7 == 0
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()

def test_case_1203():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    var_1 = queue_2.size()
    assert var_1 == 0
    var_2 = queue_1.peek()
    assert var_2 == 77
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    var_4 = queue_6.peek()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_9 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_5 = double_linked_list_4.append(node_5)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_6 = double_linked_list_4.shift()
    assert double_linked_list_4.tail is None
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'queue4.Node'
    assert var_6.data is None
    assert var_6.next is None
    assert var_6.prev == {*()}
    queue_11 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_7 = queue_11.peek()
    queue_12 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_13 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_8 = double_linked_list_5.append(node_8)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    queue_14 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    queue_17 = module_0.Queue()
    set_9 = set()
    node_10 = module_0.Node(prev=set_9)
    queue_18 = module_0.Queue()
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    set_10 = set()
    node_11 = module_0.Node(prev=set_10)
    var_9 = double_linked_list_8.append(node_11)
    assert f'{type(double_linked_list_8.head).__module__}.{type(double_linked_list_8.head).__qualname__}' == 'queue4.Node'
    var_10 = queue_17.size()
    assert var_10 == 0
    queue_19 = module_0.Queue()

def test_case_1204():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_0 = None
    queue_6 = module_0.Queue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    queue_8 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_8.size()
    assert var_1 == 0
    queue_9 = module_0.Queue()
    var_2 = queue_8.size()
    assert var_2 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_1)

def test_case_1205():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    var_0 = queue_3.peek()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_1206():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_3.peek()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = queue_5.size()
    assert var_2 == 0
    queue_6 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    queue_8 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_3 = queue_8.size()
    assert var_3 == 0
    queue_9 = module_0.Queue()
    var_4 = queue_8.size()
    assert var_4 == 0
    var_5 = queue_7.peek()
    assert var_5 == 77
    queue_10 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_11 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_6 = double_linked_list_0.append(node_6)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_7 = queue_10.size()
    assert var_7 == 0

def test_case_1207():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    queue_6 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_2 = queue_6.size()
    assert var_2 == 0
    queue_7 = module_0.Queue()
    var_3 = queue_6.size()
    assert var_3 == 0
    var_4 = queue_5.peek()
    assert var_4 == 77
    queue_8 = module_0.Queue()

def test_case_1208():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'

def test_case_1209():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0

def test_case_1210():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_1 = double_linked_list_1.append(node_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_3.size()
    assert var_2 == 0
    node_5 = module_0.Node()
    var_3 = node_5.__repr__()
    assert var_3 == 'Value: None'
    queue_5 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_4 = queue_5.peek()
    queue_6 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_5 = queue_6.size()
    assert var_5 == 0
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    assert f'{type(queue_9).__module__}.{type(queue_9).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'

def test_case_1211():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_3.size()
    assert var_2 == 0
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    var_4 = queue_5.size()
    assert var_4 == 0
    var_5 = queue_4.peek()
    assert var_5 == 77
    queue_7 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_6 = queue_7.peek()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_2)
    queue_9 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_7 = queue_9.size()
    assert var_7 == 0
    queue_10 = module_0.Queue()
    var_8 = queue_9.size()
    assert var_8 == 0
    queue_11 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_9 = queue_11.peek()
    queue_12 = module_0.Queue(queue_11)

def test_case_1212():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_0 = None
    queue_4 = module_0.Queue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    queue_6 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_7 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_6.size()
    assert var_2 == 0
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_9 = module_0.Queue()
    var_3 = queue_9.peek()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_12 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = queue_12.peek()
    with pytest.raises(ValueError):
        double_linked_list_2.remove(node_2)

def test_case_1213():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_0.append(node_3)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_1.size()
    assert var_2 == 0

def test_case_1214():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    with pytest.raises(IndexError):
        double_linked_list_0.shift()

def test_case_1215():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    with pytest.raises(IndexError):
        double_linked_list_1.shift()

def test_case_1216():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_3 = module_0.Node()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    node_4 = module_0.Node()
    var_1 = node_4.__repr__()
    assert var_1 == 'Value: None'
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_8 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_2 = queue_8.peek()
    with pytest.raises(IndexError):
        double_linked_list_1.pop()

def test_case_1217():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()

def test_case_1218():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_2.peek()
    node_3 = module_0.Node()
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    queue_3 = module_0.Queue(node_3)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'

def test_case_1219():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_1 = module_0.Queue(node_0)
    var_2 = double_linked_list_0.shift()
    assert var_2 == b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    assert double_linked_list_0.tail is None

def test_case_1220():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_0 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_1 = node_3.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue(node_3)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()

def test_case_1221():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77

def test_case_1222():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_0 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_1.size()
    assert var_1 == 0

def test_case_1223():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_0.append(node_3)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'queue4.Node'
    assert var_2.data is None
    assert var_2.next is None
    assert var_2.prev == {*()}
    queue_3 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    assert f'{type(queue_9).__module__}.{type(queue_9).__qualname__}' == 'queue4.Queue'
    queue_10 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_4 = queue_10.size()
    assert var_4 == 0
    queue_11 = module_0.Queue()
    var_5 = queue_10.size()
    assert var_5 == 0
    node_7 = module_0.Node()
    var_6 = node_7.__repr__()
    assert var_6 == 'Value: None'
    queue_12 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_7 = queue_12.peek()
    queue_13 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_1)
    var_8 = var_6.__repr__()
    assert var_8 == "'Value: None'"

def test_case_1224():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_2.peek()
    node_3 = module_0.Node()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_3 = queue_6.size()
    assert var_3 == 0
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    assert f'{type(queue_9).__module__}.{type(queue_9).__qualname__}' == 'queue4.Queue'
    node_6 = module_0.Node()
    var_4 = node_6.__repr__()
    assert var_4 == 'Value: None'
    node_7 = module_0.Node()
    var_5 = node_7.__repr__()
    assert var_5 == 'Value: None'
    queue_10 = module_0.Queue(node_7)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_1)
    queue_12 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    var_6 = queue_12.size()
    assert var_6 == 0
    queue_13 = module_0.Queue()
    var_7 = queue_12.size()
    assert var_7 == 0
    with pytest.raises(ValueError):
        double_linked_list_2.remove(node_1)

def test_case_1225():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_0 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
    assert var_1.data is None
    assert var_1.next is None
    assert var_1.prev == {*()}
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = queue_6.size()
    assert var_2 == 0
    queue_7 = module_0.Queue()
    var_3 = queue_6.size()
    assert var_3 == 0
    node_4 = module_0.Node()
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_9 = module_0.Queue()
    var_5 = queue_9.peek()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_6 = queue_13.size()
    assert var_6 == 0
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    none_type_0 = None
    queue_19 = module_0.Queue(none_type_0)
    queue_20 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_7 = queue_20.peek()

def test_case_1226():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_0 = None
    queue_4 = module_0.Queue(none_type_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_7 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'queue4.Node'
    assert var_2.data is None
    assert var_2.next is None
    assert var_2.prev == {*()}

def test_case_1227():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()

def test_case_1228():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_3 = queue_5.peek()
    node_5 = module_0.Node()
    queue_6 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_4 = queue_6.size()
    assert var_4 == 0
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()

def test_case_1229():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    var_1 = queue_2.size()
    assert var_1 == 0
    var_2 = queue_1.peek()
    assert var_2 == 77
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    var_4 = queue_5.size()
    assert var_4 == 0

def test_case_1230():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    var_1 = queue_3.peek()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_0 = None
    queue_7 = module_0.Queue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    assert f'{type(queue_8).__module__}.{type(queue_8).__qualname__}' == 'queue4.Queue'

def test_case_1231():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = node_1.__repr__()
    assert var_0 == 'Value: None'
    queue_1 = module_0.Queue(node_1)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_0 = None
    queue_8 = module_0.Queue(none_type_0)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_11 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_4 = module_0.Node()
    var_3 = queue_10.size()
    assert var_3 == 0

def test_case_1232():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'

def test_case_1233():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    var_0 = queue_3.peek()

def test_case_1234():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_3.peek()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_1235():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    node_3 = module_0.Node()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    var_3 = queue_2.size()
    assert var_3 == 0
    queue_3 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_4 = queue_3.size()
    assert var_4 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_5 = queue_5.size()
    assert var_5 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_8 = module_0.Node()

def test_case_1236():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    var_1 = queue_4.peek()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_7.size()
    assert var_2 == 0
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    none_type_0 = None

def test_case_1237():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_0 = None
    queue_4 = module_0.Queue(none_type_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    queue_6 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_6.size()
    assert var_0 == 0
    queue_7 = module_0.Queue()
    var_1 = queue_6.size()
    assert var_1 == 0
    var_2 = queue_5.peek()
    assert var_2 == 77

def test_case_1238():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_1.enqueue(queue_0)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_5 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_3 = double_linked_list_3.append(node_5)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_4 = queue_7.size()
    assert var_4 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    assert f'{type(queue_8).__module__}.{type(queue_8).__qualname__}' == 'queue4.Queue'
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_5 = double_linked_list_4.append(bytes_0)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_9 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_10 = module_0.Queue()
    var_6 = queue_10.peek()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    queue_11 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    node_9 = module_0.Node()
    queue_12 = module_0.Queue()
    set_8 = set()
    node_10 = module_0.Node(prev=set_8)
    queue_13 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    set_9 = set()
    node_11 = module_0.Node(prev=set_9)
    var_7 = double_linked_list_7.append(node_11)
    assert f'{type(double_linked_list_7.head).__module__}.{type(double_linked_list_7.head).__qualname__}' == 'queue4.Node'
    var_8 = double_linked_list_7.shift()
    assert double_linked_list_7.tail is None
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'queue4.Node'
    assert var_8.data is None
    assert var_8.next is None
    assert var_8.prev == {*()}

def test_case_1239():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue(node_1)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    node_4 = module_0.Node()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_8 = module_0.Queue()
    var_5 = queue_8.peek()
    queue_9 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_6 = double_linked_list_2.append(node_7)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'

def test_case_1240():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_3.size()
    assert var_0 == 0
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_8 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_8.size()
    assert var_1 == 0
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_4 = module_0.Node()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    none_type_0 = None
    queue_15 = module_0.Queue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_16 = module_0.Queue(bytes_0)
    assert f'{type(queue_16).__module__}.{type(queue_16).__qualname__}' == 'queue4.Queue'
    queue_17 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_18 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_2 = double_linked_list_3.append(node_6)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    with pytest.raises(ValueError):
        double_linked_list_3.remove(double_linked_list_1)

def test_case_1241():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_2 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_1.size()
    assert var_3 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    queue_4 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_4 = queue_4.size()
    assert var_4 == 0
    queue_5 = module_0.Queue()
    var_5 = queue_4.size()
    assert var_5 == 0
    var_6 = queue_3.peek()
    assert var_6 == 77
    queue_6 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_7 = double_linked_list_2.append(node_6)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_8 = double_linked_list_2.shift()
    assert double_linked_list_2.tail is None
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'queue4.Node'
    assert var_8.data is None
    assert var_8.next is None
    assert var_8.prev == {*()}
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_2)
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_10 = module_0.Queue()
    var_9 = queue_10.peek()
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_3)
    queue_12 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_10 = queue_12.size()
    assert var_10 == 0
    queue_13 = module_0.Queue()
    var_11 = queue_12.size()
    assert var_11 == 0

def test_case_1242():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_1 = node_2.__repr__()
    assert var_1 == 'Value: None'
    node_3 = module_0.Node()
    node_4 = module_0.Node()
    var_2 = node_4.__repr__()
    assert var_2 == 'Value: None'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_5 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_6 = module_0.Node(prev=set_2)
    var_3 = double_linked_list_2.append(node_6)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_3.enqueue(queue_2)
    set_3 = set()
    node_7 = module_0.Node(prev=set_3)
    queue_4 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_5 = module_0.Queue()
    var_5 = queue_5.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_6 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue()
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    var_7 = queue_7.peek()
    queue_8 = module_0.Queue()
    set_5 = set()
    node_9 = module_0.Node(prev=set_5)
    queue_9 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_6 = set()
    node_10 = module_0.Node(prev=set_6)
    var_8 = double_linked_list_5.append(node_10)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_9 = double_linked_list_5.shift()
    assert double_linked_list_5.tail is None
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'queue4.Node'
    assert var_9.data is None
    assert var_9.next is None
    assert var_9.prev == {*()}
    queue_10 = module_0.Queue()

def test_case_1243():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    with pytest.raises(IndexError):
        double_linked_list_1.pop()

def test_case_1244():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
    assert var_1.data is None
    assert var_1.next is None
    assert var_1.prev == {*()}

def test_case_1245():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_3 = module_0.Node()
    var_2 = queue_4.size()
    assert var_2 == 0
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)

def test_case_1246():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    queue_8 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_2 = double_linked_list_3.append(node_5)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_9.enqueue(queue_8)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_12 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_4 = double_linked_list_4.append(node_7)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_4.shift()
    assert double_linked_list_4.tail is None
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Node'
    assert var_5.data is None
    assert var_5.next is None
    assert var_5.prev == {*()}
    queue_13 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_6 = queue_13.size()
    assert var_6 == 0
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    none_type_0 = None
    queue_17 = module_0.Queue(none_type_0)
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)

def test_case_1247():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    queue_2 = module_0.Queue(node_1)
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    var_2 = queue_4.peek()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_8 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_3 = double_linked_list_3.append(node_5)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_8.size()
    assert var_4 == 0
    queue_10 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_5 = queue_10.peek()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_8 = module_0.Node()

def test_case_1248():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'

def test_case_1249():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_0 = double_linked_list_2.append(node_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_3.size()
    assert var_1 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_2 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    node_4 = module_0.Node()
    node_5 = module_0.Node()
    var_4 = node_5.__repr__()
    assert var_4 == 'Value: None'
    queue_6 = module_0.Queue(node_5)

def test_case_1250():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    queue_6 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_6.size()
    assert var_2 == 0
    queue_7 = module_0.Queue()
    var_3 = queue_6.size()
    assert var_3 == 0
    var_4 = queue_5.peek()
    assert var_4 == 77
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_5 = queue_8.size()
    assert var_5 == 0
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_6 = queue_11.size()
    assert var_6 == 0
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_7 = queue_13.peek()
    queue_14 = module_0.Queue(queue_13)
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_8 = var_7.__repr__()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_1)
    queue_16 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_9 = queue_16.size()
    assert var_9 == 0
    queue_17 = module_0.Queue()
    var_10 = queue_16.size()
    assert var_10 == 0
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_18 = module_0.Queue(bytes_2)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_11 = double_linked_list_2.append(bytes_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_9 = module_0.Node()
    var_12 = node_9.__repr__()
    assert var_12 == 'Value: None'

def test_case_1251():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    node_2 = module_0.Node()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_2 = queue_1.size()
    assert var_2 == 0
    queue_2 = module_0.Queue()
    node_4 = module_0.Node()
    var_3 = node_4.__repr__()
    assert var_3 == 'Value: None'
    queue_3 = module_0.Queue(node_4)
    queue_4 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_4 = double_linked_list_1.append(node_6)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    queue_7 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_5 = queue_7.size()
    assert var_5 == 0
    queue_8 = module_0.Queue()
    var_6 = queue_7.size()
    assert var_6 == 0
    var_7 = queue_6.peek()
    assert var_7 == 77
    queue_9 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    var_8 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)

def test_case_1252():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'

def test_case_1253():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_0 = None
    queue_6 = module_0.Queue(none_type_0)
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_3 = module_0.Node()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_1 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    assert f'{type(queue_10).__module__}.{type(queue_10).__qualname__}' == 'queue4.Queue'
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_2 = var_1.__repr__()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_12 = module_0.Queue()
    var_3 = queue_12.peek()
    queue_13 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_14 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_4 = double_linked_list_3.append(node_8)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_3.shift()
    assert double_linked_list_3.tail is None
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Node'
    assert var_5.data is None
    assert var_5.next is None
    assert var_5.prev == {*()}
    with pytest.raises(IndexError):
        double_linked_list_3.pop()

def test_case_1254():
    complex_0 = -3725.395 + 2231.3998j
    set_0 = {complex_0}
    str_0 = 'uim]8'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(str_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'

def test_case_1255():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    with pytest.raises(ValueError):
        double_linked_list_0.remove(set_0)

def test_case_1256():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_1 = module_0.Node()
    var_0 = node_1.__repr__()
    assert var_0 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    queue_5 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_5.size()
    assert var_2 == 0
    queue_6 = module_0.Queue()
    var_3 = queue_5.size()
    assert var_3 == 0
    var_4 = queue_4.peek()
    assert var_4 == 77

def test_case_1257():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    node_2 = module_0.Node()
    var_0 = node_2.__repr__()
    assert var_0 == 'Value: None'
    queue_2 = module_0.Queue(node_2)
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    var_1 = queue_4.peek()
    node_4 = module_0.Node()
    var_2 = node_4.__repr__()
    assert var_2 == 'Value: None'
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_6 = module_0.Node()
    var_3 = queue_6.size()
    assert var_3 == 0
    queue_8 = module_0.Queue()
    set_3 = set()
    node_7 = module_0.Node(prev=set_3)
    var_4 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    var_5 = var_4.__repr__()
    queue_10 = module_0.Queue()
    set_5 = set()
    node_9 = module_0.Node(prev=set_5)
    var_6 = queue_10.peek()
    node_10 = module_0.Node()

def test_case_1258():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = var_0.__repr__()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    with pytest.raises(ValueError):
        double_linked_list_0.remove(var_1)

def test_case_1259():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None

def test_case_1260():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    var_1 = queue_3.peek()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_7 = module_0.Queue()
    var_2 = queue_7.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    assert f'{type(queue_8).__module__}.{type(queue_8).__qualname__}' == 'queue4.Queue'
    queue_9 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_3 = queue_9.peek()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_11 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_4 = queue_11.size()
    assert var_4 == 0
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    queue_14 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    node_8 = module_0.Node()
    queue_15 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_5 = queue_15.peek()
    node_10 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_16 = module_0.Queue(bytes_1)
    queue_17 = module_0.Queue()
    set_9 = set()
    node_11 = module_0.Node(prev=set_9)
    var_6 = queue_17.size()
    assert var_6 == 0
    queue_18 = module_0.Queue()
    var_7 = queue_17.size()
    assert var_7 == 0

def test_case_1261():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'

def test_case_1262():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = var_1.__repr__()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_4.size()
    assert var_4 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_5 = queue_6.peek()
    node_5 = module_0.Node()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_7 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_6 = double_linked_list_1.append(node_8)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_7 = queue_7.size()
    assert var_7 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_8 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_9 = module_0.Node()
    var_9 = node_9.__repr__()
    assert var_9 == 'Value: None'
    node_10 = module_0.Node()

def test_case_1263():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_6.enqueue(queue_5)
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_8 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_4 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_5 = var_4.__repr__()

def test_case_1264():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_2 = double_linked_list_1.append(node_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Node'
    assert var_3.data is None
    assert var_3.next is None
    assert var_3.prev == {*()}
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_4 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    node_6 = module_0.Node()
    var_5 = node_6.__repr__()
    assert var_5 == 'Value: None'
    node_7 = module_0.Node()
    queue_10 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_11 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_12 = module_0.Queue()
    var_6 = queue_12.peek()
    queue_13 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_7 = queue_13.size()
    assert var_7 == 0
    queue_14 = module_0.Queue()

def test_case_1265():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_3 = module_0.Node()
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_0 = None
    queue_8 = module_0.Queue(none_type_0)
    queue_9 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_2 = queue_9.size()
    assert var_2 == 0
    queue_10 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_3 = queue_10.peek()
    queue_11 = module_0.Queue(queue_10)
    assert f'{type(queue_11).__module__}.{type(queue_11).__qualname__}' == 'queue4.Queue'
    var_4 = queue_11.enqueue(set_4)

def test_case_1266():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_4.peek()
    node_2 = module_0.Node()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_6 = module_0.Queue()
    var_2 = queue_6.peek()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'

def test_case_1267():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    var_1 = queue_4.size()
    assert var_1 == 0
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_7 = module_0.Queue()
    var_2 = queue_7.peek()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_4 = module_0.Node()
    var_3 = node_4.__repr__()
    assert var_3 == 'Value: None'
    queue_10 = module_0.Queue(node_4)
    queue_11 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_4 = queue_11.peek()
    queue_12 = module_0.Queue(queue_11)
    var_5 = queue_12.enqueue(set_3)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_6 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_6 = module_0.Node()
    var_7 = node_6.__repr__()
    assert var_7 == 'Value: None'
    node_7 = module_0.Node()

def test_case_1268():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_1 = queue_1.enqueue(set_0)
    node_1 = module_0.Node()
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    queue_2 = module_0.Queue(node_1)
    node_2 = module_0.Node()
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_4 = double_linked_list_0.append(node_4)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_4.enqueue(queue_3)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_6 = module_0.Node()
    var_6 = queue_6.size()
    assert var_6 == 0
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_7 = queue_9.size()
    assert var_7 == 0
    queue_10 = module_0.Queue()

def test_case_1269():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    var_2 = queue_4.peek()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_5 = module_0.Node()
    var_3 = queue_6.size()
    assert var_3 == 0
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue(queue_8)
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_11 = module_0.Queue()
    var_6 = queue_11.peek()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_2)
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_7 = double_linked_list_6.append(bytes_2)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    node_7 = module_0.Node()
    var_8 = node_7.__repr__()
    assert var_8 == 'Value: None'
    node_8 = module_0.Node()
    node_9 = module_0.Node()
    var_9 = node_9.__repr__()
    assert var_9 == 'Value: None'
    var_10 = queue_5.peek()

def test_case_1270():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_3 = module_0.Node()
    var_0 = queue_2.size()
    assert var_0 == 0
    var_1 = node_2.__repr__()
    assert var_1 == 'Value: None'
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_0)

def test_case_1271():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue(none_type_0)
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    queue_8 = module_0.Queue(node_2)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_5 = module_0.Node()
    var_3 = queue_10.size()
    assert var_3 == 0
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'

def test_case_1272():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_4.enqueue(queue_3)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_5 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue(queue_5)
    queue_7 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_6 = queue_7.size()
    assert var_6 == 0
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_7 = queue_10.peek()
    queue_11 = module_0.Queue(queue_10)
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_8 = var_7.__repr__()
    queue_12 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_9 = queue_12.peek()
    queue_13 = module_0.Queue(queue_12)
    var_10 = queue_13.enqueue(set_6)

def test_case_1273():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_1 = queue_0.peek()
    node_2 = module_0.Node()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    var_2 = queue_2.peek()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_0 = None
    queue_6 = module_0.Queue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    queue_8 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_3 = queue_8.size()
    assert var_3 == 0
    queue_9 = module_0.Queue()
    var_4 = queue_8.size()
    assert var_4 == 0
    var_5 = queue_7.peek()
    assert var_5 == 77
    queue_10 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_6 = double_linked_list_1.append(node_6)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_7 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'queue4.Node'
    assert var_7.data is None
    assert var_7.next is None
    assert var_7.prev == {*()}

def test_case_1274():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'

def test_case_1275():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0

def test_case_1276():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'

def test_case_1277():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'

def test_case_1278():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 0

def test_case_1279():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_0.append(node_3)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_2.enqueue(queue_1)
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    queue_5 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_4 = queue_5.size()
    assert var_4 == 0
    queue_6 = module_0.Queue()
    var_5 = queue_5.size()
    assert var_5 == 0
    node_6 = module_0.Node()
    var_6 = node_6.__repr__()
    assert var_6 == 'Value: None'
    queue_7 = module_0.Queue(node_6)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_1)
    queue_11 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_7 = queue_11.size()
    assert var_7 == 0
    queue_12 = module_0.Queue()
    var_8 = queue_11.size()
    assert var_8 == 0
    queue_13 = module_0.Queue()

def test_case_1280():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0

def test_case_1281():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_0 = None
    queue_4 = module_0.Queue(none_type_0)

def test_case_1282():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_4.enqueue(queue_3)
    queue_5 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_5 = var_4.__repr__()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_8 = module_0.Queue()
    var_6 = queue_8.peek()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_9 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_0)
    queue_13 = module_0.Queue()
    set_8 = set()
    node_10 = module_0.Node(prev=set_8)
    var_7 = queue_13.size()
    assert var_7 == 0
    queue_14 = module_0.Queue()
    var_8 = queue_13.size()
    assert var_8 == 0
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_18 = module_0.Queue(bytes_1)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_9 = double_linked_list_5.append(bytes_1)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    node_11 = module_0.Node()
    var_10 = node_11.__repr__()
    assert var_10 == 'Value: None'
    node_12 = module_0.Node()
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    set_9 = set()
    node_13 = module_0.Node(prev=set_9)
    queue_21 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    node_14 = module_0.Node()
    var_11 = queue_20.size()
    assert var_11 == 0

def test_case_1283():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_3.size()
    assert var_2 == 0
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    var_3 = queue_5.peek()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_1284():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_2 = module_0.Node()
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_5.peek()
    node_4 = module_0.Node()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_3 = queue_6.size()
    assert var_3 == 0
    queue_7 = module_0.Queue()
    node_6 = module_0.Node()
    var_4 = node_6.__repr__()
    assert var_4 == 'Value: None'
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_9 = module_0.Queue()
    var_5 = queue_9.peek()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_12 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    queue_13 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    var_6 = double_linked_list_4.append(node_9)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_7 = queue_13.enqueue(queue_12)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_0)
    assert f'{type(queue_14).__module__}.{type(queue_14).__qualname__}' == 'queue4.Queue'
    queue_15 = module_0.Queue()
    set_7 = set()
    node_10 = module_0.Node(prev=set_7)
    var_8 = queue_15.size()
    assert var_8 == 0
    queue_16 = module_0.Queue()
    var_9 = queue_15.size()
    assert var_9 == 0
    queue_17 = module_0.Queue()

def test_case_1285():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue(queue_0)
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_3.peek()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_3 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    node_5 = module_0.Node()
    node_6 = module_0.Node()
    var_5 = node_6.__repr__()
    assert var_5 == 'Value: None'
    queue_6 = module_0.Queue(node_6)
    set_3 = set()
    node_7 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_8 = module_0.Queue()
    var_6 = queue_8.peek()
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_10 = module_0.Queue()
    var_7 = queue_10.peek()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None

def test_case_1286():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue(queue_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    queue_3 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    var_2 = queue_3.size()
    assert var_2 == 0
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_2)
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_6.peek()
    node_2 = module_0.Node()

def test_case_1287():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_4 = node_2.__repr__()
    assert var_4 == 'Value: None'
    node_3 = module_0.Node()

def test_case_1288():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_2 = node_0.__repr__()
    assert var_2 == 'Value: None'
    node_1 = module_0.Node()
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_4 = module_0.Node()
    var_3 = queue_4.size()
    assert var_3 == 0
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    queue_6 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_5 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_6 = var_5.__repr__()

def test_case_1289():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_2.size()
    assert var_2 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    node_3 = module_0.Node()
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    var_5 = node_4.__repr__()
    assert var_5 == 'Value: None'
    node_5 = module_0.Node()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_6 = queue_6.peek()
    node_7 = module_0.Node()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_9 = module_0.Node()
    var_7 = queue_8.size()
    assert var_7 == 0
    set_5 = set()
    node_10 = module_0.Node(prev=set_5)
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_11 = module_0.Queue()
    var_8 = queue_11.peek()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None

def test_case_1290():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_4 = module_0.Node()
    queue_6 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_3 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    queue_8 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_4 = double_linked_list_3.append(node_7)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_8.size()
    assert var_5 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_6 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    queue_11 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None

def test_case_1291():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'

def test_case_1292():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_3 = module_0.Node()
    var_2 = queue_6.size()
    assert var_2 == 0
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'

def test_case_1293():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    node_2 = module_0.Node()
    var_1 = node_2.__repr__()
    assert var_1 == 'Value: None'
    queue_2 = module_0.Queue(node_2)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    queue_4 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    var_3 = queue_4.size()
    assert var_3 == 0
    var_4 = queue_3.peek()
    assert var_4 == 77
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    var_5 = queue_7.peek()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_6 = queue_11.peek()
    node_6 = module_0.Node()
    var_7 = node_6.__repr__()
    assert var_7 == 'Value: None'
    queue_12 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_13 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_8 = double_linked_list_4.append(node_8)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_9 = double_linked_list_4.shift()
    assert double_linked_list_4.tail is None
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'queue4.Node'
    assert var_9.data is None
    assert var_9.next is None
    assert var_9.prev == {*()}
    with pytest.raises(ValueError):
        double_linked_list_1.remove(node_3)

def test_case_1294():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_2 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_2.enqueue(queue_1)
    queue_3 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_4 = double_linked_list_2.append(node_5)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_3.size()
    assert var_5 == 0
    queue_5 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_6 = queue_5.size()
    assert var_6 == 0
    queue_6 = module_0.Queue()
    node_7 = module_0.Node()
    var_7 = node_7.__repr__()
    assert var_7 == 'Value: None'
    queue_7 = module_0.Queue(node_7)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    queue_9 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    var_8 = double_linked_list_3.append(node_9)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_9 = double_linked_list_3.shift()
    assert double_linked_list_3.tail is None
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'queue4.Node'
    assert var_9.data is None
    assert var_9.next is None
    assert var_9.prev == {*()}
    set_7 = set()
    node_10 = module_0.Node(prev=set_7)
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_12 = module_0.Queue()
    var_10 = queue_12.peek()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None

def test_case_1295():
    int_0 = 427
    list_0 = [int_0]
    node_0 = module_0.Node(prev=list_0)
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'

def test_case_1296():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_2)
    queue_3 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_5.size()
    assert var_4 == 0
    queue_7 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_5 = queue_7.peek()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    none_type_0 = None
    queue_11 = module_0.Queue(none_type_0)
    queue_12 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_6 = queue_12.peek()
    queue_13 = module_0.Queue(queue_12)
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_7 = var_6.__repr__()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_14 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None

def test_case_1297():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_3.enqueue(queue_2)
    node_4 = module_0.Node()
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    queue_4 = module_0.Queue(node_4)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_0 = None
    queue_8 = module_0.Queue(none_type_0)
    queue_9 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_5 = queue_9.size()
    assert var_5 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()

def test_case_1298():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_0 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_2.enqueue(queue_1)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    var_3 = node_4.__repr__()
    assert var_3 == 'Value: None'
    node_5 = module_0.Node()

def test_case_1299():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
    assert var_1.data is None
    assert var_1.next is None
    assert var_1.prev == {*()}
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    var_3 = queue_3.enqueue(set_2)

def test_case_1300():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Node'
    assert var_3.data is None
    assert var_3.next is None
    assert var_3.prev == {*()}
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_5 = module_0.Queue()
    var_4 = queue_5.peek()
    node_5 = module_0.Node()
    var_5 = node_5.__repr__()
    assert var_5 == 'Value: None'
    queue_6 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_6 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_8 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_9 = module_0.Queue()
    var_7 = queue_9.peek()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_12 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_8 = queue_12.size()
    assert var_8 == 0
    queue_13 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_9 = queue_13.peek()
    node_10 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_0)
    queue_15 = module_0.Queue()
    set_9 = set()
    node_11 = module_0.Node(prev=set_9)
    var_10 = queue_15.size()
    assert var_10 == 0
    queue_16 = module_0.Queue()
    var_11 = queue_15.size()
    assert var_11 == 0

def test_case_1301():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = node_2.__repr__()
    assert var_1 == 'Value: None'
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_3 = double_linked_list_3.append(node_6)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_8.enqueue(queue_7)
    node_7 = module_0.Node()
    var_5 = node_7.__repr__()
    assert var_5 == 'Value: None'
    queue_9 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_6 = double_linked_list_4.append(node_9)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_7 = double_linked_list_4.shift()
    assert double_linked_list_4.tail is None
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'queue4.Node'
    assert var_7.data is None
    assert var_7.next is None
    assert var_7.prev == {*()}

def test_case_1302():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_1.enqueue(queue_0)
    queue_2 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_2.append(queue_4)
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_5 = queue_5.peek()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_7 = module_0.Queue()
    var_6 = queue_7.peek()

def test_case_1303():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_1 = module_0.Node()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_2)
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(none_type_0)
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    bytes_3 = b'\x8f/\xa1K\x98\x16)\xf1l7Zf\x8a\xfc\xe8 \xcf'

def test_case_1304():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    var_3 = queue_6.enqueue(set_2)
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_8 = module_0.Queue()
    var_4 = queue_8.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    queue_10 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_5 = queue_10.size()
    assert var_5 == 0
    queue_11 = module_0.Queue()
    var_6 = queue_10.size()
    assert var_6 == 0
    var_7 = queue_9.peek()
    assert var_7 == 77
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    queue_13 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_8 = queue_13.size()
    assert var_8 == 0
    queue_14 = module_0.Queue()
    var_9 = queue_13.size()
    assert var_9 == 0
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_17 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_10 = double_linked_list_2.append(node_8)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_11 = queue_16.size()
    assert var_11 == 0
    queue_18 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_12 = queue_18.peek()
    node_10 = module_0.Node()
    node_11 = module_0.Node()
    var_13 = node_11.__repr__()
    assert var_13 == 'Value: None'
    queue_19 = module_0.Queue(node_11)

def test_case_1305():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_4 = node_1.__repr__()
    assert var_4 == 'Value: None'
    node_2 = module_0.Node()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_5 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    queue_6 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_6 = double_linked_list_1.append(node_5)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_7 = module_0.Node()
    var_7 = queue_9.size()
    assert var_7 == 0
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_2)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_8 = double_linked_list_3.append(bytes_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_9 = double_linked_list_3.append(queue_11)
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    none_type_0 = None
    queue_12 = module_0.Queue()
    var_10 = queue_12.enqueue(none_type_0)
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_3)
    queue_14 = module_0.Queue()
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    var_11 = queue_14.size()
    assert var_11 == 0
    queue_15 = module_0.Queue()
    var_12 = queue_14.size()
    assert var_12 == 0
    queue_16 = module_0.Queue()

def test_case_1306():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_6 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_3 = queue_6.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue(queue_7)

def test_case_1307():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = var_1.__repr__()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_3.peek()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_2.append(queue_4)
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_6 = module_0.Queue()
    var_6 = queue_6.peek()
    queue_7 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_7 = queue_7.size()
    assert var_7 == 0
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_2)
    queue_11 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_8 = queue_11.size()
    assert var_8 == 0
    queue_12 = module_0.Queue()
    var_9 = queue_11.size()
    assert var_9 == 0
    queue_13 = module_0.Queue()

def test_case_1308():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_0)
    node_0 = module_0.Node()
    var_2 = node_0.__repr__()
    assert var_2 == 'Value: None'
    queue_1 = module_0.Queue(node_0)
    queue_2 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_3 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_4 = var_3.__repr__()
    node_3 = module_0.Node()
    var_5 = node_3.__repr__()
    assert var_5 == 'Value: None'
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    var_6 = queue_5.peek()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_7 = node_5.__repr__()
    assert var_7 == 'Value: None'
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_7 = module_0.Node()
    var_8 = queue_8.size()
    assert var_8 == 0
    var_9 = node_6.__repr__()
    assert var_9 == 'Value: None'
    queue_10 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    var_10 = double_linked_list_4.append(node_9)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_11 = queue_10.size()
    assert var_11 == 0
    queue_12 = module_0.Queue()
    set_7 = set()
    node_10 = module_0.Node(prev=set_7)
    var_12 = queue_12.peek()
    queue_13 = module_0.Queue(queue_12)
    var_13 = queue_13.enqueue(set_7)

def test_case_1309():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_0 = None
    queue_8 = module_0.Queue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    assert f'{type(queue_9).__module__}.{type(queue_9).__qualname__}' == 'queue4.Queue'
    queue_10 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = queue_10.size()
    assert var_2 == 0
    queue_11 = module_0.Queue()
    var_3 = queue_10.size()
    assert var_3 == 0
    var_4 = queue_9.peek()
    assert var_4 == 77
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_12 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_13 = module_0.Queue()
    var_5 = queue_13.peek()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_16 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_6 = module_0.Node()
    var_6 = queue_15.size()
    assert var_6 == 0
    queue_17 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_7 = queue_17.size()
    assert var_7 == 0
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_8 = queue_20.peek()
    node_9 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_21 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_9 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_22 = module_0.Queue(queue_21)

def test_case_1310():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()

def test_case_1311():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_5.size()
    assert var_2 == 0
    queue_6 = module_0.Queue()
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_8.size()
    assert var_4 == 0
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_5 = queue_10.size()
    assert var_5 == 0
    node_5 = module_0.Node()
    var_6 = node_5.__repr__()
    assert var_6 == 'Value: None'
    queue_11 = module_0.Queue(node_5)
    queue_12 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_7 = queue_12.peek()
    queue_13 = module_0.Queue(queue_12)
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_8 = var_7.__repr__()
    queue_14 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_9 = queue_14.peek()
    queue_15 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    queue_16 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_9 = set()
    node_10 = module_0.Node(prev=set_9)
    var_10 = double_linked_list_0.append(node_10)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_11 = queue_15.size()
    assert var_11 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_17 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_12 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_11 = module_0.Node()
    var_13 = node_11.__repr__()
    assert var_13 == 'Value: None'
    node_12 = module_0.Node()

def test_case_1312():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = var_1.__repr__()
    queue_5 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_3 = double_linked_list_1.append(node_5)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_10 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_4 = double_linked_list_4.append(node_8)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_4.shift()
    assert double_linked_list_4.tail is None
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Node'
    assert var_5.data is None
    assert var_5.next is None
    assert var_5.prev == {*()}
    queue_12 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    queue_13 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_9 = set()
    node_10 = module_0.Node(prev=set_9)
    var_6 = double_linked_list_5.append(node_10)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_7 = queue_13.enqueue(queue_12)
    queue_14 = module_0.Queue()
    set_10 = set()
    node_11 = module_0.Node(prev=set_10)
    var_8 = queue_14.size()
    assert var_8 == 0
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()

def test_case_1313():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_4.enqueue(queue_3)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_6.size()
    assert var_3 == 0
    queue_7 = module_0.Queue()
    var_4 = queue_6.size()
    assert var_4 == 0
    queue_8 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_5 = double_linked_list_2.append(node_5)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_6 = queue_10.peek()
    queue_11 = module_0.Queue(queue_10)
    var_7 = queue_11.enqueue(set_6)
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    queue_12 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_8 = module_0.Node()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_2)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_8 = double_linked_list_4.append(bytes_2)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'

def test_case_1314():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    var_2 = queue_2.size()
    assert var_2 == 0
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_0 = None
    queue_7 = module_0.Queue(none_type_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    queue_9 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_9.size()
    assert var_3 == 0
    queue_10 = module_0.Queue()
    var_4 = queue_9.size()
    assert var_4 == 0
    var_5 = queue_8.peek()
    assert var_5 == 77

def test_case_1315():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'

def test_case_1316():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_4.enqueue(queue_3)
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_0)
    queue_6 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_4 = double_linked_list_2.append(node_6)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'

def test_case_1317():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue(none_type_0)
    queue_6 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    var_1 = queue_7.enqueue(set_0)
    queue_8 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = var_2.__repr__()
    queue_10 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_10.size()
    assert var_4 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_0)
    queue_12 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_5 = queue_12.size()
    assert var_5 == 0
    queue_13 = module_0.Queue()
    var_6 = queue_12.size()
    assert var_6 == 0
    var_7 = queue_11.peek()
    assert var_7 == 77
    queue_14 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_15 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_8 = double_linked_list_0.append(node_6)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_9 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'queue4.Node'
    assert var_9.data is None
    assert var_9.next is None
    assert var_9.prev == {*()}
    node_7 = module_0.Node()
    var_10 = node_7.__repr__()
    assert var_10 == 'Value: None'

def test_case_1318():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = node_1.__repr__()
    assert var_0 == 'Value: None'
    queue_1 = module_0.Queue(node_1)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'

def test_case_1319():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue(queue_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_2 = node_0.__repr__()
    assert var_2 == 'Value: None'
    node_1 = module_0.Node()
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_2)
    queue_6 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_4 = queue_6.size()
    assert var_4 == 0
    queue_7 = module_0.Queue()
    var_5 = queue_6.size()
    assert var_5 == 0
    queue_8 = module_0.Queue()
    node_5 = module_0.Node()
    var_6 = node_5.__repr__()
    assert var_6 == 'Value: None'
    queue_9 = module_0.Queue(node_5)
    queue_10 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_7 = double_linked_list_4.append(node_7)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_8 = double_linked_list_4.shift()
    assert double_linked_list_4.tail is None
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'queue4.Node'
    assert var_8.data is None
    assert var_8.next is None
    assert var_8.prev == {*()}
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_3)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_9 = double_linked_list_5.append(bytes_3)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_10 = double_linked_list_5.append(queue_14)
    bytes_4 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_4)
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_11 = double_linked_list_6.append(bytes_4)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'

def test_case_1320():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_4 = module_0.Node()
    var_2 = queue_6.size()
    assert var_2 == 0
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    assert f'{type(queue_8).__module__}.{type(queue_8).__qualname__}' == 'queue4.Queue'
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = node_5.__repr__()
    assert var_4 == 'Value: None'
    queue_10 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_5 = queue_10.peek()
    queue_11 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_6 = queue_11.peek()
    queue_12 = module_0.Queue(queue_11)
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    queue_13 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_14 = module_0.Queue()
    var_7 = queue_14.peek()
    queue_15 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_8 = queue_15.peek()
    queue_16 = module_0.Queue(queue_15)
    var_9 = queue_16.enqueue(set_8)

def test_case_1321():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = var_0.__repr__()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()

def test_case_1322():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    node_1 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_3 = double_linked_list_2.append(node_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_5 = module_0.Node()

def test_case_1323():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_3 = node_0.__repr__()
    assert var_3 == 'Value: None'
    node_1 = module_0.Node()
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_3 = module_0.Node()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    var_4 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_5 = var_4.__repr__()
    complex_0 = 2886.801252 + 1418.99508j
    queue_5 = module_0.Queue(complex_0)
    var_6 = queue_5.size()
    assert var_6 == 1
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_7 = module_0.Node()
    var_7 = queue_7.size()
    assert var_7 == 0
    var_8 = node_6.__repr__()
    assert var_8 == 'Value: None'
    node_8 = module_0.Node()
    var_9 = node_8.__repr__()
    assert var_9 == 'Value: None'
    set_4 = set()
    node_9 = module_0.Node(prev=set_4)
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_10 = module_0.Queue()
    set_5 = set()
    node_10 = module_0.Node(prev=set_5)
    queue_11 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_6 = set()
    node_11 = module_0.Node(prev=set_6)
    var_10 = double_linked_list_5.append(node_11)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_11 = double_linked_list_5.shift()
    assert double_linked_list_5.tail is None
    assert f'{type(var_11).__module__}.{type(var_11).__qualname__}' == 'queue4.Node'
    assert var_11.data is None
    assert var_11.next is None
    assert var_11.prev == {*()}
    queue_12 = module_0.Queue()
    set_7 = set()
    node_12 = module_0.Node(prev=set_7)
    queue_13 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    set_8 = set()
    node_13 = module_0.Node(prev=set_8)
    var_12 = double_linked_list_6.append(node_13)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    var_13 = queue_12.size()
    assert var_13 == 0

def test_case_1324():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    var_2 = queue_5.size()
    assert var_2 == 0
    var_3 = node_1.__repr__()
    assert var_3 == 'Value: None'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_1.append(queue_7)

def test_case_1325():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    node_2 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    var_3 = queue_3.size()
    assert var_3 == 0
    var_4 = queue_2.peek()
    assert var_4 == 77
    queue_5 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_5 = double_linked_list_0.append(node_5)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_6 = queue_6.enqueue(queue_5)
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_7 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_7 = queue_7.peek()
    queue_8 = module_0.Queue(queue_7)
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_8 = var_7.__repr__()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    queue_11 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_10 = module_0.Node()
    var_9 = queue_10.size()
    assert var_9 == 0
    var_10 = node_9.__repr__()
    assert var_10 == 'Value: None'
    queue_12 = module_0.Queue()
    set_9 = set()
    node_11 = module_0.Node(prev=set_9)
    var_11 = queue_12.peek()
    queue_13 = module_0.Queue(queue_12)
    complex_0 = 2886.801252 + 1418.99508j
    queue_14 = module_0.Queue(complex_0)
    var_12 = queue_14.size()
    assert var_12 == 1

def test_case_1326():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_2)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    queue_4 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    var_3 = queue_4.size()
    assert var_3 == 0
    var_4 = queue_3.peek()
    assert var_4 == 77
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_2 = module_0.Node()
    var_5 = queue_7.size()
    assert var_5 == 0
    node_3 = module_0.Node()
    var_6 = node_3.__repr__()
    assert var_6 == 'Value: None'
    queue_9 = module_0.Queue(node_3)
    queue_10 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_7 = queue_10.size()
    assert var_7 == 0
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()

def test_case_1327():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    var_2 = queue_2.size()
    assert var_2 == 0
    var_3 = queue_1.peek()
    assert var_3 == 77
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_4 = node_2.__repr__()
    assert var_4 == 'Value: None'
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_4 = module_0.Node()
    var_5 = node_4.__repr__()
    assert var_5 == 'Value: None'
    queue_8 = module_0.Queue(node_4)
    queue_9 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_6 = queue_9.size()
    assert var_6 == 0
    queue_10 = module_0.Queue()

def test_case_1328():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_0 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
    assert var_1.data is None
    assert var_1.next is None
    assert var_1.prev == {*()}
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    var_2 = queue_4.peek()
    queue_5 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_3 = double_linked_list_3.append(node_6)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_5.size()
    assert var_4 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_5 = double_linked_list_4.append(bytes_0)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_6 = double_linked_list_4.append(queue_7)

def test_case_1329():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    var_2 = queue_2.size()
    assert var_2 == 0
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_0)
    with pytest.raises(ValueError):
        double_linked_list_0.remove(queue_4)

def test_case_1330():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_4.size()
    assert var_0 == 0
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_2 = node_3.__repr__()
    assert var_2 == 'Value: None'
    node_4 = module_0.Node()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_8 = module_0.Queue()
    var_3 = queue_8.peek()
    queue_9 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_4 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_13 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_8 = module_0.Node()
    var_5 = queue_12.size()
    assert var_5 == 0
    var_6 = double_linked_list_1.pop()
    assert var_6 == b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_1331():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = double_linked_list_0.append(node_3)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = queue_6.size()
    assert var_4 == 0
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()

def test_case_1332():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_0)
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_2 = queue_1.size()
    assert var_2 == 0
    queue_2 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_3 = module_0.Queue(complex_0)
    var_3 = queue_3.size()
    assert var_3 == 1
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_5 = node_1.__repr__()
    assert var_5 == 'Value: None'
    node_2 = module_0.Node()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_2)
    queue_6 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_6 = queue_6.size()
    assert var_6 == 0
    queue_7 = module_0.Queue()
    var_7 = queue_6.size()
    assert var_7 == 0
    queue_8 = module_0.Queue()
    str_0 = 'q]\r4/>U-}^]7+eTbv('

def test_case_1333():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_2.peek()
    node_3 = module_0.Node()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_3 = var_2.__repr__()

def test_case_1334():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_1 = node_2.__repr__()
    assert var_1 == 'Value: None'
    node_3 = module_0.Node()

def test_case_1335():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_1 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    var_2 = queue_2.enqueue(set_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    queue_5 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_4 = queue_5.size()
    assert var_4 == 0
    queue_6 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_5 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_6 = node_3.__repr__()
    assert var_6 == 'Value: None'
    node_4 = module_0.Node()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_8 = module_0.Queue()
    var_7 = queue_8.enqueue(none_type_0)
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_12 = module_0.Queue()
    bytes_2 = b'\xf5\xb3\xa3\xdc'

def test_case_1336():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()

def test_case_1337():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    var_3 = queue_3.size()
    assert var_3 == 0
    var_4 = queue_2.peek()
    assert var_4 == 77
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None

def test_case_1338():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue(none_type_0)
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    var_0 = queue_6.peek()

def test_case_1339():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue(queue_6)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_9 = module_0.Queue()
    var_3 = queue_9.peek()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_12 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_12.peek()
    queue_13 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_5 = queue_13.peek()
    queue_14 = module_0.Queue(queue_13)
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_6 = var_5.__repr__()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_15 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_7 = module_0.Node()
    queue_16 = module_0.Queue()

def test_case_1340():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_4.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    node_4 = module_0.Node()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_6 = module_0.Node()
    var_5 = queue_8.size()
    assert var_5 == 0
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_2)
    queue_14 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    var_6 = queue_14.size()
    assert var_6 == 0
    queue_15 = module_0.Queue()
    var_7 = queue_14.size()
    assert var_7 == 0
    queue_16 = module_0.Queue()
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    var_8 = queue_16.peek()
    node_10 = module_0.Node()

def test_case_1341():
    none_type_0 = None
    set_0 = set()
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(set_0)

def test_case_1342():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_0.append(queue_1)
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_3.enqueue(queue_2)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_4 = module_0.Node()
    var_5 = queue_5.size()
    assert var_5 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    queue_8 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_6 = queue_8.size()
    assert var_6 == 0
    queue_9 = module_0.Queue()
    var_7 = queue_8.size()
    assert var_7 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_12 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_8 = double_linked_list_3.append(node_7)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_9 = double_linked_list_3.shift()
    assert double_linked_list_3.tail is None
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'queue4.Node'
    assert var_9.data is None
    assert var_9.next is None
    assert var_9.prev == {*()}
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_2)
    var_10 = queue_13.dequeue()
    assert var_10 == 77
    complex_0 = 2886.801252 + 1418.99508j
    queue_14 = module_0.Queue(complex_0)
    var_11 = queue_14.size()
    assert var_11 == 1

def test_case_1343():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_5.size()
    assert var_1 == 0
    queue_6 = module_0.Queue()
    var_2 = queue_5.size()
    assert var_2 == 0
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_9 = module_0.Queue()
    var_3 = queue_9.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_1)
    queue_11 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_11.size()
    assert var_4 == 0
    queue_12 = module_0.Queue()
    var_5 = queue_11.size()
    assert var_5 == 0
    var_6 = queue_10.peek()
    assert var_6 == 77
    node_4 = module_0.Node()
    var_7 = node_4.__repr__()
    assert var_7 == 'Value: None'
    queue_13 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_8 = queue_13.peek()
    queue_14 = module_0.Queue(queue_13)
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_9 = var_8.__repr__()
    queue_15 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_16 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_10 = double_linked_list_3.append(node_8)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_17 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_11 = queue_17.peek()
    queue_18 = module_0.Queue(queue_17)
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    set_9 = set()
    node_10 = module_0.Node(prev=set_9)
    queue_21 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_11 = module_0.Node()
    var_12 = queue_20.size()
    assert var_12 == 0

def test_case_1344():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    str_0 = 'z6=v4;^TE~mfRgj'
    with pytest.raises(ValueError):
        double_linked_list_0.remove(str_0)

def test_case_1345():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == 77
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    queue_2 = module_0.Queue()
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    var_2 = queue_2.size()
    assert var_2 == 0
    var_3 = queue_1.peek()
    assert var_3 == 77
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_4 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)

def test_case_1346():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_1.append(queue_2)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_1 = None
    queue_7 = module_0.Queue(none_type_1)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    queue_9 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_9.size()
    assert var_4 == 0
    queue_10 = module_0.Queue()
    var_5 = queue_9.size()
    assert var_5 == 0
    queue_11 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_6 = queue_11.peek()
    node_5 = module_0.Node()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_14 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_7 = module_0.Node()
    var_7 = queue_13.size()
    assert var_7 == 0
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_2)
    var_8 = queue_15.dequeue()
    assert var_8 == 77
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_18 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_9 = module_0.Node()
    var_9 = queue_17.size()
    assert var_9 == 0
    var_10 = node_8.__repr__()
    assert var_10 == 'Value: None'

def test_case_1347():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_3 = module_0.Node()
    var_3 = queue_7.size()
    assert var_3 == 0

def test_case_1348():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_0 = None
    queue_6 = module_0.Queue(none_type_0)
    queue_7 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    assert f'{type(queue_9).__module__}.{type(queue_9).__qualname__}' == 'queue4.Queue'
    queue_10 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_10.size()
    assert var_3 == 0
    queue_11 = module_0.Queue()
    var_4 = queue_10.size()
    assert var_4 == 0
    var_5 = queue_9.peek()
    assert var_5 == 77
    queue_12 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_6 = queue_12.size()
    assert var_6 == 0
    queue_13 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_14 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_7 = double_linked_list_2.append(node_6)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_8 = double_linked_list_2.shift()
    assert double_linked_list_2.tail is None
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'queue4.Node'
    assert var_8.data is None
    assert var_8.next is None
    assert var_8.prev == {*()}
    queue_15 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_9 = queue_15.peek()
    queue_16 = module_0.Queue(queue_15)
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_10 = var_9.__repr__()

def test_case_1349():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_2 = module_0.Node()
    var_1 = queue_2.size()
    assert var_1 == 0
    node_3 = module_0.Node()
    var_2 = node_3.__repr__()
    assert var_2 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    queue_5 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    var_4 = queue_5.size()
    assert var_4 == 0
    queue_7 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_5 = double_linked_list_2.append(node_6)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_6 = queue_7.size()
    assert var_6 == 0
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_8 = module_0.Node()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    queue_12 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_10 = module_0.Node()
    var_7 = queue_11.size()
    assert var_7 == 0
    var_8 = node_9.__repr__()
    assert var_8 == 'Value: None'

def test_case_1350():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.peek()
    node_2 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    var_2 = queue_4.dequeue()
    assert var_2 == 77
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_6.size()
    assert var_3 == 0
    queue_7 = module_0.Queue()
    var_4 = queue_6.size()
    assert var_4 == 0
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_5 = module_0.Node()
    var_5 = queue_10.size()
    assert var_5 == 0
    var_6 = node_4.__repr__()
    assert var_6 == 'Value: None'

def test_case_1351():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_2 = module_0.Queue(complex_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    var_0 = queue_2.size()
    assert var_0 == 1
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    queue_4 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_4.size()
    assert var_1 == 0
    queue_5 = module_0.Queue()
    var_2 = queue_4.size()
    assert var_2 == 0
    var_3 = queue_3.peek()
    assert var_3 == 77
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_8 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    var_4 = queue_7.size()
    assert var_4 == 0
    var_5 = node_1.__repr__()
    assert var_5 == 'Value: None'
    queue_9 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_10 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_6 = double_linked_list_1.append(node_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_7 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'queue4.Node'
    assert var_7.data is None
    assert var_7.next is None
    assert var_7.prev == {*()}
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_1)
    queue_15 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_8 = queue_15.size()
    assert var_8 == 0
    queue_16 = module_0.Queue()
    var_9 = queue_15.size()
    assert var_9 == 0
    queue_17 = module_0.Queue()

def test_case_1352():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_4.peek()
    node_3 = module_0.Node()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = node_4.__repr__()
    assert var_2 == 'Value: None'
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_6 = module_0.Node()
    var_3 = queue_7.size()
    assert var_3 == 0
    queue_9 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_4 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    assert f'{type(queue_10).__module__}.{type(queue_10).__qualname__}' == 'queue4.Queue'
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_5 = var_4.__repr__()
    with pytest.raises(IndexError):
        double_linked_list_2.pop()

def test_case_1353():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    var_3 = queue_6.enqueue(set_1)

def test_case_1354():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = var_0.__repr__()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    var_3 = queue_3.size()
    assert var_3 == 0
    node_3 = module_0.Node()
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    queue_5 = module_0.Queue(node_3)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_5 = module_0.Node()
    var_5 = queue_7.size()
    assert var_5 == 0
    queue_9 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_10 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_6 = double_linked_list_1.append(node_7)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_7 = queue_10.enqueue(queue_9)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_1)
    var_8 = queue_11.dequeue()
    assert var_8 == 77
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_2)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_9 = double_linked_list_2.append(bytes_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'

def test_case_1355():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_0)

def test_case_1356():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue(queue_4)
    complex_0 = 2886.801252 + 1418.99508j
    queue_6 = module_0.Queue(complex_0)
    var_2 = queue_6.size()
    assert var_2 == 1
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_3 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_4 = node_1.__repr__()
    assert var_4 == 'Value: None'
    queue_8 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_5 = queue_8.peek()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_2)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    double_linked_list_5 = module_0.DoubleLinkedList(var_5)
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_10 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_11 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_6 = double_linked_list_6.append(node_4)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    var_7 = queue_10.size()
    assert var_7 == 0
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_12 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    var_8 = node_5.__repr__()
    assert var_8 == 'Value: None'

def test_case_1357():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    var_3 = queue_4.dequeue()
    assert var_3 == 77
    node_3 = module_0.Node()
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'

def test_case_1358():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_1 = queue_5.enqueue(none_type_0)
    node_3 = module_0.Node()
    var_2 = node_3.__repr__()
    assert var_2 == 'Value: None'
    queue_6 = module_0.Queue(node_3)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_5 = module_0.Node()
    var_3 = queue_8.size()
    assert var_3 == 0
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_0)
    queue_11 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_5 = queue_11.size()
    assert var_5 == 0
    queue_12 = module_0.Queue()
    var_6 = queue_11.size()
    assert var_6 == 0
    queue_13 = module_0.Queue()

def test_case_1359():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'

def test_case_1360():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_2.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList(var_1)
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_1361():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_0)
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_2 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = var_2.__repr__()
    complex_0 = 2886.801252 + 1418.99508j
    queue_3 = module_0.Queue(complex_0)
    var_4 = queue_3.size()
    assert var_4 == 1
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_0 = None
    queue_7 = module_0.Queue(none_type_0)

def test_case_1362():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    with pytest.raises(IndexError):
        double_linked_list_0.pop()

def test_case_1363():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_3 = module_0.Queue(complex_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    var_2 = queue_3.size()
    assert var_2 == 1
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_0)
    var_4 = queue_3.enqueue(set_2)
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_5 = double_linked_list_0.append(node_4)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_6 = queue_5.size()
    assert var_6 == 0
    node_5 = module_0.Node()
    var_7 = node_5.__repr__()
    assert var_7 == 'Value: None'
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_8 = queue_7.enqueue(none_type_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    none_type_2 = None
    queue_11 = module_0.Queue(none_type_2)
    queue_12 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_13 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_9 = double_linked_list_1.append(node_8)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_10 = queue_13.enqueue(queue_12)

def test_case_1364():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    node_2 = module_0.Node()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    var_3 = queue_4.enqueue(set_2)
    queue_5 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_4 = double_linked_list_0.append(node_5)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_5.size()
    assert var_5 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue(queue_9)
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_2)
    queue_15 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_7 = queue_15.size()
    assert var_7 == 0
    queue_16 = module_0.Queue()
    var_8 = queue_15.size()
    assert var_8 == 0
    var_9 = queue_14.peek()
    assert var_9 == 77
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    queue_19 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    node_10 = module_0.Node()
    var_10 = queue_18.size()
    assert var_10 == 0
    var_11 = node_9.__repr__()
    assert var_11 == 'Value: None'

def test_case_1365():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    var_2 = queue_0.enqueue(set_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    var_4 = queue_3.size()
    assert var_4 == 0
    queue_5 = module_0.Queue()
    complex_1 = 2886.801252 + 1418.99508j
    queue_6 = module_0.Queue(complex_1)
    var_5 = queue_6.size()
    assert var_5 == 1
    node_2 = module_0.Node()
    var_6 = node_2.__repr__()
    assert var_6 == 'Value: None'
    int_0 = -2663
    list_0 = [queue_1, int_0, set_0]

def test_case_1366():
    bool_0 = False
    int_0 = 1630
    dict_0 = {bool_0: bool_0, bool_0: bool_0, int_0: int_0}
    list_0 = [dict_0, bool_0]
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    with pytest.raises(ValueError):
        double_linked_list_0.remove(list_0)

def test_case_1367():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_0 = queue_1.enqueue(none_type_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    node_3 = module_0.Node()
    var_1 = node_3.__repr__()
    assert var_1 == 'Value: None'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    var_3 = node_4.__repr__()
    assert var_3 == 'Value: None'
    node_5 = module_0.Node()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_6 = module_0.Node(prev=set_2)
    var_4 = queue_4.size()
    assert var_4 == 0
    queue_5 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_2)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_5 = double_linked_list_2.append(bytes_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue(queue_6)
    set_3 = set()
    node_7 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_11 = module_0.Queue()
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    queue_12 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_5 = set()
    node_9 = module_0.Node(prev=set_5)
    var_6 = double_linked_list_5.append(node_9)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_7 = queue_11.size()
    assert var_7 == 0
    complex_0 = 2886.801252 + 1418.99508j
    queue_13 = module_0.Queue(complex_0)
    var_8 = queue_13.size()
    assert var_8 == 1

def test_case_1368():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = node_2.__repr__()
    assert var_1 == 'Value: None'
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_6.peek()
    node_4 = module_0.Node()
    var_3 = node_4.__repr__()
    assert var_3 == 'Value: None'
    queue_7 = module_0.Queue(node_4)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_5 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_6 = var_5.__repr__()

def test_case_1369():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'

def test_case_1370():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    with pytest.raises(IndexError):
        double_linked_list_0.pop()

def test_case_1371():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    with pytest.raises(IndexError):
        double_linked_list_0.shift()

def test_case_1372():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    complex_0 = 2886.801252 + 1418.99508j
    queue_1 = module_0.Queue(complex_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_0 = queue_1.size()
    assert var_0 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    var_2 = queue_1.enqueue(set_0)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_3.peek()

def test_case_1373():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)

def test_case_1374():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    var_3 = queue_4.enqueue(set_1)
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_4 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_5 = var_4.__repr__()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    queue_8 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_6 = queue_8.size()
    assert var_6 == 0
    queue_9 = module_0.Queue()
    var_7 = queue_8.size()
    assert var_7 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_12 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_8 = double_linked_list_1.append(node_7)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_9 = queue_11.size()
    assert var_9 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_1)
    var_10 = queue_13.dequeue()
    assert var_10 == 77
    queue_14 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_11 = queue_14.peek()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_2)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    double_linked_list_3 = module_0.DoubleLinkedList(var_11)
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_12 = queue_17.size()
    assert var_12 == 0

def test_case_1375():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    var_1 = queue_1.dequeue()
    assert var_1 == 77
    queue_2 = module_0.Queue()

def test_case_1376():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_0 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue(queue_5)
    queue_7 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_7.peek()
    queue_8 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_8.peek()
    node_3 = module_0.Node()
    var_3 = queue_5.peek()
    assert var_3 == 77

def test_case_1377():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue(queue_0)
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_6.size()
    assert var_2 == 0
    queue_7 = module_0.Queue()
    var_3 = queue_6.size()
    assert var_3 == 0
    queue_8 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_9.enqueue(queue_8)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_2)
    var_6 = queue_10.dequeue()
    assert var_6 == 77
    queue_11 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_7 = queue_11.size()
    assert var_7 == 0
    queue_12 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_8 = queue_12.size()
    assert var_8 == 0
    queue_13 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_14 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    str_0 = '`hBWYv5*'

def test_case_1378():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_3 = module_0.Node()
    var_1 = queue_5.size()
    assert var_1 == 0
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    queue_7 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_3 = queue_7.peek()
    node_5 = module_0.Node()
    queue_8 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_4 = double_linked_list_3.append(node_7)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_8.size()
    assert var_5 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_6 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_2)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_7 = double_linked_list_5.append(bytes_2)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    node_8 = module_0.Node()
    var_8 = node_8.__repr__()
    assert var_8 == 'Value: None'
    node_9 = module_0.Node()

def test_case_1379():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue(queue_2)
    var_1 = queue_1.peek()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    var_3 = queue_7.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    var_4 = queue_8.dequeue()
    assert var_4 == 77
    queue_9 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_5 = queue_9.size()
    assert var_5 == 0
    queue_10 = module_0.Queue()
    var_6 = queue_10.peek()

def test_case_1380():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    var_1 = queue_1.dequeue()
    assert var_1 == 77
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_0 = None
    queue_8 = module_0.Queue(none_type_0)
    queue_9 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_10 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = double_linked_list_0.append(node_3)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_10.enqueue(queue_9)
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_5 = node_4.__repr__()
    assert var_5 == 'Value: None'
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_12 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_6 = module_0.Node()
    node_7 = module_0.Node()
    var_6 = node_7.__repr__()
    assert var_6 == 'Value: None'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_1)
    queue_14 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    var_7 = queue_14.size()
    assert var_7 == 0
    queue_15 = module_0.Queue()
    var_8 = queue_14.size()
    assert var_8 == 0
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    queue_16 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_7 = set()
    node_10 = module_0.Node(prev=set_7)

def test_case_1381():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = var_2.__repr__()
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_4.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_4)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    queue_7 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_5 = queue_7.size()
    assert var_5 == 0
    queue_8 = module_0.Queue()
    var_6 = queue_7.size()
    assert var_6 == 0
    queue_9 = module_0.Queue()
    node_5 = module_0.Node()
    var_7 = node_5.__repr__()
    assert var_7 == 'Value: None'
    queue_10 = module_0.Queue(node_5)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_2)
    var_8 = queue_11.dequeue()
    assert var_8 == 77
    queue_12 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_13 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_14 = module_0.Queue()
    var_9 = queue_14.peek()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None

def test_case_1382():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = var_1.__repr__()
    queue_3 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_3 = double_linked_list_0.append(node_4)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'queue4.Node'
    assert var_4.data is None
    assert var_4.next is None
    assert var_4.prev == {*()}
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_5 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    var_6 = node_5.__repr__()
    assert var_6 == 'Value: None'
    node_6 = module_0.Node()

def test_case_1383():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()

def test_case_1384():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_2.append(node_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_2 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_3.append(queue_4)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_0 = None
    node_3 = module_0.Node(prev=none_type_0)
    queue_7 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = queue_7.peek()
    queue_8 = module_0.Queue(queue_7)
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_5 = var_4.__repr__()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_2)
    queue_10 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_6 = queue_10.size()
    assert var_6 == 0
    queue_11 = module_0.Queue()
    var_7 = queue_10.size()
    assert var_7 == 0
    queue_12 = module_0.Queue()
    with pytest.raises(ValueError):
        double_linked_list_1.remove(set_4)

def test_case_1385():
    none_type_0 = None
    node_0 = module_0.Node(prev=none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_3 = node_1.__repr__()
    assert var_3 == 'Value: None'
    node_2 = module_0.Node()

def test_case_1386():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    var_2 = queue_2.peek()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    node_4 = module_0.Node()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_7 = module_0.Queue()
    var_5 = queue_7.peek()

def test_case_1387():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = var_0.__repr__()
    queue_3 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_2 = double_linked_list_1.append(node_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_4.enqueue(queue_3)
    queue_5 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_4 = queue_5.size()
    assert var_4 == 0
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    var_5 = queue_7.peek()
    none_type_0 = None
    node_7 = module_0.Node(prev=none_type_0)
    queue_8 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_6 = queue_8.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    double_linked_list_4 = module_0.DoubleLinkedList(var_6)
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_10 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    queue_11 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_12 = module_0.Queue()
    var_7 = queue_12.peek()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None

def test_case_1388():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue(queue_0)
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_2 = module_0.Queue(node_0)
    queue_3 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = queue_4.peek()
    node_3 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)

def test_case_1389():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    queue_2 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = queue_2.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList(var_1)
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    complex_0 = 2886.801252 + 1418.99508j
    queue_4 = module_0.Queue(complex_0)
    var_2 = queue_4.size()
    assert var_2 == 1
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_0)
    var_4 = queue_4.enqueue(set_3)
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    bool_0 = True
    double_linked_list_3 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    none_type_1 = None
    queue_9 = module_0.Queue(none_type_1)
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_11 = module_0.Queue()
    var_5 = queue_11.peek()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_14 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    node_8 = module_0.Node()
    queue_15 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    queue_16 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    var_6 = node_9.__repr__()
    assert var_6 == 'Value: None'

def test_case_1390():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    complex_0 = 2886.801252 + 1418.99508j
    queue_4 = module_0.Queue(complex_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    var_1 = queue_4.size()
    assert var_1 == 1
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = var_2.__repr__()
    complex_1 = 2886.801252 + 1418.99508j
    queue_7 = module_0.Queue(complex_1)
    var_4 = queue_7.size()
    assert var_4 == 1
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    none_type_0 = None
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(none_type_0)
    var_6 = queue_7.enqueue(set_3)

def test_case_1391():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_0 = None
    queue_4 = module_0.Queue(none_type_0)
    var_0 = queue_0.peek()

def test_case_1392():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()

def test_case_1393():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    var_0 = queue_4.peek()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_1 = double_linked_list_4.append(bytes_0)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue(queue_7)
    complex_0 = 2886.801252 + 1418.99508j
    queue_9 = module_0.Queue(complex_0)
    var_2 = queue_9.size()
    assert var_2 == 1

def test_case_1394():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    var_2 = queue_4.peek()
    node_3 = module_0.Node()
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_6 = module_0.Node()
    var_5 = queue_7.size()
    assert var_5 == 0

def test_case_1395():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_0.enqueue(node_1)

def test_case_1396():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    with pytest.raises(ValueError):
        double_linked_list_1.remove(set_0)

def test_case_1397():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)

def test_case_1398():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue(queue_4)
    var_2 = queue_3.peek()

def test_case_1399():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == 77
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_1.size()
    assert var_2 == 0

def test_case_1400():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
    assert var_1.data is None
    assert var_1.next is None
    assert var_1.prev == {*()}
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_1401():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_0.append(queue_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_4 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    var_5 = queue_3.enqueue(set_0)
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_6 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_5 = module_0.Node()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    none_type_0 = None
    queue_11 = module_0.Queue(none_type_0)

def test_case_1402():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    none_type_0 = None
    node_2 = module_0.Node(prev=none_type_0)
    queue_6 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue(queue_7)
    var_3 = queue_6.peek()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    none_type_1 = None
    queue_12 = module_0.Queue(none_type_1)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_13 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_14 = module_0.Queue()
    var_4 = queue_14.peek()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_4 = module_0.Node()
    var_5 = node_4.__repr__()
    assert var_5 == 'Value: None'
    queue_17 = module_0.Queue(node_4)
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_18 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_19 = module_0.Queue()
    var_6 = queue_19.peek()
    var_7 = queue_17.enqueue(queue_5)

def test_case_1403():
    complex_0 = 204.5882 + 96.044377j
    dict_0 = {complex_0: complex_0}
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    with pytest.raises(ValueError):
        double_linked_list_0.remove(dict_0)

def test_case_1404():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = var_0.__repr__()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    var_4 = queue_4.size()
    assert var_4 == 0
    queue_6 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_7 = module_0.Queue(complex_0)
    var_5 = queue_7.size()
    assert var_5 == 1
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_9 = module_0.Queue()
    var_6 = queue_9.peek()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_12 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_7 = double_linked_list_5.append(set_4)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    with pytest.raises(IndexError):
        double_linked_list_1.pop()

def test_case_1405():
    complex_0 = 1739.928582 - 4341.101783j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    list_0 = [dict_0]
    node_0 = module_0.Node(list_0)
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: [{(1739.928582-4341.101783j): (1739.928582-4341.101783j)}]'

def test_case_1406():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    complex_0 = 2886.801252 + 1418.99508j
    queue_4 = module_0.Queue(complex_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    var_1 = queue_4.size()
    assert var_1 == 1
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_3 = node_1.__repr__()
    assert var_3 == 'Value: None'
    node_2 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    queue_7 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_4 = queue_7.size()
    assert var_4 == 0
    queue_8 = module_0.Queue()
    var_5 = queue_7.size()
    assert var_5 == 0
    queue_9 = module_0.Queue()

def test_case_1407():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_0.append(node_3)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Node'
    assert var_3.data is None
    assert var_3.next is None
    assert var_3.prev == {*()}
    complex_0 = 2886.801252 + 1418.99508j
    queue_6 = module_0.Queue(complex_0)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    var_4 = queue_6.size()
    assert var_4 == 1
    node_4 = module_0.Node()
    var_5 = node_4.__repr__()
    assert var_5 == 'Value: None'
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_6 = module_0.Node()
    var_6 = queue_8.size()
    assert var_6 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_7 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_7 = module_0.Node()
    var_8 = node_7.__repr__()
    assert var_8 == 'Value: None'
    node_8 = module_0.Node()

def test_case_1408():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_1)
    queue_2 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_2)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_3)
    queue_5 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    var_4 = queue_5.size()
    assert var_4 == 0
    queue_7 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_8 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_5 = queue_8.peek()
    queue_9 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_6 = queue_9.size()
    assert var_6 == 0
    var_7 = queue_8.size()
    assert var_7 == 0
    bytes_4 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_4)
    queue_11 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_8 = queue_11.size()
    assert var_8 == 0
    queue_12 = module_0.Queue()
    var_9 = queue_11.size()
    assert var_9 == 0
    var_10 = queue_10.peek()
    assert var_10 == 77

def test_case_1409():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == 77
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue(none_type_0)
    queue_6 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_6.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList(var_1)
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_8 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_3.append(node_4)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_9.enqueue(queue_8)
    queue_10 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_4 = double_linked_list_4.append(node_6)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_2)
    queue_13 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_5 = queue_13.size()
    assert var_5 == 0
    queue_14 = module_0.Queue()
    var_6 = queue_13.size()
    assert var_6 == 0
    var_7 = queue_12.peek()
    assert var_7 == 77

def test_case_1410():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    var_1 = queue_1.dequeue()
    assert var_1 == 77
    queue_2 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_0.append(queue_3)
    queue_4 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_4 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_5.enqueue(queue_4)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_2)
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_3)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = double_linked_list_2.append(bytes_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue(queue_7)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None

def test_case_1411():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_0 = double_linked_list_2.append(node_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_4.enqueue(queue_3)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_2 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_7 = module_0.Queue()
    var_3 = queue_7.peek()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)

def test_case_1412():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    queue_2 = module_0.Queue(node_1)
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_2 = double_linked_list_3.append(set_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    queue_10 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_3 = queue_10.size()
    assert var_3 == 0
    queue_11 = module_0.Queue()
    var_4 = queue_10.size()
    assert var_4 == 0
    var_5 = queue_9.peek()
    assert var_5 == 77
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_6 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_7 = double_linked_list_4.append(queue_12)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None

def test_case_1413():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    var_1 = queue_5.peek()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_1414():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.peek()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_4.size()
    assert var_2 == 0
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_5.peek()
    node_4 = module_0.Node()
    queue_6 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_7 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_5 = double_linked_list_0.append(node_6)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_6 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'queue4.Node'
    assert var_6.data is None
    assert var_6.next is None
    assert var_6.prev == {*()}

def test_case_1415():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_0 = None
    queue_4 = module_0.Queue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    queue_6 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_0 = queue_6.size()
    assert var_0 == 0
    queue_7 = module_0.Queue()
    var_1 = queue_6.size()
    assert var_1 == 0
    queue_8 = module_0.Queue()
    none_type_1 = None
    node_3 = module_0.Node(prev=none_type_1)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_1.append(queue_9)
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_11 = module_0.Queue()
    var_4 = queue_11.peek()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_5 = queue_15.size()
    assert var_5 == 0
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_6 = queue_17.peek()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_18 = module_0.Queue(bytes_2)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    double_linked_list_5 = module_0.DoubleLinkedList(var_6)
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_19 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_20 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_7 = double_linked_list_6.append(node_8)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    var_8 = queue_19.size()
    assert var_8 == 0

def test_case_1416():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_0 = double_linked_list_2.append(node_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_3.size()
    assert var_1 == 0

def test_case_1417():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_0)

def test_case_1418():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    var_1 = queue_1.dequeue()
    assert var_1 == 77
    node_0 = module_0.Node()
    var_2 = node_0.__repr__()
    assert var_2 == 'Value: None'
    queue_2 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_2.size()
    assert var_4 == 0
    queue_4 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_5 = queue_4.size()
    assert var_5 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_6 = double_linked_list_2.append(node_5)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_6 = module_0.Node()
    none_type_0 = None
    node_7 = module_0.Node(prev=none_type_0)

def test_case_1419():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
    assert var_1.data is None
    assert var_1.next is None
    assert var_1.prev == {*()}

def test_case_1420():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_3 = module_0.Queue()
    var_1 = queue_3.peek()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_3 = module_0.Node()
    queue_5 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_2 = queue_5.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    queue_7 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_3 = queue_7.size()
    assert var_3 == 0
    queue_8 = module_0.Queue()
    var_4 = queue_7.size()
    assert var_4 == 0
    node_6 = module_0.Node()
    var_5 = node_6.__repr__()
    assert var_5 == 'Value: None'
    queue_9 = module_0.Queue(node_6)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_2)
    var_6 = queue_10.dequeue()
    assert var_6 == 77
    queue_11 = module_0.Queue()

def test_case_1421():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    var_3 = queue_2.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    bool_0 = True
    double_linked_list_2 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_9 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_10 = module_0.Queue()
    var_5 = queue_10.peek()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    with pytest.raises(IndexError):
        double_linked_list_5.pop()

def test_case_1422():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.size()
    assert var_2 == 0

def test_case_1423():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    var_2 = queue_3.size()
    assert var_2 == 0
    var_3 = queue_2.peek()
    assert var_3 == 77
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_4 = module_0.Node()
    queue_6 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = double_linked_list_3.append(set_4)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_12 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_7 = module_0.Node()
    var_5 = queue_11.size()
    assert var_5 == 0
    var_6 = node_6.__repr__()
    assert var_6 == 'Value: None'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_1)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_7 = double_linked_list_5.append(bytes_1)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_8 = double_linked_list_5.append(queue_13)

def test_case_1424():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_2.size()
    assert var_2 == 0
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.append(set_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_6.peek()
    queue_7 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    assert f'{type(queue_8).__module__}.{type(queue_8).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_5 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue(queue_8)
    var_6 = queue_7.peek()
    var_7 = queue_9.size()
    assert var_7 == 1
    queue_10 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_8 = queue_10.size()
    assert var_8 == 0
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_14 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_9 = double_linked_list_3.append(node_6)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'

def test_case_1425():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.size()
    assert var_2 == 0
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_4.size()
    assert var_4 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()

def test_case_1426():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_1 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue(queue_2)
    var_2 = queue_1.peek()
    var_3 = queue_3.size()
    assert var_3 == 1
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_4 = queue_4.size()
    assert var_4 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_8 = module_0.Queue()
    var_5 = queue_8.peek()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_4 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_6 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    var_7 = node_5.__repr__()
    assert var_7 == 'Value: None'
    node_6 = module_0.Node()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_2)
    queue_12 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_8 = queue_12.size()
    assert var_8 == 0
    queue_13 = module_0.Queue()
    var_9 = queue_12.size()
    assert var_9 == 0
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    none_type_0 = None
    queue_18 = module_0.Queue(none_type_0)

def test_case_1427():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue(queue_0)
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bool_0 = True
    double_linked_list_2 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_6.size()
    assert var_1 == 0
    queue_7 = module_0.Queue()
    var_2 = queue_6.size()
    assert var_2 == 0
    queue_8 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_9 = module_0.Queue(complex_0)
    var_3 = queue_9.size()
    assert var_3 == 1
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    none_type_0 = None
    queue_10 = module_0.Queue()
    var_4 = queue_10.enqueue(none_type_0)
    var_5 = queue_9.enqueue(set_3)
    queue_11 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_6 = queue_11.peek()
    queue_12 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_7 = queue_12.size()
    assert var_7 == 0
    var_8 = queue_11.size()
    assert var_8 == 0

def test_case_1428():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue(queue_5)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_4 = module_0.Node()

def test_case_1429():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue(queue_0)
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue(queue_6)
    var_3 = queue_5.peek()
    var_4 = queue_7.size()
    assert var_4 == 1
    queue_8 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_5 = queue_8.size()
    assert var_5 == 0

def test_case_1430():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = var_0.__repr__()

def test_case_1431():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    none_type_0 = None
    node_0 = module_0.Node(prev=none_type_0)
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_2.peek()

def test_case_1432():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'

def test_case_1433():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = node_2.__repr__()
    assert var_1 == 'Value: None'
    queue_2 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_1.append(node_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_3 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    var_4 = queue_7.peek()
    none_type_0 = None
    node_7 = module_0.Node(prev=none_type_0)
    queue_8 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_5 = queue_8.size()
    assert var_5 == 0
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList(set_4)
    with pytest.raises(IndexError):
        double_linked_list_3.pop()

def test_case_1434():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    var_2 = queue_0.enqueue(set_0)

def test_case_1435():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_1 = queue_1.enqueue(set_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue(queue_2)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    var_4 = queue_5.size()
    assert var_4 == 0
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(none_type_0)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_2)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = double_linked_list_2.append(bytes_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_7 = node_3.__repr__()
    assert var_7 == 'Value: None'
    queue_10 = module_0.Queue(node_3)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_13 = module_0.Queue(complex_0)
    var_8 = queue_13.size()
    assert var_8 == 1
    queue_14 = module_0.Queue()
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_3)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_9 = double_linked_list_3.append(bytes_3)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_16 = module_0.Queue(queue_15)
    var_10 = queue_14.peek()
    var_11 = queue_16.size()
    assert var_11 == 1

def test_case_1436():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    none_type_0 = None
    node_1 = module_0.Node(prev=none_type_0)
    queue_4 = module_0.Queue()

def test_case_1437():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_5 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue(queue_6)
    var_4 = queue_5.peek()
    var_5 = queue_7.size()
    assert var_5 == 1
    node_2 = module_0.Node()
    var_6 = node_2.__repr__()
    assert var_6 == 'Value: None'
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_9 = module_0.Queue()
    var_7 = queue_9.peek()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_12 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_5 = module_0.Node()
    var_8 = queue_11.size()
    assert var_8 == 0
    none_type_0 = None
    node_6 = module_0.Node(prev=none_type_0)

def test_case_1438():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    node_2 = module_0.Node()

def test_case_1439():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.size()
    assert var_1 == 0
    var_2 = queue_1.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_3 = module_0.Node()
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_4 = double_linked_list_1.append(node_5)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_6.size()
    assert var_5 == 0
    queue_8 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_6 = queue_8.size()
    assert var_6 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    assert f'{type(queue_9).__module__}.{type(queue_9).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_7 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue(queue_9)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_1)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_2)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_8 = double_linked_list_3.append(bytes_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_9 = double_linked_list_3.append(queue_12)

def test_case_1440():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    complex_0 = 2886.801252 + 1418.99508j
    queue_1 = module_0.Queue(complex_0)
    var_1 = queue_1.size()
    assert var_1 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_1 = module_0.Node()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()

def test_case_1441():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    with pytest.raises(IndexError):
        double_linked_list_0.pop()

def test_case_1442():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_2.append(node_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = queue_5.size()
    assert var_2 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_8 = module_0.Queue(complex_0)
    assert f'{type(queue_8).__module__}.{type(queue_8).__qualname__}' == 'queue4.Queue'
    var_3 = queue_8.size()
    assert var_3 == 1
    queue_9 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_4 = queue_9.size()
    assert var_4 == 0
    queue_10 = module_0.Queue()

def test_case_1443():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    var_1 = queue_2.dequeue()
    assert var_1 == 77
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    var_3 = queue_5.enqueue(set_3)
    node_4 = module_0.Node()
    bytes_1 = b'\xf1\xd6\x07\xd2b<W'
    dict_0 = {node_4: node_4, queue_4: bytes_1}

def test_case_1444():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    with pytest.raises(IndexError):
        double_linked_list_0.pop()

def test_case_1445():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    var_2 = queue_2.size()
    assert var_2 == 1
    var_3 = queue_2.dequeue()
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_0 = None
    queue_6 = module_0.Queue(none_type_0)
    node_0 = module_0.Node()
    var_4 = node_0.__repr__()
    assert var_4 == 'Value: None'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    var_5 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_6 = double_linked_list_1.append(queue_7)
    node_1 = module_0.Node()
    var_7 = node_1.__repr__()
    assert var_7 == 'Value: None'
    queue_8 = module_0.Queue(node_1)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_2)
    var_8 = queue_9.dequeue()
    assert var_8 == 77
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    queue_13 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    node_3 = module_0.Node()
    var_9 = queue_12.size()
    assert var_9 == 0
    var_10 = node_2.__repr__()
    assert var_10 == 'Value: None'
    queue_14 = module_0.Queue()
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    var_11 = queue_14.size()
    assert var_11 == 0
    queue_15 = module_0.Queue()
    var_12 = queue_15.peek()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    var_13 = queue_7.peek()
    assert var_13 == 77

def test_case_1446():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    none_type_0 = None
    node_1 = module_0.Node(prev=none_type_0)
    complex_0 = 2886.801252 + 1418.99508j
    queue_3 = module_0.Queue(complex_0)
    var_2 = queue_3.size()
    assert var_2 == 1
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    none_type_1 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_1)
    var_4 = queue_3.enqueue(set_1)
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_5 = queue_5.peek()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_6 = queue_6.size()
    assert var_6 == 0
    var_7 = queue_5.size()
    assert var_7 == 0

def test_case_1447():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.peek()
    node_2 = module_0.Node()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_4.peek()
    queue_5 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_3 = queue_5.size()
    assert var_3 == 0
    var_4 = queue_4.size()
    assert var_4 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    queue_7 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_5 = queue_7.size()
    assert var_5 == 0
    queue_8 = module_0.Queue()

def test_case_1448():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()

def test_case_1449():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    node_3 = module_0.Node(prev=none_type_0)
    queue_5 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_4 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_5 = double_linked_list_2.append(set_5)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    complex_0 = 2886.801252 + 1418.99508j
    queue_11 = module_0.Queue(complex_0)
    var_6 = queue_11.size()
    assert var_6 == 1
    queue_12 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_13 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_7 = double_linked_list_3.append(node_8)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_8 = queue_13.enqueue(queue_12)

def test_case_1450():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Node'
    assert var_3.data is None
    assert var_3.next is None
    assert var_3.prev == {*()}
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    queue_5 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_5 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_6 = var_5.__repr__()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    node_7 = module_0.Node()
    var_7 = node_7.__repr__()
    assert var_7 == 'Value: None'
    queue_9 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_8 = queue_9.size()
    assert var_8 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    queue_13 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_9 = set()
    node_10 = module_0.Node(prev=set_9)
    var_9 = double_linked_list_3.append(node_10)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'

def test_case_1451():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_0)
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_2 = queue_1.size()
    assert var_2 == 0
    queue_2 = module_0.Queue()
    int_0 = 220

def test_case_1452():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    queue_2 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    var_3 = queue_2.peek()

def test_case_1453():
    none_type_0 = None
    queue_0 = module_0.Queue(none_type_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'

def test_case_1454():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    queue_2 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_2 = var_1.__repr__()

def test_case_1455():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    var_2 = queue_1.dequeue()
    assert var_2 == 77
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    var_4 = queue_4.enqueue(set_1)

def test_case_1456():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    var_2 = queue_2.size()
    assert var_2 == 1
    var_3 = queue_2.dequeue()
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_4 = queue_3.peek()
    node_1 = module_0.Node()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_5 = queue_4.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    double_linked_list_2 = module_0.DoubleLinkedList(var_5)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    var_6 = node_3.__repr__()
    assert var_6 == 'Value: None'
    queue_7 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_7 = double_linked_list_4.append(node_5)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_8 = queue_7.size()
    assert var_8 == 0

def test_case_1457():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77
    complex_0 = 2886.801252 + 1418.99508j
    queue_3 = module_0.Queue(complex_0)
    var_3 = queue_3.size()
    assert var_3 == 1
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(none_type_0)
    var_5 = queue_3.enqueue(set_1)
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_6 = queue_5.peek()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_7 = queue_6.size()
    assert var_7 == 0
    var_8 = queue_5.size()
    assert var_8 == 0
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_7 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_5 = module_0.Node()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_10 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_7 = module_0.Node()
    var_9 = queue_9.size()
    assert var_9 == 0
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    none_type_1 = None
    queue_17 = module_0.Queue(none_type_1)
    queue_18 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_19 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_10 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_20 = module_0.Queue(queue_19)
    var_11 = queue_18.peek()
    queue_21 = module_0.Queue()
    queue_22 = module_0.Queue()
    queue_23 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_12 = queue_23.peek()

def test_case_1458():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    queue_2 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_1 = double_linked_list_1.append(node_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_2.size()
    assert var_2 == 0

def test_case_1459():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_2 = module_0.Queue(node_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    var_1 = queue_3.dequeue()
    assert var_1 == 77
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_5.size()
    assert var_2 == 0
    queue_6 = module_0.Queue()
    var_3 = queue_6.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_1.append(queue_7)

def test_case_1460():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_2 = module_0.Node()
    var_1 = queue_3.size()
    assert var_1 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    node_4 = module_0.Node()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    none_type_0 = None
    queue_10 = module_0.Queue(none_type_0)
    queue_11 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_4 = queue_11.peek()
    queue_12 = module_0.Queue(queue_11)
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_5 = var_4.__repr__()

def test_case_1461():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    var_4 = queue_4.peek()
    queue_5 = module_0.Queue()

def test_case_1462():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Node'
    assert var_3.data is None
    assert var_3.next is None
    assert var_3.prev == {*()}

def test_case_1463():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_0)
    none_type_0 = None
    node_0 = module_0.Node(prev=none_type_0)
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)

def test_case_1464():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_0)
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_2 = queue_1.size()
    assert var_2 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_4 = node_1.__repr__()
    assert var_4 == 'Value: None'
    node_2 = module_0.Node()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_5 = queue_3.peek()
    node_4 = module_0.Node()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    node_5 = module_0.Node()
    var_6 = node_5.__repr__()
    assert var_6 == 'Value: None'
    queue_6 = module_0.Queue(node_5)
    queue_7 = module_0.Queue()
    set_2 = set()
    node_6 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_7 = module_0.Node(prev=set_3)
    var_7 = double_linked_list_2.append(node_7)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_8 = queue_7.size()
    assert var_8 == 0
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    none_type_0 = None
    queue_9 = module_0.Queue()
    var_9 = queue_9.enqueue(none_type_0)
    set_5 = set()
    node_9 = module_0.Node(prev=set_5)
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_10 = node_9.__repr__()
    assert var_10 == 'Value: None'
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_6 = set()
    node_10 = module_0.Node(prev=set_6)
    queue_13 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_11 = module_0.Node()
    var_11 = queue_12.size()
    assert var_11 == 0

def test_case_1465():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_1.append(queue_0)
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_4.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    double_linked_list_5 = module_0.DoubleLinkedList(var_3)
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_7 = module_0.Queue()
    var_4 = queue_7.peek()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    queue_10 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_5 = queue_10.peek()
    none_type_0 = None
    node_4 = module_0.Node(prev=none_type_0)
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_11 = module_0.Queue()
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    queue_12 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_6 = queue_12.size()
    assert var_6 == 0
    with pytest.raises(IndexError):
        double_linked_list_6.shift()

def test_case_1466():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    none_type_0 = None
    node_2 = module_0.Node(prev=none_type_0)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_2 = double_linked_list_1.append(node_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_4.enqueue(queue_3)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_5 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_4 = double_linked_list_3.append(node_6)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_5.size()
    assert var_5 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    queue_8 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_6 = queue_8.size()
    assert var_6 == 0
    queue_9 = module_0.Queue()
    var_7 = queue_8.size()
    assert var_7 == 0
    queue_10 = module_0.Queue()

def test_case_1467():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = var_1.__repr__()
    assert var_2 == '0'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue(queue_7)
    var_5 = queue_6.peek()
    var_6 = queue_8.size()
    assert var_6 == 1
    var_7 = queue_8.dequeue()
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'queue4.Queue'
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_2)
    queue_10 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_8 = queue_10.size()
    assert var_8 == 0
    queue_11 = module_0.Queue()
    var_9 = queue_10.size()
    assert var_9 == 0
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_10 = queue_13.size()
    assert var_10 == 0
    none_type_0 = None

def test_case_1468():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    queue_2 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_2 = var_1.__repr__()
    queue_4 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_4 = queue_5.peek()

def test_case_1469():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_3.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'

def test_case_1470():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    var_1 = queue_2.dequeue()
    assert var_1 == 77
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    var_3 = queue_4.peek()
    with pytest.raises(ValueError):
        double_linked_list_1.remove(set_1)

def test_case_1471():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == 77
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = queue_2.size()
    assert var_3 == 0
    var_4 = queue_1.size()
    assert var_4 == 0

def test_case_1472():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = var_1.__repr__()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_0)
    queue_5 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_4 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue(queue_6)
    var_5 = queue_5.peek()
    var_6 = queue_7.size()
    assert var_6 == 1
    var_7 = queue_7.dequeue()
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'queue4.Queue'
    queue_8 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    var_8 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue(queue_9)
    var_9 = queue_8.peek()
    queue_11 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_10 = queue_11.size()
    assert var_10 == 0
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_14 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    queue_15 = module_0.Queue()
    var_11 = queue_15.peek()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()

def test_case_1473():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_1.peek()
    node_2 = module_0.Node()
    queue_2 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_1 = double_linked_list_1.append(node_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'queue4.Node'
    assert var_2.data is None
    assert var_2.next is None
    assert var_2.prev == {*()}
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    queue_5 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    var_4 = queue_5.size()
    assert var_4 == 0
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_7 = module_0.Node()
    var_5 = queue_8.size()
    assert var_5 == 0
    var_6 = node_6.__repr__()
    assert var_6 == 'Value: None'
    node_8 = module_0.Node()
    var_7 = node_8.__repr__()
    assert var_7 == 'Value: None'
    queue_10 = module_0.Queue(node_8)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_1)
    var_8 = queue_11.dequeue()
    assert var_8 == 77
    queue_12 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_2)
    var_9 = queue_13.dequeue()
    assert var_9 == 77

def test_case_1474():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_5 = module_0.Queue()
    var_2 = queue_5.peek()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_6.size()
    assert var_3 == 0
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()

def test_case_1475():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_3.enqueue(queue_2)
    node_4 = module_0.Node()
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_6 = module_0.Node()

def test_case_1476():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue(queue_4)
    var_3 = queue_3.peek()
    var_4 = queue_5.size()
    assert var_4 == 1
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_5 = queue_6.peek()
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_6 = queue_7.size()
    assert var_6 == 0
    var_7 = queue_6.size()
    assert var_7 == 0
    node_3 = module_0.Node()
    var_8 = node_3.__repr__()
    assert var_8 == 'Value: None'
    queue_8 = module_0.Queue(node_3)
    queue_9 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_9 = queue_9.size()
    assert var_9 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_10 = queue_10.peek()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_12 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_15 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_11 = queue_15.peek()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_16 = module_0.Queue(bytes_2)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    double_linked_list_5 = module_0.DoubleLinkedList(var_11)
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)

def test_case_1477():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)

def test_case_1478():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    node_3 = module_0.Node()
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(none_type_0)

def test_case_1479():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = var_1.__repr__()
    assert var_2 == '0'
    complex_0 = 2886.801252 + 1418.99508j
    queue_3 = module_0.Queue(complex_0)
    var_3 = queue_3.size()
    assert var_3 == 1
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_4 = queue_4.enqueue(none_type_0)
    var_5 = queue_3.enqueue(set_1)

def test_case_1480():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    var_2 = queue_0.enqueue(set_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_4 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    var_5 = queue_6.enqueue(set_2)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    var_6 = queue_7.dequeue()
    assert var_6 == 77
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_9 = module_0.Queue()
    var_7 = queue_9.peek()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_12 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_13 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_8 = double_linked_list_3.append(node_6)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_7 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_1)
    queue_15 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_9 = queue_15.size()
    assert var_9 == 0
    queue_16 = module_0.Queue()
    var_10 = queue_15.size()
    assert var_10 == 0
    var_11 = var_10.__repr__()
    assert var_11 == '0'
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    none_type_1 = None
    queue_20 = module_0.Queue(none_type_1)
    queue_21 = module_0.Queue()
    queue_22 = module_0.Queue()
    queue_23 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_12 = queue_23.peek()
    node_10 = module_0.Node()

def test_case_1481():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    queue_3 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue(queue_4)
    var_3 = queue_3.peek()
    complex_0 = 2886.801252 + 1418.99508j
    queue_6 = module_0.Queue(complex_0)
    var_4 = queue_6.size()
    assert var_4 == 1
    queue_7 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_5 = queue_7.size()
    assert var_5 == 0
    queue_8 = module_0.Queue()
    var_6 = queue_8.peek()

def test_case_1482():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    complex_0 = 2886.801252 + 1418.99508j
    queue_1 = module_0.Queue(complex_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_1 = queue_1.size()
    assert var_1 == 1
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_1)
    var_3 = queue_1.enqueue(set_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_1.append(queue_3)
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_6 = queue_4.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    double_linked_list_3 = module_0.DoubleLinkedList(var_6)
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_7 = module_0.Queue()
    var_7 = queue_7.peek()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    none_type_2 = None
    queue_13 = module_0.Queue(none_type_2)

def test_case_1483():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_2 = module_0.Queue(complex_0)
    var_2 = queue_2.size()
    assert var_2 == 1
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(none_type_0)
    var_4 = queue_2.enqueue(set_0)
    node_3 = module_0.Node()
    var_5 = node_3.__repr__()
    assert var_5 == 'Value: None'
    queue_4 = module_0.Queue(node_3)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_1 = None
    queue_8 = module_0.Queue(none_type_1)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()

def test_case_1484():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = var_0.__repr__()
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_0.append(node_3)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_2.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_4 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    var_5 = queue_5.enqueue(set_4)
    queue_6 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_6 = queue_6.size()
    assert var_6 == 0
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_7 = queue_2.size()
    assert var_7 == 0

def test_case_1485():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'

def test_case_1486():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_2 = module_0.Queue(complex_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    var_0 = queue_2.size()
    assert var_0 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_0)
    var_2 = queue_2.enqueue(set_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    node_3 = module_0.Node()
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    queue_5 = module_0.Queue(node_3)
    queue_6 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_4 = queue_6.peek()
    node_5 = module_0.Node()
    var_5 = node_5.__repr__()
    assert var_5 == 'Value: None'
    node_6 = module_0.Node()
    var_6 = node_6.__repr__()
    assert var_6 == 'Value: None'
    queue_7 = module_0.Queue(node_6)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    var_7 = queue_8.dequeue()
    assert var_7 == 77
    queue_9 = module_0.Queue()

def test_case_1487():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'

def test_case_1488():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_3 = double_linked_list_2.append(node_5)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    assert f'{type(queue_8).__module__}.{type(queue_8).__qualname__}' == 'queue4.Queue'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue(queue_8)
    queue_10 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_5 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_12 = module_0.Queue(queue_11)
    var_6 = queue_10.peek()
    var_7 = queue_12.size()
    assert var_7 == 1
    var_8 = queue_12.dequeue()
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'queue4.Queue'
    queue_13 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_14 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_9 = double_linked_list_5.append(node_7)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    node_8 = module_0.Node()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_2)
    queue_16 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_10 = queue_16.size()
    assert var_10 == 0
    queue_17 = module_0.Queue()
    var_11 = queue_16.size()
    assert var_11 == 0
    queue_18 = module_0.Queue()
    var_12 = queue_2.size()
    assert var_12 == 0

def test_case_1489():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
    assert var_1.data is None
    assert var_1.next is None
    assert var_1.prev == {*()}
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_3.enqueue(queue_2)
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_5 = module_0.Queue()
    var_4 = queue_5.peek()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_8 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    assert f'{type(queue_9).__module__}.{type(queue_9).__qualname__}' == 'queue4.Queue'
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_5 = double_linked_list_4.append(bytes_0)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue(queue_9)
    var_6 = queue_8.peek()
    var_7 = queue_10.size()
    assert var_7 == 1
    queue_11 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_12 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    var_8 = double_linked_list_5.append(node_7)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    node_8 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_1)
    var_9 = queue_13.dequeue()
    assert var_9 == 77
    queue_14 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_10 = queue_14.size()
    assert var_10 == 0
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    set_9 = set()
    node_10 = module_0.Node(prev=set_9)
    var_11 = queue_15.peek()

def test_case_1490():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()

def test_case_1491():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    var_1 = queue_2.peek()
    queue_5 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_2 = queue_5.size()
    assert var_2 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_0 = None
    node_1 = module_0.Node(prev=none_type_0)
    queue_8 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = queue_8.size()
    assert var_3 == 0
    queue_9 = module_0.Queue()

def test_case_1492():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_4.peek()
    node_4 = module_0.Node()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = double_linked_list_2.push(var_3)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_5 = queue_5.peek()
    node_6 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    var_6 = queue_6.dequeue()
    assert var_6 == 77
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_8 = module_0.Queue()
    var_7 = queue_8.peek()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_11 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_8 = queue_11.peek()
    queue_12 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_9 = queue_12.size()
    assert var_9 == 0
    var_10 = queue_11.size()
    assert var_10 == 0

def test_case_1493():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    var_3 = queue_5.enqueue(set_1)
    node_2 = module_0.Node()
    var_4 = node_2.__repr__()
    assert var_4 == 'Value: None'
    var_5 = queue_2.peek()

def test_case_1494():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    var_1 = queue_2.size()
    assert var_1 == 0
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    with pytest.raises(IndexError):
        double_linked_list_0.shift()

def test_case_1495():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.size()
    assert var_2 == 0

def test_case_1496():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    node_1 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    queue_3 = module_0.Queue()
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_3 = double_linked_list_2.append(node_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_4 = queue_6.peek()
    queue_7 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_5 = queue_7.peek()
    node_7 = module_0.Node()
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    none_type_0 = None
    queue_8 = module_0.Queue()
    var_6 = queue_8.enqueue(none_type_0)
    queue_9 = module_0.Queue()
    set_5 = set()
    node_9 = module_0.Node(prev=set_5)
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_6 = set()
    node_10 = module_0.Node(prev=set_6)
    var_7 = double_linked_list_3.append(node_10)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_8 = double_linked_list_3.shift()
    assert double_linked_list_3.tail is None
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'queue4.Node'
    assert var_8.data is None
    assert var_8.next is None
    assert var_8.prev == {*()}

def test_case_1497():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_8 = module_0.Queue()
    var_3 = queue_8.peek()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_4 = module_0.Node()
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    queue_11 = module_0.Queue(node_4)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    var_5 = queue_12.dequeue()
    assert var_5 == 77
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_6 = queue_14.size()
    assert var_6 == 0
    queue_15 = module_0.Queue()
    var_7 = queue_15.peek()
    queue_16 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_8 = queue_16.peek()
    queue_17 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_18 = module_0.Queue(bytes_2)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_9 = double_linked_list_3.append(bytes_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_19 = module_0.Queue(queue_18)
    var_10 = queue_17.peek()
    var_11 = queue_19.size()
    assert var_11 == 1
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_20 = module_0.Queue(bytes_3)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_12 = double_linked_list_4.append(bytes_3)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'

def test_case_1498():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_1 = queue_1.enqueue(set_0)
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_3.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    node_3 = module_0.Node()
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    queue_6 = module_0.Queue(node_3)
    var_5 = queue_6.enqueue(var_4)
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    complex_0 = 2886.801252 + 1418.99508j
    queue_7 = module_0.Queue(complex_0)
    var_6 = queue_7.size()
    assert var_6 == 1
    queue_8 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_7 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue(queue_9)
    var_8 = queue_8.peek()
    var_9 = queue_10.size()
    assert var_9 == 1
    var_10 = queue_10.dequeue()
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'queue4.Queue'
    queue_11 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_11 = queue_11.peek()
    queue_12 = module_0.Queue(queue_11)
    queue_13 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_12 = queue_13.peek()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_2)
    double_linked_list_2 = module_0.DoubleLinkedList()
    double_linked_list_3 = module_0.DoubleLinkedList(var_12)

def test_case_1499():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_1.enqueue(queue_0)
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_2.size()
    assert var_3 == 0

def test_case_1500():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    var_1 = queue_1.dequeue()
    assert var_1 == 77
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    queue_6 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_3 = queue_6.size()
    assert var_3 == 0
    queue_7 = module_0.Queue()
    var_4 = queue_6.size()
    assert var_4 == 0
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_5 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_6 = var_5.__repr__()

def test_case_1501():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_0)
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = double_linked_list_1.append(node_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)

def test_case_1502():
    none_type_0 = None
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    with pytest.raises(ValueError):
        double_linked_list_0.remove(none_type_0)

def test_case_1503():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    node_2 = module_0.Node()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.push(var_1)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    var_3 = queue_3.dequeue()
    assert var_3 == 77
    complex_0 = 2886.801252 + 1418.99508j
    queue_4 = module_0.Queue(complex_0)
    var_4 = queue_4.size()
    assert var_4 == 1
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_5 = queue_5.enqueue(none_type_0)
    var_6 = queue_4.enqueue(set_2)
    queue_6 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_7 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_8 = var_7.__repr__()

def test_case_1504():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()

def test_case_1505():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.push(var_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    queue_3 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    var_3 = queue_3.size()
    assert var_3 == 0
    var_4 = var_3.__repr__()
    assert var_4 == '0'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    queue_6 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_5 = queue_6.size()
    assert var_5 == 0
    queue_7 = module_0.Queue()
    var_6 = queue_6.size()
    assert var_6 == 0
    queue_8 = module_0.Queue()
    node_5 = module_0.Node()
    var_7 = node_5.__repr__()
    assert var_7 == 'Value: None'
    queue_9 = module_0.Queue(node_5)
    var_8 = queue_9.enqueue(var_7)
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    none_type_1 = None
    queue_13 = module_0.Queue(none_type_1)
    with pytest.raises(ValueError):
        double_linked_list_0.remove(queue_3)

def test_case_1506():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'

def test_case_1507():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_1 = queue_0.enqueue(var_0)
    queue_1 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_2.enqueue(queue_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_4 = module_0.Node()
    var_4 = queue_4.size()
    assert var_4 == 0
    var_5 = queue_3.size()
    assert var_5 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue(queue_6)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_8 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_7 = double_linked_list_4.append(node_6)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_8 = queue_8.size()
    assert var_8 == 0
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_10 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_9 = node_7.__repr__()
    assert var_9 == 'Value: None'
    none_type_0 = None
    node_8 = module_0.Node(prev=none_type_0)
    complex_0 = 2886.801252 + 1418.99508j
    queue_11 = module_0.Queue(complex_0)
    var_10 = queue_11.size()
    assert var_10 == 1
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    none_type_1 = None
    queue_12 = module_0.Queue()
    var_11 = queue_12.enqueue(none_type_1)
    var_12 = queue_11.enqueue(set_6)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    set_7 = set()
    node_10 = module_0.Node(prev=set_7)
    queue_15 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    node_11 = module_0.Node()
    var_13 = queue_14.size()
    assert var_13 == 0
    with pytest.raises(ValueError):
        double_linked_list_6.remove(set_2)

def test_case_1508():
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.peek()

def test_case_1509():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_1 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_2 = queue_4.enqueue(none_type_0)
    queue_5 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_3 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    var_4 = queue_6.enqueue(set_5)
    bool_0 = False

def test_case_1510():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_3 = module_0.Node()
    queue_2 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_2 = var_1.__repr__()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_0 = None
    queue_7 = module_0.Queue(none_type_0)
    queue_8 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_3 = queue_8.size()
    assert var_3 == 0
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_12 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_4 = double_linked_list_1.append(node_8)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Node'
    assert var_5.data is None
    assert var_5.next is None
    assert var_5.prev == {*()}
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_1)
    var_6 = queue_14.dequeue()
    assert var_6 == 77

def test_case_1511():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1

def test_case_1512():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_3 = queue_6.peek()
    node_5 = module_0.Node()

def test_case_1513():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    var_2 = queue_1.size()
    assert var_2 == 0
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue(queue_4)
    var_4 = queue_3.peek()
    var_5 = queue_5.size()
    assert var_5 == 1
    var_6 = queue_5.dequeue()
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'queue4.Queue'
    none_type_0 = None
    node_3 = module_0.Node(prev=none_type_0)
    queue_6 = module_0.Queue()
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    var_7 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    var_8 = queue_7.enqueue(set_1)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_2)
    queue_9 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_9 = queue_9.size()
    assert var_9 == 0
    queue_10 = module_0.Queue()
    var_10 = queue_9.size()
    assert var_10 == 0
    var_11 = var_10.__repr__()
    assert var_11 == '0'
    queue_11 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_12 = queue_11.peek()
    queue_12 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_13 = queue_12.size()
    assert var_13 == 0
    queue_13 = module_0.Queue()
    var_14 = queue_13.peek()
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_3)
    queue_15 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    var_15 = queue_15.size()
    assert var_15 == 0
    queue_16 = module_0.Queue()
    var_16 = queue_15.size()
    assert var_16 == 0
    var_17 = queue_14.peek()
    assert var_17 == 77

def test_case_1514():
    float_0 = -1169.7574
    bytes_0 = b'5\x87\x19\xfb'
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(set_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    with pytest.raises(ValueError):
        double_linked_list_1.remove(float_0)

def test_case_1515():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    node_1 = module_0.Node()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    var_1 = queue_4.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_6.size()
    assert var_2 == 0
    queue_7 = module_0.Queue()
    var_3 = queue_6.size()
    assert var_3 == 0
    var_4 = var_3.__repr__()
    assert var_4 == '0'
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    queue_8 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_5 = queue_8.peek()
    none_type_1 = None
    node_6 = module_0.Node(prev=none_type_1)
    node_7 = module_0.Node()
    var_6 = node_7.__repr__()
    assert var_6 == 'Value: None'
    queue_9 = module_0.Queue(node_7)
    var_7 = queue_9.enqueue(var_6)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_8 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_11 = module_0.Queue(queue_10)
    int_0 = 4226

def test_case_1516():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_4.size()
    assert var_0 == 0
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_5.size()
    assert var_1 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_6.peek()
    node_3 = module_0.Node()
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    assert f'{type(queue_8).__module__}.{type(queue_8).__qualname__}' == 'queue4.Queue'
    queue_9 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = queue_9.size()
    assert var_4 == 0
    queue_10 = module_0.Queue()
    var_5 = queue_9.size()
    assert var_5 == 0
    var_6 = queue_8.peek()
    assert var_6 == 77
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_7 = double_linked_list_3.append(set_4)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'

def test_case_1517():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_1 = queue_0.enqueue(var_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = node_1.__repr__()
    assert var_3 == 'Value: None'
    complex_0 = 2886.801252 + 1418.99508j
    queue_3 = module_0.Queue(complex_0)
    var_4 = queue_3.size()
    assert var_4 == 1
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_5 = queue_4.enqueue(none_type_0)
    var_6 = queue_3.enqueue(set_1)

def test_case_1518():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_3 = module_0.Node()
    var_1 = queue_5.size()
    assert var_1 == 0
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_7 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    assert f'{type(queue_8).__module__}.{type(queue_8).__qualname__}' == 'queue4.Queue'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_3 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue(queue_8)
    var_4 = queue_7.peek()
    queue_10 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_5 = double_linked_list_4.append(node_5)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_6 = queue_10.size()
    assert var_6 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_7 = double_linked_list_5.append(bytes_1)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    queue_13 = module_0.Queue(queue_12)
    queue_14 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_8 = queue_14.peek()
    node_7 = module_0.Node()
    none_type_1 = None
    node_8 = module_0.Node(prev=none_type_1)
    set_5 = set()
    node_9 = module_0.Node(prev=set_5)
    queue_15 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    set_6 = set()
    node_10 = module_0.Node(prev=set_6)
    var_9 = double_linked_list_6.append(queue_9)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'

def test_case_1519():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    var_1 = queue_1.dequeue()
    assert var_1 == 77
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue(queue_4)
    var_3 = queue_3.peek()
    var_4 = queue_5.size()
    assert var_4 == 1
    var_5 = queue_5.dequeue()
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Queue'
    queue_6 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_6 = queue_6.size()
    assert var_6 == 0
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_7 = queue_7.peek()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_2)
    double_linked_list_1 = module_0.DoubleLinkedList()
    var_8 = double_linked_list_1.append(bytes_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_9 = double_linked_list_1.append(queue_9)
    complex_0 = 2886.801252 + 1418.99508j
    queue_10 = module_0.Queue(complex_0)
    var_10 = queue_10.size()
    assert var_10 == 1
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_3)
    double_linked_list_2 = module_0.DoubleLinkedList()
    var_11 = double_linked_list_2.append(bytes_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_12 = node_3.__repr__()
    assert var_12 == 'Value: None'
    node_4 = module_0.Node()
    bool_0 = True
    double_linked_list_3 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'

def test_case_1520():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    var_1 = queue_1.dequeue()
    assert var_1 == 77
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_7 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = double_linked_list_0.append(node_3)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'queue4.Node'
    assert var_4.data is None
    assert var_4.next is None
    assert var_4.prev == {*()}
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_5 = queue_10.size()
    assert var_5 == 0
    node_5 = module_0.Node()
    var_6 = node_5.__repr__()
    assert var_6 == 'Value: None'
    queue_11 = module_0.Queue(node_5)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    queue_13 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_7 = queue_13.size()
    assert var_7 == 0
    queue_14 = module_0.Queue()
    var_8 = queue_13.size()
    assert var_8 == 0
    queue_15 = module_0.Queue()

def test_case_1521():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = var_1.__repr__()
    assert var_2 == '0'
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_7 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    var_3 = queue_6.size()
    assert var_3 == 0
    var_4 = node_1.__repr__()
    assert var_4 == 'Value: None'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    var_5 = queue_8.dequeue()
    assert var_5 == 77
    queue_9 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_2)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_6 = double_linked_list_1.append(bytes_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_11 = module_0.Queue(queue_10)
    var_7 = queue_9.peek()
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_3)
    queue_13 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_8 = queue_13.size()
    assert var_8 == 0
    queue_14 = module_0.Queue()
    var_9 = queue_13.size()
    assert var_9 == 0

def test_case_1522():
    float_0 = -489.3
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(float_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'

def test_case_1523():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = queue_6.size()
    assert var_2 == 0
    queue_7 = module_0.Queue()
    var_3 = queue_6.size()
    assert var_3 == 0
    var_4 = var_3.__repr__()
    assert var_4 == '0'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_6 = double_linked_list_3.append(queue_8)
    queue_9 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_7 = queue_9.size()
    assert var_7 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_14 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_6 = module_0.Node()
    var_8 = queue_13.size()
    assert var_8 == 0
    var_9 = queue_12.size()
    assert var_9 == 0
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_15 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_18 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_10 = queue_18.peek()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_19 = module_0.Queue(bytes_2)
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    double_linked_list_8 = module_0.DoubleLinkedList(var_10)
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None

def test_case_1524():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_1.enqueue(queue_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    var_2 = queue_2.dequeue()
    assert var_2 == 77
    queue_3 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue(queue_4)
    var_4 = queue_3.peek()
    node_2 = module_0.Node()
    var_5 = node_2.__repr__()
    assert var_5 == 'Value: None'
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_2)
    queue_7 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_6 = queue_7.size()
    assert var_6 == 0
    queue_8 = module_0.Queue()
    var_7 = queue_7.size()
    assert var_7 == 0
    queue_9 = module_0.Queue()
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_3)
    queue_11 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_8 = queue_11.size()
    assert var_8 == 0
    queue_12 = module_0.Queue()
    var_9 = queue_11.size()
    assert var_9 == 0
    queue_13 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_10 = queue_13.peek()
    bytes_4 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_4)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    double_linked_list_3 = module_0.DoubleLinkedList(var_10)
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_15 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_16 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_11 = double_linked_list_4.append(node_7)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_12 = queue_15.size()
    assert var_12 == 0

def test_case_1525():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    var_1 = queue_4.peek()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = queue_7.size()
    assert var_2 == 0
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_3 = queue_7.size()
    assert var_3 == 0
    queue_9 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_4 = queue_9.size()
    assert var_4 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_0)
    assert f'{type(queue_12).__module__}.{type(queue_12).__qualname__}' == 'queue4.Queue'
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_13 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_14 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_5 = queue_16.size()
    assert var_5 == 0
    node_7 = module_0.Node()
    queue_17 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    queue_18 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_6 = double_linked_list_7.append(node_9)
    assert f'{type(double_linked_list_7.head).__module__}.{type(double_linked_list_7.head).__qualname__}' == 'queue4.Node'
    var_7 = queue_17.size()
    assert var_7 == 0
    with pytest.raises(ValueError):
        double_linked_list_7.remove(double_linked_list_1)

def test_case_1526():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    none_type_0 = None
    node_0 = module_0.Node(prev=none_type_0)
    var_0 = queue_1.enqueue(queue_0)

def test_case_1527():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    var_1 = queue_3.peek()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_3.append(node_3)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_6.size()
    assert var_3 == 0
    node_4 = module_0.Node()
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    queue_8 = module_0.Queue(node_4)
    assert f'{type(queue_8).__module__}.{type(queue_8).__qualname__}' == 'queue4.Queue'
    var_5 = queue_8.enqueue(var_4)
    queue_9 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_6 = double_linked_list_4.append(node_6)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_7 = queue_10.enqueue(queue_9)
    queue_11 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_12 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_8 = double_linked_list_5.append(node_8)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_9 = double_linked_list_5.shift()
    assert double_linked_list_5.tail is None
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'queue4.Node'
    assert var_9.data is None
    assert var_9.next is None
    assert var_9.prev == {*()}
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    queue_13 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_14 = module_0.Queue()
    set_9 = set()
    node_10 = module_0.Node(prev=set_9)
    var_10 = queue_14.size()
    assert var_10 == 0
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()

def test_case_1528():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_1 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_0 = None
    queue_7 = module_0.Queue(none_type_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_3 = queue_8.size()
    assert var_3 == 0

def test_case_1529():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    queue_6 = module_0.Queue(queue_4)
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_7.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    double_linked_list_3 = module_0.DoubleLinkedList(var_2)
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None

def test_case_1530():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_4.peek()
    node_2 = module_0.Node()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_5.size()
    assert var_2 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    none_type_0 = None
    queue_11 = module_0.Queue(none_type_0)
    queue_12 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_0)
    assert f'{type(queue_13).__module__}.{type(queue_13).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_14 = module_0.Queue(queue_13)
    var_4 = queue_12.peek()
    var_5 = queue_14.size()
    assert var_5 == 1
    var_6 = queue_14.dequeue()
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'queue4.Queue'
    with pytest.raises(IndexError):
        double_linked_list_0.pop()

def test_case_1531():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    with pytest.raises(IndexError):
        double_linked_list_0.shift()

def test_case_1532():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0

def test_case_1533():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.size()
    assert var_2 == 0
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    var_3 = queue_3.peek()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    queue_8 = module_0.Queue(queue_6)
    queue_9 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_5 = double_linked_list_2.append(node_5)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_6 = queue_9.size()
    assert var_6 == 0
    queue_11 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_7 = queue_11.peek()
    node_7 = module_0.Node()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_8 = var_7.__repr__()
    queue_14 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    queue_15 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_9 = double_linked_list_3.append(node_9)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    set_9 = set()
    node_10 = module_0.Node(prev=set_9)
    queue_16 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_10 = queue_18.size()
    assert var_10 == 0
    none_type_0 = None
    node_11 = module_0.Node(none_type_0)
    queue_19 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_20 = module_0.Queue(bytes_0)
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_11 = double_linked_list_6.append(bytes_0)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    queue_21 = module_0.Queue(queue_20)
    var_12 = queue_19.peek()

def test_case_1534():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_4.size()
    assert var_4 == 0
    queue_6 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_5 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue(queue_7)
    var_6 = queue_6.peek()
    var_7 = queue_8.size()
    assert var_7 == 1

def test_case_1535():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    var_2 = queue_2.size()
    assert var_2 == 1
    var_3 = queue_2.dequeue()
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)

def test_case_1536():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == 77
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_6.size()
    assert var_2 == 0
    queue_7 = module_0.Queue()
    var_3 = queue_6.size()
    assert var_3 == 0
    queue_8 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_2)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = double_linked_list_2.append(bytes_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_5 = node_2.__repr__()
    assert var_5 == 'Value: None'
    node_3 = module_0.Node()
    queue_10 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_6 = double_linked_list_3.append(node_5)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_7 = queue_10.size()
    assert var_7 == 0
    queue_12 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_13 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_8 = double_linked_list_4.append(node_7)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_9 = queue_13.enqueue(queue_12)
    queue_14 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_10 = queue_14.size()
    assert var_10 == 0
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    queue_17 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_11 = queue_19.size()
    assert var_11 == 0
    set_8 = set()
    node_10 = module_0.Node(prev=set_8)
    queue_20 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    queue_21 = module_0.Queue()
    queue_22 = module_0.Queue()
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None

def test_case_1537():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    var_2 = queue_2.size()
    assert var_2 == 1
    queue_3 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_3 = queue_3.peek()
    node_1 = module_0.Node()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_4 = var_3.__repr__()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_5 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_6 = node_2.__repr__()
    assert var_6 == 'Value: None'
    node_3 = module_0.Node()
    queue_7 = module_0.Queue()
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    var_7 = queue_7.peek()
    queue_8 = module_0.Queue(queue_7)
    var_8 = queue_8.enqueue(set_1)

def test_case_1538():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_0 = None
    queue_4 = module_0.Queue(none_type_0)
    complex_0 = 2886.801252 + 1418.99508j
    queue_5 = module_0.Queue(complex_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    var_1 = queue_5.size()
    assert var_1 == 1

def test_case_1539():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    node_1 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_4.size()
    assert var_1 == 0
    queue_5 = module_0.Queue()
    var_2 = queue_4.size()
    assert var_2 == 0
    var_3 = var_2.__repr__()
    assert var_3 == '0'
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_4 = queue_6.peek()
    node_4 = module_0.Node()
    var_5 = node_4.__repr__()
    assert var_5 == 'Value: None'
    queue_7 = module_0.Queue(node_4)

def test_case_1540():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    with pytest.raises(IndexError):
        double_linked_list_0.shift()

def test_case_1541():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
    assert var_1.data is None
    assert var_1.next is None
    assert var_1.prev == {*()}
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(var_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'

def test_case_1542():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = var_1.__repr__()
    assert var_2 == '0'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_5 = module_0.Queue()
    var_3 = queue_5.peek()
    var_4 = queue_3.peek()

def test_case_1543():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = var_0.__repr__()
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    queue_3 = module_0.Queue(node_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    node_3 = module_0.Node()
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_4 = var_3.__repr__()
    assert var_4 == "'Value: None'"
    queue_4 = module_0.Queue()
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    var_5 = queue_4.size()
    assert var_5 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = double_linked_list_2.append(set_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_0)
    queue_11 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_7 = queue_11.size()
    assert var_7 == 0
    queue_12 = module_0.Queue()
    var_8 = queue_11.size()
    assert var_8 == 0
    var_9 = var_8.__repr__()
    assert var_9 == '0'
    queue_13 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_10 = queue_13.peek()
    node_8 = module_0.Node()
    queue_14 = module_0.Queue()
    set_5 = set()
    node_9 = module_0.Node(prev=set_5)
    var_11 = queue_14.peek()
    node_10 = module_0.Node()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_12 = double_linked_list_3.push(var_11)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    none_type_0 = None
    node_11 = module_0.Node(prev=none_type_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_13 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_14 = double_linked_list_4.append(queue_15)

def test_case_1544():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    var_3 = queue_2.size()
    assert var_3 == 0
    var_4 = var_3.__repr__()
    assert var_4 == '0'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    var_5 = queue_5.peek()
    node_2 = module_0.Node()
    var_6 = node_2.__repr__()
    assert var_6 == 'Value: None'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_7 = var_6.__repr__()
    assert var_7 == "'Value: None'"
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_8 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_9 = var_8.__repr__()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None

def test_case_1545():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = queue_0.size()
    assert var_1 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    var_3 = queue_4.size()
    assert var_3 == 0
    var_4 = queue_3.peek()
    assert var_4 == 77
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_4 = module_0.Node()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = queue_9.size()
    assert var_5 == 0
    queue_10 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_6 = queue_10.size()
    assert var_6 == 0
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_12 = module_0.Queue()
    var_7 = queue_12.peek()
    queue_13 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_8 = queue_13.peek()
    queue_14 = module_0.Queue(queue_13)
    queue_15 = module_0.Queue(queue_13)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_16 = module_0.Queue(bytes_1)
    var_9 = queue_16.dequeue()
    assert var_9 == 77
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_17 = module_0.Queue(bytes_2)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_10 = double_linked_list_5.append(bytes_2)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'

def test_case_1546():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_1 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    queue_6 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_2 = queue_6.peek()
    node_6 = module_0.Node()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_3 = queue_9.size()
    assert var_3 == 0
    queue_10 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_4 = queue_10.peek()
    queue_11 = module_0.Queue(queue_10)
    assert f'{type(queue_11).__module__}.{type(queue_11).__qualname__}' == 'queue4.Queue'
    var_5 = queue_11.enqueue(set_6)
    queue_12 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_6 = queue_12.peek()
    queue_13 = module_0.Queue()
    set_8 = set()
    node_10 = module_0.Node(prev=set_8)
    var_7 = queue_13.size()
    assert var_7 == 0
    var_8 = queue_12.size()
    assert var_8 == 0

def test_case_1547():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_0 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_3.size()
    assert var_1 == 0
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_2 = queue_7.size()
    assert var_2 == 0
    queue_8 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_3 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    assert f'{type(queue_9).__module__}.{type(queue_9).__qualname__}' == 'queue4.Queue'
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_4 = var_3.__repr__()

def test_case_1548():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    var_0 = queue_4.peek()
    queue_5 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_1 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue(queue_6)
    var_2 = queue_5.peek()
    var_3 = queue_7.size()
    assert var_3 == 1
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    queue_9 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = queue_9.size()
    assert var_4 == 0
    queue_10 = module_0.Queue()
    var_5 = queue_9.size()
    assert var_5 == 0
    var_6 = queue_8.peek()
    assert var_6 == 77
    queue_11 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_7 = queue_11.peek()
    queue_12 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_8 = queue_12.size()
    assert var_8 == 0
    var_9 = queue_11.size()
    assert var_9 == 0
    list_0 = [node_3, queue_10, var_7]
    with pytest.raises(ValueError):
        double_linked_list_2.remove(list_0)

def test_case_1549():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = var_0.__repr__()
    assert var_1 == "'Value: None'"

def test_case_1550():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_1551():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = queue_6.peek()
    node_3 = module_0.Node()
    queue_7 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_2)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_5 = double_linked_list_1.append(bytes_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue(queue_8)
    var_6 = queue_7.peek()

def test_case_1552():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.peek()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_2.append(node_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_5.enqueue(queue_4)
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    var_5 = queue_7.dequeue()
    assert var_5 == 77
    queue_8 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_6 = queue_8.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    double_linked_list_5 = module_0.DoubleLinkedList(var_6)
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    node_6 = module_0.Node()
    var_7 = node_6.__repr__()
    assert var_7 == 'Value: None'
    queue_10 = module_0.Queue(node_6)
    var_8 = queue_10.enqueue(var_7)

def test_case_1553():
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    var_0 = queue_0.size()
    assert var_0 == 1
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_1 = module_0.Queue(node_0)
    var_2 = queue_1.enqueue(var_1)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    set_0 = set()
    node_3 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_1554():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()

def test_case_1555():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'

def test_case_1556():
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_0 = double_linked_list_2.append(set_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_1 = queue_5.size()
    assert var_1 == 0
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    queue_7 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_3 = double_linked_list_6.append(bytes_0)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue(queue_8)
    var_4 = queue_7.peek()
    var_5 = queue_9.size()
    assert var_5 == 1
    var_6 = queue_9.dequeue()
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'queue4.Queue'
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_10 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    queue_11 = module_0.Queue()
    var_7 = queue_11.peek()
    queue_12 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_8 = queue_12.size()
    assert var_8 == 0
    queue_13 = module_0.Queue()
    double_linked_list_8 = module_0.DoubleLinkedList()
    var_9 = queue_12.size()
    assert var_9 == 0
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_16 = module_0.Queue()
    double_linked_list_9 = module_0.DoubleLinkedList()
    node_6 = module_0.Node()
    var_10 = queue_15.size()
    assert var_10 == 0
    queue_17 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_11 = queue_17.size()
    assert var_11 == 0
    queue_18 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_12 = queue_18.size()
    assert var_12 == 0
    queue_19 = module_0.Queue()

def test_case_1557():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 0

def test_case_1558():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList(var_1)
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_4 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_3 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue(queue_8)
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_10 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_11 = module_0.Queue()
    var_4 = queue_11.peek()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    none_type_0 = None
    queue_12 = module_0.Queue()
    var_5 = queue_12.enqueue(none_type_0)
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_6 = queue_11.size()
    assert var_6 == 0

def test_case_1559():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_1560():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == 77
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'queue4.Node'
    assert var_2.data is None
    assert var_2.next is None
    assert var_2.prev == {*()}
    node_3 = module_0.Node()
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    queue_3 = module_0.Queue(node_3)
    var_4 = queue_3.enqueue(var_3)
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_5 = queue_7.size()
    assert var_5 == 0
    list_0 = [var_4, none_type_0]

def test_case_1561():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    bool_0 = False

def test_case_1562():
    none_type_0 = None
    node_0 = module_0.Node(prev=none_type_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()

def test_case_1563():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    node_1 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)

def test_case_1564():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_0.push(queue_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    var_3 = queue_4.size()
    assert var_3 == 0
    var_4 = queue_3.peek()
    assert var_4 == 77
    bool_0 = True
    double_linked_list_2 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_4 = module_0.Node()
    var_5 = queue_7.size()
    assert var_5 == 0

def test_case_1565():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_0)
    node_3 = module_0.Node()
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    queue_4 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_4 = double_linked_list_1.append(node_5)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_5.enqueue(queue_4)
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_6 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_6 = queue_6.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    double_linked_list_3 = module_0.DoubleLinkedList(var_6)
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_8 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_7 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    queue_10 = module_0.Queue(queue_8)
    complex_0 = 2886.801252 + 1418.99508j
    queue_11 = module_0.Queue(complex_0)
    var_8 = queue_11.size()
    assert var_8 == 1
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    none_type_1 = None
    queue_12 = module_0.Queue()
    var_9 = queue_12.enqueue(none_type_1)
    var_10 = queue_11.enqueue(set_7)
    queue_13 = module_0.Queue()
    set_8 = set()
    node_10 = module_0.Node(prev=set_8)
    var_11 = queue_13.peek()
    queue_14 = module_0.Queue()
    set_9 = set()
    node_11 = module_0.Node(prev=set_9)
    var_12 = queue_14.size()
    assert var_12 == 0
    var_13 = queue_13.size()
    assert var_13 == 0
    node_12 = module_0.Node()
    var_14 = node_12.__repr__()
    assert var_14 == 'Value: None'
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_15 = var_14.__repr__()
    assert var_15 == "'Value: None'"

def test_case_1566():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue(none_type_0)
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    node_4 = module_0.Node()
    var_3 = node_4.__repr__()
    assert var_3 == 'Value: None'
    queue_8 = module_0.Queue(node_4)
    assert f'{type(queue_8).__module__}.{type(queue_8).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    var_4 = queue_9.dequeue()
    assert var_4 == 77
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_5 = queue_11.peek()
    queue_12 = module_0.Queue(queue_11)
    queue_13 = module_0.Queue(queue_11)
    queue_14 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_15 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_6 = double_linked_list_2.append(node_7)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_16 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_7 = queue_16.peek()
    node_9 = module_0.Node()
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    var_8 = var_7.__repr__()
    set_7 = set()
    node_10 = module_0.Node(prev=set_7)
    queue_19 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None

def test_case_1567():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_2.append(node_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_7 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_2 = queue_7.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    queue_9 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_3 = queue_9.size()
    assert var_3 == 0
    queue_10 = module_0.Queue()
    var_4 = queue_9.size()
    assert var_4 == 0
    var_5 = queue_8.peek()
    assert var_5 == 77
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_2)
    queue_12 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_6 = queue_12.size()
    assert var_6 == 0
    queue_13 = module_0.Queue()
    var_7 = queue_12.size()
    assert var_7 == 0

def test_case_1568():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    node_3 = module_0.Node()
    var_1 = node_3.__repr__()
    assert var_1 == 'Value: None'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = var_1.__repr__()
    assert var_2 == "'Value: None'"
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_2.append(queue_2)
    with pytest.raises(ValueError):
        double_linked_list_1.remove(var_4)

def test_case_1569():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == 77
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_1.peek()
    node_1 = module_0.Node()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    var_2 = queue_3.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_4 = double_linked_list_2.append(node_5)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_6 = module_0.Node()

def test_case_1570():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    var_3 = queue_4.size()
    assert var_3 == 0
    var_4 = queue_3.peek()
    assert var_4 == 77
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_5 = queue_6.size()
    assert var_5 == 0
    queue_7 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_5 = module_0.Node()
    var_6 = node_5.__repr__()
    assert var_6 == 'Value: None'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_7 = var_6.__repr__()
    assert var_7 == "'Value: None'"
    queue_9 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_8 = double_linked_list_2.append(node_7)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_9 = queue_10.enqueue(queue_9)
    complex_0 = 2886.801252 + 1418.99508j
    queue_11 = module_0.Queue(complex_0)
    var_10 = queue_11.size()
    assert var_10 == 1
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_14 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_9 = module_0.Node()
    var_11 = queue_13.size()
    assert var_11 == 0
    var_12 = node_8.__repr__()
    assert var_12 == 'Value: None'

def test_case_1571():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_3.peek()
    queue_5 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue(queue_6)
    var_3 = queue_5.peek()
    var_4 = queue_7.size()
    assert var_4 == 1
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = double_linked_list_2.push(queue_8)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    queue_11 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_12 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_6 = double_linked_list_4.append(node_5)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_7 = double_linked_list_4.shift()
    assert double_linked_list_4.tail is None
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'queue4.Node'
    assert var_7.data is None
    assert var_7.next is None
    assert var_7.prev == {*()}

def test_case_1572():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = queue_3.peek()
    node_4 = module_0.Node()
    var_2 = node_4.__repr__()
    assert var_2 == 'Value: None'
    queue_4 = module_0.Queue(node_4)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    none_type_0 = None
    node_5 = module_0.Node(prev=none_type_0)
    node_6 = module_0.Node()
    var_3 = node_6.__repr__()
    assert var_3 == 'Value: None'
    queue_5 = module_0.Queue(node_6)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    var_4 = queue_6.dequeue()
    assert var_4 == 77
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_3 = set()
    node_7 = module_0.Node(prev=set_3)
    var_5 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    var_6 = var_5.__repr__()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_1)
    queue_11 = module_0.Queue()
    set_5 = set()
    node_9 = module_0.Node(prev=set_5)
    var_7 = queue_11.size()
    assert var_7 == 0
    queue_12 = module_0.Queue()
    var_8 = queue_11.size()
    assert var_8 == 0
    queue_13 = module_0.Queue()

def test_case_1573():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    queue_5 = module_0.Queue(queue_3)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_3 = double_linked_list_2.append(node_4)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_8.size()
    assert var_4 == 0
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_5 = queue_12.size()
    assert var_5 == 0
    node_6 = module_0.Node()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_13 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_6 = double_linked_list_6.append(set_6)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    none_type_0 = None
    queue_19 = module_0.Queue(none_type_0)
    queue_20 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_7 = queue_20.peek()
    queue_21 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_8 = queue_21.size()
    assert var_8 == 0
    var_9 = queue_20.size()
    assert var_9 == 0
    queue_22 = module_0.Queue()
    set_9 = set()
    node_10 = module_0.Node(prev=set_9)
    var_10 = queue_22.size()
    assert var_10 == 0
    queue_23 = module_0.Queue()
    queue_24 = module_0.Queue()

def test_case_1574():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_0 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue(queue_5)
    var_3 = queue_4.peek()
    none_type_0 = None
    node_3 = module_0.Node(prev=none_type_0)
    queue_7 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = queue_7.peek()
    node_5 = module_0.Node()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_7 = module_0.Node()
    queue_9 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    var_5 = queue_9.size()
    assert var_5 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    queue_13 = module_0.Queue()
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    var_6 = queue_13.size()
    assert var_6 == 0
    queue_14 = module_0.Queue()
    var_7 = queue_13.size()
    assert var_7 == 0
    var_8 = queue_12.peek()
    assert var_8 == 77

def test_case_1575():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue(queue_2)
    var_2 = queue_1.peek()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    var_3 = queue_5.peek()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_11 = module_0.Queue()
    var_4 = queue_11.peek()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_12 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_5 = queue_14.size()
    assert var_5 == 0
    queue_15 = module_0.Queue()

def test_case_1576():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_1.enqueue(queue_0)
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Node'
    assert var_3.data is None
    assert var_3.next is None
    assert var_3.prev == {*()}
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_2.append(queue_4)
    queue_5 = module_0.Queue()

def test_case_1577():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    var_2 = queue_2.size()
    assert var_2 == 1
    var_3 = queue_2.dequeue()
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_4 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    var_5 = queue_4.enqueue(set_1)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    queue_6 = module_0.Queue()
    var_6 = queue_6.peek()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    queue_10 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_7 = queue_10.size()
    assert var_7 == 0
    queue_11 = module_0.Queue()
    var_8 = queue_10.size()
    assert var_8 == 0
    queue_12 = module_0.Queue()
    node_4 = module_0.Node()
    var_9 = node_4.__repr__()
    assert var_9 == 'Value: None'
    queue_13 = module_0.Queue()

def test_case_1578():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = var_0.__repr__()
    queue_2 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    var_3 = queue_2.peek()
    var_4 = queue_4.size()
    assert var_4 == 1
    var_5 = queue_4.dequeue()
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Queue'
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_6 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_7 = queue_7.size()
    assert var_7 == 0
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    node_5 = module_0.Node()
    var_8 = node_5.__repr__()
    assert var_8 == 'Value: None'
    queue_10 = module_0.Queue(node_5)

def test_case_1579():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_0 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue(queue_4)
    var_1 = queue_3.peek()
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = double_linked_list_3.append(node_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_6.size()
    assert var_3 == 0
    complex_0 = 2886.801252 + 1418.99508j
    queue_8 = module_0.Queue(complex_0)
    var_4 = queue_8.size()
    assert var_4 == 1
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    none_type_0 = None
    queue_9 = module_0.Queue()
    var_5 = queue_9.enqueue(none_type_0)
    var_6 = queue_8.enqueue(set_3)
    bool_0 = True
    double_linked_list_4 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_4.tail).__module__}.{type(double_linked_list_4.tail).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_1)
    with pytest.raises(IndexError):
        double_linked_list_0.pop()

def test_case_1580():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue(queue_1)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue(queue_4)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_7.size()
    assert var_3 == 0
    queue_8 = module_0.Queue()
    var_4 = queue_7.size()
    assert var_4 == 0
    var_5 = var_4.__repr__()
    assert var_5 == '0'
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_2)
    queue_10 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_6 = queue_10.size()
    assert var_6 == 0
    queue_11 = module_0.Queue()
    var_7 = queue_10.size()
    assert var_7 == 0
    queue_12 = module_0.Queue()

def test_case_1581():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue(queue_0)
    complex_0 = 2886.801252 + 1418.99508j
    queue_2 = module_0.Queue(complex_0)
    var_1 = queue_2.size()
    assert var_1 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_0)
    var_3 = queue_2.enqueue(set_0)

def test_case_1582():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = queue_1.peek()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_4.peek()

def test_case_1583():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = queue_0.size()
    assert var_1 == 0
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    var_4 = queue_3.size()
    assert var_4 == 0
    queue_5 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_5 = queue_5.peek()
    node_5 = module_0.Node()

def test_case_1584():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_1)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(none_type_0)
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_3 = queue_8.size()
    assert var_3 == 0
    queue_9 = module_0.Queue()

def test_case_1585():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_3 = module_0.Node()
    var_2 = queue_2.size()
    assert var_2 == 0
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'
    queue_4 = module_0.Queue()
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    var_4 = queue_4.size()
    assert var_4 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_5 = queue_5.peek()
    queue_7 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_6 = queue_7.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    queue_9 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_7 = queue_9.size()
    assert var_7 == 0
    queue_10 = module_0.Queue()
    var_8 = queue_9.size()
    assert var_8 == 0
    var_9 = queue_8.peek()
    assert var_9 == 77
    queue_11 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    var_10 = queue_11.size()
    assert var_10 == 0
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_2)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_11 = double_linked_list_2.append(bytes_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_16 = module_0.Queue(queue_15)
    var_12 = queue_14.peek()
    var_13 = queue_16.size()
    assert var_13 == 1

def test_case_1586():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue(queue_4)
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_6.peek()
    node_4 = module_0.Node()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_5 = double_linked_list_1.push(var_4)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    node_5 = module_0.Node()
    var_6 = node_5.__repr__()
    assert var_6 == 'Value: None'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_7 = var_6.__repr__()
    assert var_7 == "'Value: None'"
    queue_8 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_2)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_8 = double_linked_list_3.append(bytes_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue(queue_9)
    var_9 = queue_8.peek()
    var_10 = queue_10.size()
    assert var_10 == 1
    var_11 = queue_10.dequeue()
    assert f'{type(var_11).__module__}.{type(var_11).__qualname__}' == 'queue4.Queue'

def test_case_1587():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_5.peek()
    none_type_0 = None
    node_3 = module_0.Node(prev=none_type_0)
    queue_6 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_3 = double_linked_list_2.append(node_5)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_6 = module_0.Node()
    queue_8 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_4 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    assert f'{type(queue_9).__module__}.{type(queue_9).__qualname__}' == 'queue4.Queue'
    var_5 = queue_9.enqueue(set_5)
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_10 = module_0.Node()
    var_6 = node_10.__repr__()
    assert var_6 == 'Value: None'
    queue_11 = module_0.Queue(node_10)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_0)
    var_7 = queue_12.dequeue()
    assert var_7 == 77
    queue_13 = module_0.Queue()

def test_case_1588():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue(queue_0)
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None

def test_case_1589():
    none_type_0 = None
    node_0 = module_0.Node(prev=none_type_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_2 = queue_4.peek()
    queue_5 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_3 = queue_5.size()
    assert var_3 == 0
    var_4 = queue_4.size()
    assert var_4 == 0
    queue_6 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_5 = queue_6.size()
    assert var_5 == 0
    queue_7 = module_0.Queue()
    var_6 = queue_7.peek()

def test_case_1590():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_3 = module_0.Node()
    var_0 = queue_2.size()
    assert var_0 == 0
    var_1 = node_2.__repr__()
    assert var_1 == 'Value: None'
    queue_4 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue(queue_5)
    var_3 = queue_4.peek()
    queue_7 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    queue_9 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_4 = queue_9.size()
    assert var_4 == 0
    queue_10 = module_0.Queue()
    var_5 = queue_9.size()
    assert var_5 == 0
    bool_0 = True
    double_linked_list_3 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_12 = module_0.Queue()
    var_6 = queue_12.peek()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_2)
    var_7 = queue_13.dequeue()
    assert var_7 == 77
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_3)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_8 = double_linked_list_5.append(bytes_3)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    queue_15 = module_0.Queue(queue_14)

def test_case_1591():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1

def test_case_1592():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1

def test_case_1593():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_0 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_1 = queue_0.size()
    assert var_1 == 0
    var_2 = queue_0.size()
    assert var_2 == 0

def test_case_1594():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    queue_2 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = queue_2.peek()
    node_4 = module_0.Node()
    queue_3 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_2 = double_linked_list_1.append(node_6)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Node'
    assert var_3.data is None
    assert var_3.next is None
    assert var_3.prev == {*()}
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_7 = module_0.Node()
    none_type_1 = None
    node_8 = module_0.Node(prev=none_type_1)
    queue_6 = module_0.Queue()
    set_5 = set()
    node_9 = module_0.Node(prev=set_5)
    var_5 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    queue_8 = module_0.Queue()
    set_6 = set()
    node_10 = module_0.Node(prev=set_6)
    var_6 = queue_8.size()
    assert var_6 == 0
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_7 = set()
    node_11 = module_0.Node(prev=set_7)
    var_7 = queue_9.peek()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_8 = set()
    node_12 = module_0.Node(prev=set_8)
    queue_13 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_13 = module_0.Node()
    var_8 = queue_12.size()
    assert var_8 == 0
    var_9 = queue_11.size()
    assert var_9 == 0
    queue_14 = module_0.Queue()
    set_9 = set()
    node_14 = module_0.Node(prev=set_9)
    queue_15 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_10 = set()
    node_15 = module_0.Node(prev=set_10)
    var_10 = double_linked_list_4.append(node_15)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'

def test_case_1595():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    queue_2 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = queue_2.peek()
    node_4 = module_0.Node()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.push(var_1)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_3 = double_linked_list_2.append(node_6)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue(queue_5)
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_7 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_8 = module_0.Queue()
    var_5 = queue_8.peek()
    queue_9 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_6 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    queue_11 = module_0.Queue(queue_9)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    queue_14 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_15 = module_0.Queue()
    var_7 = queue_15.peek()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    int_0 = 1854
    set_8 = {int_0, var_7}
    with pytest.raises(ValueError):
        double_linked_list_1.remove(set_8)

def test_case_1596():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = var_0.__repr__()
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    queue_3 = module_0.Queue(node_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    var_3 = queue_3.enqueue(var_2)
    queue_4 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_4 = queue_4.peek()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_5 = queue_5.size()
    assert var_5 == 0
    var_6 = queue_4.size()
    assert var_6 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_7 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue(queue_6)
    complex_0 = 2886.801252 + 1418.99508j
    queue_8 = module_0.Queue(complex_0)
    var_8 = queue_8.size()
    assert var_8 == 1
    queue_9 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_9 = queue_9.size()
    assert var_9 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_10 = queue_10.peek()
    queue_12 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_11 = queue_12.size()
    assert var_11 == 0
    queue_13 = module_0.Queue()
    none_type_0 = None
    node_8 = module_0.Node(prev=none_type_0)
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    queue_14 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_12 = node_9.__repr__()
    assert var_12 == 'Value: None'

def test_case_1597():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    var_1 = queue_0.size()
    assert var_1 == 0

def test_case_1598():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    node_2 = module_0.Node()
    queue_1 = module_0.Queue()
    set_0 = set()
    node_3 = module_0.Node(prev=set_0)
    var_2 = queue_1.size()
    assert var_2 == 0
    queue_2 = module_0.Queue()
    var_3 = queue_2.peek()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_4 = double_linked_list_1.append(node_5)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Node'
    assert var_5.data is None
    assert var_5.next is None
    assert var_5.prev == {*()}
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    queue_6 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_6 = queue_6.size()
    assert var_6 == 0
    queue_7 = module_0.Queue()
    var_7 = queue_6.size()
    assert var_7 == 0
    var_8 = queue_5.peek()
    assert var_8 == 77
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_1599():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    queue_1 = module_0.Queue(node_1)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    var_2 = queue_2.dequeue()
    assert var_2 == 77
    queue_3 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_4 = module_0.Queue(complex_0)
    var_3 = queue_4.size()
    assert var_3 == 1
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_4 = queue_5.enqueue(none_type_0)
    var_5 = queue_4.enqueue(set_0)
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_6 = double_linked_list_0.push(queue_6)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_7 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_8 = double_linked_list_2.append(queue_9)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_2)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_9 = double_linked_list_3.append(bytes_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_11 = module_0.Queue(queue_10)
    var_10 = double_linked_list_3.push(var_9)

def test_case_1600():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.push(var_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    queue_2 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    var_3 = queue_2.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    complex_0 = 2886.801252 + 1418.99508j
    queue_5 = module_0.Queue(complex_0)
    var_4 = queue_5.size()
    assert var_4 == 1
    queue_6 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_5 = queue_6.peek()
    node_5 = module_0.Node()

def test_case_1601():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = queue_0.size()
    assert var_1 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = double_linked_list_1.append(node_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_6.size()
    assert var_5 == 0
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_12 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_6 = double_linked_list_4.append(node_8)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_7 = queue_12.enqueue(queue_11)
    node_9 = module_0.Node()
    var_8 = node_9.__repr__()
    assert var_8 == 'Value: None'
    queue_13 = module_0.Queue(node_9)
    var_9 = queue_13.enqueue(var_8)

def test_case_1602():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_0.push(queue_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.peek()
    node_2 = module_0.Node()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_2 = var_1.__repr__()
    complex_0 = 2886.801252 + 1418.99508j
    queue_6 = module_0.Queue(complex_0)
    var_3 = queue_6.size()
    assert var_3 == 1
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_0)
    var_5 = queue_6.enqueue(set_2)
    queue_8 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_6 = queue_8.size()
    assert var_6 == 0
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_7 = double_linked_list_2.append(node_6)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_8 = queue_10.size()
    assert var_8 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_0)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_9 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_13 = module_0.Queue(queue_12)
    complex_1 = 2886.801252 + 1418.99508j
    queue_14 = module_0.Queue(complex_1)
    var_10 = queue_14.size()
    assert var_10 == 1
    node_7 = module_0.Node()
    var_11 = node_7.__repr__()
    assert var_11 == 'Value: None'
    queue_15 = module_0.Queue(node_7)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_16 = module_0.Queue(bytes_1)
    queue_17 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_12 = queue_17.size()
    assert var_12 == 0
    queue_18 = module_0.Queue()
    var_13 = queue_17.size()
    assert var_13 == 0
    var_14 = queue_16.peek()
    assert var_14 == 77
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_19 = module_0.Queue(bytes_2)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_15 = double_linked_list_4.append(bytes_2)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    node_9 = module_0.Node()
    var_16 = node_9.__repr__()
    assert var_16 == 'Value: None'
    node_10 = module_0.Node()

def test_case_1603():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    queue_3 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    var_3 = queue_4.enqueue(set_0)
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_4 = queue_5.size()
    assert var_4 == 0
    queue_6 = module_0.Queue()
    var_5 = queue_6.peek()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = double_linked_list_1.push(queue_7)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_7 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_8 = double_linked_list_3.append(queue_10)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_13 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_5 = module_0.Node()
    var_9 = queue_12.size()
    assert var_9 == 0
    var_10 = node_4.__repr__()
    assert var_10 == 'Value: None'
    queue_14 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_2)
    var_11 = queue_15.dequeue()
    assert var_11 == 77
    queue_16 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_17 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_12 = double_linked_list_5.append(node_7)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_13 = queue_17.enqueue(queue_16)

def test_case_1604():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_1 = queue_10.size()
    assert var_1 == 0
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_2 = queue_10.size()
    assert var_2 == 0
    queue_12 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_3 = queue_12.size()
    assert var_3 == 0

def test_case_1605():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_0.push(queue_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    double_linked_list_3 = module_0.DoubleLinkedList(var_1)
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_5.peek()
    node_3 = module_0.Node()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_3 = var_2.__repr__()
    queue_8 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = queue_8.peek()
    node_5 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_5 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    set_4 = {queue_0}

def test_case_1606():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
    assert var_1.data is None
    assert var_1.next is None
    assert var_1.prev == {*()}
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_3 = queue_4.peek()
    queue_5 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_4 = queue_5.size()
    assert var_4 == 0
    var_5 = queue_4.size()
    assert var_5 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue(queue_6)
    queue_8 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_7 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue(queue_9)
    var_8 = queue_8.peek()
    var_9 = queue_10.size()
    assert var_9 == 1
    var_10 = queue_10.dequeue()
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'queue4.Queue'
    node_6 = module_0.Node()
    var_11 = node_6.__repr__()
    assert var_11 == 'Value: None'
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)

def test_case_1607():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.push(var_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_2 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    queue_5 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_4 = queue_5.size()
    assert var_4 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    queue_8 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_5 = queue_8.size()
    assert var_5 == 0
    queue_9 = module_0.Queue()
    var_6 = queue_8.size()
    assert var_6 == 0
    var_7 = var_6.__repr__()
    assert var_7 == '0'

def test_case_1608():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'

def test_case_1609():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.push(var_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    queue_3 = module_0.Queue(queue_1)

def test_case_1610():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    var_2 = queue_3.enqueue(set_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_3 = module_0.Node()
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_7 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = queue_7.peek()
    queue_8 = module_0.Queue(queue_7)
    queue_9 = module_0.Queue(queue_7)
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = queue_12.size()
    assert var_5 == 0
    node_6 = module_0.Node()

def test_case_1611():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_0.push(queue_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    queue_4 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue(queue_5)
    var_2 = queue_4.peek()
    queue_7 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_7.peek()
    queue_8 = module_0.Queue(queue_7)
    queue_9 = module_0.Queue(queue_7)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    node_2 = module_0.Node()
    var_4 = node_2.__repr__()
    assert var_4 == 'Value: None'
    queue_12 = module_0.Queue(node_2)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_2)
    var_5 = queue_13.dequeue()
    assert var_5 == 77
    queue_14 = module_0.Queue()
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_3)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_6 = double_linked_list_3.append(bytes_3)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_7 = double_linked_list_3.append(queue_15)
    queue_16 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_17 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_8 = double_linked_list_4.append(node_4)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_9 = queue_17.enqueue(queue_16)
    bytes_4 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_18 = module_0.Queue(bytes_4)
    var_10 = queue_18.dequeue()
    assert var_10 == 77
    queue_19 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_11 = queue_19.peek()
    queue_20 = module_0.Queue(queue_19)
    var_12 = queue_20.enqueue(set_4)
    queue_21 = module_0.Queue()
    queue_22 = module_0.Queue()

def test_case_1612():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_1 = queue_0.enqueue(var_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    queue_2 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    var_3 = queue_2.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = queue_7.size()
    assert var_4 == 0
    queue_8 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = double_linked_list_3.append(set_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_12 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_6 = queue_12.peek()
    node_5 = module_0.Node()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_7 = double_linked_list_4.push(var_6)
    assert f'{type(double_linked_list_4.tail).__module__}.{type(double_linked_list_4.tail).__qualname__}' == 'queue4.Node'
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    node_7 = module_0.Node()
    var_8 = node_7.__repr__()
    assert var_8 == 'Value: None'
    queue_13 = module_0.Queue(node_7)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_1)
    var_9 = queue_14.dequeue()
    assert var_9 == 77
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    var_10 = queue_16.size()
    assert var_10 == 0
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    node_9 = module_0.Node()
    var_11 = node_9.__repr__()
    assert var_11 == 'Value: None'
    queue_19 = module_0.Queue(node_9)
    queue_20 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_21 = module_0.Queue(bytes_2)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_12 = double_linked_list_5.append(bytes_2)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    queue_22 = module_0.Queue(queue_21)
    var_13 = queue_20.peek()
    var_14 = queue_22.size()
    assert var_14 == 1

def test_case_1613():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
    assert var_1.data is None
    assert var_1.next is None
    assert var_1.prev == {*()}
    queue_2 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    var_3 = queue_2.peek()
    var_4 = queue_4.size()
    assert var_4 == 1
    var_5 = queue_4.dequeue()
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Queue'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()

def test_case_1614():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = var_0.__repr__()

def test_case_1615():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_0)
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_2 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    var_3 = queue_2.enqueue(set_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_2 = module_0.Node()
    var_4 = queue_4.size()
    assert var_4 == 0
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_5 = queue_6.peek()
    queue_7 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_6 = queue_7.size()
    assert var_6 == 0
    var_7 = queue_6.size()
    assert var_7 == 0
    queue_8 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_8 = queue_8.size()
    assert var_8 == 0
    queue_9 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_9 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_10 = var_9.__repr__()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_9 = module_0.Node()
    set_8 = set()
    node_10 = module_0.Node(prev=set_8)
    queue_12 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_11 = queue_14.size()
    assert var_11 == 0
    queue_15 = module_0.Queue()
    var_12 = var_10.__repr__()

def test_case_1616():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    queue_2 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue(queue_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    queue_8 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_2 = queue_8.size()
    assert var_2 == 0
    queue_9 = module_0.Queue()
    var_3 = queue_8.size()
    assert var_3 == 0
    var_4 = queue_7.peek()
    assert var_4 == 77

def test_case_1617():
    bool_0 = True
    str_0 = '/uhgJK)f\r'
    dict_0 = {str_0: str_0}
    double_linked_list_0 = module_0.DoubleLinkedList(dict_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    with pytest.raises(ValueError):
        double_linked_list_0.remove(bool_0)

def test_case_1618():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    queue_6 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_6.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    queue_8 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_8.size()
    assert var_2 == 0
    queue_9 = module_0.Queue()
    var_3 = queue_8.size()
    assert var_3 == 0
    queue_10 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_2)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_4 = double_linked_list_0.append(bytes_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_12 = module_0.Queue(queue_11)
    var_5 = queue_10.peek()
    var_6 = queue_12.size()
    assert var_6 == 1
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_13 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_7 = queue_15.size()
    assert var_7 == 0
    queue_16 = module_0.Queue()
    node_5 = module_0.Node()
    var_8 = node_5.__repr__()
    assert var_8 == 'Value: None'
    queue_17 = module_0.Queue(node_5)
    queue_18 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_9 = queue_18.size()
    assert var_9 == 0
    queue_19 = module_0.Queue()
    var_10 = queue_19.peek()
    queue_20 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_11 = queue_20.peek()
    queue_21 = module_0.Queue(queue_20)
    var_12 = queue_21.enqueue(set_5)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    with pytest.raises(ValueError):
        double_linked_list_3.remove(var_11)

def test_case_1619():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    queue_5 = module_0.Queue(node_1)
    var_2 = queue_5.enqueue(var_1)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    queue_7 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = queue_7.peek()
    queue_8 = module_0.Queue(queue_7)
    var_4 = queue_8.enqueue(set_1)
    queue_9 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_5 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_6 = var_5.__repr__()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_13 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_6 = module_0.Node()
    var_7 = queue_12.size()
    assert var_7 == 0
    var_8 = node_5.__repr__()
    assert var_8 == 'Value: None'

def test_case_1620():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue(queue_4)
    var_3 = queue_3.peek()
    var_4 = queue_5.size()
    assert var_4 == 1
    var_5 = queue_5.dequeue()
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    queue_7 = module_0.Queue()
    node_3 = module_0.Node()
    var_6 = node_3.__repr__()
    assert var_6 == 'Value: None'
    double_linked_list_3 = module_0.DoubleLinkedList()
    var_7 = var_6.__repr__()
    assert var_7 == "'Value: None'"
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    double_linked_list_5 = module_0.DoubleLinkedList()
    var_8 = double_linked_list_5.append(bytes_1)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    var_9 = node_5.__repr__()
    assert var_9 == 'Value: None'
    node_6 = module_0.Node()

def test_case_1621():
    node_0 = module_0.Node()
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    var_2 = queue_2.enqueue(set_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_4 = module_0.Node()
    var_3 = queue_4.size()
    assert var_3 == 0
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    var_5 = queue_1.enqueue(node_3)

def test_case_1622():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_0)
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = node_0.__repr__()
    assert var_2 == 'Value: None'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_2.peek()
    node_2 = module_0.Node()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_4 = var_3.__repr__()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = queue_7.size()
    assert var_5 == 0
    queue_8 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_6 = queue_11.size()
    assert var_6 == 0
    queue_12 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_13 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_7 = double_linked_list_6.append(node_6)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    var_8 = queue_13.enqueue(queue_12)

def test_case_1623():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    bool_0 = False
    with pytest.raises(ValueError):
        double_linked_list_0.remove(bool_0)

def test_case_1624():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue(queue_4)
    var_3 = queue_3.peek()
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_4 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    queue_8 = module_0.Queue(queue_6)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_11 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_5 = queue_13.size()
    assert var_5 == 0
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_6 = queue_15.peek()
    node_4 = module_0.Node()
    queue_16 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_17 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_7 = double_linked_list_3.append(node_6)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_8 = double_linked_list_3.shift()
    assert double_linked_list_3.tail is None
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'queue4.Node'
    assert var_8.data is None
    assert var_8.next is None
    assert var_8.prev == {*()}

def test_case_1625():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    var_1 = queue_3.size()
    assert var_1 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_6.size()
    assert var_2 == 0
    queue_7 = module_0.Queue()
    var_3 = queue_6.size()
    assert var_3 == 0
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_9 = module_0.Queue()
    var_4 = queue_9.peek()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_12 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_5 = queue_14.size()
    assert var_5 == 0
    queue_15 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_16 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_6 = double_linked_list_5.append(node_7)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_7 = queue_16.enqueue(queue_15)
    queue_17 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_8 = queue_17.peek()
    queue_18 = module_0.Queue(queue_17)
    queue_19 = module_0.Queue(queue_17)
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    var_9 = queue_17.size()
    assert var_9 == 0
    with pytest.raises(IndexError):
        double_linked_list_3.shift()

def test_case_1626():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    node_2 = module_0.Node()
    queue_2 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_3 = module_0.Queue()
    set_0 = set()
    node_3 = module_0.Node(prev=set_0)
    var_3 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    queue_5 = module_0.Queue(queue_3)
    queue_6 = module_0.Queue()
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_4 = double_linked_list_3.append(node_5)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_7.enqueue(queue_6)

def test_case_1627():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_1.enqueue(queue_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)

def test_case_1628():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue(none_type_0)
    queue_4 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue(queue_5)
    var_1 = queue_4.peek()
    var_2 = queue_6.size()
    assert var_2 == 1
    var_3 = queue_6.dequeue()
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Queue'
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    queue_7 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_4 = queue_7.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    double_linked_list_2 = module_0.DoubleLinkedList(var_4)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    var_5 = queue_13.size()
    assert var_5 == 0
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_17 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    node_4 = module_0.Node()
    var_6 = queue_16.size()
    assert var_6 == 0
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_18 = module_0.Queue(bytes_2)
    double_linked_list_6 = module_0.DoubleLinkedList()
    var_7 = double_linked_list_6.append(bytes_2)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    var_8 = node_5.__repr__()
    assert var_8 == 'Value: None'
    node_6 = module_0.Node()
    set_3 = set()
    node_7 = module_0.Node(prev=set_3)
    queue_19 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    double_linked_list_8 = module_0.DoubleLinkedList()
    var_9 = queue_21.size()
    assert var_9 == 0
    with pytest.raises(IndexError):
        double_linked_list_8.pop()

def test_case_1629():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    complex_0 = 2886.801252 + 1418.99508j
    queue_1 = module_0.Queue(complex_0)
    var_1 = queue_1.size()
    assert var_1 == 1
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_0)
    var_3 = queue_1.enqueue(set_0)

def test_case_1630():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    var_2 = queue_3.enqueue(set_1)
    queue_4 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue(queue_5)
    var_4 = queue_4.peek()
    var_5 = queue_6.size()
    assert var_5 == 1
    node_2 = module_0.Node()
    var_6 = node_2.__repr__()
    assert var_6 == 'Value: None'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_7 = var_6.__repr__()
    assert var_7 == "'Value: None'"
    none_type_0 = None
    node_3 = module_0.Node(prev=none_type_0)
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_8 = queue_9.size()
    assert var_8 == 0
    node_5 = module_0.Node()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    queue_10 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_9 = queue_10.size()
    assert var_9 == 0

def test_case_1631():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    node_1 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    queue_2 = module_0.Queue()
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    var_2 = queue_2.size()
    assert var_2 == 0
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_2)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.append(bytes_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    node_4 = module_0.Node()
    queue_5 = module_0.Queue()
    set_1 = set()
    node_5 = module_0.Node(prev=set_1)
    var_5 = queue_5.peek()
    node_6 = module_0.Node()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_6 = var_5.__repr__()
    queue_8 = module_0.Queue()
    set_2 = set()
    node_7 = module_0.Node(prev=set_2)
    var_7 = queue_8.size()
    assert var_7 == 0
    set_3 = set()
    node_8 = module_0.Node(prev=set_3)

def test_case_1632():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue(queue_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    var_2 = queue_3.size()
    assert var_2 == 0
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_1.push(queue_5)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    none_type_0 = None
    node_3 = module_0.Node(prev=none_type_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    queue_8 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_2)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = double_linked_list_3.append(bytes_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue(queue_9)
    var_5 = queue_8.peek()
    var_6 = queue_10.size()
    assert var_6 == 1

def test_case_1633():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_2 = module_0.Node()
    var_1 = node_2.__repr__()
    assert var_1 == 'Value: None'
    queue_4 = module_0.Queue(node_2)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    var_2 = queue_4.enqueue(var_1)
    queue_5 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_3 = double_linked_list_2.append(node_4)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_4 = queue_7.peek()
    queue_8 = module_0.Queue(queue_7)
    queue_9 = module_0.Queue(queue_7)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_5 = queue_12.size()
    assert var_5 == 0
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_15 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_18 = module_0.Queue(bytes_0)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_6 = double_linked_list_5.append(bytes_0)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    node_8 = module_0.Node()
    var_7 = node_8.__repr__()
    assert var_7 == 'Value: None'
    node_9 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_19 = module_0.Queue(bytes_1)
    queue_20 = module_0.Queue()
    set_6 = set()
    node_10 = module_0.Node(prev=set_6)
    var_8 = queue_20.size()
    assert var_8 == 0
    queue_21 = module_0.Queue()
    var_9 = queue_20.size()
    assert var_9 == 0
    var_10 = var_9.__repr__()
    assert var_10 == '0'
    complex_0 = 2886.801252 + 1418.99508j
    queue_22 = module_0.Queue(complex_0)
    var_11 = queue_22.size()
    assert var_11 == 1

def test_case_1634():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    node_2 = module_0.Node()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()

def test_case_1635():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = var_0.__repr__()
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue(queue_4)
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_7 = module_0.Queue()
    var_4 = queue_7.peek()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_10 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_12 = module_0.Queue(queue_11)
    var_6 = queue_10.peek()
    var_7 = queue_12.size()
    assert var_7 == 1

def test_case_1636():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    node_2 = module_0.Node()
    queue_5 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_3 = double_linked_list_3.append(node_4)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_3.shift()
    assert double_linked_list_3.tail is None
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'queue4.Node'
    assert var_4.data is None
    assert var_4.next is None
    assert var_4.prev == {*()}
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_5 = queue_9.size()
    assert var_5 == 0
    node_6 = module_0.Node()
    queue_10 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_6 = queue_10.size()
    assert var_6 == 0
    queue_11 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_7 = queue_10.size()
    assert var_7 == 0
    bool_0 = True
    double_linked_list_7 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_7.head).__module__}.{type(double_linked_list_7.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_7.tail).__module__}.{type(double_linked_list_7.tail).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    var_8 = double_linked_list_8.append(bytes_1)
    assert f'{type(double_linked_list_8.head).__module__}.{type(double_linked_list_8.head).__qualname__}' == 'queue4.Node'
    var_9 = double_linked_list_8.append(queue_12)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_2)
    queue_14 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    var_10 = queue_14.size()
    assert var_10 == 0
    queue_15 = module_0.Queue()
    var_11 = queue_14.size()
    assert var_11 == 0
    queue_16 = module_0.Queue()
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    var_12 = queue_16.peek()
    queue_17 = module_0.Queue(queue_16)
    queue_18 = module_0.Queue(queue_16)
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    var_13 = queue_16.size()
    assert var_13 == 0

def test_case_1637():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_0 = None
    queue_6 = module_0.Queue(none_type_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_9 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_3 = module_0.Node()
    var_2 = queue_8.size()
    assert var_2 == 0
    var_3 = queue_7.size()
    assert var_3 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_0)
    assert f'{type(queue_10).__module__}.{type(queue_10).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    var_5 = node_4.__repr__()
    assert var_5 == 'Value: None'
    node_5 = module_0.Node()
    node_6 = module_0.Node()
    var_6 = node_6.__repr__()
    assert var_6 == 'Value: None'
    queue_11 = module_0.Queue(node_6)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    var_7 = queue_12.dequeue()
    assert var_7 == 77
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    set_3 = set()
    node_7 = module_0.Node(prev=set_3)
    var_8 = queue_14.peek()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_2)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    double_linked_list_3 = module_0.DoubleLinkedList(var_8)
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    queue_18 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_9 = queue_20.size()
    assert var_9 == 0
    queue_21 = module_0.Queue()

def test_case_1638():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_0.size()
    assert var_1 == 0

def test_case_1639():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == 77
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_1 = module_0.Queue(node_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    var_2 = queue_2.dequeue()
    assert var_2 == 77
    queue_3 = module_0.Queue()

def test_case_1640():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_0)
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_6.size()
    assert var_3 == 0
    queue_7 = module_0.Queue()
    var_4 = queue_6.size()
    assert var_4 == 0
    var_5 = var_4.__repr__()
    assert var_5 == '0'
    queue_8 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_6 = queue_8.size()
    assert var_6 == 0
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_7 = queue_8.size()
    assert var_7 == 0
    var_8 = queue_6.size()
    assert var_8 == 0

def test_case_1641():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_2)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    queue_4 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_3 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    queue_6 = module_0.Queue(queue_4)
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_8 = module_0.Queue()
    var_4 = queue_8.peek()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None

def test_case_1642():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue(queue_2)
    var_1 = queue_1.peek()
    var_2 = queue_3.size()
    assert var_2 == 1
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_4 = node_1.__repr__()
    assert var_4 == 'Value: None'
    node_2 = module_0.Node()
    set_0 = set()
    node_3 = module_0.Node(prev=set_0)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    node_4 = module_0.Node()
    var_5 = node_4.__repr__()
    assert var_5 == 'Value: None'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_6 = var_5.__repr__()
    assert var_6 == "'Value: None'"
    queue_7 = module_0.Queue()
    set_1 = set()
    node_5 = module_0.Node(prev=set_1)
    var_7 = queue_7.peek()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_2)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    double_linked_list_5 = module_0.DoubleLinkedList(var_7)
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_9 = module_0.Queue()
    set_2 = set()
    node_6 = module_0.Node(prev=set_2)
    queue_10 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    set_3 = set()
    node_7 = module_0.Node(prev=set_3)
    var_8 = double_linked_list_6.append(node_7)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    var_9 = queue_10.enqueue(queue_9)
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_3)
    var_10 = queue_11.dequeue()
    assert var_10 == 77
    bytes_4 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_4)
    queue_13 = module_0.Queue()
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    var_11 = queue_13.size()
    assert var_11 == 0
    queue_14 = module_0.Queue()
    var_12 = queue_13.size()
    assert var_12 == 0
    var_13 = queue_12.peek()
    assert var_13 == 77

def test_case_1643():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_5.peek()
    node_2 = module_0.Node()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_2 = var_1.__repr__()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_10 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_4 = module_0.Node()
    var_3 = queue_9.size()
    assert var_3 == 0
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = double_linked_list_1.push(queue_11)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    node_6 = module_0.Node()
    var_5 = node_6.__repr__()
    assert var_5 == 'Value: None'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_6 = var_5.__repr__()
    assert var_6 == "'Value: None'"
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    queue_16 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_8 = module_0.Node()
    var_7 = queue_15.size()
    assert var_7 == 0
    var_8 = queue_14.size()
    assert var_8 == 0
    queue_17 = module_0.Queue()
    set_5 = set()
    node_9 = module_0.Node(prev=set_5)
    var_9 = queue_17.peek()
    queue_18 = module_0.Queue(queue_17)
    queue_19 = module_0.Queue(queue_17)
    complex_0 = 2886.801252 + 1418.99508j
    queue_20 = module_0.Queue(complex_0)
    var_10 = queue_20.size()
    assert var_10 == 1

def test_case_1644():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    var_2 = queue_3.size()
    assert var_2 == 0
    var_3 = queue_2.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_4 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    queue_7 = module_0.Queue(queue_5)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_5 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'

def test_case_1645():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_4.size()
    assert var_1 == 0
    queue_5 = module_0.Queue()
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_7.peek()
    queue_8 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_8.size()
    assert var_4 == 0
    var_5 = queue_7.size()
    assert var_5 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    queue_10 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_6 = queue_10.size()
    assert var_6 == 0
    queue_11 = module_0.Queue()
    var_7 = queue_10.size()
    assert var_7 == 0
    var_8 = queue_9.peek()
    assert var_8 == 77
    node_5 = module_0.Node()
    var_9 = node_5.__repr__()
    assert var_9 == 'Value: None'
    queue_12 = module_0.Queue(node_5)
    var_10 = queue_12.enqueue(var_9)
    queue_13 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_11 = queue_13.size()
    assert var_11 == 0
    queue_14 = module_0.Queue()

def test_case_1646():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    node_2 = module_0.Node()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_4 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    queue_9 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_4 = queue_9.size()
    assert var_4 == 0
    queue_10 = module_0.Queue()
    var_5 = queue_9.size()
    assert var_5 == 0
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_6 = queue_12.peek()
    queue_13 = module_0.Queue(queue_12)
    queue_14 = module_0.Queue(queue_12)

def test_case_1647():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_0)
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = queue_4.size()
    assert var_4 == 0

def test_case_1648():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_0 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue(queue_5)
    var_1 = queue_4.peek()
    var_2 = queue_6.size()
    assert var_2 == 1
    queue_7 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_7.size()
    assert var_3 == 0
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_2)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = double_linked_list_3.append(bytes_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_3.append(queue_8)
    node_2 = module_0.Node()
    var_6 = node_2.__repr__()
    assert var_6 == 'Value: None'
    int_0 = 823

def test_case_1649():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_1.append(node_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_5 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    queue_7 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_1 = queue_7.size()
    assert var_1 == 0
    queue_8 = module_0.Queue()
    var_2 = queue_7.size()
    assert var_2 == 0
    var_3 = queue_6.peek()
    assert var_3 == 77
    queue_9 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_4 = double_linked_list_3.append(node_5)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_6 = module_0.Node()

def test_case_1650():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
    assert var_1.data is None
    assert var_1.next is None
    assert var_1.prev == {*()}
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    var_3 = queue_3.enqueue(set_2)
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_4 = double_linked_list_1.append(node_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    queue_8 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_5 = queue_8.size()
    assert var_5 == 0
    queue_9 = module_0.Queue()
    var_6 = queue_8.size()
    assert var_6 == 0
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_7 = queue_12.size()
    assert var_7 == 0
    node_7 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_1)
    queue_14 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_8 = queue_14.size()
    assert var_8 == 0
    queue_15 = module_0.Queue()
    var_9 = queue_14.size()
    assert var_9 == 0
    var_10 = var_9.__repr__()
    assert var_10 == '0'

def test_case_1651():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    queue_7 = module_0.Queue(queue_5)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_3 = queue_5.size()
    assert var_3 == 0
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_10 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_11 = module_0.Queue()
    var_4 = queue_11.peek()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_5 = module_0.Node()
    var_5 = node_5.__repr__()
    assert var_5 == 'Value: None'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = var_5.__repr__()
    assert var_6 == "'Value: None'"
    queue_14 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_7 = queue_14.peek()
    queue_15 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_8 = queue_15.size()
    assert var_8 == 0
    var_9 = queue_14.size()
    assert var_9 == 0
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    queue_16 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_19 = module_0.Queue(bytes_0)
    var_10 = queue_19.dequeue()
    assert var_10 == 77

def test_case_1652():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_2.size()
    assert var_2 == 0
    var_3 = queue_1.size()
    assert var_3 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_4.size()
    assert var_4 == 0
    queue_5 = module_0.Queue()
    var_5 = queue_4.size()
    assert var_5 == 0
    var_6 = var_5.__repr__()
    assert var_6 == '0'
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_7 = double_linked_list_0.push(queue_6)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_8 = double_linked_list_3.append(set_5)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_12 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_9 = queue_12.size()
    assert var_9 == 0
    queue_13 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_10 = queue_12.size()
    assert var_10 == 0

def test_case_1653():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    node_3 = module_0.Node()
    var_1 = node_3.__repr__()
    assert var_1 == 'Value: None'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = var_1.__repr__()
    assert var_2 == "'Value: None'"

def test_case_1654():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    node_1 = module_0.Node()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_4 = module_0.Node()
    var_2 = queue_6.size()
    assert var_2 == 0
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = node_5.__repr__()
    assert var_4 == 'Value: None'
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_7 = module_0.Node()
    var_5 = queue_10.size()
    assert var_5 == 0
    var_6 = queue_9.size()
    assert var_6 == 0
    with pytest.raises(ValueError):
        double_linked_list_4.remove(var_3)

def test_case_1655():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_4.size()
    assert var_1 == 0
    queue_5 = module_0.Queue()
    var_2 = queue_4.size()
    assert var_2 == 0
    var_3 = queue_3.peek()
    assert var_3 == 77
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = queue_6.peek()
    queue_7 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_5 = queue_7.size()
    assert var_5 == 0
    var_6 = queue_6.size()
    assert var_6 == 0
    queue_8 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_7 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_8 = var_7.__repr__()

def test_case_1656():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.push(var_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    with pytest.raises(ValueError):
        double_linked_list_0.remove(double_linked_list_0)

def test_case_1657():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_3.size()
    assert var_2 == 0
    var_3 = queue_2.size()
    assert var_3 == 0

def test_case_1658():
    node_0 = module_0.Node()
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    complex_0 = 2886.801252 + 1418.99508j
    queue_3 = module_0.Queue(complex_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    var_2 = queue_3.size()
    assert var_2 == 1
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_0)
    var_4 = queue_3.enqueue(set_2)
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_6 = module_0.Queue()

def test_case_1659():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    var_1 = queue_3.enqueue(set_0)
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_4.peek()
    node_2 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_6.size()
    assert var_3 == 0
    queue_7 = module_0.Queue()
    var_4 = queue_6.size()
    assert var_4 == 0
    var_5 = var_4.__repr__()
    assert var_5 == '0'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    var_6 = queue_8.dequeue()
    assert var_6 == 77
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_7 = double_linked_list_1.push(queue_9)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    none_type_0 = None
    queue_12 = module_0.Queue()
    var_8 = queue_12.enqueue(none_type_0)
    node_6 = module_0.Node()
    var_9 = node_6.__repr__()
    assert var_9 == 'Value: None'
    queue_13 = module_0.Queue(node_6)
    var_10 = queue_13.enqueue(var_9)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_2)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_11 = double_linked_list_3.append(bytes_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_12 = double_linked_list_3.append(queue_14)

def test_case_1660():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    node_4 = module_0.Node()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.push(var_1)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_3 = queue_2.peek()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = double_linked_list_3.append(set_3)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_5 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    queue_8 = module_0.Queue(queue_6)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    none_type_0 = None
    node_8 = module_0.Node(prev=none_type_0)
    set_5 = set()
    node_9 = module_0.Node(prev=set_5)
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None

def test_case_1661():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77

def test_case_1662():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    queue_2 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_2 = queue_2.size()
    assert var_2 == 0
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_8 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_4 = queue_8.size()
    assert var_4 == 0
    queue_9 = module_0.Queue()
    var_5 = queue_9.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_0)
    assert f'{type(queue_10).__module__}.{type(queue_10).__qualname__}' == 'queue4.Queue'
    queue_11 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    var_6 = queue_11.size()
    assert var_6 == 0
    queue_12 = module_0.Queue()
    var_7 = queue_11.size()
    assert var_7 == 0
    queue_13 = module_0.Queue()
    var_8 = queue_11.peek()

def test_case_1663():
    int_0 = -497
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.push(int_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    var_1 = var_0.__repr__()

def test_case_1664():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    queue_4 = module_0.Queue(node_1)
    var_3 = queue_0.size()
    assert var_3 == 0

def test_case_1665():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_2.peek()
    queue_3 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_3.size()
    assert var_3 == 0
    var_4 = queue_2.size()
    assert var_4 == 0
    queue_4 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_5 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    queue_6 = module_0.Queue(queue_4)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_6 = queue_9.peek()
    node_6 = module_0.Node()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_7 = double_linked_list_1.push(var_6)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_0)
    var_8 = queue_10.dequeue()
    assert var_8 == 77

def test_case_1666():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    var_1 = queue_1.dequeue()
    assert var_1 == 77
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = queue_5.size()
    assert var_3 == 0
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = double_linked_list_1.append(set_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_5 = queue_9.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    double_linked_list_3 = module_0.DoubleLinkedList(var_5)
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_2)
    queue_14 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_6 = queue_14.size()
    assert var_6 == 0
    queue_15 = module_0.Queue()
    var_7 = queue_14.size()
    assert var_7 == 0
    with pytest.raises(IndexError):
        double_linked_list_3.shift()

def test_case_1667():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    with pytest.raises(IndexError):
        double_linked_list_0.shift()

def test_case_1668():
    node_0 = module_0.Node()
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_2 = module_0.Node()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = var_0.__repr__()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_4 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    var_5 = queue_10.enqueue(set_3)
    complex_0 = 2886.801252 + 1418.99508j
    queue_11 = module_0.Queue(complex_0)
    var_6 = queue_11.size()
    assert var_6 == 1

def test_case_1669():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bool_0 = True
    double_linked_list_1 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    var_3 = node_4.__repr__()
    assert var_3 == 'Value: None'
    queue_6 = module_0.Queue(node_4)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    var_4 = queue_7.dequeue()
    assert var_4 == 77
    queue_8 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = queue_11.size()
    assert var_5 == 0
    node_6 = module_0.Node()
    queue_12 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_6 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_14 = module_0.Queue(queue_13)
    var_7 = queue_12.peek()

def test_case_1670():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = queue_0.size()
    assert var_1 == 0
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_2 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_4.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList(var_3)
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_5 = module_0.Node()
    queue_7 = module_0.Queue()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)

def test_case_1671():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue(none_type_0)
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_0.push(queue_4)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_7.peek()
    node_2 = module_0.Node()
    queue_8 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_8.peek()
    queue_9 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_3 = queue_9.size()
    assert var_3 == 0
    var_4 = queue_8.size()
    assert var_4 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_5 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()

def test_case_1672():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    queue_6 = module_0.Queue(queue_4)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    queue_8 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_8.size()
    assert var_2 == 0
    queue_9 = module_0.Queue()
    var_3 = queue_8.size()
    assert var_3 == 0
    var_4 = var_3.__repr__()
    assert var_4 == '0'
    queue_10 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_5 = double_linked_list_0.append(node_4)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_6 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'queue4.Node'
    assert var_6.data is None
    assert var_6.next is None
    assert var_6.prev == {*()}
    queue_12 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_7 = queue_12.peek()
    queue_13 = module_0.Queue(queue_12)
    var_8 = queue_13.enqueue(set_5)

def test_case_1673():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_0 = queue_5.size()
    assert var_0 == 0
    node_2 = module_0.Node()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_10 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    node_4 = module_0.Node()
    var_1 = queue_9.size()
    assert var_1 == 0
    var_2 = queue_8.size()
    assert var_2 == 0
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    var_3 = queue_13.size()
    assert var_3 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_0)
    assert f'{type(queue_14).__module__}.{type(queue_14).__qualname__}' == 'queue4.Queue'
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    var_4 = double_linked_list_8.append(bytes_0)
    assert f'{type(double_linked_list_8.head).__module__}.{type(double_linked_list_8.head).__qualname__}' == 'queue4.Node'
    none_type_0 = None
    node_6 = module_0.Node(prev=none_type_0)
    node_7 = module_0.Node()
    var_5 = node_7.__repr__()
    assert var_5 == 'Value: None'

def test_case_1674():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == 77

def test_case_1675():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_2.append(node_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_4.size()
    assert var_2 == 0

def test_case_1676():
    str_0 = 'zf@Mcnf\tin\x0b!'
    double_linked_list_0 = module_0.DoubleLinkedList(str_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    var_0 = double_linked_list_0.append(str_0)

def test_case_1677():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = var_0.__repr__()
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_2.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    queue_4 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = queue_4.size()
    assert var_4 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_5 = double_linked_list_1.append(node_6)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_6 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'queue4.Node'
    assert var_6.data is None
    assert var_6.next is None
    assert var_6.prev == {*()}
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_8 = module_0.Node()
    var_7 = queue_10.size()
    assert var_7 == 0
    var_8 = queue_9.size()
    assert var_8 == 0
    node_9 = module_0.Node()
    var_9 = node_9.__repr__()
    assert var_9 == 'Value: None'
    queue_12 = module_0.Queue(node_9)
    var_10 = queue_12.enqueue(var_9)

def test_case_1678():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = var_0.__repr__()
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_0.append(node_3)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Node'
    assert var_3.data is None
    assert var_3.next is None
    assert var_3.prev == {*()}
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    queue_5 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue(queue_6)
    var_5 = queue_5.peek()
    node_4 = module_0.Node()
    var_6 = node_4.__repr__()
    assert var_6 == 'Value: None'
    queue_8 = module_0.Queue(node_4)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_2)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_7 = double_linked_list_2.append(bytes_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    var_8 = node_5.__repr__()
    assert var_8 == 'Value: None'
    node_6 = module_0.Node()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    none_type_0 = None
    queue_10 = module_0.Queue()
    var_9 = queue_10.enqueue(none_type_0)
    queue_11 = module_0.Queue()
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_3)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_10 = double_linked_list_3.append(bytes_3)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_13 = module_0.Queue(queue_12)
    var_11 = queue_11.peek()
    var_12 = queue_13.size()
    assert var_12 == 1
    var_13 = queue_13.dequeue()
    assert f'{type(var_13).__module__}.{type(var_13).__qualname__}' == 'queue4.Queue'
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    queue_14 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    var_14 = queue_16.size()
    assert var_14 == 0
    node_9 = module_0.Node()

def test_case_1679():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_0.push(queue_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = queue_3.size()
    assert var_2 == 0
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_3 = queue_7.size()
    assert var_3 == 0

def test_case_1680():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_3 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_2 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue(queue_7)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_3 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    queue_10 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_4 = queue_10.peek()
    queue_11 = module_0.Queue(queue_10)
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_5 = var_4.__repr__()
    var_6 = queue_2.size()
    assert var_6 == 0

def test_case_1681():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = node_1.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_1)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_1 = queue_0.enqueue(var_0)
    queue_1 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    queue_3 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_3.size()
    assert var_3 == 0
    node_4 = module_0.Node()
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_5 = var_4.__repr__()
    assert var_5 == "'Value: None'"
    queue_4 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_6 = queue_4.size()
    assert var_6 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_7 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_8 = double_linked_list_3.append(node_7)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_9 = queue_8.size()
    assert var_9 == 0
    none_type_0 = None
    node_8 = module_0.Node(prev=none_type_0)

def test_case_1682():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    bool_0 = True
    double_linked_list_1 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    none_type_0 = None
    queue_4 = module_0.Queue(none_type_0)
    queue_5 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = double_linked_list_2.append(node_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_5.size()
    assert var_2 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_4 = module_0.Node()
    var_3 = queue_9.size()
    assert var_3 == 0
    var_4 = queue_8.size()
    assert var_4 == 0
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_13 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_6 = module_0.Node()
    var_5 = queue_12.size()
    assert var_5 == 0

def test_case_1683():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_0 = queue_4.size()
    assert var_0 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_6.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    double_linked_list_4 = module_0.DoubleLinkedList(var_1)
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    queue_9 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_9.size()
    assert var_2 == 0
    queue_10 = module_0.Queue()
    var_3 = queue_9.size()
    assert var_3 == 0
    var_4 = var_3.__repr__()
    assert var_4 == '0'
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    none_type_0 = None
    queue_14 = module_0.Queue(none_type_0)
    queue_15 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_5 = queue_15.peek()
    queue_16 = module_0.Queue(queue_15)
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_17 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_6 = double_linked_list_6.append(set_4)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'

def test_case_1684():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_1)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    with pytest.raises(IndexError):
        double_linked_list_1.pop()

def test_case_1685():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    var_2 = queue_3.size()
    assert var_2 == 0
    var_3 = queue_2.peek()
    assert var_3 == 77
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = double_linked_list_2.append(node_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_5.size()
    assert var_5 == 0

def test_case_1686():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = var_0.__repr__()
    assert var_1 == "'Value: None'"
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_0 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = double_linked_list_2.append(node_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_1.enqueue(queue_0)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None

def test_case_1687():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = queue_0.size()
    assert var_1 == 11

def test_case_1688():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_1 = queue_0.enqueue(var_0)
    queue_1 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_1.peek()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_3 = queue_6.size()
    assert var_3 == 0
    queue_7 = module_0.Queue()
    var_4 = queue_7.peek()
    queue_8 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_5 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    var_6 = queue_9.enqueue(set_4)

def test_case_1689():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    var_1 = queue_1.dequeue()
    assert var_1 == 77
    queue_2 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = queue_5.size()
    assert var_2 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    queue_7 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = queue_7.size()
    assert var_3 == 0
    queue_8 = module_0.Queue()
    var_4 = queue_7.size()
    assert var_4 == 0
    var_5 = queue_6.peek()
    assert var_5 == 77

def test_case_1690():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    node_2 = module_0.Node(set_0)
    complex_0 = 2886.801252 + 1418.99508j
    queue_1 = module_0.Queue(complex_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_1 = queue_1.size()
    assert var_1 == 1
    queue_2 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_2 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_3 = var_2.__repr__()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    queue_5 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_4 = queue_5.size()
    assert var_4 == 0
    queue_6 = module_0.Queue()
    var_5 = queue_5.size()
    assert var_5 == 0
    queue_7 = module_0.Queue()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    queue_9 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_6 = queue_9.size()
    assert var_6 == 0
    queue_10 = module_0.Queue()
    var_7 = queue_9.size()
    assert var_7 == 0
    node_8 = module_0.Node()
    var_8 = node_8.__repr__()
    assert var_8 == 'Value: None'
    queue_11 = module_0.Queue(node_8)
    var_9 = queue_11.enqueue(var_8)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_2)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_10 = double_linked_list_0.append(bytes_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_11 = double_linked_list_0.append(queue_12)

def test_case_1691():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_7 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    var_1 = queue_6.size()
    assert var_1 == 0
    queue_8 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_8.size()
    assert var_2 == 0
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_3 = queue_11.size()
    assert var_3 == 0
    queue_12 = module_0.Queue()
    var_4 = queue_12.peek()
    var_5 = queue_12.size()
    assert var_5 == 0

def test_case_1692():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    var_1 = queue_2.peek()
    var_2 = queue_4.size()
    assert var_2 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_1.push(queue_5)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_4 = queue_8.size()
    assert var_4 == 0
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_5 = queue_10.peek()
    queue_11 = module_0.Queue(queue_10)
    var_6 = queue_11.enqueue(set_2)
    queue_12 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_7 = queue_12.size()
    assert var_7 == 0
    bool_0 = True
    double_linked_list_3 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_13 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_14 = module_0.Queue()
    var_8 = queue_14.peek()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_17 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    var_9 = queue_19.size()
    assert var_9 == 0

def test_case_1693():
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_0 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_2 = module_0.Node()
    var_1 = queue_4.size()
    assert var_1 == 0
    var_2 = queue_3.size()
    assert var_2 == 0
    node_3 = module_0.Node()
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = var_3.__repr__()
    assert var_4 == "'Value: None'"
    queue_6 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue(queue_7)
    var_6 = queue_6.peek()
    var_7 = queue_8.size()
    assert var_7 == 1
    var_8 = queue_8.dequeue()
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'queue4.Queue'
    node_4 = module_0.Node()
    var_9 = node_4.__repr__()
    assert var_9 == 'Value: None'
    queue_9 = module_0.Queue(node_4)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_1)
    var_10 = queue_10.dequeue()
    assert var_10 == 77
    queue_11 = module_0.Queue()

def test_case_1694():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_2.peek()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.size()
    assert var_1 == 0
    var_2 = queue_2.size()
    assert var_2 == 0
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    var_3 = queue_7.dequeue()
    assert var_3 == 77
    queue_8 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_4 = double_linked_list_2.append(node_4)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()

def test_case_1695():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    queue_2 = module_0.Queue(node_1)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    var_2 = queue_2.enqueue(var_1)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = queue_3.peek()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_4 = queue_4.size()
    assert var_4 == 0
    var_5 = queue_3.size()
    assert var_5 == 0
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    var_6 = queue_5.dequeue()
    assert var_6 == 77

def test_case_1696():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    var_3 = queue_2.peek()
    var_4 = queue_4.size()
    assert var_4 == 1
    bool_0 = True
    double_linked_list_2 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'

def test_case_1697():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.size()
    assert var_2 == 0

def test_case_1698():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    var_1 = queue_3.peek()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    queue_8 = module_0.Queue(queue_6)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_13 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_4 = module_0.Node()
    var_3 = queue_12.size()
    assert var_3 == 0
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    queue_14 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_5 = queue_14.peek()
    queue_15 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_6 = queue_15.size()
    assert var_6 == 0
    var_7 = queue_14.size()
    assert var_7 == 0
    queue_16 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_8 = queue_16.size()
    assert var_8 == 0
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_9 = queue_17.peek()

def test_case_1699():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_0 = queue_3.size()
    assert var_0 == 0
    node_2 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = queue_5.size()
    assert var_1 == 0
    queue_6 = module_0.Queue()
    var_2 = queue_5.size()
    assert var_2 == 0
    var_3 = var_2.__repr__()
    assert var_3 == '0'
    queue_7 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = queue_7.size()
    assert var_4 == 0
    queue_8 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_5 = double_linked_list_3.append(node_6)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_6 = queue_8.size()
    assert var_6 == 0

def test_case_1700():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    node_2 = module_0.Node()
    var_1 = node_2.__repr__()
    assert var_1 == 'Value: None'
    queue_5 = module_0.Queue(node_2)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    var_2 = queue_5.enqueue(var_1)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_3 = double_linked_list_4.append(set_2)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    queue_10 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = queue_10.size()
    assert var_4 == 0
    queue_11 = module_0.Queue()
    var_5 = queue_10.size()
    assert var_5 == 0
    var_6 = var_5.__repr__()
    assert var_6 == '0'

def test_case_1701():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    queue_5 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_5.size()
    assert var_0 == 0
    queue_6 = module_0.Queue()
    var_1 = queue_5.size()
    assert var_1 == 0
    var_2 = queue_4.peek()
    assert var_2 == 77
    queue_7 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_8 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_7.size()
    assert var_4 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    queue_10 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_5 = queue_10.size()
    assert var_5 == 0
    queue_11 = module_0.Queue()
    var_6 = queue_10.size()
    assert var_6 == 0
    queue_12 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_2)
    queue_14 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_7 = queue_14.peek()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_6 = module_0.Node()
    var_8 = node_6.__repr__()
    assert var_8 == 'Value: None'
    queue_15 = module_0.Queue(node_6)
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_16 = module_0.Queue(bytes_3)
    var_9 = queue_16.dequeue()
    assert var_9 == 77
    queue_17 = module_0.Queue()

def test_case_1702():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
    assert var_1.data is None
    assert var_1.next is None
    assert var_1.prev == {*()}
    queue_2 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    var_3 = queue_2.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = queue_6.size()
    assert var_4 == 0
    queue_7 = module_0.Queue()
    var_5 = queue_6.size()
    assert var_5 == 0
    var_6 = queue_5.peek()
    assert var_6 == 77
    queue_8 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_7 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    var_8 = queue_9.enqueue(set_3)
    queue_10 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_9 = queue_10.size()
    assert var_9 == 0
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_13 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_14 = module_0.Queue()
    var_10 = queue_14.peek()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_17 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_11 = queue_17.size()
    assert var_11 == 0
    queue_18 = module_0.Queue()
    none_type_0 = None
    var_12 = queue_18.enqueue(none_type_0)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_19 = module_0.Queue(bytes_2)
    var_13 = queue_19.dequeue()
    assert var_13 == 77
    with pytest.raises(ValueError):
        double_linked_list_1.remove(set_1)

def test_case_1703():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = var_2.__repr__()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = queue_8.size()
    assert var_4 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    var_6 = queue_9.size()
    assert var_6 == 11
    node_6 = module_0.Node()
    var_7 = node_6.__repr__()
    assert var_7 == 'Value: None'
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_8 = var_7.__repr__()
    assert var_8 == "'Value: None'"
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_2)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_9 = double_linked_list_5.append(bytes_2)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    queue_11 = module_0.Queue(queue_10)
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)

def test_case_1704():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_2 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    node_3 = module_0.Node()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.push(var_1)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    var_4 = queue_3.size()
    assert var_4 == 11
    queue_4 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_5 = double_linked_list_2.append(node_6)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_6 = queue_5.enqueue(queue_4)
    node_7 = module_0.Node()
    var_7 = node_7.__repr__()
    assert var_7 == 'Value: None'
    node_8 = module_0.Node()
    var_8 = node_8.__repr__()
    assert var_8 == 'Value: None'
    queue_6 = module_0.Queue(node_8)
    node_9 = module_0.Node()
    var_9 = node_9.__repr__()
    assert var_9 == 'Value: None'
    queue_7 = module_0.Queue(node_9)
    var_10 = queue_7.enqueue(var_9)
    queue_8 = module_0.Queue()
    set_4 = set()
    node_10 = module_0.Node(prev=set_4)
    var_11 = queue_8.size()
    assert var_11 == 0
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_12 = queue_8.size()
    assert var_12 == 0

def test_case_1705():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.peek()

def test_case_1706():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    var_2 = queue_5.dequeue()
    assert var_2 == 77

def test_case_1707():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_4.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    double_linked_list_3 = module_0.DoubleLinkedList(var_1)
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_6.peek()
    node_3 = module_0.Node()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_3 = double_linked_list_4.push(var_2)
    assert f'{type(double_linked_list_4.tail).__module__}.{type(double_linked_list_4.tail).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    queue_7 = module_0.Queue(node_4)
    queue_8 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_5 = double_linked_list_5.append(node_6)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_6 = queue_8.size()
    assert var_6 == 0
    queue_10 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_7 = queue_10.peek()
    queue_11 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_8 = queue_11.size()
    assert var_8 == 0
    var_9 = queue_10.size()
    assert var_9 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_10 = double_linked_list_6.append(bytes_1)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    var_11 = double_linked_list_6.append(queue_12)

def test_case_1708():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = queue_1.peek()

def test_case_1709():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    node_2 = module_0.Node(set_0)
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue()
    node_3 = module_0.Node()
    var_1 = node_3.__repr__()
    assert var_1 == 'Value: None'
    queue_2 = module_0.Queue(node_3)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    var_2 = queue_3.dequeue()
    assert var_2 == 77
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    none_type_0 = None
    queue_8 = module_0.Queue(none_type_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    queue_10 = module_0.Queue()
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    var_3 = queue_10.size()
    assert var_3 == 0
    queue_11 = module_0.Queue()
    var_4 = queue_10.size()
    assert var_4 == 0
    var_5 = var_4.__repr__()
    assert var_5 == '0'
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    queue_12 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    queue_15 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_6 = queue_17.size()
    assert var_6 == 0
    node_7 = module_0.Node()
    int_0 = -2795
    with pytest.raises(ValueError):
        double_linked_list_2.remove(int_0)

def test_case_1710():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue(queue_4)
    var_2 = queue_3.peek()
    none_type_0 = None
    node_1 = module_0.Node(prev=none_type_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    node_3 = module_0.Node()
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    queue_7 = module_0.Queue(node_3)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_2)
    var_5 = queue_8.dequeue()
    assert var_5 == 77
    queue_9 = module_0.Queue()
    node_4 = module_0.Node()
    var_6 = node_4.__repr__()
    assert var_6 == 'Value: None'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_7 = var_6.__repr__()
    assert var_7 == "'Value: None'"
    queue_10 = module_0.Queue()
    set_1 = set()
    node_5 = module_0.Node(prev=set_1)
    var_8 = queue_10.peek()
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_3)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_9 = double_linked_list_3.append(bytes_3)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_6 = module_0.Node()
    var_10 = queue_11.size()
    assert var_10 == 11
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_14 = module_0.Queue()
    set_2 = set()
    node_7 = module_0.Node(prev=set_2)
    var_11 = queue_14.peek()
    queue_15 = module_0.Queue(queue_14)
    int_0 = -1468

def test_case_1711():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    var_1 = queue_2.size()
    assert var_1 == 0
    var_2 = queue_1.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = queue_4.size()
    assert var_4 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_5 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    queue_7 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_6 = double_linked_list_3.append(node_6)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_7 = queue_8.enqueue(queue_7)
    queue_9 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_8 = queue_9.size()
    assert var_8 == 0
    queue_10 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_9 = queue_10.peek()
    queue_11 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_10 = queue_11.size()
    assert var_10 == 0
    var_11 = queue_10.size()
    assert var_11 == 0
    queue_12 = module_0.Queue()
    set_8 = set()
    node_10 = module_0.Node(prev=set_8)
    var_12 = queue_12.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    double_linked_list_5 = module_0.DoubleLinkedList(var_12)
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None

def test_case_1712():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    var_1 = var_0.__repr__()
    assert var_1 == '1'
    none_type_0 = None
    node_0 = module_0.Node(prev=none_type_0)
    queue_1 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_1.peek()
    node_2 = module_0.Node()
    node_3 = module_0.Node(set_0)
    queue_2 = module_0.Queue()
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    var_3 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    queue_4 = module_0.Queue(queue_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_6 = module_0.Node()
    var_4 = queue_6.size()
    assert var_4 == 0
    queue_8 = module_0.Queue()
    set_3 = set()
    node_7 = module_0.Node(prev=set_3)
    var_5 = queue_8.size()
    assert var_5 == 0
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_9 = module_0.Node()

def test_case_1713():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_0)
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_1 = module_0.Node()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = double_linked_list_2.append(node_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_2.size()
    assert var_3 == 0
    bool_0 = True

def test_case_1714():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(set_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_2.append(node_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_7.enqueue(queue_6)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    assert f'{type(queue_8).__module__}.{type(queue_8).__qualname__}' == 'queue4.Queue'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_3.append(queue_8)
    queue_9 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_6 = queue_9.size()
    assert var_6 == 0
    queue_10 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_7 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_12 = module_0.Queue(queue_11)
    var_8 = queue_10.peek()
    var_9 = queue_12.size()
    assert var_9 == 1
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_13 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_14 = module_0.Queue()
    var_10 = queue_14.peek()
    node_6 = module_0.Node()
    var_11 = node_6.__repr__()
    assert var_11 == 'Value: None'
    queue_15 = module_0.Queue(node_6)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_16 = module_0.Queue(bytes_2)
    var_12 = queue_16.dequeue()
    assert var_12 == 77
    queue_17 = module_0.Queue()
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_18 = module_0.Queue(bytes_3)
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_13 = double_linked_list_6.append(bytes_3)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    node_7 = module_0.Node()
    var_14 = queue_18.size()
    assert var_14 == 11

def test_case_1715():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    var_2 = queue_3.peek()

def test_case_1716():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_0.push(queue_2)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_3 = double_linked_list_2.append(node_5)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    queue_9 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_4 = queue_9.size()
    assert var_4 == 0
    queue_10 = module_0.Queue()
    var_5 = queue_9.size()
    assert var_5 == 0
    queue_11 = module_0.Queue()
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    queue_12 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_6 = queue_12.peek()
    queue_13 = module_0.Queue(queue_12)
    set_8 = set()
    node_10 = module_0.Node(prev=set_8)
    var_7 = var_6.__repr__()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    set_9 = set()
    node_11 = module_0.Node(prev=set_9)
    queue_16 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_12 = module_0.Node()
    var_8 = queue_15.size()
    assert var_8 == 0
    var_9 = queue_14.size()
    assert var_9 == 0
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None

def test_case_1717():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_2 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_5.size()
    assert var_2 == 0
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_7 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_7.peek()
    node_4 = module_0.Node()
    node_5 = module_0.Node(set_3)

def test_case_1718():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_3.peek()
    queue_5 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue(queue_6)
    var_5 = queue_5.peek()
    var_6 = queue_7.size()
    assert var_6 == 1
    var_7 = queue_7.dequeue()
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'queue4.Queue'
    with pytest.raises(ValueError):
        double_linked_list_0.remove(queue_7)

def test_case_1719():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = var_0.__repr__()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_4 = queue_5.peek()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    none_type_0 = None
    queue_10 = module_0.Queue(none_type_0)
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_5 = queue_13.size()
    assert var_5 == 0
    complex_0 = 2886.801252 + 1418.99508j
    queue_14 = module_0.Queue(complex_0)
    var_6 = queue_14.size()
    assert var_6 == 1
    queue_15 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_7 = queue_15.peek()
    queue_16 = module_0.Queue(queue_15)
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_17 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_18 = module_0.Queue()
    var_8 = queue_18.peek()
    queue_19 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_9 = queue_19.peek()
    queue_20 = module_0.Queue(queue_19)
    queue_21 = module_0.Queue(queue_19)
    queue_22 = module_0.Queue()
    queue_23 = module_0.Queue()
    var_10 = queue_19.size()
    assert var_10 == 0
    queue_24 = module_0.Queue()
    queue_25 = module_0.Queue()

def test_case_1720():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = queue_0.size()
    assert var_1 == 0
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    var_2 = queue_4.peek()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_7.peek()
    queue_8 = module_0.Queue(queue_7)
    assert f'{type(queue_8).__module__}.{type(queue_8).__qualname__}' == 'queue4.Queue'
    var_4 = queue_8.enqueue(set_2)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    queue_10 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_5 = queue_10.size()
    assert var_5 == 0
    queue_11 = module_0.Queue()
    var_6 = queue_10.size()
    assert var_6 == 0
    queue_12 = module_0.Queue()

def test_case_1721():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    node_1 = module_0.Node()
    var_0 = node_1.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_1)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_3 = module_0.Node()
    queue_2 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_1 = double_linked_list_1.append(node_5)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_3.enqueue(queue_2)
    node_6 = module_0.Node()
    var_3 = node_6.__repr__()
    assert var_3 == 'Value: None'
    queue_4 = module_0.Queue(node_6)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    var_4 = queue_5.dequeue()
    assert var_4 == 77
    queue_6 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    with pytest.raises(IndexError):
        double_linked_list_0.pop()

def test_case_1722():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue(queue_5)
    var_2 = queue_4.peek()
    var_3 = queue_6.size()
    assert var_3 == 1
    var_4 = queue_6.dequeue()
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'queue4.Queue'
    none_type_0 = None
    node_1 = module_0.Node(prev=none_type_0)
    node_2 = module_0.Node()
    var_5 = node_2.__repr__()
    assert var_5 == 'Value: None'
    queue_7 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_6 = queue_7.size()
    assert var_6 == 0
    queue_8 = module_0.Queue()
    none_type_1 = None
    var_7 = queue_8.enqueue(none_type_1)
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    var_8 = queue_11.size()
    assert var_8 == 0
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_1)
    double_linked_list_5 = module_0.DoubleLinkedList()
    var_9 = double_linked_list_5.append(bytes_1)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    queue_15 = module_0.Queue(queue_14)
    var_10 = queue_13.peek()
    var_11 = queue_15.size()
    assert var_11 == 1
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_16 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_12 = queue_16.peek()
    queue_17 = module_0.Queue(queue_16)
    queue_18 = module_0.Queue(queue_16)

def test_case_1723():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    var_1 = queue_1.dequeue()
    assert var_1 == 77
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    var_2 = queue_4.size()
    assert var_2 == 0
    var_3 = node_1.__repr__()
    assert var_3 == 'Value: None'
    none_type_0 = None
    node_3 = module_0.Node(prev=none_type_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_8 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue(queue_9)
    var_5 = queue_8.peek()
    complex_0 = 2886.801252 + 1418.99508j
    queue_11 = module_0.Queue(complex_0)
    var_6 = queue_11.size()
    assert var_6 == 1

def test_case_1724():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_0 = queue_1.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    with pytest.raises(ValueError):
        double_linked_list_0.remove(queue_2)

def test_case_1725():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == 77
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_4.enqueue(queue_3)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_7 = module_0.Queue(complex_0)
    var_3 = queue_7.size()
    assert var_3 == 1
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    queue_9 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_9.size()
    assert var_4 == 0
    queue_10 = module_0.Queue()
    var_5 = queue_9.size()
    assert var_5 == 0
    var_6 = queue_8.peek()
    assert var_6 == 77
    node_4 = module_0.Node()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_2)
    queue_12 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_7 = queue_12.size()
    assert var_7 == 0
    queue_13 = module_0.Queue()
    var_8 = queue_12.size()
    assert var_8 == 0
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_3)
    queue_15 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_9 = queue_15.size()
    assert var_9 == 0
    queue_16 = module_0.Queue()
    var_10 = queue_15.size()
    assert var_10 == 0
    queue_17 = module_0.Queue()
    with pytest.raises(IndexError):
        double_linked_list_0.shift()

def test_case_1726():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77
    none_type_0 = None
    node_1 = module_0.Node(prev=none_type_0)

def test_case_1727():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    var_1 = var_0.__repr__()
    assert var_1 == '1'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_2 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    queue_3 = module_0.Queue(queue_1)
    none_type_0 = None
    node_1 = module_0.Node(prev=none_type_0)
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_5 = module_0.Queue()
    var_3 = queue_5.peek()

def test_case_1728():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_3 = module_0.Node()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_5 = module_0.Node()
    var_1 = queue_5.size()
    assert var_1 == 0
    var_2 = node_4.__repr__()
    assert var_2 == 'Value: None'
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_7 = module_0.Node()
    var_3 = queue_8.size()
    assert var_3 == 0
    var_4 = queue_7.size()
    assert var_4 == 0
    queue_10 = module_0.Queue()
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    var_5 = queue_10.peek()
    node_9 = module_0.Node()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_6 = double_linked_list_4.push(var_5)
    assert f'{type(double_linked_list_4.tail).__module__}.{type(double_linked_list_4.tail).__qualname__}' == 'queue4.Node'
    set_5 = set()
    node_10 = module_0.Node(prev=set_5)
    queue_11 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_7 = queue_13.size()
    assert var_7 == 0

def test_case_1729():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = var_0.__repr__()

def test_case_1730():
    none_type_0 = None
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(none_type_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'

def test_case_1731():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = double_linked_list_3.append(set_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    none_type_0 = None
    queue_13 = module_0.Queue(none_type_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)

def test_case_1732():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_0 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
    assert var_1.data is None
    assert var_1.next is None
    assert var_1.prev == {*()}
    complex_0 = 2886.801252 + 1418.99508j
    queue_2 = module_0.Queue(complex_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    var_2 = queue_2.size()
    assert var_2 == 1
    var_3 = var_2.__repr__()
    assert var_3 == '1'
    queue_3 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_3.peek()
    node_4 = module_0.Node()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_5 = double_linked_list_1.push(var_4)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'

def test_case_1733():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_4 = module_0.Queue(complex_0)
    var_2 = queue_4.size()
    assert var_2 == 1
    var_3 = var_2.__repr__()
    assert var_3 == '1'
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_4 = queue_5.size()
    assert var_4 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    queue_9 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_5 = queue_9.size()
    assert var_5 == 0
    queue_10 = module_0.Queue()
    var_6 = queue_9.size()
    assert var_6 == 0
    queue_11 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_7 = queue_11.peek()
    node_4 = module_0.Node()
    node_5 = module_0.Node(set_3)

def test_case_1734():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'

def test_case_1735():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue(queue_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_1 = module_0.Node()
    var_1 = queue_4.size()
    assert var_1 == 0
    var_2 = node_0.__repr__()
    assert var_2 == 'Value: None'
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_2)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_2.append(bytes_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_3)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = double_linked_list_3.append(bytes_3)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_5 = double_linked_list_4.append(node_4)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_6 = double_linked_list_4.shift()
    assert double_linked_list_4.tail is None
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'queue4.Node'
    assert var_6.data is None
    assert var_6.next is None
    assert var_6.prev == {*()}
    node_5 = module_0.Node()

def test_case_1736():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue(none_type_0)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = queue_7.size()
    assert var_2 == 0
    queue_8 = module_0.Queue()
    none_type_1 = None
    var_3 = queue_8.enqueue(none_type_1)
    queue_9 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_4 = queue_9.peek()
    queue_10 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_5 = queue_10.size()
    assert var_5 == 0
    var_6 = queue_9.size()
    assert var_6 == 0
    queue_11 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_7 = queue_11.peek()
    node_7 = module_0.Node()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_8 = double_linked_list_1.push(var_7)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    queue_12 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_9 = double_linked_list_3.append(set_7)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_10 = double_linked_list_3.push(set_7)
    node_9 = module_0.Node()
    var_11 = node_9.__repr__()
    assert var_11 == 'Value: None'
    queue_15 = module_0.Queue(node_9)
    var_12 = queue_15.enqueue(var_11)
    set_8 = set()
    node_10 = module_0.Node(prev=set_8)
    queue_16 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_13 = double_linked_list_5.append(set_8)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_14 = queue_16.enqueue(node_10)

def test_case_1737():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    node_1 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_4.size()
    assert var_1 == 0
    queue_5 = module_0.Queue()
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_4 = module_0.Node()
    var_3 = queue_7.size()
    assert var_3 == 0
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_5 = queue_11.size()
    assert var_5 == 0
    queue_12 = module_0.Queue()

def test_case_1738():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_6.size()
    assert var_2 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue(queue_7)
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_10 = module_0.Queue()
    var_4 = queue_10.peek()

def test_case_1739():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'

def test_case_1740():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = queue_0.size()
    assert var_1 == 0

def test_case_1741():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    complex_0 = 2886.801252 + 1418.99508j
    queue_2 = module_0.Queue(complex_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    var_1 = queue_2.size()
    assert var_1 == 1
    var_2 = var_1.__repr__()
    assert var_2 == '1'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    var_4 = queue_4.size()
    assert var_4 == 0
    var_5 = queue_3.peek()
    assert var_5 == 77
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)

def test_case_1742():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = queue_0.size()
    assert var_1 == 0

def test_case_1743():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    node_2 = module_0.Node()

def test_case_1744():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
    assert var_1.data is None
    assert var_1.next is None
    assert var_1.prev == {*()}
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_7 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_8 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_3 = double_linked_list_4.append(node_6)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    node_7 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    assert f'{type(queue_9).__module__}.{type(queue_9).__qualname__}' == 'queue4.Queue'
    queue_10 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_4 = queue_10.size()
    assert var_4 == 0
    queue_11 = module_0.Queue()
    var_5 = queue_10.size()
    assert var_5 == 0
    var_6 = var_5.__repr__()
    assert var_6 == '0'
    queue_12 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_1)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_7 = double_linked_list_5.append(bytes_1)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    queue_14 = module_0.Queue(queue_13)
    var_8 = queue_12.peek()
    node_9 = module_0.Node()
    var_9 = node_9.__repr__()
    assert var_9 == 'Value: None'
    queue_15 = module_0.Queue(node_9)
    var_10 = queue_15.enqueue(var_9)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_16 = module_0.Queue(bytes_2)
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_11 = double_linked_list_6.append(bytes_2)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    node_10 = module_0.Node()
    var_12 = queue_16.size()
    assert var_12 == 11
    complex_0 = 2886.801252 + 1418.99508j
    queue_17 = module_0.Queue(complex_0)
    var_13 = queue_17.size()
    assert var_13 == 1

def test_case_1745():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = queue_0.size()
    assert var_1 == 11
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    queue_2 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    var_3 = queue_2.size()
    assert var_3 == 0
    var_4 = queue_1.peek()
    assert var_4 == 77
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_5 = queue_4.peek()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_2)
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_6 = queue_6.size()
    assert var_6 == 0
    queue_7 = module_0.Queue()
    var_7 = queue_6.size()
    assert var_7 == 0
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_8 = queue_9.size()
    assert var_8 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_12 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_9 = double_linked_list_1.push(queue_12)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_15 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_10 = double_linked_list_4.append(set_5)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_11 = double_linked_list_4.push(set_5)
    none_type_0 = None
    node_7 = module_0.Node(prev=none_type_0)

def test_case_1746():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'

def test_case_1747():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_0.append(queue_3)
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = queue_4.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList(var_4)
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    with pytest.raises(IndexError):
        double_linked_list_1.shift()

def test_case_1748():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = double_linked_list_1.append(node_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    node_3 = module_0.Node()
    var_2 = node_3.__repr__()
    assert var_2 == 'Value: None'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = var_2.__repr__()
    assert var_3 == "'Value: None'"

def test_case_1749():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_3.peek()
    node_2 = module_0.Node()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = var_2.__repr__()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_4 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_5 = queue_6.size()
    assert var_5 == 11
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_2)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_6 = double_linked_list_1.append(bytes_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue(queue_7)
    bool_0 = True
    double_linked_list_2 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'

def test_case_1750():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = True
    double_linked_list_1 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_3 = module_0.Node()
    var_1 = queue_2.size()
    assert var_1 == 0
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_3 = double_linked_list_4.append(set_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_4 = queue_7.peek()
    queue_8 = module_0.Queue(queue_7)
    var_5 = queue_8.enqueue(set_2)
    queue_9 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_6 = queue_9.size()
    assert var_6 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    node_7 = module_0.Node()
    var_7 = node_7.__repr__()
    assert var_7 == 'Value: None'
    queue_12 = module_0.Queue(node_7)
    var_8 = queue_12.enqueue(var_7)
    none_type_1 = None
    node_8 = module_0.Node(prev=none_type_1)

def test_case_1751():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.size()
    assert var_2 == 0
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_2.size()
    assert var_3 == 0
    queue_3 = module_0.Queue()
    var_4 = node_2.__repr__()
    assert var_4 == 'Value: None'
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_5 = queue_4.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_6 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_7 = double_linked_list_2.append(set_4)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    var_8 = queue_9.dequeue()
    assert var_8 == 77
    queue_10 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_9 = queue_10.size()
    assert var_9 == 0
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_14 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_10 = double_linked_list_4.push(queue_14)
    assert f'{type(double_linked_list_4.tail).__module__}.{type(double_linked_list_4.tail).__qualname__}' == 'queue4.Node'

def test_case_1752():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    node_2 = module_0.Node(set_0)
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_1 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    var_2 = queue_4.enqueue(set_2)
    queue_5 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_3 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    queue_7 = module_0.Queue(queue_5)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_4 = queue_5.size()
    assert var_4 == 0
    queue_10 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_5 = queue_10.size()
    assert var_5 == 0
    queue_11 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_6 = queue_10.size()
    assert var_6 == 0

def test_case_1753():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_1.push(set_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue(queue_7)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_3 = module_0.Node()
    var_5 = queue_10.size()
    assert var_5 == 0
    node_4 = module_0.Node()
    var_6 = node_4.__repr__()
    assert var_6 == 'Value: None'
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_7 = var_6.__repr__()
    assert var_7 == "'Value: None'"
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_2)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_8 = double_linked_list_5.append(bytes_2)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    var_9 = node_5.__repr__()
    assert var_9 == 'Value: None'
    node_6 = module_0.Node()
    queue_13 = module_0.Queue()
    set_3 = set()
    node_7 = module_0.Node(prev=set_3)
    var_10 = queue_13.size()
    assert var_10 == 0
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    var_11 = queue_14.peek()
    queue_16 = module_0.Queue()
    set_5 = set()
    node_9 = module_0.Node(prev=set_5)
    var_12 = queue_16.peek()
    queue_17 = module_0.Queue(queue_16)
    queue_18 = module_0.Queue(queue_16)
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    var_13 = queue_16.size()
    assert var_13 == 0
    none_type_0 = None

def test_case_1754():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    complex_0 = 2886.801252 + 1418.99508j
    queue_1 = module_0.Queue(complex_0)
    var_1 = queue_1.size()
    assert var_1 == 1
    var_2 = var_1.__repr__()
    assert var_2 == '1'
    none_type_0 = None
    node_0 = module_0.Node(prev=none_type_0)
    queue_2 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_3 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    queue_4 = module_0.Queue(queue_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_4 = queue_2.size()
    assert var_4 == 0
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_5 = queue_9.size()
    assert var_5 == 0
    node_3 = module_0.Node()
    complex_1 = 2886.801252 + 1418.99508j
    queue_10 = module_0.Queue(complex_1)
    var_6 = queue_10.size()
    assert var_6 == 1
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    none_type_1 = None
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(none_type_1)
    var_8 = queue_10.enqueue(set_2)
    queue_12 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_9 = queue_12.peek()
    node_6 = module_0.Node()
    node_7 = module_0.Node(set_3)

def test_case_1755():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_0)
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_2 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    var_3 = queue_2.enqueue(set_0)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_4 = queue_3.size()
    assert var_4 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_3 = module_0.Node()
    var_5 = queue_7.size()
    assert var_5 == 0
    var_6 = node_2.__repr__()
    assert var_6 == 'Value: None'
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_7 = double_linked_list_2.push(queue_9)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_14 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_6 = module_0.Node()
    var_8 = queue_13.size()
    assert var_8 == 0

def test_case_1756():
    none_type_0 = None
    node_0 = module_0.Node(prev=none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_4 = module_0.Queue()
    var_3 = queue_4.peek()
    node_4 = module_0.Node()
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_5 = var_4.__repr__()
    assert var_5 == "'Value: None'"
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_8 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_6 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    queue_10 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_2)
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    var_7 = double_linked_list_7.append(bytes_2)
    assert f'{type(double_linked_list_7.head).__module__}.{type(double_linked_list_7.head).__qualname__}' == 'queue4.Node'
    queue_12 = module_0.Queue(queue_11)
    var_8 = queue_10.peek()
    var_9 = queue_12.size()
    assert var_9 == 1
    var_10 = queue_12.dequeue()
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'queue4.Queue'

def test_case_1757():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_0 = queue_3.size()
    assert var_0 == 0
    node_4 = module_0.Node()
    queue_4 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_1 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    queue_6 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_2 = double_linked_list_3.append(node_7)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_3.shift()
    assert double_linked_list_3.tail is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Node'
    assert var_3.data is None
    assert var_3.next is None
    assert var_3.prev == {*()}
    with pytest.raises(ValueError):
        double_linked_list_2.remove(set_2)

def test_case_1758():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    node_1 = module_0.Node()

def test_case_1759():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    queue_5 = module_0.Queue(queue_3)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_2.append(node_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_11 = module_0.Queue()
    var_3 = queue_11.peek()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_0)
    queue_15 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_4 = queue_15.size()
    assert var_4 == 0
    queue_16 = module_0.Queue()
    var_5 = queue_15.size()
    assert var_5 == 0
    var_6 = queue_14.peek()
    assert var_6 == 77
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_17 = module_0.Queue(bytes_1)
    queue_18 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_7 = queue_18.size()
    assert var_7 == 0
    queue_19 = module_0.Queue()
    var_8 = queue_18.size()
    assert var_8 == 0
    queue_20 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_21 = module_0.Queue(bytes_2)
    queue_22 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_9 = queue_22.peek()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None

def test_case_1760():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    node_1 = module_0.Node()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_0 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    queue_8 = module_0.Queue(queue_6)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_1 = queue_6.size()
    assert var_1 == 0
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_2 = queue_13.size()
    assert var_2 == 0
    queue_14 = module_0.Queue()
    none_type_0 = None
    node_5 = module_0.Node(prev=none_type_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_1)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_3 = double_linked_list_5.append(bytes_1)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'

def test_case_1761():
    bool_0 = True
    bool_1 = False
    bool_2 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_2)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    var_0 = double_linked_list_0.append(bool_1)

def test_case_1762():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = var_0.__repr__()
    assert var_1 == "'Value: None'"
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_3 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_3 = var_2.__repr__()
    with pytest.raises(IndexError):
        double_linked_list_2.shift()

def test_case_1763():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    var_0 = queue_3.peek()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue(queue_7)
    var_2 = queue_6.peek()
    var_3 = queue_8.size()
    assert var_3 == 1
    queue_9 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_11 = module_0.Queue(queue_10)
    var_5 = queue_9.peek()
    var_6 = queue_11.size()
    assert var_6 == 1
    var_7 = queue_11.dequeue()
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'queue4.Queue'
    queue_12 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_8 = queue_12.size()
    assert var_8 == 0
    queue_13 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_2)
    double_linked_list_4 = module_0.DoubleLinkedList()
    var_9 = double_linked_list_4.append(bytes_2)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_15 = module_0.Queue(queue_14)
    var_10 = queue_13.peek()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_16 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    queue_17 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_11 = queue_17.peek()

def test_case_1764():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(set_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_2 = double_linked_list_3.append(set_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_3.push(set_2)
    queue_7 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_7.peek()
    node_4 = module_0.Node()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_5 = var_4.__repr__()
    queue_10 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_6 = queue_10.size()
    assert var_6 == 0
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None

def test_case_1765():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    node_1 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_3 = queue_1.size()
    assert var_3 == 11
    queue_2 = module_0.Queue()
    set_0 = set()
    node_3 = module_0.Node(prev=set_0)
    var_4 = queue_2.size()
    assert var_4 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    var_5 = queue_3.peek()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_2)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = double_linked_list_2.append(bytes_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue(queue_5)
    complex_0 = 2886.801252 + 1418.99508j
    queue_7 = module_0.Queue(complex_0)
    var_7 = queue_7.size()
    assert var_7 == 1
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_8 = module_0.Queue()
    var_8 = queue_8.enqueue(none_type_0)
    var_9 = queue_7.enqueue(set_2)
    queue_9 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_10 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    queue_11 = module_0.Queue(queue_9)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    queue_14 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_11 = queue_16.size()
    assert var_11 == 0
    node_9 = module_0.Node()

def test_case_1766():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue(queue_4)
    var_3 = queue_3.peek()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_4 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    none_type_0 = None
    queue_8 = module_0.Queue()
    var_5 = queue_8.enqueue(none_type_0)
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_10 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_6 = node_6.__repr__()
    assert var_6 == 'Value: None'
    queue_12 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_7 = queue_12.size()
    assert var_7 == 0
    queue_13 = module_0.Queue()
    var_8 = node_7.__repr__()
    assert var_8 == 'Value: None'
    complex_0 = 2886.801252 + 1418.99508j
    queue_14 = module_0.Queue(complex_0)
    var_9 = queue_14.size()
    assert var_9 == 1
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None

def test_case_1767():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_2)
    queue_3 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    var_3 = queue_3.size()
    assert var_3 == 0
    complex_0 = 2886.801252 + 1418.99508j
    queue_5 = module_0.Queue(complex_0)
    var_4 = queue_5.size()
    assert var_4 == 1
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_5 = queue_6.enqueue(none_type_0)
    queue_7 = module_0.Queue()
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_3)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = double_linked_list_2.append(bytes_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue(queue_8)
    var_7 = queue_7.peek()
    var_8 = queue_9.size()
    assert var_8 == 1
    node_3 = module_0.Node()
    var_9 = node_3.__repr__()
    assert var_9 == 'Value: None'
    queue_10 = module_0.Queue(node_3)
    var_10 = queue_10.enqueue(var_9)

def test_case_1768():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue(queue_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue(queue_5)
    var_3 = queue_4.peek()
    node_2 = module_0.Node()
    var_4 = node_2.__repr__()
    assert var_4 == 'Value: None'
    queue_7 = module_0.Queue(node_2)
    var_5 = queue_7.enqueue(var_4)
    queue_8 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_6 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_7 = var_6.__repr__()

def test_case_1769():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.size()
    assert var_2 == 0
    node_2 = module_0.Node()
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'
    none_type_0 = None
    node_3 = module_0.Node(prev=none_type_0)
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_4 = queue_3.peek()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None

def test_case_1770():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_3.size()
    assert var_0 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    queue_7 = module_0.Queue(queue_5)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_2 = queue_5.size()
    assert var_2 == 0
    queue_10 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = double_linked_list_2.append(node_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    queue_12 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_14 = module_0.Queue(queue_13)
    var_5 = queue_12.peek()
    var_6 = queue_14.size()
    assert var_6 == 1
    var_7 = queue_14.dequeue()
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'queue4.Queue'
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_15 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    var_8 = queue_17.size()
    assert var_8 == 0
    node_6 = module_0.Node()
    node_7 = module_0.Node()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)

def test_case_1771():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    complex_0 = 2886.801252 + 1418.99508j
    queue_4 = module_0.Queue(complex_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    var_1 = queue_4.size()
    assert var_1 == 1
    node_1 = module_0.Node()
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    queue_5 = module_0.Queue(node_1)
    queue_6 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = queue_6.size()
    assert var_3 == 0
    queue_7 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_4 = queue_7.peek()
    node_4 = module_0.Node()

def test_case_1772():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue(queue_4)
    var_3 = queue_3.peek()
    var_4 = queue_5.size()
    assert var_4 == 1
    var_5 = queue_5.dequeue()
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    queue_7 = module_0.Queue()
    var_6 = queue_7.peek()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    queue_10 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_7 = double_linked_list_3.append(node_4)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_8 = queue_11.enqueue(queue_10)
    complex_0 = 2886.801252 + 1418.99508j
    queue_12 = module_0.Queue(complex_0)
    var_9 = queue_12.size()
    assert var_9 == 1
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    none_type_0 = None
    queue_13 = module_0.Queue()
    var_10 = queue_13.enqueue(none_type_0)
    var_11 = queue_12.enqueue(set_4)
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_14 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    var_12 = node_6.__repr__()
    assert var_12 == 'Value: None'

def test_case_1773():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    var_0 = queue_2.peek()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'

def test_case_1774():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'
    list_0 = []

def test_case_1775():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == 77
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    queue_3 = module_0.Queue(queue_1)
    var_2 = double_linked_list_0.append(node_0)
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = queue_5.peek()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_8 = module_0.Queue()
    var_5 = queue_8.peek()
    queue_9 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_6 = queue_9.size()
    assert var_6 == 0
    queue_10 = module_0.Queue()
    var_7 = queue_10.peek()
    queue_11 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_12 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_8 = double_linked_list_2.append(node_6)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_13 = module_0.Queue()
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    var_9 = queue_13.peek()
    node_8 = module_0.Node()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_10 = var_9.__repr__()
    queue_16 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    queue_17 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_9 = set()
    node_10 = module_0.Node(prev=set_9)
    var_11 = double_linked_list_3.append(node_10)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_11 = module_0.Node()
    queue_18 = module_0.Queue()
    set_10 = set()
    node_12 = module_0.Node(prev=set_10)
    var_12 = queue_18.peek()
    queue_19 = module_0.Queue(queue_18)
    queue_20 = module_0.Queue(queue_18)
    queue_21 = module_0.Queue()
    set_11 = set()
    node_13 = module_0.Node(prev=set_11)
    var_13 = queue_21.peek()
    node_14 = module_0.Node()
    node_15 = module_0.Node(set_11)

def test_case_1776():
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_0 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    complex_0 = 2886.801252 + 1418.99508j
    queue_2 = module_0.Queue(complex_0)
    var_2 = queue_2.size()
    assert var_2 == 1
    var_3 = var_2.__repr__()
    assert var_3 == '1'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_4 = queue_3.peek()
    node_2 = module_0.Node()

def test_case_1777():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.push(var_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    with pytest.raises(ValueError):
        double_linked_list_1.remove(var_1)

def test_case_1778():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_1 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    queue_6 = module_0.Queue(queue_4)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_4 = var_3.__repr__()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_12 = module_0.Queue()
    var_5 = queue_12.peek()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None

def test_case_1779():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_3.size()
    assert var_0 == 0
    queue_4 = module_0.Queue()
    var_1 = queue_3.size()
    assert var_1 == 0
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_6.peek()
    node_3 = module_0.Node()
    queue_7 = module_0.Queue()
    bool_0 = True
    double_linked_list_1 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    node_5 = module_0.Node()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_2)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = double_linked_list_3.append(bytes_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'

def test_case_1780():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    var_2 = queue_2.size()
    assert var_2 == 1
    var_3 = queue_2.dequeue()
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bytes_1 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_6 = module_0.Queue(bytes_1)
    queue_7 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = double_linked_list_2.append(node_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'

def test_case_1781():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    bytes_0 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_8 = module_0.Queue(bytes_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    complex_0 = 2886.801252 + 1418.99508j
    queue_10 = module_0.Queue(complex_0)
    var_3 = queue_10.size()
    assert var_3 == 1
    var_4 = var_3.__repr__()
    assert var_4 == '1'
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_2)
    queue_12 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_5 = queue_12.size()
    assert var_5 == 0
    queue_13 = module_0.Queue()
    var_6 = queue_12.size()
    assert var_6 == 0
    var_7 = var_6.__repr__()
    assert var_7 == '0'
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_3)
    queue_15 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_8 = queue_15.peek()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_16 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_9 = queue_16.peek()
    queue_17 = module_0.Queue(queue_16)
    queue_18 = module_0.Queue(queue_16)
    var_10 = queue_4.enqueue(set_3)

def test_case_1782():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_2 = queue_1.size()
    assert var_2 == 11
    queue_2 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = queue_2.size()
    assert var_3 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_4 = module_0.Node()
    var_4 = queue_5.size()
    assert var_4 == 0
    var_5 = queue_4.size()
    assert var_5 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    queue_8 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_6 = queue_8.size()
    assert var_6 == 0
    queue_9 = module_0.Queue()
    var_7 = queue_8.size()
    assert var_7 == 0
    var_8 = queue_7.peek()
    assert var_8 == 77
    node_6 = module_0.Node()
    var_9 = node_6.__repr__()
    assert var_9 == 'Value: None'
    queue_10 = module_0.Queue(node_6)

def test_case_1783():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_2 = queue_5.size()
    assert var_2 == 11
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    bytes_1 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_9 = module_0.Queue(bytes_1)
    queue_10 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_10.peek()
    node_4 = module_0.Node()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_4 = var_3.__repr__()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_13 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_14 = module_0.Queue()
    var_5 = queue_14.peek()
    queue_15 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_6 = queue_15.size()
    assert var_6 == 0
    queue_16 = module_0.Queue()
    var_7 = queue_16.peek()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_17 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_20 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_8 = queue_20.size()
    assert var_8 == 0
    queue_21 = module_0.Queue()
    queue_22 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_9 = queue_22.peek()
    queue_23 = module_0.Queue(queue_22)
    queue_24 = module_0.Queue(queue_22)

def test_case_1784():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_0.push(queue_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    var_1 = queue_3.dequeue()
    assert var_1 == 77
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_5.size()
    assert var_2 == 0
    queue_6 = module_0.Queue()
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_2)
    queue_9 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_9.peek()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    with pytest.raises(IndexError):
        double_linked_list_1.pop()

def test_case_1785():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    complex_0 = 2886.801252 + 1418.99508j
    queue_3 = module_0.Queue(complex_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    var_1 = queue_3.size()
    assert var_1 == 1
    bool_0 = True
    double_linked_list_2 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_4.peek()
    node_2 = module_0.Node()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = var_2.__repr__()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_5 = double_linked_list_3.append(var_3)

def test_case_1786():
    node_0 = module_0.Node()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'

def test_case_1787():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'

def test_case_1788():
    float_0 = -396.8
    double_linked_list_0 = module_0.DoubleLinkedList(float_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    var_0 = double_linked_list_0.pop()
    assert var_0 == pytest.approx(-396.8, abs=0.01, rel=0.01)
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None

def test_case_1789():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    node_1 = module_0.Node()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    queue_5 = module_0.Queue(queue_3)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_2 = queue_10.size()
    assert var_2 == 0
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_3 = double_linked_list_5.append(set_3)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_5.push(set_3)
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_14 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    bytes_0 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_17 = module_0.Queue(bytes_0)
    queue_18 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_19 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_5 = double_linked_list_7.append(node_7)
    assert f'{type(double_linked_list_7.head).__module__}.{type(double_linked_list_7.head).__qualname__}' == 'queue4.Node'
    node_8 = module_0.Node()

def test_case_1790():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    var_1 = queue_2.peek()
    var_2 = queue_4.size()
    assert var_2 == 1
    var_3 = queue_4.dequeue()
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Queue'
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    node_2 = module_0.Node()
    var_4 = queue_6.size()
    assert var_4 == 0

def test_case_1791():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_3 = queue_5.size()
    assert var_3 == 11
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    queue_7 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_4 = queue_7.size()
    assert var_4 == 0
    queue_8 = module_0.Queue()
    var_5 = queue_7.size()
    assert var_5 == 0
    queue_9 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_10 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_11 = module_0.Queue()
    var_6 = queue_11.peek()

def test_case_1792():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    var_2 = queue_2.size()
    assert var_2 == 1
    var_3 = queue_2.dequeue()
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    node_1 = module_0.Node()
    queue_6 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_4 = queue_6.peek()
    node_3 = module_0.Node()
    node_4 = module_0.Node()
    var_5 = node_4.__repr__()
    assert var_5 == 'Value: None'
    queue_7 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_6 = double_linked_list_3.append(node_6)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    bool_0 = True
    double_linked_list_4 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_4.tail).__module__}.{type(double_linked_list_4.tail).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_7 = queue_11.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    double_linked_list_5 = module_0.DoubleLinkedList()
    double_linked_list_6 = module_0.DoubleLinkedList(var_7)
    queue_13 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    var_8 = queue_13.peek()
    queue_14 = module_0.Queue(queue_13)
    queue_15 = module_0.Queue(queue_13)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    var_9 = queue_13.size()
    assert var_9 == 0
    with pytest.raises(ValueError):
        double_linked_list_1.remove(queue_16)

def test_case_1793():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_5 = module_0.Queue()
    var_2 = queue_5.peek()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_8 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = double_linked_list_2.append(node_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_9.enqueue(queue_8)
    bool_0 = True
    double_linked_list_3 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    var_5 = node_4.__repr__()
    assert var_5 == 'Value: None'
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_6 = var_5.__repr__()
    assert var_6 == "'Value: None'"
    bool_1 = True
    double_linked_list_5 = module_0.DoubleLinkedList(bool_1)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_5.tail).__module__}.{type(double_linked_list_5.tail).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_7 = queue_10.peek()
    queue_11 = module_0.Queue(queue_10)
    queue_12 = module_0.Queue(queue_10)
    var_8 = double_linked_list_5.append(node_5)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_1)
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_9 = double_linked_list_6.append(bytes_1)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    queue_14 = module_0.Queue(queue_13)
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_2)
    queue_16 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_10 = queue_16.peek()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    node_8 = module_0.Node()
    var_11 = node_8.__repr__()
    assert var_11 == 'Value: None'
    queue_17 = module_0.Queue(node_8)
    var_12 = queue_17.enqueue(var_11)
    queue_18 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_13 = queue_18.size()
    assert var_13 == 0
    with pytest.raises(ValueError):
        double_linked_list_7.remove(var_11)

def test_case_1794():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = var_0.__repr__()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = queue_3.size()
    assert var_3 == 0
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    queue_6 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = queue_6.peek()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_6 = module_0.Node()
    var_5 = queue_8.size()
    assert var_5 == 0
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_6 = double_linked_list_3.push(queue_10)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    with pytest.raises(IndexError):
        double_linked_list_4.shift()

def test_case_1795():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'

def test_case_1796():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_1.enqueue(queue_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    var_3 = queue_3.size()
    assert var_3 == 0

def test_case_1797():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = var_1.__repr__()
    assert var_2 == '0'
    complex_0 = 2886.801252 + 1418.99508j
    queue_3 = module_0.Queue(complex_0)
    var_3 = queue_3.size()
    assert var_3 == 1
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    complex_1 = 2886.801252 + 1418.99508j
    queue_4 = module_0.Queue(complex_1)
    var_4 = queue_4.size()
    assert var_4 == 1
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_5 = queue_5.enqueue(none_type_0)
    var_6 = queue_4.enqueue(set_1)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    none_type_1 = None
    queue_6 = module_0.Queue()
    var_7 = queue_6.enqueue(none_type_1)
    queue_7 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_8 = queue_7.peek()
    node_4 = module_0.Node()
    node_5 = module_0.Node(set_3)
    queue_8 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_9 = queue_8.size()
    assert var_9 == 0
    queue_9 = module_0.Queue()

def test_case_1798():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    var_1 = var_0.__repr__()
    assert var_1 == '1'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_2 = queue_2.size()
    assert var_2 == 0
    var_3 = queue_1.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_4 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    queue_6 = module_0.Queue(queue_4)
    queue_7 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_5 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue(queue_8)
    var_6 = queue_7.peek()
    var_7 = queue_9.size()
    assert var_7 == 1
    queue_10 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_8 = queue_10.peek()
    node_4 = module_0.Node()
    node_5 = module_0.Node()
    var_9 = node_5.__repr__()
    assert var_9 == 'Value: None'
    queue_11 = module_0.Queue(node_5)
    var_10 = queue_11.enqueue(var_9)
    none_type_0 = None
    node_6 = module_0.Node(prev=none_type_0)
    node_7 = module_0.Node()
    var_11 = node_7.__repr__()
    assert var_11 == 'Value: None'
    queue_12 = module_0.Queue(node_7)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_1)
    var_12 = queue_13.dequeue()
    assert var_12 == 77
    queue_14 = module_0.Queue()

def test_case_1799():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_0 = None
    queue_6 = module_0.Queue(none_type_0)
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = var_2.__repr__()
    assert var_3 == "'Value: None'"
    node_3 = module_0.Node()
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    queue_7 = module_0.Queue(node_3)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    var_5 = queue_8.dequeue()
    assert var_5 == 77
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    queue_12 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_5 = module_0.Node()
    var_6 = queue_11.size()
    assert var_6 == 0
    set_2 = set()
    node_6 = module_0.Node(prev=set_2)
    queue_13 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_7 = queue_15.size()
    assert var_7 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_16 = module_0.Queue(bytes_1)
    queue_17 = module_0.Queue()
    set_3 = set()
    node_7 = module_0.Node(prev=set_3)
    var_8 = queue_17.size()
    assert var_8 == 0
    queue_18 = module_0.Queue()
    var_9 = queue_17.size()
    assert var_9 == 0
    var_10 = var_9.__repr__()
    assert var_10 == '0'
    queue_19 = module_0.Queue()
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    var_11 = queue_19.size()
    assert var_11 == 0
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    set_5 = set()
    node_9 = module_0.Node(prev=set_5)
    var_12 = queue_20.peek()
    set_6 = set()
    node_10 = module_0.Node(prev=set_6)
    queue_22 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_23 = module_0.Queue()
    queue_24 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_13 = queue_24.size()
    assert var_13 == 0
    queue_25 = module_0.Queue()
    queue_26 = module_0.Queue()
    set_7 = set()
    node_11 = module_0.Node(prev=set_7)
    queue_27 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    set_8 = set()
    node_12 = module_0.Node(prev=set_8)
    var_14 = double_linked_list_7.append(node_12)
    assert f'{type(double_linked_list_7.head).__module__}.{type(double_linked_list_7.head).__qualname__}' == 'queue4.Node'
    var_15 = queue_26.size()
    assert var_15 == 0

def test_case_1800():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    bool_0 = True
    double_linked_list_1 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    queue_5 = module_0.Queue(queue_3)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_3 = double_linked_list_3.push(queue_9)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_3.push(queue_9)
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_12 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_5 = queue_14.size()
    assert var_5 == 0
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_6 = queue_16.peek()
    queue_17 = module_0.Queue(queue_16)
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_18 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    node_7 = module_0.Node()

def test_case_1801():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_4.size()
    assert var_3 == 0
    var_4 = queue_3.size()
    assert var_4 == 0
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    var_5 = queue_6.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    var_6 = queue_7.dequeue()
    assert var_6 == 77

def test_case_1802():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    node_1 = module_0.Node()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_3.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'

def test_case_1803():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_2.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_1 = double_linked_list_3.append(node_3)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    queue_7 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_2 = queue_7.size()
    assert var_2 == 0
    queue_8 = module_0.Queue()
    var_3 = queue_7.size()
    assert var_3 == 0
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_4 = double_linked_list_4.push(queue_9)
    assert f'{type(double_linked_list_4.tail).__module__}.{type(double_linked_list_4.tail).__qualname__}' == 'queue4.Node'
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_12 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    bytes_2 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_15 = module_0.Queue(bytes_2)
    queue_16 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_5 = queue_16.size()
    assert var_5 == 0
    queue_17 = module_0.Queue()
    var_6 = node_8.__repr__()
    assert var_6 == 'Value: None'
    queue_18 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_7 = queue_18.peek()
    queue_19 = module_0.Queue(queue_18)
    queue_20 = module_0.Queue(queue_18)

def test_case_1804():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = queue_1.peek()
    node_1 = module_0.Node()
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = var_2.__repr__()
    assert var_3 == "'Value: None'"
    queue_2 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_4 = queue_2.peek()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_5 = queue_3.size()
    assert var_5 == 0
    var_6 = queue_2.size()
    assert var_6 == 0
    bool_0 = True
    double_linked_list_1 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_7 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    queue_6 = module_0.Queue(queue_4)
    var_8 = double_linked_list_1.append(node_4)
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    queue_8 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_9 = queue_8.size()
    assert var_9 == 0
    queue_9 = module_0.Queue()
    var_10 = queue_8.size()
    assert var_10 == 0
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_10 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_11 = double_linked_list_3.append(node_9)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_12 = double_linked_list_3.shift()
    assert double_linked_list_3.tail is None
    assert f'{type(var_12).__module__}.{type(var_12).__qualname__}' == 'queue4.Node'
    assert var_12.data is None
    assert var_12.next is None
    assert var_12.prev == {*()}
    queue_12 = module_0.Queue()
    set_8 = set()
    node_10 = module_0.Node(prev=set_8)
    var_13 = queue_12.peek()
    queue_13 = module_0.Queue(queue_12)
    var_14 = queue_13.enqueue(set_8)

def test_case_1805():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    var_1 = queue_4.peek()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_8 = module_0.Queue()
    var_2 = queue_8.peek()
    queue_9 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_3 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    assert f'{type(queue_10).__module__}.{type(queue_10).__qualname__}' == 'queue4.Queue'
    queue_11 = module_0.Queue(queue_9)
    node_5 = module_0.Node()
    var_4 = node_5.__repr__()
    assert var_4 == 'Value: None'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = var_4.__repr__()
    assert var_5 == "'Value: None'"
    queue_12 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_6 = queue_12.peek()
    node_7 = module_0.Node()
    node_8 = module_0.Node(set_4)

def test_case_1806():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_1 = queue_0.dequeue()
    assert var_1 == 77
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_1.size()
    assert var_2 == 0
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = queue_3.size()
    assert var_3 == 0
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = queue_6.size()
    assert var_4 == 0
    queue_7 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_5 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue(queue_8)
    var_6 = queue_7.peek()
    var_7 = queue_9.size()
    assert var_7 == 1
    queue_10 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_8 = double_linked_list_3.append(node_5)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_14 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_7 = module_0.Node()
    var_9 = queue_13.size()
    assert var_9 == 0
    var_10 = node_6.__repr__()
    assert var_10 == 'Value: None'
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_15 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_11 = node_8.__repr__()
    assert var_11 == 'Value: None'
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    queue_16 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_17 = module_0.Queue()
    var_12 = queue_17.peek()
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    with pytest.raises(IndexError):
        double_linked_list_6.shift()

def test_case_1807():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    queue_3 = module_0.Queue(node_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    var_3 = queue_3.enqueue(var_2)
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = double_linked_list_2.append(set_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_2.push(set_1)
    queue_7 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_6 = queue_7.size()
    assert var_6 == 0

def test_case_1808():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    none_type_0 = None
    var_1 = queue_1.enqueue(none_type_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_3.peek()

def test_case_1809():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_0.push(queue_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_1 = queue_5.size()
    assert var_1 == 0
    node_2 = module_0.Node()
    node_3 = module_0.Node()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_2 = queue_8.peek()
    node_6 = module_0.Node()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_3 = double_linked_list_5.push(var_2)
    assert f'{type(double_linked_list_5.tail).__module__}.{type(double_linked_list_5.tail).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_4 = queue_9.size()
    assert var_4 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    var_5 = queue_10.peek()
    node_9 = module_0.Node()
    var_6 = node_9.__repr__()
    assert var_6 == 'Value: None'

def test_case_1810():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = var_0.__repr__()
    assert var_1 == "'Value: None'"
    queue_1 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_1.size()
    assert var_2 == 0
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = queue_1.size()
    assert var_3 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_4 = queue_3.size()
    assert var_4 == 0
    queue_4 = module_0.Queue()
    none_type_0 = None
    var_5 = queue_4.enqueue(none_type_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_7 = node_3.__repr__()
    assert var_7 == 'Value: None'
    node_4 = module_0.Node()

def test_case_1811():
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    var_0 = double_linked_list_0.shift()
    assert var_0 is True
    assert double_linked_list_0.tail is None

def test_case_1812():
    bool_0 = True
    list_0 = [bool_0]
    list_1 = [list_0, list_0]
    str_0 = 'jbFRUJa >nV7v'
    str_1 = '%,0n\'\nu"UAO9I(\r\x0c%f<'
    queue_0 = module_0.Queue(str_1)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(str_0)

def test_case_1813():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue(queue_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue(queue_8)
    queue_10 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_10.size()
    assert var_3 == 0
    queue_11 = module_0.Queue()
    var_4 = node_2.__repr__()
    assert var_4 == 'Value: None'
    queue_12 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_2)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = double_linked_list_3.append(bytes_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_14 = module_0.Queue(queue_13)
    var_6 = queue_12.peek()
    queue_15 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_7 = queue_15.peek()
    queue_16 = module_0.Queue(queue_15)
    queue_17 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_8 = queue_17.peek()
    node_5 = module_0.Node()

def test_case_1814():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    var_2 = queue_2.size()
    assert var_2 == 0
    var_3 = queue_1.peek()
    assert var_3 == 77
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bytes_1 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_7 = module_0.Queue(bytes_1)
    node_4 = module_0.Node()
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    queue_8 = module_0.Queue(node_4)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_2)
    var_5 = queue_9.dequeue()
    assert var_5 == 77
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_6 = double_linked_list_0.push(var_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'

def test_case_1815():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_6.size()
    assert var_1 == 0
    queue_7 = module_0.Queue()
    var_2 = queue_6.size()
    assert var_2 == 0
    queue_8 = module_0.Queue()
    none_type_0 = None
    node_2 = module_0.Node(prev=none_type_0)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_11 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_4 = module_0.Node()
    var_3 = queue_10.size()
    assert var_3 == 0
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    queue_12 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_13 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_5 = double_linked_list_1.append(node_6)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_6 = queue_12.size()
    assert var_6 == 0
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_16 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_7 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_7 = module_0.Node()
    var_8 = node_7.__repr__()
    assert var_8 == 'Value: None'
    node_8 = module_0.Node()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_17 = module_0.Queue(bytes_2)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_9 = double_linked_list_3.append(bytes_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    with pytest.raises(ValueError):
        double_linked_list_0.remove(var_5)

def test_case_1816():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()

def test_case_1817():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_7 = module_0.Queue()
    var_2 = queue_7.peek()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_1818():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = queue_5.size()
    assert var_2 == 0
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = node_4.__repr__()
    assert var_3 == 'Value: None'
    queue_7 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue(queue_8)
    var_5 = queue_7.peek()
    var_6 = queue_3.size()
    assert var_6 == 0

def test_case_1819():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()

def test_case_1820():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_1 = queue_1.enqueue(set_0)
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_2.size()
    assert var_2 == 0
    complex_0 = 2886.801252 + 1418.99508j
    queue_3 = module_0.Queue(complex_0)
    var_3 = queue_3.size()
    assert var_3 == 1
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_4 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_5 = node_2.__repr__()
    assert var_5 == 'Value: None'
    node_3 = module_0.Node()
    bool_0 = True
    double_linked_list_1 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    var_6 = node_4.__repr__()
    assert var_6 == 'Value: None'
    queue_5 = module_0.Queue(node_4)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    var_7 = queue_6.dequeue()
    assert var_7 == 77
    queue_7 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_9 = module_0.Queue()

def test_case_1821():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_0.push(queue_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_2 = double_linked_list_4.append(set_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'

def test_case_1822():
    node_0 = module_0.Node()
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'

def test_case_1823():
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_0 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    queue_2 = module_0.Queue(queue_0)
    var_1 = double_linked_list_0.append(node_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_4.peek()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_2.append(queue_7)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_2)
    queue_9 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_5 = queue_9.size()
    assert var_5 == 0
    queue_10 = module_0.Queue()
    var_6 = queue_9.size()
    assert var_6 == 0
    var_7 = queue_8.peek()
    assert var_7 == 77
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_5 = module_0.Node()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_12 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_8 = queue_14.size()
    assert var_8 == 0

def test_case_1824():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_3 = module_0.Node()
    var_2 = queue_4.size()
    assert var_2 == 0
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_2.append(set_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_2.push(set_3)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    assert f'{type(queue_9).__module__}.{type(queue_9).__qualname__}' == 'queue4.Queue'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_6 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_7 = double_linked_list_4.append(queue_10)
    complex_0 = 2886.801252 + 1418.99508j
    queue_11 = module_0.Queue(complex_0)
    var_8 = queue_11.size()
    assert var_8 == 1
    var_9 = var_8.__repr__()
    assert var_9 == '1'

def test_case_1825():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    queue_0 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    none_type_1 = None
    var_1 = queue_1.enqueue(none_type_1)
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    none_type_2 = None
    queue_5 = module_0.Queue()
    var_3 = queue_5.enqueue(none_type_2)
    queue_6 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = queue_6.peek()
    node_5 = module_0.Node()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_7 = module_0.Node()
    bool_0 = True
    double_linked_list_3 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_3).__module__}.{type(double_linked_list_3).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    var_5 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    queue_10 = module_0.Queue(queue_8)
    var_6 = double_linked_list_3.append(node_8)

def test_case_1826():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_1 = queue_1.dequeue()
    assert var_1 == 77
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_2 = module_0.Node()
    var_2 = queue_3.size()
    assert var_2 == 0
    var_3 = queue_2.size()
    assert var_3 == 0
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    queue_6 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = queue_6.peek()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_5 = queue_9.size()
    assert var_5 == 0
    queue_10 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_2)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_6 = double_linked_list_5.append(bytes_2)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    node_6 = module_0.Node()
    var_7 = node_6.__repr__()
    assert var_7 == 'Value: None'
    node_7 = module_0.Node()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    queue_12 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    queue_15 = module_0.Queue()
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    var_8 = queue_15.peek()
    node_10 = module_0.Node()
    node_11 = module_0.Node(set_6)
    with pytest.raises(IndexError):
        double_linked_list_2.shift()

def test_case_1827():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = queue_1.peek()
    queue_2 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    var_3 = queue_2.peek()

def test_case_1828():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    queue_3 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_2 = queue_3.peek()
    var_3 = double_linked_list_0.push(queue_3)

def test_case_1829():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0

def test_case_1830():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_0)
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_2 = queue_1.peek()
    node_1 = module_0.Node()
    complex_0 = 2886.801252 + 1418.99508j
    queue_2 = module_0.Queue(complex_0)
    var_3 = queue_2.size()
    assert var_3 == 1
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_4 = queue_3.enqueue(none_type_0)
    var_5 = queue_2.enqueue(set_1)
    queue_4 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_6 = queue_4.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList(var_6)
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_2)
    queue_8 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_7 = queue_8.size()
    assert var_7 == 0
    queue_9 = module_0.Queue()
    var_8 = queue_8.size()
    assert var_8 == 0
    var_9 = queue_7.peek()
    assert var_9 == 77
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_3)
    queue_11 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_10 = queue_11.size()
    assert var_10 == 0
    queue_12 = module_0.Queue()
    var_11 = queue_11.size()
    assert var_11 == 0
    var_12 = var_11.__repr__()
    assert var_12 == '0'
    queue_13 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_13 = queue_13.size()
    assert var_13 == 0
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_14 = queue_14.peek()
    float_0 = -1121.6

def test_case_1831():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    none_type_0 = None
    node_1 = module_0.Node(prev=none_type_0)
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(set_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_1.push(set_1)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_4 = module_0.Node()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_4 = double_linked_list_3.push(queue_7)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_3.push(queue_7)
    complex_0 = 2886.801252 + 1418.99508j
    queue_10 = module_0.Queue(complex_0)
    var_6 = queue_10.size()
    assert var_6 == 1
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    none_type_1 = None
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(none_type_1)
    var_8 = queue_10.enqueue(set_4)
    queue_12 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_9 = queue_12.size()
    assert var_9 == 0
    queue_13 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_14 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_10 = double_linked_list_5.append(node_9)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_11 = queue_14.enqueue(queue_13)

def test_case_1832():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = var_0.__repr__()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    with pytest.raises(IndexError):
        double_linked_list_0.shift()

def test_case_1833():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    var_1 = var_0.__repr__()
    assert var_1 == '1'
    node_0 = module_0.Node()
    var_2 = node_0.__repr__()
    assert var_2 == 'Value: None'
    queue_1 = module_0.Queue(node_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    var_3 = queue_2.dequeue()
    assert var_3 == 77
    queue_3 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_5 = module_0.Queue()
    var_4 = queue_5.peek()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_8 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_5 = queue_8.peek()
    node_3 = module_0.Node()
    node_4 = module_0.Node(set_1)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_7 = double_linked_list_2.append(queue_9)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_2)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_8 = double_linked_list_3.append(bytes_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    var_9 = node_5.__repr__()
    assert var_9 == 'Value: None'
    node_6 = module_0.Node()
    set_2 = set()
    node_7 = module_0.Node(prev=set_2)
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_10 = double_linked_list_4.push(queue_11)
    assert f'{type(double_linked_list_4.tail).__module__}.{type(double_linked_list_4.tail).__qualname__}' == 'queue4.Node'
    queue_14 = module_0.Queue()
    set_3 = set()
    node_8 = module_0.Node(prev=set_3)
    queue_15 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    set_4 = set()
    node_9 = module_0.Node(prev=set_4)
    var_11 = double_linked_list_6.append(node_9)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    var_12 = double_linked_list_6.shift()
    assert double_linked_list_6.tail is None
    assert f'{type(var_12).__module__}.{type(var_12).__qualname__}' == 'queue4.Node'
    assert var_12.data is None
    assert var_12.next is None
    assert var_12.prev == {*()}

def test_case_1834():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()

def test_case_1835():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue(queue_4)
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_6.peek()
    node_2 = module_0.Node()
    node_3 = module_0.Node(set_1)
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    queue_9 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_3 = queue_9.peek()
    queue_10 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_4 = double_linked_list_4.append(node_7)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    node_8 = module_0.Node()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    node_9 = module_0.Node()
    with pytest.raises(IndexError):
        double_linked_list_1.shift()

def test_case_1836():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_6.size()
    assert var_1 == 0
    queue_7 = module_0.Queue()
    var_2 = queue_6.size()
    assert var_2 == 0
    var_3 = queue_5.peek()
    assert var_3 == 77
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_8 = module_0.Queue()
    var_4 = queue_8.enqueue(none_type_0)
    var_5 = var_4.__repr__()
    queue_9 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_6 = queue_9.size()
    assert var_6 == 0
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_10 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_11 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_7 = queue_11.peek()
    node_6 = module_0.Node()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_8 = var_7.__repr__()

def test_case_1837():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = var_1.__repr__()
    assert var_2 == '0'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = queue_5.size()
    assert var_4 == 0
    queue_6 = module_0.Queue()
    var_5 = queue_6.peek()

def test_case_1838():
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_0 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    queue_2 = module_0.Queue(queue_0)
    var_1 = double_linked_list_0.append(node_0)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_3.peek()
    node_2 = module_0.Node()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = var_2.__repr__()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_4 = queue_6.enqueue(none_type_0)
    var_5 = var_4.__repr__()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_6 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    queue_8 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_7 = queue_8.size()
    assert var_7 == 0
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()

def test_case_1839():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_1.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = queue_5.peek()
    node_4 = module_0.Node()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_3 = var_2.__repr__()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_4 = queue_9.size()
    assert var_4 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_5 = queue_11.peek()
    node_7 = module_0.Node()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_6 = double_linked_list_3.push(var_5)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    queue_12 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_7 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_14 = module_0.Queue(queue_13)
    var_8 = queue_12.peek()
    var_9 = queue_14.size()
    assert var_9 == 1
    var_10 = queue_14.dequeue()
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'queue4.Queue'
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_17 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    node_9 = module_0.Node()
    var_11 = queue_16.size()
    assert var_11 == 0
    var_12 = queue_15.size()
    assert var_12 == 0

def test_case_1840():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    var_1 = var_0.__repr__()
    assert var_1 == '1'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    var_2 = queue_1.dequeue()
    assert var_2 == 77
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_3 = queue_2.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_3)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bool_0 = True
    double_linked_list_2 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_4 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_5 = queue_6.size()
    assert var_5 == 0
    queue_7 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_9 = module_0.Queue()
    var_6 = queue_9.peek()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_2)
    queue_13 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_7 = queue_13.size()
    assert var_7 == 0
    queue_14 = module_0.Queue()
    var_8 = queue_13.size()
    assert var_8 == 0
    var_9 = var_8.__repr__()
    assert var_9 == '0'
    node_5 = module_0.Node()
    var_10 = node_5.__repr__()
    assert var_10 == 'Value: None'
    queue_15 = module_0.Queue(node_5)
    var_11 = queue_15.enqueue(var_10)
    with pytest.raises(IndexError):
        double_linked_list_3.pop()

def test_case_1841():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    var_1 = var_0.__repr__()
    complex_0 = 2886.801252 + 1418.99508j
    queue_1 = module_0.Queue(complex_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_2 = queue_1.size()
    assert var_2 == 1
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    var_4 = queue_3.size()
    assert var_4 == 0
    var_5 = var_4.__repr__()
    assert var_5 == '0'
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_6 = queue_5.peek()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_7 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    queue_8 = module_0.Queue(queue_6)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_11 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_5 = module_0.Node()
    var_8 = queue_10.size()
    assert var_8 == 0
    var_9 = queue_9.size()
    assert var_9 == 0
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_12 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_10 = double_linked_list_1.push(queue_12)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    var_11 = double_linked_list_1.push(queue_12)

def test_case_1842():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_0 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = queue_5.size()
    assert var_1 == 0
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_6.size()
    assert var_2 == 0
    queue_7 = module_0.Queue()
    var_3 = queue_7.peek()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_4 = double_linked_list_3.push(queue_8)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_3.push(queue_8)
    bool_0 = True
    double_linked_list_5 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_5.tail).__module__}.{type(double_linked_list_5.tail).__qualname__}' == 'queue4.Node'
    queue_11 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_6 = queue_11.peek()
    queue_12 = module_0.Queue(queue_11)
    queue_13 = module_0.Queue(queue_11)
    var_7 = double_linked_list_5.append(node_4)
    with pytest.raises(IndexError):
        double_linked_list_1.shift()

def test_case_1843():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_0 = None
    queue_7 = module_0.Queue(none_type_0)
    queue_8 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    queue_10 = module_0.Queue(queue_8)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_15.size()
    assert var_3 == 0
    queue_16 = module_0.Queue()
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_17 = module_0.Queue(bytes_1)
    queue_18 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_5 = queue_18.size()
    assert var_5 == 0
    queue_19 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_6 = queue_18.size()
    assert var_6 == 0
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_20 = module_0.Queue(bytes_2)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_7 = double_linked_list_1.append(bytes_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    var_8 = node_5.__repr__()
    assert var_8 == 'Value: None'
    node_6 = module_0.Node()

def test_case_1844():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    node_2 = module_0.Node(set_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_2 = node_3.__repr__()
    assert var_2 == 'Value: None'
    node_4 = module_0.Node()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_5 = module_0.Node(prev=set_1)
    var_3 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    set_2 = set()
    node_6 = module_0.Node(prev=set_2)
    var_4 = var_3.__repr__()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    queue_5 = module_0.Queue()
    set_3 = set()
    node_7 = module_0.Node(prev=set_3)
    var_5 = queue_5.size()
    assert var_5 == 0
    queue_6 = module_0.Queue()
    var_6 = queue_5.size()
    assert var_6 == 0
    var_7 = queue_4.peek()
    assert var_7 == 77
    queue_7 = module_0.Queue()
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    var_8 = queue_7.peek()
    queue_8 = module_0.Queue()
    set_5 = set()
    node_9 = module_0.Node(prev=set_5)
    var_9 = queue_8.size()
    assert var_9 == 0
    var_10 = queue_7.size()
    assert var_10 == 0

def test_case_1845():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = var_1.__repr__()
    assert var_2 == '0'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_4 = queue_5.peek()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_2)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList(var_4)
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    bool_0 = True
    double_linked_list_3 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_5 = queue_7.peek()
    queue_8 = module_0.Queue(queue_7)
    queue_9 = module_0.Queue(queue_7)
    var_6 = double_linked_list_3.append(node_2)
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_3)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_7 = double_linked_list_4.append(bytes_3)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_8 = node_3.__repr__()
    assert var_8 == 'Value: None'
    node_4 = module_0.Node()
    queue_11 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_9 = queue_11.size()
    assert var_9 == 0
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    bytes_4 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_4)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_10 = double_linked_list_5.append(bytes_4)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    queue_16 = module_0.Queue(queue_15)
    var_11 = queue_14.peek()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_17 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    var_12 = queue_13.size()
    assert var_12 == 0

def test_case_1846():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.size()
    assert var_2 == 0
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_0.push(queue_2)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_5 = var_4.__repr__()
    assert var_5 == "'Value: None'"
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    queue_6 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_6 = queue_6.peek()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_7 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_7 = queue_7.size()
    assert var_7 == 0
    queue_8 = module_0.Queue()
    none_type_1 = None
    var_8 = queue_8.enqueue(none_type_1)
    queue_9 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_9 = queue_9.size()
    assert var_9 == 0
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_10 = queue_9.size()
    assert var_10 == 0
    with pytest.raises(ValueError):
        double_linked_list_3.remove(node_1)

def test_case_1847():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    none_type_0 = None
    node_1 = module_0.Node(prev=none_type_0)
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bytes_0 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    queue_7 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = queue_7.size()
    assert var_1 == 0
    queue_8 = module_0.Queue()
    var_2 = queue_7.size()
    assert var_2 == 0
    var_3 = queue_6.peek()
    assert var_3 == 77

def test_case_1848():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    node_1 = module_0.Node(prev=none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = var_1.__repr__()
    assert var_2 == '0'

def test_case_1849():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_4.peek()
    node_2 = module_0.Node()
    node_3 = module_0.Node(set_1)
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_2 = double_linked_list_3.append(set_3)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_3.push(set_3)
    queue_8 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_4 = queue_8.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    assert f'{type(queue_9).__module__}.{type(queue_9).__qualname__}' == 'queue4.Queue'
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    double_linked_list_5 = module_0.DoubleLinkedList(var_4)
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_10 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    node_8 = module_0.Node()
    queue_11 = module_0.Queue()
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    var_5 = queue_11.peek()
    node_10 = module_0.Node()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_6 = var_5.__repr__()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    set_7 = set()
    node_11 = module_0.Node(prev=set_7)
    var_7 = queue_15.peek()
    queue_16 = module_0.Queue()
    set_8 = set()
    node_12 = module_0.Node(prev=set_8)
    var_8 = queue_16.size()
    assert var_8 == 0
    var_9 = queue_15.size()
    assert var_9 == 0

def test_case_1850():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_4.size()
    assert var_0 == 0
    queue_5 = module_0.Queue()
    var_1 = queue_4.size()
    assert var_1 == 0
    var_2 = var_1.__repr__()
    assert var_2 == '0'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = double_linked_list_2.append(node_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_2.shift()
    assert double_linked_list_2.tail is None
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'queue4.Node'
    assert var_4.data is None
    assert var_4.next is None
    assert var_4.prev == {*()}
    queue_9 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_5 = queue_9.peek()
    node_5 = module_0.Node()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_6 = var_5.__repr__()

def test_case_1851():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_1.enqueue(queue_0)
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    queue_2 = module_0.Queue(node_2)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bytes_0 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_6 = module_0.Queue(bytes_0)
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(none_type_0)
    var_4 = var_3.__repr__()
    queue_8 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_5 = queue_8.peek()
    node_6 = module_0.Node()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_6 = var_5.__repr__()
    queue_11 = module_0.Queue()

def test_case_1852():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_1.push(set_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_4.peek()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    str_0 = 'ps'
    with pytest.raises(ValueError):
        double_linked_list_0.remove(str_0)

def test_case_1853():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = queue_0.size()
    assert var_1 == 11
    queue_1 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_1.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList(var_2)
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_3 = queue_3.enqueue(none_type_0)
    var_4 = var_3.__repr__()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_5 = queue_4.peek()
    node_4 = module_0.Node()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_6 = var_5.__repr__()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_12 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_6 = module_0.Node()
    var_7 = queue_11.size()
    assert var_7 == 0
    var_8 = queue_10.size()
    assert var_8 == 0
    queue_13 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    queue_14 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    var_9 = double_linked_list_5.append(node_8)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_10 = queue_14.enqueue(queue_13)
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    queue_15 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_16 = module_0.Queue(bytes_2)
    var_11 = queue_16.dequeue()
    assert var_11 == 77
    queue_17 = module_0.Queue()
    set_7 = set()
    node_10 = module_0.Node(prev=set_7)
    var_12 = queue_17.peek()
    node_11 = module_0.Node()
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    var_13 = var_12.__repr__()

def test_case_1854():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    none_type_0 = None
    var_1 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    none_type_1 = None
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(none_type_1)
    queue_6 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue(queue_7)
    var_4 = queue_6.peek()
    var_5 = queue_8.size()
    assert var_5 == 1
    var_6 = queue_8.dequeue()
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'queue4.Queue'

def test_case_1855():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_1 = double_linked_list_3.append(set_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    with pytest.raises(ValueError):
        double_linked_list_1.remove(var_0)

def test_case_1856():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    var_3 = node_0.__repr__()
    assert var_3 == 'Value: None'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = queue_7.size()
    assert var_4 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    queue_9 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_5 = queue_9.size()
    assert var_5 == 0
    queue_10 = module_0.Queue()
    var_6 = queue_9.size()
    assert var_6 == 0
    queue_11 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_12 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_7 = double_linked_list_4.append(node_4)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    complex_0 = 2886.801252 + 1418.99508j
    queue_13 = module_0.Queue(complex_0)
    var_8 = queue_13.size()
    assert var_8 == 1
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    none_type_0 = None
    queue_14 = module_0.Queue()
    var_9 = queue_14.enqueue(none_type_0)
    var_10 = queue_13.enqueue(set_5)
    none_type_1 = None
    node_6 = module_0.Node(prev=none_type_1)
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    none_type_2 = None
    queue_15 = module_0.Queue()
    var_11 = queue_15.enqueue(none_type_2)
    var_12 = var_11.__repr__()
    var_13 = node_6.__repr__()
    assert var_13 == 'Value: None'

def test_case_1857():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    var_3 = queue_6.enqueue(set_1)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    queue_8 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = queue_8.size()
    assert var_4 == 0
    queue_9 = module_0.Queue()
    var_5 = queue_8.size()
    assert var_5 == 0
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_10 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_6 = double_linked_list_1.append(set_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_7 = double_linked_list_1.push(set_3)
    queue_13 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_8 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_15 = module_0.Queue(queue_14)
    var_9 = queue_13.peek()
    var_10 = queue_15.size()
    assert var_10 == 1
    queue_16 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_11 = queue_16.peek()
    queue_17 = module_0.Queue(queue_16)
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_12 = var_11.__repr__()
    queue_18 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_13 = queue_18.size()
    assert var_13 == 0
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    queue_21 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_22 = module_0.Queue()
    queue_23 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_14 = queue_23.size()
    assert var_14 == 0
    queue_24 = module_0.Queue()
    set_8 = set()
    node_8 = module_0.Node(prev=set_8)
    queue_25 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_26 = module_0.Queue()
    queue_27 = module_0.Queue()
    bytes_2 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_28 = module_0.Queue(bytes_2)
    with pytest.raises(IndexError):
        double_linked_list_0.shift()

def test_case_1858():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    node_2 = module_0.Node(set_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_2 = node_3.__repr__()
    assert var_2 == 'Value: None'
    node_4 = module_0.Node()
    none_type_0 = None
    node_5 = module_0.Node(prev=none_type_0)
    complex_0 = 2886.801252 + 1418.99508j
    queue_2 = module_0.Queue(complex_0)
    var_3 = queue_2.size()
    assert var_3 == 1
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_1859():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    var_1 = var_0.__repr__()
    assert var_1 == '1'

def test_case_1860():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = queue_0.size()
    assert var_1 == 11
    complex_0 = 2886.801252 + 1418.99508j
    queue_1 = module_0.Queue(complex_0)
    var_2 = queue_1.size()
    assert var_2 == 1
    var_3 = var_2.__repr__()
    assert var_3 == '1'
    complex_1 = 2886.801252 + 1418.99508j
    queue_2 = module_0.Queue(complex_1)
    var_4 = queue_2.size()
    assert var_4 == 1
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_5 = queue_3.enqueue(none_type_0)
    var_6 = queue_2.enqueue(set_0)
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_7 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_8 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'queue4.Node'
    assert var_8.data is None
    assert var_8.next is None
    assert var_8.prev == {*()}
    bool_0 = True
    double_linked_list_2 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'

def test_case_1861():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.size()
    assert var_2 == 0
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_3 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_4 = module_0.Node()
    var_4 = queue_4.size()
    assert var_4 == 0
    var_5 = node_3.__repr__()
    assert var_5 == 'Value: None'
    queue_6 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_6 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    queue_8 = module_0.Queue(queue_6)
    queue_9 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_7 = queue_9.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList(var_7)
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_13 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_8 = queue_15.size()
    assert var_8 == 0
    node_8 = module_0.Node()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    queue_16 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_9 = double_linked_list_6.append(set_7)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    var_10 = double_linked_list_6.push(set_7)
    set_8 = set()
    node_10 = module_0.Node(prev=set_8)
    queue_19 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    var_11 = double_linked_list_8.append(set_8)
    assert f'{type(double_linked_list_8.head).__module__}.{type(double_linked_list_8.head).__qualname__}' == 'queue4.Node'
    set_9 = set()
    node_11 = module_0.Node(prev=set_9)
    queue_22 = module_0.Queue()
    double_linked_list_9 = module_0.DoubleLinkedList()
    assert double_linked_list_9.head is None
    assert double_linked_list_9.tail is None
    queue_23 = module_0.Queue()
    queue_24 = module_0.Queue()
    double_linked_list_10 = module_0.DoubleLinkedList()
    assert double_linked_list_10.head is None
    assert double_linked_list_10.tail is None

def test_case_1862():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    var_1 = queue_1.dequeue()
    assert var_1 == 77
    queue_2 = module_0.Queue()

def test_case_1863():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == 77
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Node'
    assert var_3.data is None
    assert var_3.next is None
    assert var_3.prev == {*()}
    queue_4 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue(queue_5)
    var_5 = queue_4.peek()
    var_6 = queue_6.size()
    assert var_6 == 1
    var_7 = queue_6.dequeue()
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'queue4.Queue'
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()

def test_case_1864():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    complex_0 = 2886.801252 + 1418.99508j
    queue_7 = module_0.Queue(complex_0)
    var_2 = queue_7.size()
    assert var_2 == 1
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(none_type_0)
    var_4 = queue_7.enqueue(set_2)

def test_case_1865():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue(node_1)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    var_2 = queue_4.dequeue()
    assert var_2 == 77
    queue_5 = module_0.Queue()

def test_case_1866():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_1.enqueue(queue_0)
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'

def test_case_1867():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    node_2 = module_0.Node()
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'
    queue_6 = module_0.Queue(node_2)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    var_4 = queue_7.dequeue()
    assert var_4 == 77
    queue_8 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_2)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_5 = double_linked_list_0.append(bytes_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_6 = queue_9.size()
    assert var_6 == 11
    complex_0 = 2886.801252 + 1418.99508j
    queue_10 = module_0.Queue(complex_0)
    var_7 = queue_10.size()
    assert var_7 == 1
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_11 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_12 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_8 = double_linked_list_2.append(node_6)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_9 = queue_12.enqueue(queue_11)

def test_case_1868():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_3 = module_0.Node()
    var_1 = queue_7.size()
    assert var_1 == 0
    queue_9 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_2 = double_linked_list_2.append(node_5)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_2.shift()
    assert double_linked_list_2.tail is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Node'
    assert var_3.data is None
    assert var_3.next is None
    assert var_3.prev == {*()}
    queue_11 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_12 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_4 = double_linked_list_3.append(node_7)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_8 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_0)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_5 = double_linked_list_4.append(bytes_0)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    node_9 = module_0.Node()
    queue_14 = module_0.Queue()
    set_7 = set()
    node_10 = module_0.Node(prev=set_7)
    var_6 = queue_14.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_1)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    double_linked_list_6 = module_0.DoubleLinkedList(var_6)
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    queue_16 = module_0.Queue()
    set_8 = set()
    node_11 = module_0.Node(prev=set_8)
    var_7 = queue_16.peek()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_17 = module_0.Queue(bytes_2)
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    double_linked_list_9 = module_0.DoubleLinkedList(var_7)
    assert double_linked_list_9.head is None
    assert double_linked_list_9.tail is None
    queue_18 = module_0.Queue()
    set_9 = set()
    node_12 = module_0.Node(prev=set_9)
    var_8 = queue_18.peek()
    queue_19 = module_0.Queue(queue_18)
    var_9 = queue_19.enqueue(set_9)

def test_case_1869():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = var_0.__repr__()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_0.push(queue_3)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_0.push(queue_3)

def test_case_1870():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_1.push(set_0)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = double_linked_list_2.append(node_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_2.shift()
    assert double_linked_list_2.tail is None
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'queue4.Node'
    assert var_4.data is None
    assert var_4.next is None
    assert var_4.prev == {*()}
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_5 = queue_10.size()
    assert var_5 == 0
    node_5 = module_0.Node()
    queue_11 = module_0.Queue()

def test_case_1871():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'

def test_case_1872():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    var_2 = queue_0.enqueue(set_0)
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_2.peek()
    node_2 = module_0.Node()
    node_3 = module_0.Node(set_1)
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    var_4 = queue_4.peek()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_1873():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = queue_3.peek()
    node_4 = module_0.Node()
    node_5 = module_0.Node(set_3)

def test_case_1874():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_5 = module_0.Queue(complex_0)
    var_1 = queue_5.size()
    assert var_1 == 1
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(none_type_0)
    var_3 = queue_5.enqueue(set_1)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_4 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_0.append(queue_7)

def test_case_1875():
    list_0 = []
    object_0 = module_1.object(*list_0)
    bool_0 = True
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(bool_0)

def test_case_1876():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    var_1 = queue_2.dequeue()
    assert var_1 == 77

def test_case_1877():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = var_0.__repr__()
    complex_0 = 2886.801252 + 1418.99508j
    queue_3 = module_0.Queue(complex_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    var_2 = queue_3.size()
    assert var_2 == 1
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_4 = queue_6.peek()
    queue_7 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_5 = queue_7.size()
    assert var_5 == 0
    var_6 = queue_6.size()
    assert var_6 == 0
    queue_8 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_7 = queue_8.size()
    assert var_7 == 0
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    complex_1 = 2886.801252 + 1418.99508j
    queue_11 = module_0.Queue(complex_1)
    var_8 = queue_11.size()
    assert var_8 == 1
    var_9 = var_8.__repr__()
    assert var_9 == '1'
    node_6 = module_0.Node()
    var_10 = node_6.__repr__()
    assert var_10 == 'Value: None'
    queue_12 = module_0.Queue(node_6)
    var_11 = queue_12.enqueue(var_10)

def test_case_1878():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = var_0.__repr__()
    queue_3 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    queue_5 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_5.size()
    assert var_2 == 0
    queue_6 = module_0.Queue()
    var_3 = queue_5.size()
    assert var_3 == 0
    var_4 = queue_4.peek()
    assert var_4 == 77

def test_case_1879():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = queue_0.size()
    assert var_1 == 0
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    var_3 = queue_4.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_5 = queue_6.peek()
    node_5 = module_0.Node()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_6 = double_linked_list_3.push(var_5)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'

def test_case_1880():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    var_1 = var_0.__repr__()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = queue_3.size()
    assert var_2 == 0
    node_2 = module_0.Node()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    none_type_1 = None
    var_4 = queue_5.enqueue(none_type_1)
    node_4 = module_0.Node()
    var_5 = node_4.__repr__()
    assert var_5 == 'Value: None'
    queue_6 = module_0.Queue(node_4)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    var_6 = queue_6.enqueue(var_5)

def test_case_1881():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    none_type_0 = None
    var_1 = queue_1.enqueue(none_type_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = double_linked_list_2.append(set_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_7.peek()
    queue_8 = module_0.Queue(queue_7)
    assert f'{type(queue_8).__module__}.{type(queue_8).__qualname__}' == 'queue4.Queue'
    bool_0 = True
    double_linked_list_3 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_4 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    queue_11 = module_0.Queue(queue_9)
    var_5 = double_linked_list_3.append(node_4)
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_4 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_4.tail).__module__}.{type(double_linked_list_4.tail).__qualname__}' == 'queue4.Node'
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_12 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_13 = module_0.Queue()
    var_6 = queue_13.peek()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None

def test_case_1882():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_1)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_3.append(node_3)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_3.size()
    assert var_3 == 0
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_5 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_4 = queue_7.size()
    assert var_4 == 0
    queue_8 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_5 = double_linked_list_6.append(bytes_1)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue(queue_9)
    node_5 = module_0.Node()
    var_6 = node_5.__repr__()
    assert var_6 == 'Value: None'
    queue_11 = module_0.Queue(node_5)
    var_7 = queue_11.enqueue(var_6)
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_12 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    node_7 = module_0.Node()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    none_type_0 = None
    queue_16 = module_0.Queue(none_type_0)
    var_8 = double_linked_list_5.push(none_type_0)
    assert f'{type(double_linked_list_5.tail).__module__}.{type(double_linked_list_5.tail).__qualname__}' == 'queue4.Node'

def test_case_1883():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    node_4 = module_0.Node()

def test_case_1884():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.push(var_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    queue_1 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    var_4 = queue_6.dequeue()
    assert var_4 == 77
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_6 = module_0.Node()
    var_5 = queue_8.size()
    assert var_5 == 0
    var_6 = node_5.__repr__()
    assert var_6 == 'Value: None'
    queue_10 = module_0.Queue()
    set_3 = set()
    node_7 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    var_7 = double_linked_list_2.append(node_8)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_8 = double_linked_list_2.shift()
    assert double_linked_list_2.tail is None
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'queue4.Node'
    assert var_8.data is None
    assert var_8.next is None
    assert var_8.prev == {*()}

def test_case_1885():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_1 = module_0.Node()
    var_0 = node_1.__repr__()
    assert var_0 == 'Value: None'
    node_2 = module_0.Node()
    var_1 = node_2.__repr__()
    assert var_1 == 'Value: None'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = var_1.__repr__()
    assert var_2 == "'Value: None'"
    bool_0 = True
    double_linked_list_3 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_3).__module__}.{type(double_linked_list_3).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_3 = queue_2.size()
    assert var_3 == 0
    with pytest.raises(ValueError):
        double_linked_list_0.remove(double_linked_list_0)

def test_case_1886():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    var_2 = queue_2.size()
    assert var_2 == 1
    queue_3 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = double_linked_list_1.append(node_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()

def test_case_1887():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_5.size()
    assert var_1 == 0
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = queue_5.size()
    assert var_2 == 0
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_7.peek()
    node_3 = module_0.Node()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = double_linked_list_1.push(var_3)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    bool_0 = True
    double_linked_list_2 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_5 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    queue_10 = module_0.Queue(queue_8)
    var_6 = double_linked_list_2.append(node_4)
    queue_11 = module_0.Queue()
    node_5 = module_0.Node()
    var_7 = node_5.__repr__()
    assert var_7 == 'Value: None'
    queue_12 = module_0.Queue(node_5)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_0)
    var_8 = queue_13.dequeue()
    assert var_8 == 77
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_16 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_9 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_17 = module_0.Queue(queue_16)
    var_10 = queue_15.peek()
    var_11 = queue_17.size()
    assert var_11 == 1
    queue_18 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_12 = queue_18.peek()
    queue_19 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_13 = queue_19.size()
    assert var_13 == 0
    var_14 = queue_18.size()
    assert var_14 == 0
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_20 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    bool_1 = True
    double_linked_list_5 = module_0.DoubleLinkedList(bool_1)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_5.tail).__module__}.{type(double_linked_list_5.tail).__qualname__}' == 'queue4.Node'
    with pytest.raises(ValueError):
        double_linked_list_2.remove(queue_0)

def test_case_1888():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = queue_0.size()
    assert var_1 == 0
    with pytest.raises(IndexError):
        double_linked_list_0.pop()

def test_case_1889():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    var_1 = var_0.__repr__()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_1.peek()
    node_2 = module_0.Node()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = double_linked_list_0.push(var_2)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    queue_3 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_4 = queue_3.size()
    assert var_4 == 0
    queue_4 = module_0.Queue()
    var_5 = queue_3.size()
    assert var_5 == 0
    var_6 = var_5.__repr__()
    assert var_6 == '0'
    queue_5 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_7 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    queue_7 = module_0.Queue(queue_5)
    queue_8 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_8 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    queue_10 = module_0.Queue(queue_8)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_9 = queue_8.size()
    assert var_9 == 0
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_13 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_14 = module_0.Queue()
    var_10 = queue_14.peek()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_17 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_11 = double_linked_list_3.push(queue_17)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'

def test_case_1890():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = double_linked_list_2.append(node_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_3.peek()

def test_case_1891():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    var_1 = var_0.__repr__()
    assert var_1 == '1'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_2 = queue_3.peek()
    node_1 = module_0.Node()
    node_2 = module_0.Node(set_0)
    queue_4 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    var_4 = queue_5.peek()
    none_type_0 = None
    node_4 = module_0.Node(prev=none_type_0)
    complex_1 = 2886.801252 + 1418.99508j
    queue_6 = module_0.Queue(complex_1)
    var_5 = queue_6.size()
    assert var_5 == 1
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_7 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_6 = queue_7.size()
    assert var_6 == 0
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_7 = double_linked_list_2.append(node_7)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_8 = queue_11.enqueue(queue_10)
    queue_12 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_0)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_9 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_14 = module_0.Queue(queue_13)
    var_10 = queue_12.peek()
    var_11 = queue_14.size()
    assert var_11 == 1
    var_12 = queue_14.dequeue()
    assert f'{type(var_12).__module__}.{type(var_12).__qualname__}' == 'queue4.Queue'

def test_case_1892():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()

def test_case_1893():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    queue_4 = module_0.Queue(queue_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_2 = queue_2.size()
    assert var_2 == 0

def test_case_1894():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_2.peek()
    node_2 = module_0.Node()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_3 = var_2.__repr__()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_4 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue(queue_7)
    var_5 = queue_6.peek()
    var_6 = queue_8.size()
    assert var_6 == 1
    var_7 = queue_8.dequeue()
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'queue4.Queue'
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    queue_10 = module_0.Queue()
    var_8 = queue_10.peek()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    bytes_1 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_14 = module_0.Queue(bytes_1)
    queue_15 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_9 = queue_15.peek()
    node_6 = module_0.Node()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    var_10 = var_9.__repr__()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_18 = module_0.Queue(bytes_2)
    queue_19 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_11 = queue_19.size()
    assert var_11 == 0
    queue_20 = module_0.Queue()
    var_12 = queue_19.size()
    assert var_12 == 0
    var_13 = var_12.__repr__()
    assert var_13 == '0'
    queue_21 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_14 = queue_21.peek()
    queue_22 = module_0.Queue(queue_21)
    queue_23 = module_0.Queue(queue_21)
    queue_24 = module_0.Queue()
    queue_25 = module_0.Queue()
    var_15 = queue_21.size()
    assert var_15 == 0

def test_case_1895():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    var_1 = var_0.__repr__()
    assert var_1 == '1'
    queue_1 = module_0.Queue()

def test_case_1896():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_1.peek()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_2.peek()
    node_3 = module_0.Node()
    with pytest.raises(IndexError):
        double_linked_list_0.pop()

def test_case_1897():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    queue_1 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue(queue_2)
    var_2 = queue_1.peek()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    var_4 = queue_5.enqueue(set_1)
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_5 = queue_6.size()
    assert var_5 == 0
    queue_7 = module_0.Queue()
    var_6 = queue_7.peek()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    none_type_1 = None
    queue_8 = module_0.Queue()
    var_7 = queue_8.enqueue(none_type_1)
    var_8 = var_7.__repr__()
    queue_9 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_9 = queue_9.size()
    assert var_9 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_10 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_13 = module_0.Queue(queue_12)
    queue_14 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_11 = queue_14.size()
    assert var_11 == 0
    queue_15 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_12 = queue_14.size()
    assert var_12 == 0
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)

def test_case_1898():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()

def test_case_1899():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    var_1 = var_0.__repr__()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_1.size()
    assert var_3 == 0

def test_case_1900():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    none_type_0 = None
    queue_1 = module_0.Queue(none_type_0)
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_1 = queue_2.enqueue(none_type_1)
    queue_3 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_4 = module_0.Queue(complex_0)
    var_2 = queue_4.size()
    assert var_2 == 1
    node_2 = module_0.Node()
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'
    queue_5 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_4 = queue_5.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    queue_7 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_5 = queue_7.size()
    assert var_5 == 0
    queue_8 = module_0.Queue()
    var_6 = queue_7.size()
    assert var_6 == 0
    var_7 = queue_6.peek()
    assert var_7 == 77
    queue_9 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_8 = queue_9.peek()
    node_6 = module_0.Node()
    node_7 = module_0.Node(set_3)
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    queue_10 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_9 = module_0.Node()
    var_9 = queue_10.size()
    assert var_9 == 0
    node_10 = module_0.Node()
    var_10 = node_10.__repr__()
    assert var_10 == 'Value: None'
    queue_11 = module_0.Queue(node_10)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_2)
    var_11 = queue_12.dequeue()
    assert var_11 == 77
    queue_13 = module_0.Queue()

def test_case_1901():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()

def test_case_1902():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.size()
    assert var_2 == 0
    node_2 = module_0.Node()
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'
    queue_2 = module_0.Queue(node_2)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    var_4 = queue_2.enqueue(var_3)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_5 = queue_5.size()
    assert var_5 == 0
    queue_6 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_6 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    queue_8 = module_0.Queue(queue_6)
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_10 = module_0.Queue()
    var_7 = queue_10.peek()
    queue_11 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_12 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_8 = double_linked_list_3.append(node_7)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    with pytest.raises(ValueError):
        double_linked_list_1.remove(var_2)

def test_case_1903():
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_1 = queue_3.peek()
    queue_5 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue(queue_6)
    var_3 = queue_5.peek()
    var_4 = queue_7.size()
    assert var_4 == 1
    var_5 = queue_7.dequeue()
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Queue'
    queue_8 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_6 = queue_8.peek()
    node_5 = module_0.Node()
    node_6 = module_0.Node(set_4)

def test_case_1904():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    queue_2 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_3 = module_0.Queue(complex_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    var_1 = queue_3.size()
    assert var_1 == 1
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_4 = module_0.Node()
    var_3 = queue_5.size()
    assert var_3 == 0

def test_case_1905():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_0 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_0.peek()
    node_2 = module_0.Node()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = var_0.__repr__()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    var_2 = queue_4.peek()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_3 = queue_7.peek()
    node_5 = module_0.Node()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_4 = var_3.__repr__()
    queue_10 = module_0.Queue()

def test_case_1906():
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_0 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bytes_0 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_5 = module_0.Queue(bytes_0)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_2 = queue_8.size()
    assert var_2 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_3 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'

def test_case_1907():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = var_1.__repr__()
    assert var_2 == '0'
    complex_0 = 2886.801252 + 1418.99508j
    queue_3 = module_0.Queue(complex_0)
    var_3 = queue_3.size()
    assert var_3 == 1
    complex_1 = 1851.002 - 2261.566174j
    list_0 = [complex_1, complex_1, complex_1, complex_1]
    double_linked_list_0 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_5 = module_0.Node()
    var_5 = queue_7.size()
    assert var_5 == 0
    var_6 = queue_6.size()
    assert var_6 == 0

def test_case_1908():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_1 = queue_6.size()
    assert var_1 == 0

def test_case_1909():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    node_1 = module_0.Node()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_3.peek()
    node_3 = module_0.Node()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_2 = var_1.__repr__()
    queue_6 = module_0.Queue()
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_2 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_2).__module__}.{type(double_linked_list_2).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_3 = double_linked_list_3.push(queue_7)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_3.push(queue_7)
    var_5 = double_linked_list_2.push(double_linked_list_3)

def test_case_1910():
    float_0 = -3043.800134
    str_0 = 'O,S|'
    str_1 = 'm'
    bool_0 = False
    tuple_0 = (float_0, str_0, str_1, bool_0)
    double_linked_list_0 = module_0.DoubleLinkedList(tuple_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = queue_0.size()
    assert var_1 == 0
    complex_0 = 2886.801252 + 1418.99508j
    queue_3 = module_0.Queue(complex_0)
    var_2 = queue_3.size()
    assert var_2 == 1
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_3 = double_linked_list_4.append(set_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_4.push(set_1)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    node_4 = module_0.Node()
    var_5 = queue_7.size()
    assert var_5 == 0
    var_6 = node_3.__repr__()
    assert var_6 == 'Value: None'
    queue_8 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_7 = queue_8.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    double_linked_list_7 = module_0.DoubleLinkedList(var_7)
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None

def test_case_1911():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_0.push(queue_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.push(queue_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    var_3 = queue_4.enqueue(set_2)

def test_case_1912():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    var_2 = queue_1.size()
    assert var_2 == 0
    var_3 = queue_0.peek()
    assert var_3 == 77

def test_case_1913():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Node'
    assert var_3.data is None
    assert var_3.next is None
    assert var_3.prev == {*()}
    queue_4 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_4 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    queue_6 = module_0.Queue(queue_4)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_5 = queue_6.size()
    assert var_5 == 1
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_10 = module_0.Queue()
    var_6 = queue_10.peek()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_0)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_7 = double_linked_list_4.append(bytes_0)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_8 = double_linked_list_4.append(queue_13)
    queue_14 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_9 = queue_14.peek()
    node_7 = module_0.Node()
    none_type_0 = None
    queue_15 = module_0.Queue(none_type_0)

def test_case_1914():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    queue_4 = module_0.Queue(queue_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_2 = queue_4.size()
    assert var_2 == 1
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_7.size()
    assert var_3 == 0
    queue_8 = module_0.Queue()
    none_type_0 = None
    var_4 = queue_8.enqueue(none_type_0)
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_5 = double_linked_list_1.append(set_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_6 = double_linked_list_1.push(set_3)
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_12 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    none_type_1 = None
    queue_13 = module_0.Queue(none_type_1)
    queue_14 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_0)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_7 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_16 = module_0.Queue(queue_15)
    var_8 = queue_14.peek()
    var_9 = queue_16.size()
    assert var_9 == 1
    var_10 = queue_16.dequeue()
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'queue4.Queue'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_17 = module_0.Queue(bytes_1)
    queue_18 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_11 = queue_18.size()
    assert var_11 == 0
    queue_19 = module_0.Queue()
    var_12 = queue_18.size()
    assert var_12 == 0
    var_13 = queue_17.peek()
    assert var_13 == 77
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_14 = queue_21.size()
    assert var_14 == 0
    queue_22 = module_0.Queue()
    queue_23 = module_0.Queue()
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    var_15 = queue_22.peek()

def test_case_1915():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    queue_2 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = queue_2.peek()
    node_4 = module_0.Node()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = var_1.__repr__()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()

def test_case_1916():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    queue_5 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = queue_5.peek()
    node_3 = module_0.Node()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = double_linked_list_2.push(var_3)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_5 = double_linked_list_4.append(bytes_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue(queue_9)
    var_6 = queue_8.peek()
    queue_11 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_7 = queue_11.peek()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_2)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    double_linked_list_6 = module_0.DoubleLinkedList(var_7)
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_13 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    queue_14 = module_0.Queue()
    var_8 = queue_14.peek()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    complex_0 = 2886.801252 + 1418.99508j
    queue_17 = module_0.Queue(complex_0)
    var_9 = queue_17.size()
    assert var_9 == 1
    none_type_0 = None
    node_7 = module_0.Node(prev=none_type_0)
    set_5 = {queue_16, node_3}

def test_case_1917():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_2.peek()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_3 = module_0.Node()
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_4 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bytes_2 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_7 = module_0.Queue(bytes_2)
    queue_8 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_4 = queue_8.peek()
    node_6 = module_0.Node()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_5 = var_4.__repr__()
    queue_11 = module_0.Queue()
    list_0 = []
    with pytest.raises(ValueError):
        double_linked_list_3.remove(list_0)

def test_case_1918():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_1.push(set_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    var_3 = queue_4.size()
    assert var_3 == 0
    with pytest.raises(IndexError):
        double_linked_list_0.shift()

def test_case_1919():
    node_0 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77

def test_case_1920():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = var_1.__repr__()
    assert var_2 == '0'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    var_4 = node_1.__repr__()
    assert var_4 == 'Value: None'
    none_type_0 = None
    queue_5 = module_0.Queue(none_type_0)
    node_2 = module_0.Node()
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_5 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    queue_8 = module_0.Queue(queue_6)
    var_6 = double_linked_list_0.append(node_3)
    queue_9 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_10 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_7 = double_linked_list_1.append(node_5)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_8 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'queue4.Node'
    assert var_8.data is None
    assert var_8.next is None
    assert var_8.prev == {*()}
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    queue_11 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_9 = queue_11.peek()
    node_8 = module_0.Node()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_10 = double_linked_list_2.push(var_9)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    var_11 = queue_12.dequeue()
    assert var_11 == 77
    queue_13 = module_0.Queue()
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    var_12 = queue_13.peek()
    queue_14 = module_0.Queue()
    set_7 = set()
    node_10 = module_0.Node(prev=set_7)
    var_13 = queue_14.size()
    assert var_13 == 0
    var_14 = queue_13.size()
    assert var_14 == 0

def test_case_1921():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = queue_1.peek()
    queue_2 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    var_3 = queue_2.peek()
    var_4 = queue_4.size()
    assert var_4 == 1
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_2 = module_0.Node()
    var_5 = queue_5.size()
    assert var_5 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    none_type_0 = None
    queue_9 = module_0.Queue(none_type_0)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_6 = double_linked_list_3.append(set_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_7 = double_linked_list_3.push(set_2)
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_13 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_8 = double_linked_list_5.append(set_3)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_16 = module_0.Queue(bytes_1)
    var_9 = queue_16.dequeue()
    assert var_9 == 77
    var_10 = queue_16.peek()
    assert var_10 == 249
    none_type_1 = None
    queue_17 = module_0.Queue(none_type_1)

def test_case_1922():
    float_0 = -3043.800134
    str_0 = 'O,S|'
    str_1 = 'm'
    bool_0 = False
    tuple_0 = (float_0, str_0, str_1, bool_0)
    double_linked_list_0 = module_0.DoubleLinkedList(tuple_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_1.peek()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    queue_5 = module_0.Queue(queue_3)
    with pytest.raises(ValueError):
        double_linked_list_0.remove(queue_2)

def test_case_1923():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = var_0.__repr__()
    assert var_1 == "'Value: None'"
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_1 = module_0.Queue()
    var_2 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_4 = queue_5.peek()
    node_4 = module_0.Node()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_5 = var_4.__repr__()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    node_6 = module_0.Node()

def test_case_1924():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    var_2 = queue_1.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList(var_2)
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_4 = module_0.Queue()
    var_3 = queue_4.peek()
    none_type_0 = None
    node_4 = module_0.Node(prev=none_type_0)
    queue_5 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_4 = double_linked_list_4.append(node_6)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    node_7 = module_0.Node()
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    queue_7 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_5 = double_linked_list_5.push(queue_7)
    assert f'{type(double_linked_list_5.tail).__module__}.{type(double_linked_list_5.tail).__qualname__}' == 'queue4.Node'
    var_6 = double_linked_list_5.push(queue_7)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_5 = set()
    node_9 = module_0.Node(prev=set_5)
    queue_12 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    node_10 = module_0.Node()
    var_7 = queue_11.size()
    assert var_7 == 0
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_8 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_8.head).__module__}.{type(double_linked_list_8.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_8.tail).__module__}.{type(double_linked_list_8.tail).__qualname__}' == 'queue4.Node'

def test_case_1925():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    float_0 = 5191.7

def test_case_1926():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_2 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_2).__module__}.{type(double_linked_list_2).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()

def test_case_1927():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    var_2 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    queue_3 = module_0.Queue(queue_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = queue_1.size()
    assert var_3 == 0
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    bytes_1 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_9 = module_0.Queue(bytes_1)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_2)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = double_linked_list_2.append(bytes_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_11 = module_0.Queue(queue_10)
    queue_12 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_5 = queue_12.peek()
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_3)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    double_linked_list_4 = module_0.DoubleLinkedList(var_5)
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None

def test_case_1928():
    object_0 = module_1.object()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(object_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = var_0.__repr__()

def test_case_1929():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    queue_1 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    var_2 = queue_3.size()
    assert var_2 == 0
    var_3 = queue_2.peek()
    assert var_3 == 77
    queue_5 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_4 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue(queue_6)
    var_5 = queue_5.peek()
    var_6 = queue_7.size()
    assert var_6 == 1
    var_7 = queue_7.dequeue()
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'queue4.Queue'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    queue_9 = module_0.Queue()
    var_8 = queue_9.peek()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_2)
    var_9 = queue_12.dequeue()
    assert var_9 == 77

def test_case_1930():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
    assert var_1.data is None
    assert var_1.next is None
    assert var_1.prev == {*()}

def test_case_1931():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = var_1.__repr__()
    assert var_2 == '0'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_0.push(queue_3)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_0.push(queue_3)
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_5 = queue_6.peek()
    node_3 = module_0.Node()
    node_4 = module_0.Node(set_2)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()

def test_case_1932():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = queue_6.size()
    assert var_1 == 0
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_7.peek()
    queue_8 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_8.size()
    assert var_3 == 0
    var_4 = queue_7.size()
    assert var_4 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    assert f'{type(queue_9).__module__}.{type(queue_9).__qualname__}' == 'queue4.Queue'
    var_5 = queue_9.dequeue()
    assert var_5 == 77
    var_6 = queue_9.peek()
    assert var_6 == 249
    queue_10 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_7 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_12 = module_0.Queue(queue_11)
    var_8 = queue_10.peek()
    queue_13 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_9 = queue_13.peek()
    node_5 = module_0.Node()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_10 = var_9.__repr__()
    float_0 = -3043.800134
    str_0 = 'O,S|'
    str_1 = 'm'
    bool_0 = False
    tuple_0 = (float_0, str_0, str_1, bool_0)
    double_linked_list_3 = module_0.DoubleLinkedList(tuple_0)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_18 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_7 = module_0.Node()
    var_11 = queue_17.size()
    assert var_11 == 0

def test_case_1933():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    node_1 = module_0.Node()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    complex_0 = 2886.801252 + 1418.99508j
    queue_6 = module_0.Queue(complex_0)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    var_1 = queue_6.size()
    assert var_1 == 1
    var_2 = var_1.__repr__()
    assert var_2 == '1'
    var_3 = queue_5.peek()

def test_case_1934():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = var_0.__repr__()
    queue_3 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue(queue_4)
    var_3 = queue_3.peek()
    var_4 = queue_5.size()
    assert var_4 == 1
    var_5 = queue_5.dequeue()
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Queue'
    complex_0 = 2886.801252 + 1418.99508j
    queue_6 = module_0.Queue(complex_0)
    var_6 = queue_6.size()
    assert var_6 == 1
    double_linked_list_1 = module_0.DoubleLinkedList()
    queue_7 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_7 = queue_7.peek()
    node_3 = module_0.Node()
    queue_8 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_8 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    var_9 = queue_9.enqueue(set_2)
    queue_10 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_10 = queue_10.peek()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_13 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    node_7 = module_0.Node()
    var_11 = queue_12.size()
    assert var_11 == 0
    var_12 = queue_11.size()
    assert var_12 == 0
    bool_0 = True
    double_linked_list_3 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    queue_14 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    var_13 = queue_14.peek()
    queue_15 = module_0.Queue(queue_14)
    queue_16 = module_0.Queue(queue_14)
    var_14 = double_linked_list_3.append(node_8)
    queue_17 = module_0.Queue()
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    queue_18 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    set_7 = set()
    node_10 = module_0.Node(prev=set_7)
    var_15 = double_linked_list_4.append(node_10)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_16 = queue_18.enqueue(queue_17)

def test_case_1935():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    var_1 = queue_3.size()
    assert var_1 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    node_4 = module_0.Node()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_4 = queue_5.size()
    assert var_4 == 0
    queue_6 = module_0.Queue()
    var_5 = queue_6.peek()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = node_6.__repr__()
    assert var_6 == 'Value: None'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    queue_9 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_7 = queue_9.size()
    assert var_7 == 0
    queue_10 = module_0.Queue()
    var_8 = queue_9.size()
    assert var_8 == 0
    var_9 = queue_8.peek()
    assert var_9 == 77
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_2)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_10 = double_linked_list_3.append(bytes_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_8 = module_0.Node()
    var_11 = queue_11.size()
    assert var_11 == 11
    set_5 = set()
    node_9 = module_0.Node(prev=set_5)
    queue_12 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_10 = module_0.Node()
    queue_13 = module_0.Queue()
    set_6 = set()
    node_11 = module_0.Node(prev=set_6)
    var_12 = queue_13.peek()
    queue_14 = module_0.Queue(queue_13)
    queue_15 = module_0.Queue(queue_13)

def test_case_1936():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)

def test_case_1937():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    with pytest.raises(IndexError):
        double_linked_list_0.shift()

def test_case_1938():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = node_2.__repr__()
    assert var_1 == 'Value: None'
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bytes_0 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_2 = double_linked_list_4.append(set_3)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_4.push(set_3)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_1)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_4 = double_linked_list_5.append(bytes_1)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    var_5 = node_5.__repr__()
    assert var_5 == 'Value: None'
    node_6 = module_0.Node()
    complex_0 = 2886.801252 + 1418.99508j
    queue_12 = module_0.Queue(complex_0)
    var_6 = queue_12.size()
    assert var_6 == 1

def test_case_1939():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.size()
    assert var_2 == 0

def test_case_1940():
    float_0 = -3043.800134
    str_0 = 'O,S|'
    str_1 = 'm'
    bool_0 = False
    tuple_0 = (float_0, str_0, str_1, bool_0)
    double_linked_list_0 = module_0.DoubleLinkedList(tuple_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    queue_3 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_4 = module_0.Queue(complex_0)
    var_2 = queue_4.size()
    assert var_2 == 1
    node_2 = module_0.Node()
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_4 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    var_5 = queue_6.enqueue(set_2)
    node_4 = module_0.Node()
    var_6 = node_4.__repr__()
    assert var_6 == 'Value: None'
    queue_7 = module_0.Queue(node_4)
    var_7 = queue_7.enqueue(var_6)
    complex_1 = 1851.002 - 2261.566174j
    list_0 = [complex_1, complex_1, complex_1, complex_1]
    double_linked_list_1 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    complex_2 = 2886.801252 + 1418.99508j
    queue_8 = module_0.Queue(complex_2)
    var_8 = queue_8.size()
    assert var_8 == 1
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    queue_10 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_9 = queue_10.peek()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_11 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_10 = queue_11.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    double_linked_list_4 = module_0.DoubleLinkedList(var_10)
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None

def test_case_1941():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    var_2 = queue_2.size()
    assert var_2 == 1
    bool_0 = True
    double_linked_list_1 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0, prev=none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_2.append(queue_3)
    queue_4 = module_0.Queue()
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    var_5 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    queue_6 = module_0.Queue(queue_4)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_12 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_6 = queue_12.peek()
    queue_13 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_7 = queue_13.size()
    assert var_7 == 0
    var_8 = queue_12.size()
    assert var_8 == 0
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_14 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_9 = queue_16.size()
    assert var_9 == 0
    queue_17 = module_0.Queue()

def test_case_1942():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_0.size()
    assert var_0 == 0
    node_2 = module_0.Node()
    var_1 = node_2.__repr__()
    assert var_1 == 'Value: None'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = var_1.__repr__()
    assert var_2 == "'Value: None'"
    queue_1 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_3 = queue_1.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    double_linked_list_3 = module_0.DoubleLinkedList(var_3)
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_3 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_4 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    queue_5 = module_0.Queue(queue_3)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()

def test_case_1943():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    complex_0 = 2886.801252 + 1418.99508j
    queue_4 = module_0.Queue(complex_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    var_1 = queue_4.size()
    assert var_1 == 1
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_5 = module_0.Queue()
    var_2 = queue_5.enqueue(none_type_0)
    var_3 = queue_4.enqueue(set_2)
    queue_6 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue(queue_7)
    var_5 = queue_6.peek()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_10 = module_0.Queue()
    var_6 = queue_10.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_1)
    var_7 = queue_11.dequeue()
    assert var_7 == 77
    queue_12 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_8 = queue_12.peek()
    queue_13 = module_0.Queue(queue_12)
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_9 = var_8.__repr__()

def test_case_1944():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue(none_type_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = queue_8.size()
    assert var_1 == 0
    queue_9 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_9.size()
    assert var_2 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_10.peek()
    queue_12 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_0)
    assert f'{type(queue_13).__module__}.{type(queue_13).__qualname__}' == 'queue4.Queue'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_14 = module_0.Queue(queue_13)
    var_5 = queue_12.peek()
    str_0 = "d^_Z'j<ceXum|X7"
    node_4 = module_0.Node(str_0)
    complex_0 = 2886.801252 + 1418.99508j
    queue_15 = module_0.Queue(complex_0)
    var_6 = queue_15.size()
    assert var_6 == 1
    var_7 = var_6.__repr__()
    assert var_7 == '1'
    queue_16 = module_0.Queue()
    complex_1 = 2886.801252 + 1418.99508j
    queue_17 = module_0.Queue(complex_1)
    var_8 = queue_17.size()
    assert var_8 == 1
    node_5 = module_0.Node()
    var_9 = node_5.__repr__()
    assert var_9 == 'Value: None'

def test_case_1945():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    node_2 = module_0.Node(set_0)

def test_case_1946():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    bool_0 = True
    double_linked_list_1 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    queue_0 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    queue_2 = module_0.Queue(queue_0)
    var_1 = double_linked_list_1.append(node_0)

def test_case_1947():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = var_0.__repr__()
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    complex_0 = 2886.801252 + 1418.99508j
    queue_2 = module_0.Queue(complex_0)
    var_2 = queue_2.size()
    assert var_2 == 1
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue(queue_7)
    var_5 = queue_6.peek()
    var_6 = queue_8.size()
    assert var_6 == 1
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_7 = double_linked_list_5.append(set_3)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    queue_12 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_8 = queue_12.size()
    assert var_8 == 0
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_13 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    node_7 = module_0.Node()
    var_9 = queue_13.size()
    assert var_9 == 0
    var_10 = node_6.__repr__()
    assert var_10 == 'Value: None'
    queue_14 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_11 = queue_14.peek()
    node_9 = module_0.Node()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    var_12 = double_linked_list_7.push(var_11)
    assert f'{type(double_linked_list_7.tail).__module__}.{type(double_linked_list_7.tail).__qualname__}' == 'queue4.Node'
    with pytest.raises(ValueError):
        double_linked_list_4.remove(double_linked_list_3)

def test_case_1948():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    var_2 = queue_0.enqueue(set_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_3.peek()
    node_4 = module_0.Node()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_4 = var_3.__repr__()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1, prev=none_type_1)

def test_case_1949():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_0 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_4 = module_0.Queue(complex_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    var_2 = queue_4.size()
    assert var_2 == 1
    node_3 = module_0.Node()
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_5 = double_linked_list_3.push(queue_6)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_6 = queue_9.peek()
    node_7 = module_0.Node()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()

def test_case_1950():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77

def test_case_1951():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = queue_5.size()
    assert var_1 == 0
    queue_6 = module_0.Queue()
    var_2 = queue_6.size()
    assert var_2 == 0
    queue_7 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_7.peek()
    node_4 = module_0.Node()
    node_5 = module_0.Node()
    queue_8 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_4 = queue_8.size()
    assert var_4 == 0
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_5 = queue_9.peek()
    queue_11 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_6 = queue_11.peek()
    queue_12 = module_0.Queue(queue_11)
    assert f'{type(queue_12).__module__}.{type(queue_12).__qualname__}' == 'queue4.Queue'
    queue_13 = module_0.Queue(queue_11)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_7 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_8 = double_linked_list_2.append(queue_14)
    int_0 = -3616
    queue_15 = module_0.Queue(int_0)
    var_9 = queue_15.dequeue()
    assert var_9 == -3616

def test_case_1952():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None

def test_case_1953():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    with pytest.raises(IndexError):
        double_linked_list_0.shift()

def test_case_1954():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_2.append(node_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_2 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    queue_8 = module_0.Queue(queue_6)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_3 = queue_6.size()
    assert var_3 == 0
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_13 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_6 = module_0.Node()
    var_4 = queue_12.size()
    assert var_4 == 0
    var_5 = queue_11.size()
    assert var_5 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_0)
    var_6 = queue_14.dequeue()
    assert var_6 == 77
    var_7 = queue_14.peek()
    assert var_7 == 249

def test_case_1955():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    none_type_0 = None
    var_1 = queue_1.enqueue(none_type_0)
    var_2 = var_0.__repr__()
    assert var_2 == '0'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_4 = queue_3.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    double_linked_list_3 = module_0.DoubleLinkedList(var_4)
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    bytes_2 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_8 = module_0.Queue(bytes_2)
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_5 = double_linked_list_6.append(set_3)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_3)
    queue_13 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_6 = queue_13.size()
    assert var_6 == 0
    queue_14 = module_0.Queue()
    var_7 = queue_13.size()
    assert var_7 == 0
    var_8 = queue_12.peek()
    assert var_8 == 77
    queue_15 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_9 = queue_15.size()
    assert var_9 == 0
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_10 = queue_16.peek()
    with pytest.raises(IndexError):
        double_linked_list_3.shift()

def test_case_1956():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = queue_1.peek()

def test_case_1957():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    var_1 = var_0.__repr__()
    assert var_1 == '1'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_2 = queue_1.peek()
    queue_2 = module_0.Queue()
    complex_1 = 2886.801252 + 1418.99508j
    queue_3 = module_0.Queue(complex_1)
    var_3 = queue_3.size()
    assert var_3 == 1
    node_1 = module_0.Node()
    var_4 = node_1.__repr__()
    assert var_4 == 'Value: None'
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_5 = queue_4.peek()
    node_3 = module_0.Node()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_6 = var_5.__repr__()
    queue_7 = module_0.Queue()
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_7 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    queue_10 = module_0.Queue(queue_8)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_8 = queue_8.size()
    assert var_8 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_9 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'

def test_case_1958():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.peek()
    node_2 = module_0.Node()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_2 = var_1.__repr__()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_6.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    double_linked_list_3 = module_0.DoubleLinkedList(var_3)
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_5 = module_0.Node()
    var_4 = queue_9.size()
    assert var_4 == 0
    queue_11 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_5 = queue_11.size()
    assert var_5 == 0
    queue_12 = module_0.Queue()
    var_6 = queue_12.size()
    assert var_6 == 0
    queue_13 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_7 = queue_13.peek()
    queue_14 = module_0.Queue(queue_13)
    queue_15 = module_0.Queue(queue_13)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    var_8 = queue_15.size()
    assert var_8 == 1
    queue_18 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_9 = queue_18.peek()
    queue_19 = module_0.Queue(queue_18)
    queue_20 = module_0.Queue(queue_18)
    queue_21 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_10 = queue_21.size()
    assert var_10 == 0
    queue_22 = module_0.Queue()
    var_11 = queue_22.peek()

def test_case_1959():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 0

def test_case_1960():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    queue_3 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_5.size()
    assert var_3 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = queue_7.size()
    assert var_4 == 0
    queue_8 = module_0.Queue()
    var_5 = queue_7.size()
    assert var_5 == 0
    queue_9 = module_0.Queue()
    int_0 = -3616
    queue_10 = module_0.Queue(int_0)
    var_6 = queue_10.dequeue()
    assert var_6 == -3616
    node_3 = module_0.Node()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_2)
    double_linked_list_1 = module_0.DoubleLinkedList()
    var_7 = double_linked_list_1.append(bytes_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_12 = module_0.Queue(queue_11)
    node_4 = module_0.Node()
    var_8 = node_4.__repr__()
    assert var_8 == 'Value: None'
    queue_13 = module_0.Queue(node_4)
    queue_14 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_9 = queue_14.peek()
    queue_15 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_10 = queue_15.size()
    assert var_10 == 0
    var_11 = queue_14.size()
    assert var_11 == 0

def test_case_1961():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = double_linked_list_1.push(queue_2)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_3 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue(queue_6)
    var_4 = queue_5.peek()
    var_5 = queue_7.size()
    assert var_5 == 1
    var_6 = queue_7.dequeue()
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'queue4.Queue'
    complex_0 = 2886.801252 + 1418.99508j
    queue_8 = module_0.Queue(complex_0)
    var_7 = queue_8.size()
    assert var_7 == 1
    double_linked_list_4 = module_0.DoubleLinkedList()

def test_case_1962():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    var_3 = queue_5.size()
    assert var_3 == 0
    complex_0 = 2886.801252 + 1418.99508j
    queue_6 = module_0.Queue(complex_0)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    var_4 = queue_6.size()
    assert var_4 == 1
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_1963():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
    assert var_1.data is None
    assert var_1.next is None
    assert var_1.prev == {*()}
    none_type_0 = None
    node_2 = module_0.Node(none_type_0, prev=none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    var_2 = queue_2.dequeue()
    assert var_2 == 77

def test_case_1964():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = queue_0.size()
    assert var_1 == 0
    var_2 = queue_1.peek()

def test_case_1965():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    complex_1 = 2886.801252 + 1418.99508j
    queue_1 = module_0.Queue(complex_1)
    var_1 = queue_1.size()
    assert var_1 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    var_4 = queue_6.size()
    assert var_4 == 0
    complex_2 = 2886.801252 + 1418.99508j
    queue_7 = module_0.Queue(complex_2)
    var_5 = queue_7.size()
    assert var_5 == 1
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_8 = module_0.Queue()
    var_6 = queue_8.enqueue(none_type_0)
    var_7 = queue_7.enqueue(set_2)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    none_type_1 = None
    queue_12 = module_0.Queue(none_type_1)

def test_case_1966():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    var_1 = var_0.__repr__()
    assert var_1 == '1'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0, prev=none_type_0)

def test_case_1967():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    node_2 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    var_3 = queue_3.size()
    assert var_3 == 0
    var_4 = var_3.__repr__()
    assert var_4 == '0'
    queue_5 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_5 = double_linked_list_0.append(node_5)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_6 = queue_5.size()
    assert var_6 == 0
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_7 = queue_9.size()
    assert var_7 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_1)
    queue_11 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_8 = queue_11.size()
    assert var_8 == 0
    queue_12 = module_0.Queue()
    var_9 = queue_11.size()
    assert var_9 == 0
    queue_13 = module_0.Queue()
    var_10 = queue_13.size()
    assert var_10 == 0
    queue_14 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_11 = queue_14.size()
    assert var_11 == 0
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()

def test_case_1968():
    float_0 = -300.84962
    queue_0 = module_0.Queue(float_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    with pytest.raises(IndexError):
        double_linked_list_0.pop()

def test_case_1969():
    int_0 = -3616
    queue_0 = module_0.Queue(int_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == -3616
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = var_1.__repr__()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    var_4 = node_2.__repr__()
    assert var_4 == 'Value: None'
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_5 = double_linked_list_0.append(node_4)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    var_6 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_6 = module_0.Node()
    var_7 = node_6.__repr__()
    assert var_7 == 'Value: None'
    node_7 = module_0.Node()
    queue_8 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    var_8 = double_linked_list_2.append(node_9)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_9 = double_linked_list_2.shift()
    assert double_linked_list_2.tail is None
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'queue4.Node'
    assert var_9.data is None
    assert var_9.next is None
    assert var_9.prev == {*()}
    set_7 = set()
    node_10 = module_0.Node(prev=set_7)
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    node_11 = module_0.Node()
    var_10 = queue_10.size()
    assert var_10 == 0
    var_11 = node_10.__repr__()
    assert var_11 == 'Value: None'

def test_case_1970():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = var_0.__repr__()
    complex_0 = 2886.801252 + 1418.99508j
    queue_2 = module_0.Queue(complex_0)
    var_2 = queue_2.size()
    assert var_2 == 1
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_3.peek()
    node_3 = module_0.Node()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_4 = var_3.__repr__()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_5 = queue_7.peek()
    queue_8 = module_0.Queue(queue_7)
    queue_9 = module_0.Queue(queue_7)
    none_type_0 = None
    node_5 = module_0.Node(none_type_0, prev=none_type_0)

def test_case_1971():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_5 = module_0.Queue(complex_0)
    var_2 = queue_5.size()
    assert var_2 == 1
    node_1 = module_0.Node()
    var_3 = node_1.__repr__()
    assert var_3 == 'Value: None'
    queue_6 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_4 = queue_6.size()
    assert var_4 == 0
    queue_7 = module_0.Queue()
    var_5 = queue_7.size()
    assert var_5 == 0
    queue_8 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_6 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    queue_10 = module_0.Queue(queue_8)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_7 = queue_8.size()
    assert var_7 == 0
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_13 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_14 = module_0.Queue()
    var_8 = queue_14.peek()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_17 = module_0.Queue(bytes_1)
    queue_18 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_9 = queue_18.peek()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_19 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_10 = double_linked_list_4.append(set_6)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_11 = double_linked_list_4.push(set_6)
    bool_0 = True
    double_linked_list_5 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_5.tail).__module__}.{type(double_linked_list_5.tail).__qualname__}' == 'queue4.Node'
    queue_22 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_12 = queue_22.peek()
    queue_23 = module_0.Queue(queue_22)
    queue_24 = module_0.Queue(queue_22)
    var_13 = double_linked_list_5.append(node_8)
    none_type_0 = None
    node_9 = module_0.Node(none_type_0, prev=none_type_0)

def test_case_1972():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = var_0.__repr__()

def test_case_1973():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    complex_1 = 2886.801252 + 1418.99508j
    queue_1 = module_0.Queue(complex_1)
    var_1 = queue_1.size()
    assert var_1 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = double_linked_list_2.append(set_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_6 = module_0.Queue()
    var_3 = node_1.__repr__()
    assert var_3 == 'Value: None'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_4 = queue_7.enqueue(none_type_0)
    var_5 = var_4.__repr__()
    queue_8 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_6 = double_linked_list_4.append(bytes_0)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue(queue_9)
    var_7 = queue_8.peek()
    var_8 = queue_10.size()
    assert var_8 == 1

def test_case_1974():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    none_type_0 = None
    var_1 = queue_3.enqueue(none_type_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_5.peek()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_2)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.append(bytes_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_4 = queue_6.size()
    assert var_4 == 11
    queue_7 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_5 = queue_7.peek()
    queue_8 = module_0.Queue(queue_7)
    var_6 = node_0.__repr__()
    assert var_6 == 'Value: None'

def test_case_1975():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    var_1 = queue_1.dequeue()
    assert var_1 == 77
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = double_linked_list_1.append(node_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_5 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue(queue_8)
    var_6 = queue_7.peek()
    var_7 = queue_9.size()
    assert var_7 == 1
    var_8 = queue_9.dequeue()
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'queue4.Queue'
    none_type_0 = None
    node_5 = module_0.Node(prev=none_type_0)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_2)
    double_linked_list_3 = module_0.DoubleLinkedList()
    var_9 = double_linked_list_3.append(bytes_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_6 = module_0.Node()

def test_case_1976():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    node_2 = module_0.Node()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_2 = double_linked_list_3.push(var_1)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_3 = double_linked_list_4.append(node_4)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_4 = queue_5.peek()
    node_6 = module_0.Node()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_5 = var_4.__repr__()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_8 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_6 = double_linked_list_6.append(set_5)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    var_7 = double_linked_list_6.push(set_5)
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_11 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    var_8 = double_linked_list_7.push(queue_11)
    assert f'{type(double_linked_list_7.tail).__module__}.{type(double_linked_list_7.tail).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_1)
    queue_15 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_9 = queue_15.size()
    assert var_9 == 0
    queue_16 = module_0.Queue()
    var_10 = queue_15.size()
    assert var_10 == 0
    str_0 = "d^_Z'j<ceXum|X7"
    node_10 = module_0.Node(str_0)
    with pytest.raises(IndexError):
        double_linked_list_8.shift()

def test_case_1977():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = queue_0.size()
    assert var_1 == 11
    queue_1 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    var_3 = queue_2.enqueue(set_0)
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = queue_5.size()
    assert var_4 == 0
    node_3 = module_0.Node()
    complex_0 = 2886.801252 + 1418.99508j
    queue_6 = module_0.Queue(complex_0)
    var_5 = queue_6.size()
    assert var_5 == 1
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None

def test_case_1978():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
    assert var_1.data is None
    assert var_1.next is None
    assert var_1.prev == {*()}
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_3.enqueue(queue_2)
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_5 = module_0.Node()
    var_4 = queue_4.size()
    assert var_4 == 0
    node_6 = module_0.Node()
    var_5 = node_6.__repr__()
    assert var_5 == 'Value: None'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_6 = var_5.__repr__()
    assert var_6 == "'Value: None'"
    queue_5 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_7 = queue_5.size()
    assert var_7 == 0
    queue_6 = module_0.Queue()
    var_8 = queue_6.peek()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_7 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_9 = double_linked_list_4.push(queue_7)
    assert f'{type(double_linked_list_4.tail).__module__}.{type(double_linked_list_4.tail).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    var_10 = queue_10.size()
    assert var_10 == 0
    queue_11 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_0)
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_11 = double_linked_list_6.append(bytes_0)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    node_10 = module_0.Node()
    set_8 = set()
    node_11 = module_0.Node(prev=set_8)
    queue_13 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    var_12 = queue_15.size()
    assert var_12 == 0
    node_12 = module_0.Node()

def test_case_1979():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList(var_1)
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    none_type_0 = None
    var_3 = queue_5.enqueue(none_type_0)
    var_4 = var_2.__repr__()
    assert var_4 == '0'
    bool_0 = True
    double_linked_list_4 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_4.tail).__module__}.{type(double_linked_list_4.tail).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_5 = double_linked_list_5.append(bytes_1)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue(queue_7)
    var_6 = queue_6.peek()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_2)
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_7 = double_linked_list_6.append(bytes_2)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_8 = node_3.__repr__()
    assert var_8 == 'Value: None'
    node_4 = module_0.Node()
    queue_10 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_9 = queue_10.size()
    assert var_9 == 0
    var_10 = double_linked_list_2.push(var_1)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'

def test_case_1980():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_5.peek()
    node_2 = module_0.Node()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    node_4 = module_0.Node()
    var_2 = node_4.__repr__()
    assert var_2 == 'Value: None'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = var_2.__repr__()
    assert var_3 == "'Value: None'"
    node_5 = module_0.Node()
    var_4 = node_5.__repr__()
    assert var_4 == 'Value: None'
    queue_6 = module_0.Queue(node_5)
    var_5 = queue_6.enqueue(var_4)

def test_case_1981():
    node_0 = module_0.Node()
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_2.size()
    assert var_1 == 1
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_3 = module_0.Node()
    var_2 = queue_5.size()
    assert var_2 == 0
    queue_6 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_3 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    queue_8 = module_0.Queue(queue_6)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_4 = queue_6.size()
    assert var_4 == 0
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_12 = module_0.Queue()
    var_5 = node_5.__repr__()
    assert var_5 == 'Value: None'

def test_case_1982():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    var_3 = queue_4.peek()
    bool_0 = True
    double_linked_list_1 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_4 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    queue_7 = module_0.Queue(queue_5)
    var_5 = double_linked_list_1.append(node_3)
    queue_8 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_6 = queue_8.peek()
    queue_9 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_7 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_11 = module_0.Queue(queue_10)
    var_8 = queue_9.peek()
    var_9 = queue_11.size()
    assert var_9 == 1
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_10 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_13 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_11 = queue_13.size()
    assert var_11 == 0
    queue_14 = module_0.Queue()
    none_type_0 = None
    var_12 = queue_14.enqueue(none_type_0)
    queue_15 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_13 = queue_15.peek()
    queue_16 = module_0.Queue(queue_15)
    queue_17 = module_0.Queue(queue_15)
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()

def test_case_1983():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    var_1 = var_0.__repr__()

def test_case_1984():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    var_1 = var_0.__repr__()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    var_3 = queue_2.size()
    assert var_3 == 0
    var_4 = queue_1.peek()
    assert var_4 == 77
    queue_4 = module_0.Queue()
    var_5 = queue_4.size()
    assert var_5 == 0
    none_type_1 = None
    node_2 = module_0.Node(prev=none_type_1)
    node_3 = module_0.Node()
    var_6 = node_3.__repr__()
    assert var_6 == 'Value: None'
    queue_5 = module_0.Queue(node_3)
    var_7 = queue_5.enqueue(var_6)
    complex_0 = 2886.801252 + 1418.99508j
    queue_6 = module_0.Queue(complex_0)
    var_8 = queue_6.size()
    assert var_8 == 1
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None

def test_case_1985():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_2.size()
    assert var_1 == 1
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_5.size()
    assert var_2 == 0
    queue_6 = module_0.Queue()
    var_3 = queue_6.size()
    assert var_3 == 0
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = double_linked_list_0.push(queue_7)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_0.push(queue_7)
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_11 = module_0.Queue()

def test_case_1986():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    none_type_0 = None
    var_2 = queue_2.enqueue(none_type_0)
    var_3 = var_1.__repr__()
    assert var_3 == '0'

def test_case_1987():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = var_1.__repr__()
    assert var_2 == "'Value: None'"
    node_2 = module_0.Node()
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_2 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_2).__module__}.{type(double_linked_list_2).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_4 = double_linked_list_4.append(set_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_4.push(set_1)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    node_5 = module_0.Node()
    var_6 = queue_6.size()
    assert var_6 == 0
    complex_1 = 2886.801252 + 1418.99508j
    queue_8 = module_0.Queue(complex_1)
    var_7 = queue_8.size()
    assert var_7 == 1
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    bool_0 = True

def test_case_1988():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = var_0.__repr__()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_0)
    var_3 = var_2.__repr__()
    queue_3 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_3.peek()
    node_4 = module_0.Node()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    queue_4 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_5 = queue_4.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_5)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue(queue_7)
    var_7 = queue_6.peek()
    queue_9 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_8 = queue_9.peek()
    node_8 = module_0.Node()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_9 = double_linked_list_3.push(var_8)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'

def test_case_1989():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_2.size()
    assert var_1 == 1
    none_type_0 = None
    node_1 = module_0.Node(prev=none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = var_3.__repr__()
    assert var_4 == "'Value: None'"
    none_type_2 = None
    queue_6 = module_0.Queue(none_type_2)

def test_case_1990():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_1.enqueue(queue_0)
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_3.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    queue_6 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_4 = queue_6.size()
    assert var_4 == 0
    queue_7 = module_0.Queue()
    var_5 = queue_6.size()
    assert var_5 == 0
    var_6 = queue_5.peek()
    assert var_6 == 77
    none_type_0 = None
    queue_8 = module_0.Queue(none_type_0)
    queue_9 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_7 = queue_9.size()
    assert var_7 == 0
    queue_10 = module_0.Queue()
    var_8 = queue_10.peek()
    queue_11 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_9 = queue_11.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList(var_9)
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_13 = module_0.Queue()
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    var_10 = queue_13.peek()
    queue_14 = module_0.Queue(queue_13)
    queue_15 = module_0.Queue()
    set_8 = set()
    node_8 = module_0.Node(prev=set_8)
    var_11 = queue_15.size()
    assert var_11 == 0
    queue_16 = module_0.Queue()
    node_9 = module_0.Node()
    var_12 = node_9.__repr__()
    assert var_12 == 'Value: None'
    queue_17 = module_0.Queue(node_9)
    var_13 = queue_17.enqueue(var_12)
    set_9 = set()
    node_10 = module_0.Node(prev=set_9)
    queue_18 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None

def test_case_1991():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == 77
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_1 = module_0.Queue(node_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    var_2 = queue_2.dequeue()
    assert var_2 == 77
    queue_3 = module_0.Queue()
    node_1 = module_0.Node()
    queue_4 = module_0.Queue()
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_4 = queue_4.size()
    assert var_4 == 0
    str_0 = "d^_Z'j<ceXum|X7"
    node_3 = module_0.Node(str_0)
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_5 = queue_6.enqueue(none_type_0)
    var_6 = var_5.__repr__()
    queue_7 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_7 = queue_7.peek()
    queue_8 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_8 = queue_8.size()
    assert var_8 == 0
    var_9 = queue_7.size()
    assert var_9 == 0
    var_10 = queue_5.size()
    assert var_10 == 0

def test_case_1992():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_0.push(queue_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_1 = double_linked_list_4.append(set_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_4.push(set_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    bool_0 = True
    double_linked_list_6 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_6.tail).__module__}.{type(double_linked_list_6.tail).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    queue_10 = module_0.Queue(queue_8)
    var_4 = double_linked_list_6.append(node_2)

def test_case_1993():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue(queue_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    none_type_0 = None
    node_3 = module_0.Node(prev=none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    queue_7 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_2 = queue_7.size()
    assert var_2 == 0
    queue_8 = module_0.Queue()
    var_3 = queue_7.size()
    assert var_3 == 0
    var_4 = queue_6.peek()
    assert var_4 == 77

def test_case_1994():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    var_1 = var_0.__repr__()

def test_case_1995():
    int_0 = -3616
    queue_0 = module_0.Queue(int_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == -3616
    queue_1 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue(queue_2)
    var_2 = queue_1.peek()
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_1 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    bool_0 = True
    double_linked_list_3 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_6 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    var_3 = double_linked_list_5.append(set_0)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_5.push(set_0)
    set_1 = {var_3, var_4, queue_7, double_linked_list_1}
    with pytest.raises(ValueError):
        double_linked_list_3.remove(set_1)

def test_case_1996():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_1.enqueue(queue_0)
    complex_0 = 2886.801252 + 1418.99508j
    queue_2 = module_0.Queue(complex_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    var_2 = queue_2.size()
    assert var_2 == 1
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_1997():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    var_2 = queue_2.peek()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_3 = double_linked_list_3.append(set_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_3.push(set_1)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    queue_9 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_5 = queue_9.size()
    assert var_5 == 0
    queue_10 = module_0.Queue()
    var_6 = queue_9.size()
    assert var_6 == 0
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_7 = queue_13.size()
    assert var_7 == 0
    bool_0 = True
    double_linked_list_6 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_6.tail).__module__}.{type(double_linked_list_6.tail).__qualname__}' == 'queue4.Node'
    queue_14 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_8 = queue_14.peek()
    queue_15 = module_0.Queue(queue_14)
    queue_16 = module_0.Queue(queue_14)
    var_9 = double_linked_list_6.append(node_4)
    complex_0 = 2886.801252 + 1418.99508j
    queue_17 = module_0.Queue(complex_0)
    var_10 = queue_17.size()
    assert var_10 == 1
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_18 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    queue_19 = module_0.Queue()
    var_11 = node_5.__repr__()
    assert var_11 == 'Value: None'
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    queue_22 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_23 = module_0.Queue()
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    node_7 = module_0.Node()
    var_12 = queue_22.size()
    assert var_12 == 0
    var_13 = queue_21.size()
    assert var_13 == 0

def test_case_1998():
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_0 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    complex_1 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_1)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = double_linked_list_1.append(node_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_2.enqueue(queue_1)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_3 = queue_7.size()
    assert var_3 == 0
    node_4 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    queue_9 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_4 = queue_9.size()
    assert var_4 == 0
    queue_10 = module_0.Queue()
    var_5 = queue_9.size()
    assert var_5 == 0
    queue_11 = module_0.Queue()

def test_case_1999():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == 77
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    var_2 = queue_2.peek()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0, prev=none_type_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    var_3 = queue_6.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    queue_8 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_4 = queue_8.size()
    assert var_4 == 0
    queue_9 = module_0.Queue()
    var_5 = queue_8.size()
    assert var_5 == 0
    node_4 = module_0.Node(next_node=var_4)
    assert node_4.next == 0
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_2)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = double_linked_list_2.append(bytes_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    queue_11 = module_0.Queue()
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_3)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_7 = double_linked_list_3.append(bytes_3)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_13 = module_0.Queue(queue_12)
    var_8 = queue_11.peek()
    var_9 = queue_13.size()
    assert var_9 == 1
    var_10 = queue_13.dequeue()
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'queue4.Queue'
    queue_14 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_11 = queue_14.size()
    assert var_11 == 0
    queue_15 = module_0.Queue()
    none_type_1 = None
    var_12 = queue_15.enqueue(none_type_1)

def test_case_2000():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_1 = queue_1.enqueue(set_0)
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = var_2.__repr__()
    node_3 = module_0.Node()
    queue_4 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = queue_4.size()
    assert var_4 == 0
    complex_0 = 2886.801252 + 1418.99508j
    queue_5 = module_0.Queue(complex_0)
    var_5 = queue_5.size()
    assert var_5 == 1
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_6 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_6 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue(queue_7)
    var_7 = queue_6.peek()
    var_8 = queue_8.size()
    assert var_8 == 1
    var_9 = queue_8.dequeue()
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'queue4.Queue'

def test_case_2001():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    var_3 = queue_4.size()
    assert var_3 == 0
    var_4 = queue_3.peek()
    assert var_4 == 77
    str_0 = "d^_Z'j<ceXum|X7"
    node_2 = module_0.Node(str_0)
    bool_0 = True
    double_linked_list_1 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_5 = double_linked_list_2.append(node_4)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_6 = module_0.Node()

def test_case_2002():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    node_1 = module_0.Node()
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = var_2.__repr__()
    assert var_3 == "'Value: None'"
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_4 = queue_3.size()
    assert var_4 == 0
    queue_4 = module_0.Queue()
    none_type_0 = None
    var_5 = queue_4.enqueue(none_type_0)
    var_6 = var_4.__repr__()
    assert var_6 == '0'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_7 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_8 = queue_6.size()
    assert var_8 == 0
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_9 = queue_7.peek()

def test_case_2003():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0, prev=none_type_0)
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = queue_3.size()
    assert var_1 == 0
    node_3 = module_0.Node()
    int_0 = -3616
    queue_4 = module_0.Queue(int_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    var_2 = queue_4.dequeue()
    assert var_2 == -3616
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    queue_6 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_3 = queue_6.size()
    assert var_3 == 0
    queue_7 = module_0.Queue()
    var_4 = queue_6.size()
    assert var_4 == 0
    node_5 = module_0.Node(next_node=var_3)
    assert node_5.next == 0
    queue_8 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_5 = queue_8.size()
    assert var_5 == 0
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_6 = queue_9.peek()
    queue_11 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    var_7 = queue_11.size()
    assert var_7 == 0
    queue_12 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    var_8 = queue_11.size()
    assert var_8 == 0
    queue_13 = module_0.Queue()
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    var_9 = queue_13.peek()
    node_10 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    var_10 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_11 = module_0.Node()
    var_11 = node_11.__repr__()
    assert var_11 == 'Value: None'
    node_12 = module_0.Node()
    complex_0 = 2886.801252 + 1418.99508j
    queue_15 = module_0.Queue(complex_0)
    var_12 = queue_15.size()
    assert var_12 == 1

def test_case_2004():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == 77
    var_1 = queue_0.peek()
    assert var_1 == 249
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_2 = queue_1.size()
    assert var_2 == 0
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    var_4 = queue_5.size()
    assert var_4 == 0
    node_1 = module_0.Node()
    var_5 = node_1.__repr__()
    assert var_5 == 'Value: None'

def test_case_2005():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_0 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    queue_4 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_1 = queue_4.size()
    assert var_1 == 0
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_6 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_3 = queue_6.peek()
    node_6 = module_0.Node()
    node_7 = module_0.Node(set_4)
    queue_7 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    var_4 = queue_7.peek()
    node_9 = module_0.Node()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_5 = var_4.__repr__()
    queue_10 = module_0.Queue()
    set_6 = {double_linked_list_1, queue_7}
    with pytest.raises(ValueError):
        double_linked_list_2.remove(set_6)

def test_case_2006():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    var_2 = queue_0.enqueue(set_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    var_4 = queue_3.size()
    assert var_4 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_5 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue(queue_5)
    node_2 = module_0.Node()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = double_linked_list_2.append(set_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_7 = node_3.__repr__()
    assert var_7 == 'Value: None'
    queue_10 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_8 = double_linked_list_3.append(node_5)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_6 = module_0.Node()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    none_type_1 = None
    queue_15 = module_0.Queue(none_type_1)

def test_case_2007():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.size()
    assert var_2 == 0
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_2 = {node_1, queue_1, queue_1}

def test_case_2008():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()

def test_case_2009():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_0.size()
    assert var_0 == 0
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_1 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_1.peek()
    node_3 = module_0.Node()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_3 = var_2.__repr__()
    queue_4 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue(queue_5)
    var_5 = queue_4.peek()
    var_6 = queue_6.size()
    assert var_6 == 1
    var_7 = queue_6.dequeue()
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'queue4.Queue'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    var_8 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_2)
    queue_9 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_9 = queue_9.peek()
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_3)
    double_linked_list_3 = module_0.DoubleLinkedList()
    double_linked_list_4 = module_0.DoubleLinkedList(var_9)
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()

def test_case_2010():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = queue_4.size()
    assert var_4 == 0
    queue_5 = module_0.Queue()
    none_type_0 = None
    var_5 = queue_5.enqueue(none_type_0)
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_6 = queue_6.size()
    assert var_6 == 0
    queue_7 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    none_type_1 = None
    queue_8 = module_0.Queue()
    var_7 = queue_8.enqueue(none_type_1)
    var_8 = var_7.__repr__()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    assert f'{type(queue_9).__module__}.{type(queue_9).__qualname__}' == 'queue4.Queue'
    queue_10 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_9 = queue_10.size()
    assert var_9 == 0
    queue_11 = module_0.Queue()
    var_10 = queue_10.size()
    assert var_10 == 0
    var_11 = var_10.__repr__()
    assert var_11 == '0'
    queue_12 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_13 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    var_12 = double_linked_list_0.append(node_7)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_8 = module_0.Node()
    queue_14 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_13 = queue_14.size()
    assert var_13 == 0
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_17 = module_0.Queue(bytes_1)
    queue_18 = module_0.Queue()
    set_9 = set()
    node_10 = module_0.Node(prev=set_9)
    var_14 = queue_18.size()
    assert var_14 == 0
    queue_19 = module_0.Queue()
    var_15 = queue_18.size()
    assert var_15 == 0
    queue_20 = module_0.Queue()
    set_10 = set()
    node_11 = module_0.Node(prev=set_10)
    var_16 = queue_20.peek()
    node_12 = module_0.Node()

def test_case_2011():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    var_2 = queue_2.size()
    assert var_2 == 0
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_5 = module_0.Queue()
    var_3 = queue_5.peek()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    var_4 = queue_8.dequeue()
    assert var_4 == 77
    node_2 = module_0.Node()
    var_5 = node_2.__repr__()
    assert var_5 == 'Value: None'
    queue_9 = module_0.Queue(node_2)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_2)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = double_linked_list_2.append(bytes_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    var_7 = queue_10.size()
    assert var_7 == 11
    with pytest.raises(IndexError):
        double_linked_list_1.pop()

def test_case_2012():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    var_2 = queue_2.size()
    assert var_2 == 1
    var_3 = queue_2.dequeue()
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Queue'

def test_case_2013():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_2 = module_0.Node()
    var_1 = queue_5.size()
    assert var_1 == 0
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_2 = double_linked_list_5.append(set_2)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    queue_10 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_0)
    assert f'{type(queue_11).__module__}.{type(queue_11).__qualname__}' == 'queue4.Queue'
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_4 = double_linked_list_6.append(bytes_0)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    queue_12 = module_0.Queue(queue_11)
    var_5 = queue_10.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_1)
    queue_14 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_6 = queue_14.size()
    assert var_6 == 0
    queue_15 = module_0.Queue()
    var_7 = queue_14.size()
    assert var_7 == 0
    queue_16 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_8 = queue_16.size()
    assert var_8 == 0
    queue_17 = module_0.Queue()

def test_case_2014():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    var_2 = queue_0.enqueue(set_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    var_4 = queue_6.enqueue(set_2)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    none_type_1 = None
    queue_10 = module_0.Queue(none_type_1)
    queue_11 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_5 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_13 = module_0.Queue(queue_12)
    var_6 = queue_11.peek()
    var_7 = queue_13.size()
    assert var_7 == 1
    none_type_2 = None
    queue_14 = module_0.Queue(none_type_2)
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)

def test_case_2015():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'

def test_case_2016():
    int_0 = -3616
    queue_0 = module_0.Queue(int_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == -3616
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_2.size()
    assert var_2 == 0
    var_3 = queue_1.size()
    assert var_3 == 0
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = queue_3.size()
    assert var_4 == 0
    queue_4 = module_0.Queue()
    none_type_0 = None
    var_5 = queue_4.enqueue(none_type_0)
    var_6 = var_4.__repr__()
    assert var_6 == '0'
    complex_0 = 2886.801252 + 1418.99508j
    queue_5 = module_0.Queue(complex_0)
    var_7 = queue_5.size()
    assert var_7 == 1
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    none_type_1 = None
    queue_6 = module_0.Queue()
    var_8 = queue_6.enqueue(none_type_1)
    var_9 = queue_5.enqueue(set_3)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    var_10 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue(queue_7)

def test_case_2017():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_5.size()
    assert var_2 == 0
    queue_6 = module_0.Queue()
    none_type_0 = None
    var_3 = queue_6.enqueue(none_type_0)
    var_4 = var_2.__repr__()
    assert var_4 == '0'

def test_case_2018():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    var_2 = queue_2.size()
    assert var_2 == 1
    var_3 = queue_2.dequeue()
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_3 = module_0.Queue()
    var_4 = queue_3.enqueue(none_type_0)
    complex_0 = 2886.801252 + 1418.99508j
    queue_4 = module_0.Queue(complex_0)
    var_5 = queue_4.size()
    assert var_5 == 1
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    none_type_1 = None
    queue_5 = module_0.Queue()
    var_6 = queue_5.enqueue(none_type_1)
    var_7 = queue_4.enqueue(set_1)
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_8 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    queue_8 = module_0.Queue(queue_6)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_9 = queue_6.size()
    assert var_9 == 0
    node_3 = module_0.Node()
    var_10 = node_3.__repr__()
    assert var_10 == 'Value: None'
    queue_11 = module_0.Queue(node_3)

def test_case_2019():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    complex_0 = 2886.801252 + 1418.99508j
    queue_1 = module_0.Queue(complex_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_0 = queue_1.size()
    assert var_0 == 1
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_2 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    queue_4 = module_0.Queue(queue_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = queue_2.size()
    assert var_3 == 0
    int_0 = -3616
    queue_7 = module_0.Queue(int_0)
    var_4 = queue_7.dequeue()
    assert var_4 == -3616
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    queue_9 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_5 = queue_9.size()
    assert var_5 == 0
    queue_10 = module_0.Queue()
    var_6 = queue_9.size()
    assert var_6 == 0
    node_3 = module_0.Node(next_node=var_5)
    assert node_3.next == 0
    complex_1 = 2886.801252 + 1418.99508j
    queue_11 = module_0.Queue(complex_1)
    var_7 = queue_11.size()
    assert var_7 == 1
    var_8 = var_7.__repr__()
    assert var_8 == '1'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    queue_13 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_9 = queue_13.size()
    assert var_9 == 0
    queue_14 = module_0.Queue()
    var_10 = queue_13.size()
    assert var_10 == 0
    var_11 = queue_12.peek()
    assert var_11 == 77
    queue_15 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_12 = queue_15.size()
    assert var_12 == 0
    queue_16 = module_0.Queue()
    var_13 = node_5.__repr__()
    assert var_13 == 'Value: None'
    none_type_0 = None
    queue_17 = module_0.Queue(none_type_0)
    queue_18 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_14 = queue_18.size()
    assert var_14 == 0
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    var_15 = queue_14.peek()

def test_case_2020():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_1 = queue_0.enqueue(var_0)
    queue_1 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = queue_2.size()
    assert var_3 == 0
    queue_3 = module_0.Queue()
    var_4 = node_2.__repr__()
    assert var_4 == 'Value: None'

def test_case_2021():
    int_0 = -3616
    queue_0 = module_0.Queue(int_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == -3616
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    var_1 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = double_linked_list_2.append(node_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    var_5 = queue_7.enqueue(set_3)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    double_linked_list_3 = module_0.DoubleLinkedList()
    var_6 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    var_7 = node_4.__repr__()
    assert var_7 == 'Value: None'
    node_5 = module_0.Node()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    node_7 = module_0.Node()
    var_8 = queue_9.size()
    assert var_8 == 0
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_5 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_5.tail).__module__}.{type(double_linked_list_5.tail).__qualname__}' == 'queue4.Node'
    node_8 = module_0.Node()
    var_9 = node_8.__repr__()
    assert var_9 == 'Value: None'

def test_case_2022():
    float_0 = -3043.800134
    str_0 = 'O,S|'
    str_1 = 'm'
    bool_0 = False
    tuple_0 = (float_0, str_0, str_1, bool_0)
    double_linked_list_0 = module_0.DoubleLinkedList(tuple_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    none_type_0 = None
    queue_0 = module_0.Queue(none_type_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_4 = var_3.__repr__()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    queue_7 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_5 = queue_7.size()
    assert var_5 == 0
    queue_8 = module_0.Queue()
    var_6 = queue_7.size()
    assert var_6 == 0
    var_7 = var_6.__repr__()
    assert var_7 == '0'
    node_5 = module_0.Node()
    var_8 = node_5.__repr__()
    assert var_8 == 'Value: None'
    queue_9 = module_0.Queue(node_5)
    var_9 = queue_9.enqueue(var_8)
    queue_10 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()

def test_case_2023():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    complex_0 = 2886.801252 + 1418.99508j
    queue_1 = module_0.Queue(complex_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_0 = queue_1.size()
    assert var_0 == 1
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_2 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_2.peek()
    node_2 = module_0.Node()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_3 = var_2.__repr__()
    node_3 = module_0.Node()
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    queue_5 = module_0.Queue(node_3)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    var_5 = queue_6.dequeue()
    assert var_5 == 77
    queue_7 = module_0.Queue()
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    queue_8 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_6 = double_linked_list_1.append(set_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_7 = queue_13.size()
    assert var_7 == 0
    queue_14 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_8 = queue_14.size()
    assert var_8 == 0
    queue_15 = module_0.Queue()
    none_type_0 = None
    var_9 = queue_15.enqueue(none_type_0)
    var_10 = var_8.__repr__()
    assert var_10 == '0'
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    queue_16 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_11 = double_linked_list_5.append(set_4)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_12 = double_linked_list_5.push(set_4)
    queue_19 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    var_13 = queue_19.peek()
    queue_20 = module_0.Queue(queue_19)
    queue_21 = module_0.Queue(queue_19)
    queue_22 = module_0.Queue()
    queue_23 = module_0.Queue()
    queue_24 = module_0.Queue()
    queue_25 = module_0.Queue()
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    queue_26 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    node_10 = module_0.Node()
    var_14 = queue_25.size()
    assert var_14 == 0

def test_case_2024():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    none_type_0 = None
    var_2 = queue_2.enqueue(none_type_0)
    var_3 = var_1.__repr__()
    assert var_3 == '0'
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_4 = module_0.Node()
    var_4 = queue_3.size()
    assert var_4 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_2025():
    float_0 = -3043.800134
    str_0 = 'O,S|'
    str_1 = 'm'
    bool_0 = False
    tuple_0 = (float_0, str_0, str_1, bool_0)
    double_linked_list_0 = module_0.DoubleLinkedList(tuple_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = queue_0.size()
    assert var_1 == 11
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_2 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_3 = queue_2.size()
    assert var_3 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    str_2 = "d^_Z'j<ceXum|X7"
    node_2 = module_0.Node(str_2)
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_4 = double_linked_list_5.append(set_1)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'

def test_case_2026():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_2.size()
    assert var_1 == 1
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_6 = module_0.Queue()
    var_2 = queue_6.peek()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_4 = node_2.__repr__()
    assert var_4 == 'Value: None'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = var_4.__repr__()
    assert var_5 == "'Value: None'"
    complex_0 = 2886.801252 + 1418.99508j
    queue_10 = module_0.Queue(complex_0)
    var_6 = queue_10.size()
    assert var_6 == 1
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_11 = module_0.Queue()
    var_7 = queue_11.enqueue(none_type_0)
    var_8 = queue_10.enqueue(set_2)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    queue_13 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_9 = queue_13.size()
    assert var_9 == 0
    queue_14 = module_0.Queue()
    var_10 = queue_13.size()
    assert var_10 == 0
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_2)
    var_11 = queue_15.dequeue()
    assert var_11 == 77
    var_12 = queue_15.peek()
    assert var_12 == 249

def test_case_2027():
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_1 = module_0.Node()
    var_0 = queue_0.size()
    assert var_0 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    var_1 = queue_1.dequeue()
    assert var_1 == 77
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    var_3 = queue_3.size()
    assert var_3 == 0
    node_3 = module_0.Node(next_node=var_2)
    assert node_3.next == 0

def test_case_2028():
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_0 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    queue_2 = module_0.Queue(queue_0)
    var_1 = double_linked_list_0.append(node_0)
    node_1 = module_0.Node()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_2 = double_linked_list_3.push(queue_6)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_3.push(queue_6)
    queue_9 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = queue_9.size()
    assert var_4 == 0
    queue_10 = module_0.Queue()
    none_type_0 = None
    var_5 = queue_10.enqueue(none_type_0)
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    none_type_1 = None
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(none_type_1)
    var_7 = var_6.__repr__()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_0)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_8 = double_linked_list_5.append(bytes_0)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_9 = queue_10.size()
    assert var_9 == 1

def test_case_2029():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'

def test_case_2030():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.push(var_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue(queue_2)
    var_3 = queue_1.peek()

def test_case_2031():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue(queue_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0

def test_case_2032():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_2033():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    node_2 = module_0.Node()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.push(var_1)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_3 = queue_3.peek()
    queue_4 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = queue_4.size()
    assert var_4 == 0
    var_5 = queue_3.size()
    assert var_5 == 0
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_6 = module_0.Node()
    queue_6 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_6 = queue_6.peek()
    node_8 = module_0.Node()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_10 = module_0.Node()
    var_7 = queue_8.size()
    assert var_7 == 0
    var_8 = queue_7.size()
    assert var_8 == 0

def test_case_2034():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    var_2 = queue_2.size()
    assert var_2 == 1
    var_3 = queue_2.dequeue()
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Queue'
    bool_0 = True
    double_linked_list_1 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_4 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    queue_5 = module_0.Queue(queue_3)
    var_5 = double_linked_list_1.append(node_0)
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_6 = queue_6.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    double_linked_list_3 = module_0.DoubleLinkedList(var_6)
    double_linked_list_4 = module_0.DoubleLinkedList()
    queue_8 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_9 = module_0.Queue(complex_0)
    var_7 = queue_9.size()
    assert var_7 == 1
    node_2 = module_0.Node()
    var_8 = node_2.__repr__()
    assert var_8 == 'Value: None'
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_2)
    double_linked_list_5 = module_0.DoubleLinkedList()
    var_9 = double_linked_list_5.append(bytes_2)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_10 = double_linked_list_5.append(queue_10)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_13 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    node_4 = module_0.Node()
    var_11 = queue_12.size()
    assert var_11 == 0
    node_5 = module_0.Node()
    var_12 = node_5.__repr__()
    assert var_12 == 'Value: None'
    queue_14 = module_0.Queue(node_5)
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_3)
    var_13 = queue_15.dequeue()
    assert var_13 == 77
    queue_16 = module_0.Queue()

def test_case_2035():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_1 = queue_0.enqueue(var_0)
    complex_0 = 2886.801252 + 1418.99508j
    queue_1 = module_0.Queue(complex_0)
    var_2 = queue_1.size()
    assert var_2 == 1
    queue_2 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_3 = queue_2.size()
    assert var_3 == 0
    queue_3 = module_0.Queue()
    none_type_0 = None
    var_4 = queue_3.enqueue(none_type_0)
    var_5 = var_3.__repr__()
    assert var_5 == '0'
    queue_4 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_6 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue(queue_5)
    var_7 = queue_4.peek()
    var_8 = queue_6.size()
    assert var_8 == 1
    var_9 = queue_6.dequeue()
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'queue4.Queue'
    queue_7 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_10 = double_linked_list_1.append(node_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_11 = queue_7.size()
    assert var_11 == 0
    queue_9 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_12 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    queue_11 = module_0.Queue(queue_9)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_13 = queue_11.size()
    assert var_13 == 1
    queue_14 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_14 = queue_14.size()
    assert var_14 == 0
    queue_15 = module_0.Queue()
    none_type_1 = None
    var_15 = queue_15.enqueue(none_type_1)

def test_case_2036():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.peek()
    node_1 = module_0.Node()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_1 = var_0.__repr__()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    queue_7 = module_0.Queue(queue_5)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_4 = queue_10.size()
    assert var_4 == 11
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_11 = module_0.Queue()
    var_5 = queue_11.enqueue(none_type_0)

def test_case_2037():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_1 = queue_0.enqueue(var_0)
    queue_1 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_2.append(set_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_4 = queue_6.size()
    assert var_4 == 0
    queue_7 = module_0.Queue()
    none_type_0 = None
    var_5 = queue_7.enqueue(none_type_0)
    var_6 = var_4.__repr__()
    assert var_6 == '0'

def test_case_2038():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = node_1.__repr__()
    assert var_0 == 'Value: None'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_1 = double_linked_list_3.append(set_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_9 = module_0.Queue()
    var_3 = queue_9.peek()
    complex_0 = 2886.801252 + 1418.99508j
    queue_10 = module_0.Queue(complex_0)
    var_4 = queue_10.size()
    assert var_4 == 1
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    float_0 = -3043.800134
    str_0 = 'O,S|'
    str_1 = 'm'
    bool_0 = False
    tuple_0 = (float_0, str_0, str_1, bool_0)
    double_linked_list_6 = module_0.DoubleLinkedList(tuple_0)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_6.tail).__module__}.{type(double_linked_list_6.tail).__qualname__}' == 'queue4.Node'
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_11 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    var_5 = queue_13.size()
    assert var_5 == 0
    node_6 = module_0.Node()
    queue_14 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_6 = queue_14.peek()
    queue_15 = module_0.Queue(queue_14)
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_7 = var_6.__repr__()

def test_case_2039():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    node_1 = module_0.Node()
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    queue_2 = module_0.Queue(node_1)
    var_3 = queue_2.enqueue(var_2)
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = double_linked_list_2.append(set_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_2.push(set_0)

def test_case_2040():
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_0 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    none_type_0 = None
    node_0 = module_0.Node(prev=none_type_0)
    var_0 = double_linked_list_0.append(none_type_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_1 = module_0.Queue()
    var_2 = queue_1.size()
    assert var_2 == 0
    none_type_1 = None
    queue_2 = module_0.Queue(none_type_1)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_3 = module_0.Node()
    var_3 = queue_4.size()
    assert var_3 == 0
    var_4 = node_2.__repr__()
    assert var_4 == 'Value: None'
    queue_6 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_5 = queue_6.peek()
    queue_7 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_6 = queue_7.size()
    assert var_6 == 0
    var_7 = queue_6.size()
    assert var_7 == 0

def test_case_2041():
    str_0 = "d^_Z'j<ceXum|X7"
    node_0 = module_0.Node(str_0)
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_0 = queue_1.enqueue(none_type_0)
    var_1 = var_0.__repr__()

def test_case_2042():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    queue_3 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = double_linked_list_1.append(node_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()

def test_case_2043():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'

def test_case_2044():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0, prev=none_type_0)
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    node_4 = module_0.Node()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_2 = var_1.__repr__()
    with pytest.raises(IndexError):
        double_linked_list_0.pop()

def test_case_2045():
    node_0 = module_0.Node()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_4.size()
    assert var_1 == 0
    queue_5 = module_0.Queue()
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_4 = module_0.Node()
    var_3 = queue_7.size()
    assert var_3 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    var_5 = queue_9.size()
    assert var_5 == 11
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_2)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_6 = double_linked_list_4.append(bytes_2)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_7 = double_linked_list_4.append(queue_10)
    queue_11 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_8 = queue_11.peek()
    node_7 = module_0.Node()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_9 = var_8.__repr__()
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    var_10 = queue_15.peek()
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_16 = module_0.Queue(bytes_3)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    double_linked_list_6 = module_0.DoubleLinkedList(var_10)
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None

def test_case_2046():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = queue_1.peek()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_5.size()
    assert var_1 == 0
    queue_6 = module_0.Queue()
    var_2 = queue_5.size()
    assert var_2 == 0
    var_3 = queue_4.peek()
    assert var_3 == 77
    node_2 = module_0.Node()
    var_4 = node_2.__repr__()
    assert var_4 == 'Value: None'
    queue_7 = module_0.Queue(node_2)
    var_5 = queue_7.enqueue(var_4)
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_2 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    none_type_0 = None
    node_3 = module_0.Node(prev=none_type_0)
    var_6 = double_linked_list_2.append(none_type_0)
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_7 = queue_10.size()
    assert var_7 == 0
    queue_11 = module_0.Queue()
    var_8 = queue_11.size()
    assert var_8 == 0
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_12 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_9 = queue_12.size()
    assert var_9 == 0
    queue_13 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_14 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_10 = double_linked_list_6.append(set_5)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    var_11 = double_linked_list_6.push(set_5)
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_17 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    node_9 = module_0.Node()
    var_12 = queue_17.size()
    assert var_12 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_18 = module_0.Queue(bytes_1)
    queue_19 = module_0.Queue()
    set_7 = set()
    node_10 = module_0.Node(prev=set_7)
    var_13 = queue_19.size()
    assert var_13 == 0
    queue_20 = module_0.Queue()
    var_14 = queue_19.size()
    assert var_14 == 0
    var_15 = var_14.__repr__()
    assert var_15 == '0'

def test_case_2047():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    complex_0 = 2886.801252 + 1418.99508j
    queue_2 = module_0.Queue(complex_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    var_2 = queue_2.size()
    assert var_2 == 1
    var_3 = var_2.__repr__()
    assert var_3 == '1'
    none_type_0 = None
    node_1 = module_0.Node(prev=none_type_0)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_4 = queue_3.peek()
    node_3 = module_0.Node()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_5 = double_linked_list_0.push(var_4)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = queue_5.size()
    assert var_6 == 0
    with pytest.raises(IndexError):
        double_linked_list_1.pop()

def test_case_2048():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = var_1.__repr__()
    assert var_2 == '0'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_3.peek()
    node_2 = module_0.Node()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_4 = var_3.__repr__()
    queue_6 = module_0.Queue()
    var_5 = queue_6.size()
    assert var_5 == 0
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_0 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_2049():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    var_2 = queue_3.size()
    assert var_2 == 0
    var_3 = var_2.__repr__()
    assert var_3 == '0'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_7 = module_0.Queue()
    var_4 = queue_7.peek()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None

def test_case_2050():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = var_1.__repr__()
    assert var_2 == "'Value: None'"
    str_0 = "d^_Z'j<ceXum|X7"
    node_2 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_3 = queue_1.size()
    assert var_3 == 0
    queue_2 = module_0.Queue()
    var_4 = queue_2.size()
    assert var_4 == 0
    queue_3 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_5 = queue_3.peek()
    node_5 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_6 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_7 = queue_7.size()
    assert var_7 == 0
    node_7 = module_0.Node()
    queue_8 = module_0.Queue()
    var_8 = queue_8.size()
    assert var_8 == 0
    set_4 = {var_4, queue_8}

def test_case_2051():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == 77
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    node_2 = module_0.Node()
    queue_3 = module_0.Queue()
    set_0 = set()
    node_3 = module_0.Node(prev=set_0)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    var_3 = double_linked_list_1.append(node_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'

def test_case_2052():
    none_type_0 = None
    queue_0 = module_0.Queue(none_type_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    complex_0 = 2886.801252 + 1418.99508j
    queue_1 = module_0.Queue(complex_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_1 = queue_1.size()
    assert var_1 == 1
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_1)
    var_3 = queue_1.enqueue(set_0)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_4 = queue_3.peek()
    node_3 = module_0.Node()
    node_4 = module_0.Node(set_1)
    queue_4 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_5 = queue_4.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_5)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_7 = module_0.Node()
    var_6 = queue_6.size()
    assert var_6 == 0
    var_7 = node_6.__repr__()
    assert var_7 == 'Value: None'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_2)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_8 = double_linked_list_3.append(bytes_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_9 = double_linked_list_3.append(queue_8)

def test_case_2053():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    var_1 = node_2.__repr__()
    assert var_1 == 'Value: None'
    queue_4 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_4.peek()
    node_4 = module_0.Node()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    var_3 = var_2.__repr__()
    with pytest.raises(ValueError):
        double_linked_list_0.remove(queue_1)

def test_case_2054():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_3.size()
    assert var_3 == 0

def test_case_2055():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = queue_0.size()
    assert var_1 == 0
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_4.peek()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    bytes_1 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_8 = module_0.Queue(bytes_1)

def test_case_2056():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = queue_0.size()
    assert var_1 == 0
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    node_3 = module_0.Node()
    var_2 = node_3.__repr__()
    assert var_2 == 'Value: None'
    queue_6 = module_0.Queue(node_3)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    var_3 = queue_6.enqueue(var_2)
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = queue_9.size()
    assert var_4 == 0
    queue_10 = module_0.Queue()

def test_case_2057():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_1 = queue_1.size()
    assert var_1 == 11
    queue_2 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_2 = double_linked_list_2.append(node_4)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    bool_0 = True
    double_linked_list_3 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    int_0 = -3616
    queue_4 = module_0.Queue(int_0)
    var_3 = queue_4.dequeue()
    assert var_3 == -3616
    var_4 = queue_4.enqueue(queue_4)

def test_case_2058():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()

def test_case_2059():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    var_3 = queue_4.dequeue()
    assert var_3 == 77
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    queue_7 = module_0.Queue(queue_5)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_5 = queue_5.size()
    assert var_5 == 0
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_6 = queue_11.size()
    assert var_6 == 0
    none_type_0 = None
    queue_13 = module_0.Queue(none_type_0)
    complex_0 = 2886.801252 + 1418.99508j
    queue_14 = module_0.Queue(complex_0)
    var_7 = queue_14.size()
    assert var_7 == 1
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    none_type_1 = None
    queue_15 = module_0.Queue()
    var_8 = queue_15.enqueue(none_type_1)
    var_9 = queue_14.enqueue(set_4)
    str_0 = "d^_Z'j<ceXum|X7"
    node_5 = module_0.Node(str_0)

def test_case_2060():
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_0 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    queue_2 = module_0.Queue(queue_0)
    var_1 = double_linked_list_0.append(node_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_2 = module_0.Node()
    var_2 = queue_4.size()
    assert var_2 == 0
    var_3 = node_1.__repr__()
    assert var_3 == 'Value: None'

def test_case_2061():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    none_type_0 = None
    var_1 = queue_3.enqueue(none_type_0)
    queue_4 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue(queue_5)
    var_3 = queue_4.peek()
    var_4 = queue_6.size()
    assert var_4 == 1
    var_5 = queue_6.dequeue()
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    var_6 = double_linked_list_2.push(queue_7)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'

def test_case_2062():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue(queue_2)
    var_2 = queue_1.peek()
    queue_4 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue(queue_5)
    var_4 = queue_4.peek()
    var_5 = queue_6.size()
    assert var_5 == 1
    var_6 = queue_6.dequeue()
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'queue4.Queue'
    node_2 = module_0.Node()
    var_7 = node_2.__repr__()
    assert var_7 == 'Value: None'

def test_case_2063():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue(none_type_0)
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_6.size()
    assert var_2 == 0
    queue_7 = module_0.Queue()
    var_3 = queue_7.size()
    assert var_3 == 0
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    none_type_1 = None
    node_2 = module_0.Node(none_type_1, prev=none_type_1)

def test_case_2064():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_1 = queue_0.enqueue(var_0)
    queue_1 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    queue_3 = module_0.Queue(queue_1)
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = queue_4.peek()
    queue_5 = module_0.Queue()

def test_case_2065():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_0.size()
    assert var_1 == 0
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = queue_4.size()
    assert var_2 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_3 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    node_4 = module_0.Node()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_7 = module_0.Queue()
    var_5 = queue_7.peek()
    node_6 = module_0.Node()
    var_6 = node_6.__repr__()
    assert var_6 == 'Value: None'
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_7 = var_6.__repr__()
    assert var_7 == "'Value: None'"
    queue_8 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_8 = queue_8.peek()
    node_8 = module_0.Node()
    node_9 = module_0.Node(set_4)
    queue_9 = module_0.Queue()
    set_5 = set()
    node_10 = module_0.Node(prev=set_5)
    var_9 = queue_9.size()
    assert var_9 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_1)
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_10 = double_linked_list_6.append(bytes_1)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    queue_14 = module_0.Queue(queue_13)
    var_11 = queue_12.peek()
    var_12 = queue_14.size()
    assert var_12 == 1
    var_13 = queue_14.dequeue()
    assert f'{type(var_13).__module__}.{type(var_13).__qualname__}' == 'queue4.Queue'

def test_case_2066():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_1.peek()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    none_type_0 = None
    var_3 = queue_4.enqueue(none_type_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_4 = module_0.Node()
    var_4 = queue_6.size()
    assert var_4 == 0
    var_5 = node_3.__repr__()
    assert var_5 == 'Value: None'
    queue_8 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_6 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    queue_10 = module_0.Queue(queue_8)
    queue_11 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_7 = queue_11.peek()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_12 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_13 = module_0.Queue()
    var_8 = queue_13.peek()

def test_case_2067():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    bool_0 = False
    tuple_0 = (bool_0, set_0)

def test_case_2068():
    int_0 = -3616
    queue_0 = module_0.Queue(int_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == -3616
    var_1 = queue_0.enqueue(queue_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_0.append(queue_1)
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_2 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    var_4 = queue_3.size()
    assert var_4 == 0
    queue_4 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    var_5 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue(queue_5)
    var_6 = queue_4.peek()
    queue_7 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_7 = queue_7.size()
    assert var_7 == 0
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_8 = queue_8.peek()
    queue_10 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_9 = double_linked_list_4.append(node_4)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_10 = queue_10.size()
    assert var_10 == 0
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_2)
    double_linked_list_5 = module_0.DoubleLinkedList()
    var_11 = double_linked_list_5.append(bytes_2)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    double_linked_list_6 = module_0.DoubleLinkedList()
    var_12 = var_7.__repr__()
    assert var_12 == '0'

def test_case_2069():
    bool_0 = True
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 0

def test_case_2070():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    queue_3 = module_0.Queue(queue_1)
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_2 = queue_3.size()
    assert var_2 == 1
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_6.size()
    assert var_3 == 0
    queue_7 = module_0.Queue()
    var_4 = queue_7.peek()
    queue_8 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_5 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    queue_10 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_6 = queue_10.peek()
    node_4 = module_0.Node()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_7 = double_linked_list_0.push(var_6)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'

def test_case_2071():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_3.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_3)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    queue_7 = module_0.Queue(queue_5)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_5 = queue_5.size()
    assert var_5 == 0
    none_type_0 = None
    queue_10 = module_0.Queue(none_type_0)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_2)
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_12 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    bytes_3 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_15 = module_0.Queue(bytes_3)
    queue_16 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_6 = queue_16.size()
    assert var_6 == 0
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    node_5 = module_0.Node()
    var_7 = node_5.__repr__()
    assert var_7 == 'Value: None'
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_8 = var_7.__repr__()
    assert var_8 == "'Value: None'"
    none_type_1 = None
    node_6 = module_0.Node(prev=none_type_1)

def test_case_2072():
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    var_0 = double_linked_list_0.append(double_linked_list_0)

def test_case_2073():
    int_0 = -3616
    queue_0 = module_0.Queue(int_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == -3616

def test_case_2074():
    bytes_0 = b''
    node_0 = module_0.Node(next_node=bytes_0)
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'

def test_case_2075():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_4.enqueue(queue_3)
    str_0 = "d^_Z'j<ceXum|X7"
    node_3 = module_0.Node(str_0)
    queue_5 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_5 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue(queue_6)
    var_6 = queue_5.peek()
    queue_8 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_7 = double_linked_list_2.append(node_5)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_8 = queue_8.size()
    assert var_8 == 0
    queue_10 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_9 = queue_10.size()
    assert var_9 == 0
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    none_type_0 = None
    queue_13 = module_0.Queue()
    var_10 = queue_13.enqueue(none_type_0)
    queue_14 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_11 = queue_14.peek()
    queue_15 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_12 = queue_15.size()
    assert var_12 == 0
    var_13 = queue_14.size()
    assert var_13 == 0

def test_case_2076():
    bytes_0 = b'\xa5I\x04\xc8\xa0\xc5S\xf5A\x15\x83\x9b \xf0|\xd2\x85\x1f'
    float_0 = -3638.25318
    list_0 = [bytes_0, float_0]
    bytes_1 = b'\xdb{s(\x15'
    queue_0 = module_0.Queue(bytes_1)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.peek()
    assert var_0 == 21

def test_case_2077():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    none_type_0 = None
    var_1 = queue_1.enqueue(none_type_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_2078():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    bool_0 = True
    double_linked_list_1 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    queue_7 = module_0.Queue(queue_5)
    var_3 = double_linked_list_1.append(node_2)
    queue_8 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_8.peek()
    node_4 = module_0.Node()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_5 = double_linked_list_2.push(var_4)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'

def test_case_2079():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_4.peek()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_1.push(queue_5)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    str_0 = "d^_Z'j<ceXum|X7"
    node_4 = module_0.Node(str_0)
    int_0 = -3616
    queue_8 = module_0.Queue(int_0)
    var_4 = queue_8.dequeue()
    assert var_4 == -3616
    var_5 = queue_8.enqueue(queue_8)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_2)
    double_linked_list_3 = module_0.DoubleLinkedList()
    var_6 = double_linked_list_3.append(bytes_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    bool_0 = True
    double_linked_list_4 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_4.tail).__module__}.{type(double_linked_list_4.tail).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_7 = queue_10.peek()
    queue_11 = module_0.Queue(queue_10)
    queue_12 = module_0.Queue(queue_10)
    var_8 = double_linked_list_4.append(node_6)
    none_type_0 = None
    node_7 = module_0.Node(none_type_0, prev=none_type_0)
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_3)
    var_9 = queue_13.dequeue()
    assert var_9 == 77
    queue_14 = module_0.Queue()

def test_case_2080():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    queue_1 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_2.enqueue(queue_1)
    node_3 = module_0.Node()
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = var_3.__repr__()
    assert var_4 == "'Value: None'"
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    queue_3 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_5 = queue_3.peek()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    double_linked_list_4 = module_0.DoubleLinkedList(var_5)
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_5 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_6 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    queue_7 = module_0.Queue(queue_5)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_7 = queue_7.size()
    assert var_7 == 1
    none_type_1 = None
    queue_10 = module_0.Queue(none_type_1)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_2)
    queue_12 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_8 = queue_12.size()
    assert var_8 == 0
    queue_13 = module_0.Queue()
    var_9 = queue_12.size()
    assert var_9 == 0
    queue_14 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_15 = module_0.Queue(complex_0)
    var_10 = queue_15.size()
    assert var_10 == 1
    node_8 = module_0.Node()
    var_11 = node_8.__repr__()
    assert var_11 == 'Value: None'
    none_type_2 = None
    node_9 = module_0.Node(none_type_2, prev=none_type_2)

def test_case_2081():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_2.size()
    assert var_2 == 0

def test_case_2082():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = var_0.__repr__()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    var_3 = queue_5.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_4 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_0.append(queue_6)
    queue_7 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_6 = queue_7.size()
    assert var_6 == 0
    queue_8 = module_0.Queue()
    none_type_0 = None
    var_7 = queue_8.enqueue(none_type_0)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_8 = queue_10.peek()
    node_5 = module_0.Node()
    node_6 = module_0.Node(set_3)
    queue_11 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_9 = queue_11.size()
    assert var_9 == 0
    queue_12 = module_0.Queue()
    none_type_1 = None
    var_10 = queue_12.enqueue(none_type_1)
    var_11 = var_9.__repr__()
    assert var_11 == '0'

def test_case_2083():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = node_2.__repr__()
    assert var_1 == 'Value: None'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_2.append(node_4)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_4.enqueue(queue_3)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    none_type_0 = None
    queue_7 = module_0.Queue()
    var_5 = queue_7.enqueue(none_type_0)

def test_case_2084():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_0 = None
    queue_6 = module_0.Queue(none_type_0)
    with pytest.raises(IndexError):
        double_linked_list_0.shift()

def test_case_2085():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = queue_4.size()
    assert var_2 == 0
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    none_type_0 = None
    queue_10 = module_0.Queue(none_type_0)
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_3 = double_linked_list_4.push(queue_11)
    assert f'{type(double_linked_list_4.tail).__module__}.{type(double_linked_list_4.tail).__qualname__}' == 'queue4.Node'
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_14 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    bytes_0 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_17 = module_0.Queue(bytes_0)
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_20 = module_0.Queue(bytes_1)
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    var_4 = double_linked_list_7.append(bytes_1)
    assert f'{type(double_linked_list_7.head).__module__}.{type(double_linked_list_7.head).__qualname__}' == 'queue4.Node'
    node_6 = module_0.Node()
    with pytest.raises(IndexError):
        double_linked_list_0.pop()

def test_case_2086():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    node_1 = module_0.Node(next_node=var_0)
    assert node_1.next == 0

def test_case_2087():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'

def test_case_2088():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_2.size()
    assert var_1 == 1
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = node_1.__repr__()
    assert var_3 == 'Value: None'
    bool_0 = True
    double_linked_list_3 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    complex_0 = 2886.801252 + 1418.99508j
    queue_7 = module_0.Queue(complex_0)
    var_4 = queue_7.size()
    assert var_4 == 1
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_5 = queue_10.size()
    assert var_5 == 0

def test_case_2089():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = queue_0.size()
    assert var_1 == 0

def test_case_2090():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    none_type_0 = None
    queue_5 = module_0.Queue(none_type_0)
    int_0 = -3616
    queue_6 = module_0.Queue(int_0)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    var_2 = queue_6.dequeue()
    assert var_2 == -3616
    queue_7 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_7.peek()
    queue_8 = module_0.Queue(queue_7)
    queue_9 = module_0.Queue(queue_7)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_4 = queue_7.size()
    assert var_4 == 0
    queue_12 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_5 = queue_12.size()
    assert var_5 == 0
    queue_13 = module_0.Queue()
    var_6 = queue_13.peek()
    node_3 = module_0.Node()
    var_7 = node_3.__repr__()
    assert var_7 == 'Value: None'
    queue_14 = module_0.Queue(node_3)
    var_8 = queue_14.enqueue(var_7)
    queue_15 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_16 = module_0.Queue(bytes_0)
    node_4 = module_0.Node()
    var_9 = node_4.__repr__()
    assert var_9 == 'Value: None'
    queue_17 = module_0.Queue(node_4)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_18 = module_0.Queue(bytes_1)
    var_10 = queue_18.dequeue()
    assert var_10 == 77
    queue_19 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_20 = module_0.Queue(bytes_2)
    double_linked_list_1 = module_0.DoubleLinkedList()
    var_11 = double_linked_list_1.append(bytes_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    queue_21 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    queue_22 = module_0.Queue()
    queue_23 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    var_12 = queue_23.size()
    assert var_12 == 0
    node_7 = module_0.Node()

def test_case_2091():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0, prev=none_type_0)
    str_0 = "d^_Z'j<ceXum|X7"
    node_1 = module_0.Node(str_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = queue_2.peek()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    none_type_1 = None
    var_3 = queue_4.enqueue(none_type_1)
    var_4 = var_2.__repr__()
    assert var_4 == '0'
    queue_5 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_5 = double_linked_list_1.append(node_5)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_6 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'queue4.Node'
    assert var_6.data is None
    assert var_6.next is None
    assert var_6.prev == {*()}

def test_case_2092():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_1.push(set_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_2 = queue_5.size()
    assert var_2 == 0
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_12 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    node_4 = module_0.Node()
    var_3 = queue_11.size()
    assert var_3 == 0
    complex_0 = 2886.801252 + 1418.99508j
    queue_13 = module_0.Queue(complex_0)
    assert f'{type(queue_13).__module__}.{type(queue_13).__qualname__}' == 'queue4.Queue'
    var_4 = queue_13.size()
    assert var_4 == 1
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    var_5 = queue_13.peek()
    assert var_5 == 2886.801252 + 1418.99508j
    complex_1 = 1851.002 - 2261.566174j
    list_0 = [complex_1, complex_1, complex_1, complex_1]
    double_linked_list_8 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_8.head).__module__}.{type(double_linked_list_8.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_8.tail).__module__}.{type(double_linked_list_8.tail).__qualname__}' == 'queue4.Node'
    int_0 = -3616
    queue_14 = module_0.Queue(int_0)
    var_6 = queue_14.dequeue()
    assert var_6 == -3616
    none_type_0 = None
    queue_15 = module_0.Queue(none_type_0)
    queue_16 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_17 = module_0.Queue()
    double_linked_list_9 = module_0.DoubleLinkedList()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_7 = double_linked_list_9.append(node_6)
    assert f'{type(double_linked_list_9.head).__module__}.{type(double_linked_list_9.head).__qualname__}' == 'queue4.Node'
    var_8 = queue_16.enqueue(var_7)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_18 = module_0.Queue(bytes_0)

def test_case_2093():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    var_1 = var_0.__repr__()
    assert var_1 == '1'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    node_2 = module_0.Node()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0, prev=none_type_0)
    queue_2 = module_0.Queue()
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_2 = double_linked_list_1.append(node_5)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_3.enqueue(queue_2)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    queue_6 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_4 = queue_6.peek()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_9 = module_0.Node()
    var_5 = queue_8.size()
    assert var_5 == 0
    var_6 = node_8.__repr__()
    assert var_6 == 'Value: None'
    set_6 = set()
    node_10 = module_0.Node(prev=set_6)
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    bytes_2 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_13 = module_0.Queue(bytes_2)

def test_case_2094():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_0.push(queue_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.peek()
    node_2 = module_0.Node()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = double_linked_list_2.push(var_1)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    complex_0 = 2886.801252 + 1418.99508j
    queue_4 = module_0.Queue(complex_0)
    var_3 = queue_4.size()
    assert var_3 == 1
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = double_linked_list_4.append(node_4)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_4.shift()
    assert double_linked_list_4.tail is None
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Node'
    assert var_5.data is None
    assert var_5.next is None
    assert var_5.prev == {*()}
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    queue_8 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_6 = queue_8.size()
    assert var_6 == 0
    queue_9 = module_0.Queue()
    var_7 = queue_8.size()
    assert var_7 == 0
    queue_10 = module_0.Queue()
    str_0 = "jZ~_1t5=;[_\x0b\t4'JIl"

def test_case_2095():
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_0 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    var_0 = queue_0.dequeue()
    assert var_0 == 77
    bool_0 = True

def test_case_2096():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    queue_4 = module_0.Queue(node_2)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_2.append(set_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_4 = double_linked_list_3.append(node_5)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_8.enqueue(var_4)
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_6 = queue_12.size()
    assert var_6 == 0
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_15 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_7 = double_linked_list_6.append(node_8)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    var_8 = double_linked_list_6.shift()
    assert double_linked_list_6.tail is None
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'queue4.Node'
    assert var_8.data is None
    assert var_8.next is None
    assert var_8.prev == {*()}
    queue_16 = module_0.Queue()
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_9 = queue_16.peek()
    node_10 = module_0.Node()
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    var_10 = var_9.__repr__()
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    set_9 = set()
    node_11 = module_0.Node(prev=set_9)
    queue_22 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    node_12 = module_0.Node()
    var_11 = queue_21.size()
    assert var_11 == 0
    var_12 = node_11.__repr__()
    assert var_12 == 'Value: None'

def test_case_2097():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    var_2 = queue_2.size()
    assert var_2 == 0
    var_3 = var_2.__repr__()
    assert var_3 == '0'
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_4 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_5 = var_4.__repr__()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_6 = queue_6.size()
    assert var_6 == 0
    queue_7 = module_0.Queue()
    none_type_0 = None
    var_7 = queue_7.enqueue(none_type_0)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_8 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    tuple_0 = ()

def test_case_2098():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    node_1 = module_0.Node(next_node=var_0)
    assert node_1.next == 0
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(set_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_4 = module_0.Node()
    var_4 = queue_7.size()
    assert var_4 == 0
    var_5 = queue_6.size()
    assert var_5 == 0
    queue_9 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_6 = double_linked_list_3.append(node_6)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_7 = queue_9.enqueue(var_6)

def test_case_2099():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    node_1 = module_0.Node(next_node=var_0)
    assert node_1.next == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_5 = module_0.Queue()
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'

def test_case_2100():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_1 = queue_6.size()
    assert var_1 == 0
    node_2 = module_0.Node()
    queue_7 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_4.append(node_4)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_7.enqueue(var_2)
    complex_0 = 2886.801252 + 1418.99508j
    queue_9 = module_0.Queue(complex_0)
    assert f'{type(queue_9).__module__}.{type(queue_9).__qualname__}' == 'queue4.Queue'
    var_4 = queue_9.size()
    assert var_4 == 1
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_5 = queue_9.peek()
    assert var_5 == 2886.801252 + 1418.99508j
    node_5 = module_0.Node()
    var_6 = node_5.__repr__()
    assert var_6 == 'Value: None'
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_7 = var_6.__repr__()
    assert var_7 == "'Value: None'"
    queue_10 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_11 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_8 = double_linked_list_7.append(node_7)
    assert f'{type(double_linked_list_7.head).__module__}.{type(double_linked_list_7.head).__qualname__}' == 'queue4.Node'
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_14 = module_0.Queue()
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    node_9 = module_0.Node()
    var_9 = queue_13.size()
    assert var_9 == 0
    var_10 = node_8.__repr__()
    assert var_10 == 'Value: None'
    complex_1 = 2886.801252 + 1418.99508j
    queue_15 = module_0.Queue(complex_1)
    var_11 = queue_15.size()
    assert var_11 == 1

def test_case_2101():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    none_type_0 = None
    var_1 = queue_1.enqueue(none_type_0)
    var_2 = var_0.__repr__()
    assert var_2 == '0'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)

def test_case_2102():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()

def test_case_2103():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_1 = module_0.Node()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = node_0.__repr__()
    assert var_2 == 'Value: None'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_3 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    var_4 = node_2.__repr__()
    assert var_4 == 'Value: None'
    node_3 = module_0.Node()
    var_5 = queue_2.dequeue()
    assert var_5 == 77
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_6 = double_linked_list_5.append(set_1)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_7 = queue_6.peek()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_2)
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    double_linked_list_7 = module_0.DoubleLinkedList(var_7)
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_3)
    double_linked_list_9 = module_0.DoubleLinkedList()
    assert double_linked_list_9.head is None
    assert double_linked_list_9.tail is None
    var_8 = double_linked_list_9.append(bytes_3)
    assert f'{type(double_linked_list_9.head).__module__}.{type(double_linked_list_9.head).__qualname__}' == 'queue4.Node'
    var_9 = double_linked_list_9.append(queue_8)
    queue_9 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_10 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    queue_11 = module_0.Queue(queue_9)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    var_11 = queue_9.size()
    assert var_11 == 0
    complex_0 = 2886.801252 + 1418.99508j
    queue_14 = module_0.Queue(complex_0)
    var_12 = queue_14.size()
    assert var_12 == 1
    queue_15 = module_0.Queue()
    complex_1 = 2886.801252 + 1418.99508j
    queue_16 = module_0.Queue(complex_1)
    var_13 = queue_16.size()
    assert var_13 == 1
    node_7 = module_0.Node()
    var_14 = node_7.__repr__()
    assert var_14 == 'Value: None'

def test_case_2104():
    none_type_0 = None
    node_0 = module_0.Node(prev=none_type_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_0 = queue_3.size()
    assert var_0 == 0
    complex_0 = 2886.801252 + 1418.99508j
    queue_5 = module_0.Queue(complex_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    var_1 = queue_5.size()
    assert var_1 == 1
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_2 = queue_5.peek()
    assert var_2 == 2886.801252 + 1418.99508j
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_3 = queue_8.size()
    assert var_3 == 0
    node_3 = module_0.Node()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_11 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    node_5 = module_0.Node()
    var_4 = queue_10.size()
    assert var_4 == 0
    var_5 = node_4.__repr__()
    assert var_5 == 'Value: None'
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    queue_12 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_6 = queue_12.peek()
    queue_13 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    queue_14 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    var_7 = double_linked_list_7.append(node_9)
    assert f'{type(double_linked_list_7.head).__module__}.{type(double_linked_list_7.head).__qualname__}' == 'queue4.Node'

def test_case_2105():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    queue_5 = module_0.Queue(queue_3)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_3 = queue_5.size()
    assert var_3 == 1
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_10 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_3 = module_0.Node()
    var_4 = queue_9.size()
    assert var_4 == 0
    var_5 = node_2.__repr__()
    assert var_5 == 'Value: None'
    queue_11 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_6 = queue_11.size()
    assert var_6 == 0
    queue_12 = module_0.Queue()
    var_7 = queue_12.size()
    assert var_7 == 0
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_13 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_14 = module_0.Queue()
    var_8 = queue_14.peek()
    queue_15 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_9 = queue_15.size()
    assert var_9 == 0
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_10 = queue_16.peek()
    queue_18 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    queue_19 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_11 = double_linked_list_2.append(node_9)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    none_type_0 = None
    node_10 = module_0.Node(prev=none_type_0)
    queue_20 = module_0.Queue()
    set_9 = set()
    node_11 = module_0.Node(prev=set_9)
    var_12 = queue_20.size()
    assert var_12 == 0
    queue_21 = module_0.Queue()
    var_13 = queue_21.size()
    assert var_13 == 0
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None

def test_case_2106():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_0.size()
    assert var_0 == 0
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_1 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_1.peek()
    node_3 = module_0.Node()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.push(var_2)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = double_linked_list_3.append(set_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_5 = node_4.__repr__()
    assert var_5 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    queue_6 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_6 = queue_6.size()
    assert var_6 == 0
    queue_7 = module_0.Queue()
    var_7 = queue_6.size()
    assert var_7 == 0
    queue_8 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_7 = module_0.Node()
    var_8 = queue_9.size()
    assert var_8 == 0
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    none_type_0 = None
    queue_10 = module_0.Queue()
    var_9 = queue_10.enqueue(none_type_0)
    queue_11 = module_0.Queue()
    set_7 = set()
    node_10 = module_0.Node(prev=set_7)
    var_10 = queue_11.size()
    assert var_10 == 0
    queue_12 = module_0.Queue()
    var_11 = node_10.__repr__()
    assert var_11 == 'Value: None'

def test_case_2107():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    str_0 = "d^_Z'j<ceXum|X7"
    node_1 = module_0.Node(str_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0, prev=none_type_0)
    var_0 = node_2.__repr__()
    assert var_0 == 'Value: None'

def test_case_2108():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_5 = module_0.Queue()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(none_type_0)
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    none_type_1 = None
    queue_7 = module_0.Queue()
    var_3 = queue_7.enqueue(none_type_1)
    var_4 = var_3.__repr__()
    var_5 = queue_4.enqueue(var_2)

def test_case_2109():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == 77
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    queue_3 = module_0.Queue(queue_1)
    var_2 = double_linked_list_0.append(node_0)
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue(node_1)
    queue_7 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_7.size()
    assert var_4 == 0
    queue_8 = module_0.Queue()
    var_5 = queue_8.size()
    assert var_5 == 0
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    str_0 = "d^_Z'j<ceXum|X7"
    node_4 = module_0.Node(str_0)
    queue_9 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_6 = queue_9.size()
    assert var_6 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_7 = queue_11.peek()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_12 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_7 = module_0.Node()
    var_8 = queue_12.size()
    assert var_8 == 0

def test_case_2110():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    node_1 = module_0.Node()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_4.peek()

def test_case_2111():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == 77
    var_1 = queue_0.peek()
    assert var_1 == 249
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_2 = queue_1.size()
    assert var_2 == 0
    queue_2 = module_0.Queue()
    none_type_0 = None
    var_3 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_4 = queue_3.size()
    assert var_4 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_5 = queue_4.peek()

def test_case_2112():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    var_2 = queue_3.size()
    assert var_2 == 0
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_2113():
    pass

def test_case_2114():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    var_2 = queue_2.size()
    assert var_2 == 1
    var_3 = queue_2.dequeue()
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Queue'

def test_case_2115():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    var_1 = queue_3.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_3 = node_1.__repr__()
    assert var_3 == 'Value: None'
    node_2 = module_0.Node()
    queue_5 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_4 = queue_5.peek()
    node_4 = module_0.Node()
    node_5 = module_0.Node(set_1)
    none_type_0 = None
    node_6 = module_0.Node(prev=none_type_0)

def test_case_2116():
    float_0 = -1837.38
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    with pytest.raises(ValueError):
        double_linked_list_0.remove(float_0)

def test_case_2117():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_0.push(queue_3)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_0.push(queue_3)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_3 = queue_8.size()
    assert var_3 == 0
    node_3 = module_0.Node()
    queue_9 = module_0.Queue()
    var_4 = queue_9.size()
    assert var_4 == 0
    queue_10 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_5 = queue_10.size()
    assert var_5 == 0
    queue_11 = module_0.Queue()
    with pytest.raises(ValueError):
        double_linked_list_1.remove(var_1)

def test_case_2118():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    var_4 = queue_8.dequeue()
    assert var_4 == 77
    queue_9 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_10 = module_0.Queue(complex_0)
    var_5 = queue_10.size()
    assert var_5 == 1
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    none_type_0 = None
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(none_type_0)
    var_7 = queue_10.enqueue(set_3)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_2)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_8 = double_linked_list_2.append(bytes_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    complex_1 = 2886.801252 + 1418.99508j
    queue_13 = module_0.Queue(complex_1)
    var_9 = queue_13.size()
    assert var_9 == 1
    var_10 = var_9.__repr__()
    assert var_10 == '1'
    queue_14 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_11 = queue_14.peek()
    queue_15 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_12 = queue_15.size()
    assert var_12 == 0
    var_13 = queue_14.size()
    assert var_13 == 0

def test_case_2119():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_0.size()
    assert var_0 == 0
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    var_3 = queue_5.enqueue(set_2)
    queue_6 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    queue_8 = module_0.Queue(queue_6)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_5 = queue_8.size()
    assert var_5 == 1
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_0)
    queue_12 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_6 = queue_12.size()
    assert var_6 == 0
    queue_13 = module_0.Queue()
    var_7 = queue_12.size()
    assert var_7 == 0
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_8 = queue_15.peek()
    queue_16 = module_0.Queue(queue_15)
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_9 = var_8.__repr__()
    queue_17 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_10 = queue_17.peek()
    node_9 = module_0.Node()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_11 = double_linked_list_3.push(var_10)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_18 = module_0.Queue(bytes_1)

def test_case_2120():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = var_0.__repr__()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    queue_6 = module_0.Queue(queue_4)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    none_type_0 = None
    queue_12 = module_0.Queue(none_type_0)
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1, prev=none_type_1)

def test_case_2121():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = var_0.__repr__()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    var_3 = queue_4.dequeue()
    assert var_3 == 77
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_4 = double_linked_list_1.append(node_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Node'
    assert var_5.data is None
    assert var_5.next is None
    assert var_5.prev == {*()}
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_6 = queue_10.size()
    assert var_6 == 0
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_14 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    var_7 = double_linked_list_4.append(node_7)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_8 = queue_13.size()
    assert var_8 == 0
    int_0 = -3616
    queue_15 = module_0.Queue(int_0)
    var_9 = queue_15.dequeue()
    assert var_9 == -3616
    var_10 = queue_15.enqueue(queue_15)
    queue_16 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_17 = module_0.Queue(bytes_1)
    double_linked_list_5 = module_0.DoubleLinkedList()
    var_11 = double_linked_list_5.append(bytes_1)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    queue_18 = module_0.Queue(queue_17)
    var_12 = queue_16.peek()
    none_type_0 = None

def test_case_2122():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = double_linked_list_2.append(node_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    queue_5 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    node_5 = module_0.Node()
    var_4 = node_5.__repr__()
    assert var_4 == 'Value: None'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = var_4.__repr__()
    assert var_5 == "'Value: None'"
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_6 = double_linked_list_4.append(bytes_0)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_7 = double_linked_list_4.append(queue_7)
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    queue_9 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_8 = queue_9.peek()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_10 = module_0.Queue()
    var_9 = queue_10.size()
    assert var_9 == 0
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_2)
    queue_12 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_10 = queue_12.size()
    assert var_10 == 0
    queue_13 = module_0.Queue()
    var_11 = queue_12.size()
    assert var_11 == 0
    queue_14 = module_0.Queue()
    node_9 = module_0.Node()
    var_12 = node_9.__repr__()
    assert var_12 == 'Value: None'
    queue_15 = module_0.Queue(node_9)
    var_13 = queue_15.enqueue(var_12)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    set_7 = set()
    node_10 = module_0.Node(prev=set_7)
    var_14 = queue_17.peek()
    queue_18 = module_0.Queue(queue_17)
    queue_19 = module_0.Queue(queue_17)
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    var_15 = queue_17.size()
    assert var_15 == 0

def test_case_2123():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_3 = module_0.Node()
    var_1 = queue_1.size()
    assert var_1 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    var_2 = queue_2.dequeue()
    assert var_2 == 77
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    queue_4 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    var_4 = queue_4.size()
    assert var_4 == 0
    var_5 = var_4.__repr__()
    assert var_5 == '0'
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_6 = module_0.Node()
    var_6 = queue_6.size()
    assert var_6 == 0
    var_7 = node_5.__repr__()
    assert var_7 == 'Value: None'
    queue_7 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_8 = queue_7.peek()
    queue_8 = module_0.Queue(queue_7)
    queue_9 = module_0.Queue(queue_7)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    var_9 = queue_12.size()
    assert var_9 == 0
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    var_10 = queue_13.peek()

def test_case_2124():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    queue_5 = module_0.Queue(queue_3)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    var_4 = queue_3.size()
    assert var_4 == 0

def test_case_2125():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_5.size()
    assert var_2 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_6.peek()
    queue_8 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    int_0 = -3616
    queue_10 = module_0.Queue(int_0)
    var_5 = queue_10.dequeue()
    assert var_5 == -3616
    var_6 = queue_10.enqueue(queue_10)
    queue_11 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    var_7 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_13 = module_0.Queue(queue_12)
    var_8 = queue_11.peek()

def test_case_2126():
    none_type_0 = None
    str_0 = " N@1@'R)\r^jr ${AF"
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(str_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'

def test_case_2127():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_1.enqueue(queue_0)
    bool_0 = True
    double_linked_list_1 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    queue_4 = module_0.Queue(queue_2)
    var_3 = double_linked_list_1.append(node_2)
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_4 = double_linked_list_2.append(node_4)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    queue_8 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_5 = queue_8.size()
    assert var_5 == 0
    queue_9 = module_0.Queue()
    var_6 = queue_8.size()
    assert var_6 == 0
    queue_10 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_12 = module_0.Queue()
    var_7 = queue_12.peek()
    queue_13 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    queue_14 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    var_8 = double_linked_list_4.append(node_9)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_9 = double_linked_list_4.shift()
    assert double_linked_list_4.tail is None
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'queue4.Node'
    assert var_9.data is None
    assert var_9.next is None
    assert var_9.prev == {*()}
    queue_15 = module_0.Queue()
    var_10 = queue_15.size()
    assert var_10 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_16 = module_0.Queue(bytes_1)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_11 = double_linked_list_5.append(bytes_1)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    queue_17 = module_0.Queue(queue_16)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_18 = module_0.Queue(bytes_2)
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_12 = double_linked_list_6.append(bytes_2)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    node_10 = module_0.Node()
    var_13 = node_10.__repr__()
    assert var_13 == 'Value: None'
    queue_19 = module_0.Queue(node_10)
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_20 = module_0.Queue(bytes_3)
    var_14 = queue_20.dequeue()
    assert var_14 == 77
    queue_21 = module_0.Queue()

def test_case_2128():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    node_1 = module_0.Node()
    queue_1 = module_0.Queue(var_1)
    var_2 = queue_1.enqueue(queue_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_1.append(queue_2)
    none_type_0 = None
    queue_3 = module_0.Queue(none_type_0)

def test_case_2129():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_0.push(queue_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.push(queue_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_3 = node_1.__repr__()
    assert var_3 == 'Value: None'
    node_2 = module_0.Node()
    queue_5 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_4 = queue_5.peek()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_2)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    double_linked_list_4 = module_0.DoubleLinkedList(var_4)
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_7 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_5 = queue_7.size()
    assert var_5 == 0
    queue_8 = module_0.Queue()
    var_6 = queue_8.peek()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    str_0 = "d^_Z'j<ceXum|X7"
    node_6 = module_0.Node(str_0)
    queue_9 = module_0.Queue()
    set_3 = set()
    node_7 = module_0.Node(prev=set_3)
    var_7 = queue_9.size()
    assert var_7 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_8 = queue_11.peek()
    queue_12 = module_0.Queue()
    var_9 = queue_12.size()
    assert var_9 == 0
    queue_13 = module_0.Queue()
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    var_10 = queue_13.size()
    assert var_10 == 0
    queue_14 = module_0.Queue()
    var_11 = node_8.__repr__()
    assert var_11 == 'Value: None'

def test_case_2130():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    var_2 = queue_0.enqueue(set_0)
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    none_type_1 = None
    queue_2 = module_0.Queue(none_type_1)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = queue_7.peek()
    node_3 = module_0.Node()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_5 = var_4.__repr__()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_12 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_6 = double_linked_list_3.append(node_5)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_6 = module_0.Node()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_0)
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    none_type_2 = None
    queue_14 = module_0.Queue()
    var_7 = queue_14.enqueue(none_type_2)

def test_case_2131():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    node_1 = module_0.Node()
    var_2 = queue_0.dequeue()
    assert var_2 == 77
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    queue_2 = module_0.Queue()
    set_0 = set()
    node_3 = module_0.Node(prev=set_0)
    var_4 = queue_2.peek()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_2)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_5 = double_linked_list_2.append(bytes_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    var_6 = node_4.__repr__()
    assert var_6 == 'Value: None'
    node_5 = module_0.Node()
    set_1 = set()
    node_6 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_7 = double_linked_list_4.append(set_1)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue()
    set_2 = set()
    node_7 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_3 = set()
    node_8 = module_0.Node(prev=set_3)
    var_8 = double_linked_list_5.append(node_8)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    queue_9 = module_0.Queue(node_7)
    int_0 = -3616
    queue_10 = module_0.Queue(int_0)
    var_9 = queue_10.dequeue()
    assert var_9 == -3616
    var_10 = queue_10.enqueue(queue_10)
    queue_11 = module_0.Queue()
    set_4 = set()
    node_9 = module_0.Node(prev=set_4)
    var_11 = queue_11.size()
    assert var_11 == 0
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    set_5 = set()
    node_10 = module_0.Node(prev=set_5)
    var_12 = queue_12.peek()

def test_case_2132():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_5.peek()
    node_2 = module_0.Node()
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_4 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_7 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_5 = queue_7.peek()
    queue_8 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_6 = queue_8.size()
    assert var_6 == 0
    var_7 = queue_7.size()
    assert var_7 == 0
    queue_9 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_8 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_11 = module_0.Queue(queue_10)
    var_9 = queue_9.peek()
    var_10 = queue_11.size()
    assert var_10 == 1
    var_11 = queue_11.dequeue()
    assert f'{type(var_11).__module__}.{type(var_11).__qualname__}' == 'queue4.Queue'
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_2)
    queue_13 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_12 = queue_13.peek()
    double_linked_list_3 = module_0.DoubleLinkedList()
    queue_14 = module_0.Queue()
    set_6 = set()
    node_7 = module_0.Node(prev=set_6)
    queue_15 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_13 = double_linked_list_4.append(node_8)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_14 = queue_15.enqueue(queue_14)
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    queue_16 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    node_10 = module_0.Node()
    var_15 = queue_16.size()
    assert var_15 == 0
    var_16 = node_9.__repr__()
    assert var_16 == 'Value: None'
    node_11 = module_0.Node()
    var_17 = node_11.__repr__()
    assert var_17 == 'Value: None'
    queue_17 = module_0.Queue(node_11)
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_18 = module_0.Queue(bytes_3)
    var_18 = queue_18.dequeue()
    assert var_18 == 77
    queue_19 = module_0.Queue()
    bytes_4 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_20 = module_0.Queue(bytes_4)
    var_19 = queue_20.dequeue()
    assert var_19 == 77

def test_case_2133():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    complex_0 = 2886.801252 + 1418.99508j
    queue_1 = module_0.Queue(complex_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_0 = queue_1.size()
    assert var_0 == 1
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_2 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_2.peek()
    node_2 = module_0.Node()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_3 = var_2.__repr__()
    queue_5 = module_0.Queue()
    node_3 = module_0.Node()
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    queue_6 = module_0.Queue(node_3)
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    queue_7 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_5 = queue_9.size()
    assert var_5 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    queue_13 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_6 = module_0.Node()
    var_6 = queue_12.size()
    assert var_6 == 0
    var_7 = node_5.__repr__()
    assert var_7 == 'Value: None'
    queue_14 = module_0.Queue()
    set_3 = set()
    node_7 = module_0.Node(prev=set_3)
    var_8 = queue_14.peek()
    queue_15 = module_0.Queue(queue_14)
    var_9 = queue_15.enqueue(set_3)
    queue_16 = module_0.Queue()
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    var_10 = queue_16.size()
    assert var_10 == 0
    queue_17 = module_0.Queue()
    var_11 = queue_17.size()
    assert var_11 == 0
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None

def test_case_2134():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = queue_0.size()
    assert var_1 == 0

def test_case_2135():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_4 = module_0.Node()
    var_1 = queue_3.size()
    assert var_1 == 0
    var_2 = queue_2.size()
    assert var_2 == 0
    complex_0 = 2886.801252 + 1418.99508j
    queue_5 = module_0.Queue(complex_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    var_3 = queue_5.size()
    assert var_3 == 1
    var_4 = var_3.__repr__()
    assert var_4 == '1'
    complex_1 = 2886.801252 + 1418.99508j
    queue_6 = module_0.Queue(complex_1)
    var_5 = queue_6.size()
    assert var_5 == 1
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    queue_8 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_6 = queue_8.size()
    assert var_6 == 0
    queue_9 = module_0.Queue()
    var_7 = queue_8.size()
    assert var_7 == 0
    var_8 = var_7.__repr__()
    assert var_8 == '0'
    complex_2 = 2886.801252 + 1418.99508j
    queue_10 = module_0.Queue(complex_2)
    var_9 = queue_10.size()
    assert var_9 == 1
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_10 = queue_10.peek()
    assert var_10 == 2886.801252 + 1418.99508j
    queue_11 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_11 = queue_11.peek()
    node_7 = module_0.Node()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_12 = double_linked_list_3.push(var_11)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    queue_12 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_13 = double_linked_list_5.append(set_5)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_14 = double_linked_list_5.push(set_5)
    queue_15 = module_0.Queue()
    var_15 = queue_15.size()
    assert var_15 == 0
    queue_16 = module_0.Queue()
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    var_16 = queue_16.peek()
    node_10 = module_0.Node()

def test_case_2136():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    with pytest.raises(IndexError):
        double_linked_list_1.pop()

def test_case_2137():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_1 = queue_0.enqueue(var_0)
    queue_1 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_0.push(queue_2)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_0.push(queue_2)
    queue_5 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_4 = queue_5.peek()
    node_3 = module_0.Node()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_5 = double_linked_list_2.push(var_4)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_6 = double_linked_list_3.append(node_5)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_7 = double_linked_list_4.append(node_7)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_8 = double_linked_list_4.shift()
    assert double_linked_list_4.tail is None
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'queue4.Node'
    assert var_8.data is None
    assert var_8.next is None
    assert var_8.prev == {*()}
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_10 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    node_9 = module_0.Node()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_7 = set()
    node_10 = module_0.Node(prev=set_7)
    queue_13 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    node_11 = module_0.Node()
    var_9 = queue_12.size()
    assert var_9 == 0
    var_10 = node_10.__repr__()
    assert var_10 == 'Value: None'
    complex_0 = 2886.801252 + 1418.99508j
    queue_14 = module_0.Queue(complex_0)
    var_11 = queue_14.size()
    assert var_11 == 1
    set_8 = set()
    node_12 = module_0.Node(prev=set_8)
    none_type_0 = None
    queue_15 = module_0.Queue()
    var_12 = queue_15.enqueue(none_type_0)
    var_13 = queue_14.enqueue(set_8)

def test_case_2138():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.size()
    assert var_2 == 0
    node_2 = module_0.Node()
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'
    queue_2 = module_0.Queue(node_2)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    var_4 = queue_2.enqueue(var_3)
    queue_3 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_5 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_6 = node_3.__repr__()
    assert var_6 == 'Value: None'
    node_4 = module_0.Node()
    queue_5 = module_0.Queue(var_6)
    var_7 = queue_5.enqueue(queue_4)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_8 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    var_9 = node_5.__repr__()
    assert var_9 == 'Value: None'
    node_6 = module_0.Node()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_2)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_10 = double_linked_list_2.append(bytes_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_11 = double_linked_list_2.append(queue_7)
    queue_8 = module_0.Queue()
    set_2 = set()
    node_7 = module_0.Node(prev=set_2)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_3 = set()
    node_8 = module_0.Node(prev=set_3)
    var_12 = double_linked_list_3.append(node_8)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_13 = double_linked_list_3.shift()
    assert double_linked_list_3.tail is None
    assert f'{type(var_13).__module__}.{type(var_13).__qualname__}' == 'queue4.Node'
    assert var_13.data is None
    assert var_13.next is None
    assert var_13.prev == {*()}
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()

def test_case_2139():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    none_type_0 = None
    var_1 = queue_1.enqueue(none_type_0)
    var_2 = var_0.__repr__()
    assert var_2 == '0'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_2.size()
    assert var_3 == 0
    queue_3 = module_0.Queue()
    var_4 = queue_3.size()
    assert var_4 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    none_type_1 = None
    queue_7 = module_0.Queue(none_type_1)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_5 = double_linked_list_0.push(queue_8)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    none_type_2 = None
    queue_11 = module_0.Queue()
    var_6 = queue_11.enqueue(none_type_2)
    var_7 = var_6.__repr__()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_12 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_8 = double_linked_list_3.append(set_4)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_9 = queue_8.enqueue(none_type_0)

def test_case_2140():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    var_1 = queue_2.dequeue()
    assert var_1 == 77
    var_2 = queue_2.peek()
    assert var_2 == 249

def test_case_2141():
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_0 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_1 = module_0.Queue()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    var_2 = queue_2.peek()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    with pytest.raises(ValueError):
        double_linked_list_2.remove(complex_0)

def test_case_2142():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = queue_0.size()
    assert var_1 == 0
    none_type_0 = None
    node_2 = module_0.Node(none_type_0, prev=none_type_0)
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bytes_0 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_6 = module_0.Queue(bytes_0)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    complex_0 = 2886.801252 + 1418.99508j
    queue_7 = module_0.Queue(complex_0)
    var_2 = queue_7.size()
    assert var_2 == 1
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    none_type_1 = None
    queue_8 = module_0.Queue()
    var_3 = queue_8.enqueue(none_type_1)
    var_4 = queue_7.enqueue(set_2)
    queue_9 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_5 = queue_9.peek()
    queue_10 = module_0.Queue(queue_9)
    queue_11 = module_0.Queue(queue_9)
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_1)
    queue_15 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_6 = queue_15.size()
    assert var_6 == 0
    queue_16 = module_0.Queue()
    var_7 = queue_15.size()
    assert var_7 == 0
    var_8 = var_7.__repr__()
    assert var_8 == '0'
    list_0 = [var_7, set_4, bytes_0]

def test_case_2143():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_3.size()
    assert var_0 == 0

def test_case_2144():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    var_1 = queue_2.dequeue()
    assert var_1 == 77
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_2)
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    var_4 = queue_5.size()
    assert var_4 == 0
    str_0 = "d^_Z'j<ceXum|X7"
    node_2 = module_0.Node(str_0)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_3)
    queue_8 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_5 = queue_8.peek()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    bytes_4 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_4)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_6 = double_linked_list_3.append(bytes_4)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'

def test_case_2145():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    none_type_0 = None
    var_1 = queue_1.enqueue(none_type_0)
    var_2 = var_0.__repr__()
    assert var_2 == '0'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = queue_3.size()
    assert var_3 == 0

def test_case_2146():
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_0 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    queue_2 = module_0.Queue(queue_0)
    var_1 = double_linked_list_0.append(node_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    var_2 = queue_4.peek()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_3 = module_0.Node()
    var_3 = queue_8.size()
    assert var_3 == 0
    none_type_0 = None
    node_4 = module_0.Node(none_type_0, prev=none_type_0)
    queue_10 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_4 = double_linked_list_4.append(node_6)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_11.enqueue(queue_10)
    queue_12 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_6 = queue_12.peek()
    node_8 = module_0.Node()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_7 = double_linked_list_5.push(var_6)
    assert f'{type(double_linked_list_5.tail).__module__}.{type(double_linked_list_5.tail).__qualname__}' == 'queue4.Node'
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    queue_13 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    var_8 = double_linked_list_6.push(queue_13)
    assert f'{type(double_linked_list_6.tail).__module__}.{type(double_linked_list_6.tail).__qualname__}' == 'queue4.Node'
    var_9 = double_linked_list_6.push(queue_13)

def test_case_2147():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    var_2 = queue_2.size()
    assert var_2 == 1
    var_3 = queue_2.dequeue()
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_4 = queue_3.size()
    assert var_4 == 0
    queue_4 = module_0.Queue()
    none_type_0 = None
    var_5 = queue_4.enqueue(none_type_0)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    node_2 = module_0.Node()
    var_6 = queue_6.size()
    assert var_6 == 0
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    var_7 = queue_10.size()
    assert var_7 == 0
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()

def test_case_2148():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    var_2 = queue_2.size()
    assert var_2 == 1
    var_3 = queue_2.dequeue()
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bytes_1 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_6 = module_0.Queue(bytes_1)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_2)
    queue_8 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_4 = queue_8.size()
    assert var_4 == 0
    queue_9 = module_0.Queue()
    var_5 = queue_8.size()
    assert var_5 == 0
    var_6 = var_5.__repr__()
    assert var_6 == '0'
    node_2 = module_0.Node()
    var_7 = node_2.__repr__()
    assert var_7 == 'Value: None'
    queue_10 = module_0.Queue(node_2)
    var_8 = queue_10.enqueue(var_7)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_9 = queue_12.size()
    assert var_9 == 0

def test_case_2149():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = var_0.__repr__()
    assert var_1 == "'Value: None'"
    queue_0 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_1.enqueue(queue_0)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_3 = module_0.Queue()
    var_4 = queue_3.peek()
    node_4 = module_0.Node()
    var_5 = node_4.__repr__()
    assert var_5 == 'Value: None'
    queue_4 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_6 = queue_4.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    double_linked_list_4 = module_0.DoubleLinkedList(var_6)
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    none_type_0 = None
    queue_9 = module_0.Queue(none_type_0)
    int_0 = -3616
    queue_10 = module_0.Queue(int_0)
    var_7 = queue_10.dequeue()
    assert var_7 == -3616
    var_8 = queue_10.enqueue(queue_10)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()

def test_case_2150():
    none_type_0 = None
    str_0 = 'Zi~\\<cNx'
    double_linked_list_0 = module_0.DoubleLinkedList(str_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    with pytest.raises(ValueError):
        double_linked_list_0.remove(none_type_0)

def test_case_2151():
    str_0 = "d^_Z'j<ceXum|X7"
    node_0 = module_0.Node(str_0)
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    var_2 = queue_0.enqueue(set_0)
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_3 = module_0.Node()
    var_3 = queue_2.size()
    assert var_3 == 0
    var_4 = node_2.__repr__()
    assert var_4 == 'Value: None'

def test_case_2152():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_3.peek()
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_4.size()
    assert var_4 == 0
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_5 = queue_4.size()
    assert var_5 == 0
    queue_6 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_6 = queue_6.size()
    assert var_6 == 0
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_9 = module_0.Queue(complex_0)
    var_7 = queue_9.size()
    assert var_7 == 1
    var_8 = var_7.__repr__()
    assert var_8 == '1'
    queue_10 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_11 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_9 = double_linked_list_1.append(node_6)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_10 = queue_10.size()
    assert var_10 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_11 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    complex_1 = 2886.801252 + 1418.99508j
    queue_13 = module_0.Queue(complex_1)
    var_12 = queue_13.size()
    assert var_12 == 1

def test_case_2153():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue(queue_5)
    var_3 = queue_4.peek()
    var_4 = queue_6.size()
    assert var_4 == 1
    queue_7 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_5 = queue_7.peek()
    node_2 = module_0.Node()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_6 = var_5.__repr__()
    queue_10 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_11 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_4 = module_0.Node()
    var_7 = queue_11.size()
    assert var_7 == 0
    var_8 = node_3.__repr__()
    assert var_8 == 'Value: None'
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_12 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_6 = module_0.Node()
    var_9 = queue_12.size()
    assert var_9 == 0

def test_case_2154():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.push(var_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_1.peek()
    node_3 = module_0.Node()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_3 = var_2.__repr__()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_4 = queue_4.peek()
    node_5 = module_0.Node()
    queue_5 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_5 = queue_5.size()
    assert var_5 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    str_0 = "d^_Z'j<ceXum|X7"
    node_7 = module_0.Node(str_0)

def test_case_2155():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    none_type_0 = None
    var_2 = queue_3.enqueue(none_type_0)
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    var_4 = queue_5.size()
    assert var_4 == 0
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_5 = queue_6.peek()
    node_4 = module_0.Node()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_6 = var_5.__repr__()
    queue_9 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_6 = module_0.Node()
    var_7 = queue_10.size()
    assert var_7 == 0
    complex_0 = 2886.801252 + 1418.99508j
    queue_11 = module_0.Queue(complex_0)
    var_8 = queue_11.size()
    assert var_8 == 1
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    none_type_1 = None
    queue_12 = module_0.Queue()
    var_9 = queue_12.enqueue(none_type_1)
    var_10 = queue_11.enqueue(set_5)
    node_8 = module_0.Node()
    var_11 = node_8.__repr__()
    assert var_11 == 'Value: None'
    queue_13 = module_0.Queue(node_8)
    var_12 = queue_13.enqueue(var_11)

def test_case_2156():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_3 = node_1.__repr__()
    assert var_3 == 'Value: None'
    node_2 = module_0.Node()
    var_4 = queue_2.dequeue()
    assert var_4 == 77
    queue_3 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_5 = queue_3.peek()
    node_4 = module_0.Node()
    node_5 = module_0.Node(set_1)

def test_case_2157():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_0.size()
    assert var_1 == 0
    complex_0 = 2886.801252 + 1418.99508j
    queue_5 = module_0.Queue(complex_0)
    var_2 = queue_5.size()
    assert var_2 == 1
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = queue_5.peek()
    assert var_3 == 2886.801252 + 1418.99508j
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_4 = queue_6.peek()
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_5 = node_2.__repr__()
    assert var_5 == 'Value: None'
    queue_9 = module_0.Queue(double_linked_list_1)
    none_type_0 = None
    node_3 = module_0.Node(prev=none_type_0)
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_15 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None

def test_case_2158():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_1 = module_0.Queue(double_linked_list_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'

def test_case_2159():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_3.size()
    assert var_0 == 0
    queue_4 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_6.size()
    assert var_1 == 0
    queue_7 = module_0.Queue()
    var_2 = queue_6.size()
    assert var_2 == 0
    var_3 = queue_5.peek()
    assert var_3 == 77
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_2)
    queue_9 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = queue_9.size()
    assert var_4 == 0
    queue_10 = module_0.Queue()
    var_5 = queue_9.size()
    assert var_5 == 0
    node_3 = module_0.Node(next_node=var_4)
    assert node_3.next == 0
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = node_4.__repr__()
    assert var_6 == 'Value: None'
    queue_12 = module_0.Queue(double_linked_list_2)
    complex_0 = 2886.801252 + 1418.99508j
    queue_13 = module_0.Queue(complex_0)
    var_7 = queue_13.size()
    assert var_7 == 1
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    none_type_0 = None
    queue_14 = module_0.Queue()
    var_8 = queue_14.enqueue(none_type_0)
    var_9 = queue_13.enqueue(set_4)
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_15 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_10 = node_6.__repr__()
    assert var_10 == 'Value: None'
    with pytest.raises(IndexError):
        double_linked_list_2.shift()

def test_case_2160():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_1 = queue_1.enqueue(set_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_3 = node_1.__repr__()
    assert var_3 == 'Value: None'
    node_2 = module_0.Node()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_4 = module_0.Node()
    var_4 = queue_4.size()
    assert var_4 == 0
    queue_6 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_5 = queue_6.size()
    assert var_5 == 0
    queue_7 = module_0.Queue()
    var_6 = queue_7.size()
    assert var_6 == 0
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_7 = double_linked_list_3.push(queue_8)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    queue_11 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_8 = queue_11.peek()
    queue_12 = module_0.Queue(queue_11)
    queue_13 = module_0.Queue(queue_11)
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    var_9 = queue_11.size()
    assert var_9 == 0

def test_case_2161():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = queue_4.size()
    assert var_1 == 0
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_2 = queue_6.size()
    assert var_2 == 0
    var_3 = double_linked_list_3.push(queue_2)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'

def test_case_2162():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.append(queue_0)
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_2 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_2.size()
    assert var_3 == 0
    var_4 = queue_1.size()
    assert var_4 == 0

def test_case_2163():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    node_1 = module_0.Node()
    var_2 = queue_0.dequeue()
    assert var_2 == 77
    complex_0 = 2886.801252 + 1418.99508j
    queue_1 = module_0.Queue(complex_0)
    var_3 = queue_1.size()
    assert var_3 == 1
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_4 = queue_2.enqueue(none_type_0)
    var_5 = queue_1.enqueue(set_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    var_6 = queue_3.dequeue()
    assert var_6 == 77
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_7 = double_linked_list_1.append(node_4)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_8 = queue_5.size()
    assert var_8 == 0
    queue_7 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_9 = queue_7.size()
    assert var_9 == 0
    queue_8 = module_0.Queue()
    var_10 = node_5.__repr__()
    assert var_10 == 'Value: None'
    queue_9 = module_0.Queue()
    complex_1 = 2886.801252 + 1418.99508j
    queue_10 = module_0.Queue(complex_1)
    var_11 = queue_10.size()
    assert var_11 == 1
    node_6 = module_0.Node()
    var_12 = node_6.__repr__()
    assert var_12 == 'Value: None'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    bytes_2 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_14 = module_0.Queue(bytes_2)
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    queue_15 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    queue_18 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_19 = module_0.Queue()
    var_13 = node_9.__repr__()
    assert var_13 == 'Value: None'

def test_case_2164():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    int_0 = -3616
    queue_2 = module_0.Queue(int_0)
    var_1 = queue_2.dequeue()
    assert var_1 == -3616
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    var_2 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_3 = queue_3.size()
    assert var_3 == 11
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_4 = queue_4.size()
    assert var_4 == 0
    queue_5 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    var_5 = queue_4.size()
    assert var_5 == 0

def test_case_2165():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.size()
    assert var_2 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue(queue_2)
    complex_0 = 2886.801252 + 1418.99508j
    queue_4 = module_0.Queue(complex_0)
    var_4 = queue_4.size()
    assert var_4 == 1
    var_5 = var_4.__repr__()
    assert var_5 == '1'
    complex_1 = 2886.801252 + 1418.99508j
    queue_5 = module_0.Queue(complex_1)
    var_6 = queue_5.size()
    assert var_6 == 1

def test_case_2166():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.push(var_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_1.peek()
    node_3 = module_0.Node()
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    queue_5 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_5 = queue_5.size()
    assert var_5 == 0
    queue_6 = module_0.Queue()
    var_6 = queue_5.size()
    assert var_6 == 0
    var_7 = var_6.__repr__()
    assert var_7 == '0'
    queue_7 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_8 = double_linked_list_2.append(node_7)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_9 = queue_7.size()
    assert var_9 == 0
    queue_9 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_10 = queue_9.size()
    assert var_10 == 0
    queue_10 = module_0.Queue()
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_10 = module_0.Node()
    queue_12 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_13 = module_0.Queue(complex_0)
    var_11 = queue_13.size()
    assert var_11 == 1
    node_11 = module_0.Node()
    var_12 = node_11.__repr__()
    assert var_12 == 'Value: None'
    set_8 = set()
    node_12 = module_0.Node(prev=set_8)
    queue_14 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_13 = double_linked_list_5.append(set_8)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_14 = node_12.__repr__()
    assert var_14 == 'Value: None'

def test_case_2167():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_2 = module_0.Node()
    var_2 = queue_3.size()
    assert var_2 == 0
    var_3 = node_1.__repr__()
    assert var_3 == 'Value: None'
    complex_0 = 2886.801252 + 1418.99508j
    queue_5 = module_0.Queue(complex_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    var_4 = queue_5.size()
    assert var_4 == 1
    node_3 = module_0.Node()
    var_5 = node_3.__repr__()
    assert var_5 == 'Value: None'
    node_4 = module_0.Node()
    var_6 = node_4.__repr__()
    assert var_6 == 'Value: None'
    queue_6 = module_0.Queue(node_4)
    var_7 = queue_6.enqueue(var_6)
    queue_7 = module_0.Queue()

def test_case_2168():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_1 = queue_0.enqueue(var_0)
    queue_1 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_1.peek()
    node_2 = module_0.Node()
    node_3 = module_0.Node(set_0)
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    queue_3 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_3 = queue_3.peek()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None

def test_case_2169():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    none_type_0 = None
    var_1 = queue_1.enqueue(none_type_0)
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_2.peek()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_3.size()
    assert var_3 == 0
    var_4 = queue_2.size()
    assert var_4 == 0
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_5 = module_0.Queue()
    node_4 = module_0.Node()
    var_5 = node_4.__repr__()
    assert var_5 == 'Value: None'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_6 = var_5.__repr__()
    assert var_6 == "'Value: None'"
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_2 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_2).__module__}.{type(double_linked_list_2).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'

def test_case_2170():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    none_type_0 = None
    var_1 = queue_1.enqueue(none_type_0)
    var_2 = var_0.__repr__()
    assert var_2 == '0'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_2.size()
    assert var_3 == 0
    queue_3 = module_0.Queue()
    var_4 = queue_3.size()
    assert var_4 == 0
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_5 = queue_4.size()
    assert var_5 == 0
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_6 = queue_5.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_7 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_6 = module_0.Node()
    var_8 = node_6.__repr__()
    assert var_8 == 'Value: None'
    queue_11 = module_0.Queue(node_6)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    var_9 = queue_12.dequeue()
    assert var_9 == 77
    queue_13 = module_0.Queue()

def test_case_2171():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bytes_0 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    node_1 = module_0.Node()
    with pytest.raises(IndexError):
        double_linked_list_0.pop()

def test_case_2172():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = double_linked_list_2.append(set_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_2.push(set_0)
    str_0 = "d^_Z'j<ceXum|X7"
    node_2 = module_0.Node(str_0)
    queue_4 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_3 = queue_4.peek()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_4 = queue_5.size()
    assert var_4 == 0
    var_5 = queue_4.size()
    assert var_5 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    node_5 = module_0.Node()
    var_6 = node_5.__repr__()
    assert var_6 == 'Value: None'
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_8 = module_0.Queue()
    var_7 = queue_8.peek()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_11 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    queue_12 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    var_8 = double_linked_list_5.append(node_8)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    queue_13 = module_0.Queue(node_7)

def test_case_2173():
    none_type_0 = None
    queue_0 = module_0.Queue(none_type_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    none_type_1 = None
    node_0 = module_0.Node(none_type_1, prev=none_type_1)
    queue_1 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    var_3 = queue_4.size()
    assert var_3 == 0
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None

def test_case_2174():
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = double_linked_list_2.append(set_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    node_2 = module_0.Node()
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = var_3.__repr__()
    assert var_4 == "'Value: None'"
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_5 = queue_4.size()
    assert var_5 == 0
    node_4 = module_0.Node()
    with pytest.raises(IndexError):
        double_linked_list_1.shift()

def test_case_2175():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_2 = queue_1.size()
    assert var_2 == 11
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'
    queue_3 = module_0.Queue(double_linked_list_1)

def test_case_2176():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.push(var_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    dict_0 = {}
    node_2 = module_0.Node(var_0, dict_0)
    queue_1 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_2 = queue_1.peek()
    queue_2 = module_0.Queue(queue_1)
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_3 = var_2.__repr__()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_4 = double_linked_list_1.append(node_6)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_5 = queue_5.size()
    assert var_5 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue(queue_7)
    str_0 = "d^_Z'j<ceXum|X7"
    node_7 = module_0.Node(str_0)
    queue_9 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    var_7 = double_linked_list_3.append(node_9)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_10 = module_0.Node()
    set_7 = set()
    node_11 = module_0.Node(prev=set_7)
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_8 = queue_13.size()
    assert var_8 == 0
    queue_14 = module_0.Queue()

def test_case_2177():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = var_0.__repr__()
    assert var_1 == "'Value: None'"
    queue_0 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_0.size()
    assert var_2 == 0
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = queue_1.size()
    assert var_3 == 0
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_4 = module_0.Node()
    var_4 = queue_3.size()
    assert var_4 == 0
    var_5 = node_3.__repr__()
    assert var_5 == 'Value: None'
    complex_0 = 2886.801252 + 1418.99508j
    queue_5 = module_0.Queue(complex_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    var_6 = queue_5.size()
    assert var_6 == 1
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    with pytest.raises(IndexError):
        double_linked_list_0.pop()

def test_case_2178():
    none_type_0 = None
    node_0 = module_0.Node(prev=none_type_0)
    node_1 = module_0.Node()
    var_0 = node_1.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_1)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_1 = queue_0.enqueue(var_0)
    queue_1 = module_0.Queue()
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    none_type_1 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_1)
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    var_3 = queue_4.peek()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    with pytest.raises(IndexError):
        double_linked_list_0.shift()

def test_case_2179():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    with pytest.raises(IndexError):
        double_linked_list_0.shift()

def test_case_2180():
    int_0 = -3616
    queue_0 = module_0.Queue(int_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == -3616
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    var_2 = queue_2.size()
    assert var_2 == 0
    var_3 = queue_1.peek()
    assert var_3 == 77
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_4 = queue_6.peek()
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_5 = queue_7.size()
    assert var_5 == 0
    var_6 = queue_6.size()
    assert var_6 == 0
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    queue_9 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_7 = queue_9.size()
    assert var_7 == 0
    queue_10 = module_0.Queue()
    var_8 = queue_9.size()
    assert var_8 == 0
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_2)
    double_linked_list_1 = module_0.DoubleLinkedList()
    var_9 = double_linked_list_1.append(bytes_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()

def test_case_2181():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    none_type_0 = None
    var_1 = queue_1.enqueue(none_type_0)
    node_1 = module_0.Node()
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = var_2.__repr__()
    assert var_3 == "'Value: None'"
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    var_4 = queue_2.dequeue()
    assert var_4 == 77
    queue_3 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    var_5 = queue_4.dequeue()
    assert var_5 == 77
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_2)
    queue_6 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_6 = queue_6.peek()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_7 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_7 = queue_7.peek()
    queue_8 = module_0.Queue(queue_7)
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_8 = var_7.__repr__()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_9 = double_linked_list_3.append(set_5)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None

def test_case_2182():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_1 = module_0.Queue(double_linked_list_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_1.append(queue_2)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_3.peek()
    node_2 = module_0.Node()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = double_linked_list_2.push(var_3)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    dict_0 = {}
    node_3 = module_0.Node(var_3, dict_0)
    queue_4 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_5 = double_linked_list_3.append(node_5)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'

def test_case_2183():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_0.push(queue_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_1 = double_linked_list_3.append(set_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_3.push(set_1)
    node_2 = module_0.Node()
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'
    queue_6 = module_0.Queue(node_2)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    node_4 = module_0.Node()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_10 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    node_7 = module_0.Node()
    var_4 = queue_9.size()
    assert var_4 == 0
    var_5 = node_6.__repr__()
    assert var_5 == 'Value: None'
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    queue_11 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    var_6 = queue_13.size()
    assert var_6 == 0

def test_case_2184():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_1.size()
    assert var_0 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    node_2 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    var_3 = queue_4.dequeue()
    assert var_3 == 77
    var_4 = queue_4.peek()
    assert var_4 == 249
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_2)
    var_5 = queue_5.dequeue()
    assert var_5 == 77
    queue_6 = module_0.Queue()
    none_type_0 = None
    queue_7 = module_0.Queue(none_type_0)
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_3)
    queue_9 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_6 = queue_9.size()
    assert var_6 == 0
    queue_10 = module_0.Queue()
    var_7 = queue_9.size()
    assert var_7 == 0
    node_4 = module_0.Node(next_node=var_6)
    assert node_4.next == 0
    none_type_1 = None
    node_5 = module_0.Node(none_type_1, prev=none_type_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_2 = set()
    node_6 = module_0.Node(prev=set_2)

def test_case_2185():
    str_0 = "d^_Z'j<ceXum|X7"
    node_0 = module_0.Node(str_0)
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_0.push(queue_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue(queue_4)
    var_2 = queue_3.peek()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_3 = module_0.Node()
    var_3 = queue_6.size()
    assert var_3 == 0
    queue_7 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_8 = module_0.Queue(complex_0)
    var_4 = queue_8.size()
    assert var_4 == 1
    node_4 = module_0.Node()
    var_5 = node_4.__repr__()
    assert var_5 == 'Value: None'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    var_6 = queue_9.dequeue()
    assert var_6 == 77
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_2)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_7 = double_linked_list_4.append(bytes_2)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    var_8 = node_5.__repr__()
    assert var_8 == 'Value: None'
    node_6 = module_0.Node()
    queue_11 = module_0.Queue(var_8)
    var_9 = queue_11.enqueue(queue_10)
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_3)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_10 = double_linked_list_5.append(bytes_3)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    queue_13 = module_0.Queue(queue_12)
    set_2 = set()
    node_7 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_14 = module_0.Queue()
    var_11 = queue_14.enqueue(none_type_0)
    var_12 = node_5.__repr__()
    assert var_12 == 'Value: None'

def test_case_2186():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = queue_4.size()
    assert var_1 == 0
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_2 = double_linked_list_3.push(queue_5)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_8.size()
    assert var_3 == 0
    queue_9 = module_0.Queue()
    var_4 = queue_9.peek()
    queue_10 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_5 = queue_10.size()
    assert var_5 == 0
    queue_11 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_6 = queue_10.size()
    assert var_6 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_0)
    queue_13 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_7 = queue_13.size()
    assert var_7 == 0
    queue_14 = module_0.Queue()
    var_8 = queue_13.size()
    assert var_8 == 0
    var_9 = var_8.__repr__()
    assert var_9 == '0'
    bool_0 = True
    double_linked_list_6 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_6.tail).__module__}.{type(double_linked_list_6.tail).__qualname__}' == 'queue4.Node'
    queue_15 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_10 = queue_15.peek()
    queue_16 = module_0.Queue(queue_15)
    queue_17 = module_0.Queue(queue_15)
    node_7 = module_0.Node()
    var_11 = node_7.__repr__()
    assert var_11 == 'Value: None'
    queue_18 = module_0.Queue(node_7)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_19 = module_0.Queue(bytes_1)
    var_12 = queue_19.dequeue()
    assert var_12 == 77
    queue_20 = module_0.Queue()
    var_13 = queue_19.enqueue(queue_15)

def test_case_2187():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    complex_0 = 2886.801252 + 1418.99508j
    queue_1 = module_0.Queue(complex_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_0 = queue_1.size()
    assert var_0 == 1
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    var_2 = queue_0.peek()

def test_case_2188():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.push(var_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_1.size()
    assert var_2 == 0
    queue_2 = module_0.Queue()
    var_3 = queue_2.size()
    assert var_3 == 0
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    str_0 = "d^_Z'j<ceXum|X7"
    node_3 = module_0.Node(str_0)
    queue_3 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_4 = queue_3.size()
    assert var_4 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_5 = queue_5.peek()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    queue_7 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_6 = queue_7.peek()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_1)
    var_7 = queue_8.dequeue()
    assert var_7 == 77
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_12 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_8 = module_0.Node()
    var_8 = queue_11.size()
    assert var_8 == 0
    var_9 = queue_10.size()
    assert var_9 == 0

def test_case_2189():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    var_2 = queue_0.enqueue(set_0)
    queue_2 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    var_4 = queue_2.peek()
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_5 = queue_5.size()
    assert var_5 == 0
    queue_6 = module_0.Queue()
    var_6 = queue_6.size()
    assert var_6 == 0
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_7 = queue_7.peek()
    node_3 = module_0.Node()
    node_4 = module_0.Node(set_2)
    none_type_1 = None
    node_5 = module_0.Node(prev=none_type_1)

def test_case_2190():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = var_1.__repr__()
    assert var_2 == '0'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    var_4 = queue_4.size()
    assert var_4 == 0
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None

def test_case_2191():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = queue_0.size()
    assert var_1 == 11
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_2 = module_0.Node()
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_3 = double_linked_list_2.append(node_4)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue(node_3)
    queue_7 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_4 = queue_7.size()
    assert var_4 == 0
    queue_8 = module_0.Queue()
    none_type_0 = None
    var_5 = queue_8.enqueue(none_type_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    queue_10 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_6 = double_linked_list_3.append(node_7)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_7 = queue_11.enqueue(queue_10)
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_12 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_8 = node_8.__repr__()
    assert var_8 == 'Value: None'
    queue_13 = module_0.Queue(double_linked_list_4)
    set_7 = set()
    node_9 = module_0.Node(prev=set_7)
    queue_14 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_9 = double_linked_list_5.push(queue_14)
    assert f'{type(double_linked_list_5.tail).__module__}.{type(double_linked_list_5.tail).__qualname__}' == 'queue4.Node'
    var_10 = double_linked_list_5.push(queue_14)

def test_case_2192():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    str_0 = "d^_Z'j<ceXum|X7"
    node_0 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_4 = module_0.Node()
    queue_7 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_4 = double_linked_list_1.append(node_6)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_1.shift()
    assert double_linked_list_1.tail is None
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Node'
    assert var_5.data is None
    assert var_5.next is None
    assert var_5.prev == {*()}
    queue_9 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_6 = queue_9.peek()
    queue_10 = module_0.Queue()
    complex_1 = 2886.801252 + 1418.99508j
    queue_11 = module_0.Queue(complex_1)
    var_7 = queue_11.size()
    assert var_7 == 1
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_8 = queue_11.peek()
    assert var_8 == 2886.801252 + 1418.99508j
    var_9 = var_0.__repr__()
    assert var_9 == '1'

def test_case_2193():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_1 = queue_0.peek()
    node_2 = module_0.Node()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(set_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = node_3.__repr__()
    assert var_3 == 'Value: None'
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_5 = module_0.Queue()
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    node_5 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_6 = double_linked_list_3.append(queue_6)

def test_case_2194():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    var_1 = queue_1.peek()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    var_2 = queue_3.peek()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_4.size()
    assert var_3 == 0
    queue_5 = module_0.Queue()
    none_type_0 = None
    var_4 = queue_5.enqueue(none_type_0)
    var_5 = var_3.__repr__()
    assert var_5 == '0'
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_6 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    queue_8 = module_0.Queue(queue_6)
    queue_9 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_10 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    var_7 = double_linked_list_1.append(node_5)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_8 = queue_9.size()
    assert var_8 == 0
    queue_11 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_12 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    var_9 = double_linked_list_2.append(node_7)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_0)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_10 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_8 = module_0.Node()
    var_11 = node_8.__repr__()
    assert var_11 == 'Value: None'
    node_9 = module_0.Node()
    queue_14 = module_0.Queue()
    set_8 = set()
    node_10 = module_0.Node(prev=set_8)
    var_12 = queue_14.size()
    assert var_12 == 0
    queue_15 = module_0.Queue()
    var_13 = node_10.__repr__()
    assert var_13 == 'Value: None'
    queue_16 = module_0.Queue()
    var_14 = double_linked_list_1.append(queue_11)

def test_case_2195():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    var_1 = var_0.__repr__()
    assert var_1 == '1'
    queue_1 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue(queue_2)
    var_3 = queue_1.peek()
    queue_4 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_4 = queue_4.peek()
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_5 = queue_5.size()
    assert var_5 == 0
    var_6 = queue_4.size()
    assert var_6 == 0
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_7 = queue_6.enqueue(none_type_0)
    var_8 = var_7.__repr__()
    queue_7 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_9 = queue_7.peek()
    node_4 = module_0.Node()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_10 = var_9.__repr__()
    queue_10 = module_0.Queue()

def test_case_2196():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bytes_0 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_0 = double_linked_list_2.append(set_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_2.push(set_1)
    queue_7 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_2 = double_linked_list_3.append(node_3)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_8.enqueue(queue_7)
    node_4 = module_0.Node()
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    queue_9 = module_0.Queue()
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_5 = queue_9.peek()
    node_6 = module_0.Node()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_6 = double_linked_list_4.push(var_5)
    assert f'{type(double_linked_list_4.tail).__module__}.{type(double_linked_list_4.tail).__qualname__}' == 'queue4.Node'
    dict_0 = {}
    node_7 = module_0.Node(var_5, dict_0)
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    queue_10 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_7 = node_8.__repr__()
    assert var_7 == 'Value: None'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_1)
    queue_12 = module_0.Queue()
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    var_8 = queue_12.size()
    assert var_8 == 0
    queue_13 = module_0.Queue()
    var_9 = queue_12.size()
    assert var_9 == 0
    var_10 = var_9.__repr__()
    assert var_10 == '0'
    set_7 = set()
    node_10 = module_0.Node(prev=set_7)
    queue_14 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_11 = node_10.__repr__()
    assert var_11 == 'Value: None'
    queue_15 = module_0.Queue(double_linked_list_6)
    complex_0 = 2886.801252 + 1418.99508j
    queue_16 = module_0.Queue(complex_0)
    var_12 = queue_16.size()
    assert var_12 == 1
    var_13 = var_12.__repr__()
    assert var_13 == '1'

def test_case_2197():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_0 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    none_type_0 = None
    node_2 = module_0.Node(prev=none_type_0)
    var_3 = double_linked_list_0.append(none_type_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_1 = None
    queue_6 = module_0.Queue(none_type_1)
    queue_7 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_4 = queue_7.peek()
    queue_8 = module_0.Queue(queue_7)
    queue_9 = module_0.Queue(queue_7)
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    var_5 = queue_9.size()
    assert var_5 == 1
    queue_12 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_6 = queue_12.peek()
    queue_13 = module_0.Queue(queue_12)
    queue_14 = module_0.Queue(queue_12)
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_15 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_7 = queue_17.size()
    assert var_7 == 0
    queue_18 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_19 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_8 = node_6.__repr__()
    assert var_8 == 'Value: None'
    queue_20 = module_0.Queue(double_linked_list_3)
    with pytest.raises(IndexError):
        double_linked_list_2.pop()

def test_case_2198():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue(queue_0)
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_3.size()
    assert var_2 == 0
    var_3 = queue_2.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_3 = module_0.Node()
    var_4 = queue_5.size()
    assert var_4 == 0
    var_5 = node_2.__repr__()
    assert var_5 == 'Value: None'
    queue_7 = module_0.Queue()
    var_6 = queue_0.size()
    assert var_6 == 11

def test_case_2199():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    str_0 = "d^_Z'j<ceXum|X7"
    node_0 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    queue_5 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    var_4 = queue_5.size()
    assert var_4 == 0
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_5 = queue_8.peek()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    bytes_1 = b"\x0f\xb7)'\x9b\x0e^9B"
    node_4 = module_0.Node(next_node=bytes_1)
    complex_1 = 2886.801252 + 1418.99508j
    queue_12 = module_0.Queue(complex_1)
    var_6 = queue_12.size()
    assert var_6 == 1
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_13 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_7 = queue_13.size()
    assert var_7 == 0
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_8 = queue_14.peek()
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_18 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_8 = module_0.Node()
    var_9 = queue_17.size()
    assert var_9 == 0
    var_10 = queue_16.size()
    assert var_10 == 0

def test_case_2200():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.peek()
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    queue_2 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    var_3 = queue_2.peek()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)

def test_case_2201():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    none_type_0 = None
    var_1 = queue_1.enqueue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_3 = node_1.__repr__()
    assert var_3 == 'Value: None'
    node_2 = module_0.Node()
    var_4 = queue_2.dequeue()
    assert var_4 == 77
    node_3 = module_0.Node()
    var_5 = node_3.__repr__()
    assert var_5 == 'Value: None'
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    none_type_1 = None
    queue_3 = module_0.Queue()
    var_6 = queue_3.enqueue(none_type_1)
    var_7 = var_6.__repr__()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_8 = double_linked_list_1.append(node_6)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_9 = queue_5.enqueue(queue_4)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_1)
    queue_7 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_10 = queue_7.size()
    assert var_10 == 0
    queue_8 = module_0.Queue()
    var_11 = queue_7.size()
    assert var_11 == 0
    var_12 = var_11.__repr__()
    assert var_12 == '0'
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_13 = double_linked_list_3.append(set_5)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_14 = node_8.__repr__()
    assert var_14 == 'Value: None'

def test_case_2202():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_0.size()
    assert var_0 == 0
    node_2 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    none_type_0 = None
    queue_2 = module_0.Queue()
    var_2 = queue_2.enqueue(none_type_0)
    queue_3 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_4 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_3 = double_linked_list_3.append(node_5)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_3.enqueue(var_3)
    queue_5 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_6 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_5 = double_linked_list_4.append(node_7)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    node_8 = module_0.Node()
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_5 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_5.tail).__module__}.{type(double_linked_list_5.tail).__qualname__}' == 'queue4.Node'

def test_case_2203():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_1 = module_0.Queue(double_linked_list_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    none_type_0 = None
    var_2 = queue_3.enqueue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    none_type_1 = None
    queue_5 = module_0.Queue(none_type_1)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_4 = queue_7.peek()
    node_4 = module_0.Node()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    bytes_1 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_11 = module_0.Queue(bytes_1)
    queue_12 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_2)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = double_linked_list_3.append(bytes_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_14 = module_0.Queue(queue_13)
    var_6 = queue_12.peek()
    var_7 = queue_14.size()
    assert var_7 == 1
    var_8 = queue_14.dequeue()
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'queue4.Queue'
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_3)
    queue_16 = module_0.Queue()
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_9 = queue_16.size()
    assert var_9 == 0
    queue_17 = module_0.Queue()
    var_10 = queue_16.size()
    assert var_10 == 0
    var_11 = var_10.__repr__()
    assert var_11 == '0'
    queue_18 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_19 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_12 = double_linked_list_4.append(node_8)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_20 = module_0.Queue(node_7)

def test_case_2204():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    node_1 = module_0.Node()
    node_2 = module_0.Node()
    set_0 = set()
    node_3 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = node_3.__repr__()
    assert var_2 == 'Value: None'
    queue_2 = module_0.Queue(double_linked_list_1)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    bool_0 = False

def test_case_2205():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    queue_1 = module_0.Queue(node_1)
    var_2 = queue_1.enqueue(var_1)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    queue_3 = module_0.Queue()
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    var_4 = queue_3.size()
    assert var_4 == 0
    var_5 = var_4.__repr__()
    assert var_5 == '0'

def test_case_2206():
    int_0 = -3616
    queue_0 = module_0.Queue(int_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == -3616
    var_1 = queue_0.enqueue(queue_0)
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    node_1 = module_0.Node()
    bytes_0 = b"\x0f\xb7)'\x9b\x0e^9B"
    node_2 = module_0.Node(next_node=bytes_0)
    complex_0 = 2886.801252 + 1418.99508j
    queue_2 = module_0.Queue(complex_0)
    var_2 = queue_2.size()
    assert var_2 == 1
    var_3 = var_2.__repr__()
    assert var_3 == '1'
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    queue_4 = module_0.Queue()
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    var_5 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_4 = module_0.Node()
    var_6 = node_4.__repr__()
    assert var_6 == 'Value: None'
    node_5 = module_0.Node()
    queue_6 = module_0.Queue(var_6)
    var_7 = queue_6.enqueue(queue_5)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_2)
    double_linked_list_3 = module_0.DoubleLinkedList()
    var_8 = double_linked_list_3.append(bytes_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    set_2 = set()
    node_6 = module_0.Node(prev=set_2)
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    node_7 = module_0.Node()
    var_9 = queue_9.size()
    assert var_9 == 0

def test_case_2207():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_1 = queue_3.peek()
    queue_4 = module_0.Queue(queue_3)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = double_linked_list_1.push(queue_5)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_1.push(queue_5)
    node_4 = module_0.Node()
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_5 = var_4.__repr__()
    assert var_5 == "'Value: None'"
    queue_8 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_6 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    var_7 = var_6.__repr__()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_0)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_8 = double_linked_list_4.append(bytes_0)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_11 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_12 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_9 = double_linked_list_5.append(node_8)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_10 = double_linked_list_5.shift()
    assert double_linked_list_5.tail is None
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'queue4.Node'
    assert var_10.data is None
    assert var_10.next is None
    assert var_10.prev == {*()}

def test_case_2208():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    node_2 = module_0.Node(set_0)
    str_0 = "d^_Z'j<ceXum|X7"
    node_3 = module_0.Node(str_0)
    queue_1 = module_0.Queue()
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    var_2 = queue_3.peek()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_4 = module_0.Queue()
    var_3 = queue_4.enqueue(none_type_0)
    var_4 = var_3.__repr__()
    queue_5 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_5 = queue_5.peek()
    node_7 = module_0.Node()
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    queue_8 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_9 = module_0.Node()
    var_6 = queue_7.size()
    assert var_6 == 0
    with pytest.raises(ValueError):
        double_linked_list_0.remove(none_type_0)

def test_case_2209():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_2.append(node_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_5 = module_0.Queue(node_1)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    none_type_0 = None
    queue_9 = module_0.Queue(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_0)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_2 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_11 = module_0.Queue(queue_10)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    with pytest.raises(ValueError):
        double_linked_list_1.remove(node_1)

def test_case_2210():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    none_type_0 = None
    var_1 = queue_1.enqueue(none_type_0)
    var_2 = var_0.__repr__()
    assert var_2 == '0'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = double_linked_list_0.append(node_2)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(node_1)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    var_4 = queue_6.peek()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    queue_10 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_5 = queue_10.size()
    assert var_5 == 0
    queue_11 = module_0.Queue()
    var_6 = queue_10.size()
    assert var_6 == 0
    queue_12 = module_0.Queue()
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_13 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    var_7 = double_linked_list_3.append(node_6)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_7 = module_0.Node()
    queue_14 = module_0.Queue()
    set_7 = set()
    node_8 = module_0.Node(prev=set_7)
    var_8 = queue_14.peek()
    queue_15 = module_0.Queue(queue_14)
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    none_type_1 = None
    queue_21 = module_0.Queue(none_type_1)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_8 = set()
    node_9 = module_0.Node(prev=set_8)
    queue_22 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_23 = module_0.Queue()
    queue_24 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_9 = double_linked_list_6.append(set_8)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    var_10 = node_9.__repr__()
    assert var_10 == 'Value: None'
    with pytest.raises(IndexError):
        double_linked_list_2.pop()

def test_case_2211():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    var_2 = queue_3.size()
    assert var_2 == 0

def test_case_2212():
    none_type_0 = None
    queue_0 = module_0.Queue(none_type_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(none_type_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'

def test_case_2213():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == 77
    var_1 = queue_0.peek()
    assert var_1 == 249
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    queue_2 = module_0.Queue()
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_3 = module_0.Queue()
    var_3 = queue_2.size()
    assert var_3 == 0
    var_4 = var_3.__repr__()
    assert var_4 == '0'

def test_case_2214():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue(queue_2)
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_2 = queue_13.size()
    assert var_2 == 0
    queue_14 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_15 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_3 = double_linked_list_5.append(set_4)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_5.push(set_4)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_18 = module_0.Queue(bytes_0)
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_5 = double_linked_list_6.append(bytes_0)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_19 = module_0.Queue()
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None
    queue_20 = module_0.Queue()
    queue_21 = module_0.Queue()
    double_linked_list_9 = module_0.DoubleLinkedList()
    assert double_linked_list_9.head is None
    assert double_linked_list_9.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_22 = module_0.Queue(bytes_1)
    double_linked_list_10 = module_0.DoubleLinkedList()
    assert double_linked_list_10.head is None
    assert double_linked_list_10.tail is None
    var_6 = double_linked_list_10.append(bytes_1)
    assert f'{type(double_linked_list_10.head).__module__}.{type(double_linked_list_10.head).__qualname__}' == 'queue4.Node'
    str_0 = "G^l'\\oN#|QEGl"
    with pytest.raises(ValueError):
        double_linked_list_5.remove(str_0)

def test_case_2215():
    int_0 = -3616
    queue_0 = module_0.Queue(int_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == -3616
    bytes_0 = b"\x0f\xb7)'\x9b\x0e^9B"
    node_0 = module_0.Node(next_node=bytes_0)
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    queue_2 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    var_2 = queue_2.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = queue_4.peek()
    node_3 = module_0.Node()
    double_linked_list_0 = module_0.DoubleLinkedList()
    var_4 = double_linked_list_0.push(var_3)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    dict_0 = {}
    node_4 = module_0.Node(var_3, dict_0)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_2)
    double_linked_list_1 = module_0.DoubleLinkedList()
    var_5 = double_linked_list_1.append(bytes_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    var_6 = node_5.__repr__()
    assert var_6 == 'Value: None'
    node_6 = module_0.Node()
    var_7 = queue_5.dequeue()
    assert var_7 == 77
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_3)
    var_8 = queue_6.dequeue()
    assert var_8 == 77
    queue_7 = module_0.Queue()
    float_0 = -3043.800134
    str_0 = 'O,S|'
    str_1 = 'm'
    bool_0 = False
    tuple_0 = (float_0, str_0, str_1, bool_0)
    double_linked_list_2 = module_0.DoubleLinkedList(tuple_0)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'

def test_case_2216():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue(queue_0)
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_1 = module_0.Node()
    var_1 = queue_3.size()
    assert var_1 == 0
    var_2 = queue_2.size()
    assert var_2 == 0
    node_2 = module_0.Node()
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'
    queue_5 = module_0.Queue(node_2)
    var_4 = queue_5.enqueue(var_3)
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_8 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_5 = double_linked_list_2.append(node_4)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    queue_10 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_6 = queue_10.size()
    assert var_6 == 0
    queue_11 = module_0.Queue()
    var_7 = queue_10.size()
    assert var_7 == 0
    node_7 = module_0.Node(next_node=var_6)
    assert node_7.next == 0
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_2)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_8 = double_linked_list_3.append(bytes_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_8 = module_0.Node()
    var_9 = node_8.__repr__()
    assert var_9 == 'Value: None'
    node_9 = module_0.Node()

def test_case_2217():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    var_1 = queue_0.enqueue(set_0)

def test_case_2218():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_1 = queue_0.enqueue(var_0)
    queue_1 = module_0.Queue()

def test_case_2219():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bytes_0 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_6 = module_0.Queue(bytes_0)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_0 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    none_type_0 = None
    queue_8 = module_0.Queue(none_type_0)
    queue_9 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_1 = node_4.__repr__()
    assert var_1 == 'Value: None'
    queue_11 = module_0.Queue(double_linked_list_3)
    var_2 = var_1.__repr__()
    assert var_2 == "'Value: None'"
    queue_12 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_3 = queue_12.peek()
    node_6 = module_0.Node()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_4 = var_3.__repr__()
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_5 = queue_16.size()
    assert var_5 == 0
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    with pytest.raises(ValueError):
        double_linked_list_1.remove(set_3)

def test_case_2220():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    none_type_0 = None
    queue_3 = module_0.Queue(none_type_0)
    queue_4 = module_0.Queue()
    var_0 = queue_4.size()
    assert var_0 == 0
    queue_5 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_5.size()
    assert var_1 == 0
    queue_6 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    var_3 = queue_7.size()
    assert var_3 == 11
    none_type_1 = None
    node_2 = module_0.Node(none_type_1, prev=none_type_1)
    queue_8 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue(queue_9)
    var_5 = queue_8.peek()
    var_6 = queue_10.size()
    assert var_6 == 1
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_11 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_12 = module_0.Queue()
    var_7 = queue_12.peek()
    node_4 = module_0.Node()
    var_8 = node_4.__repr__()
    assert var_8 == 'Value: None'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_9 = var_8.__repr__()
    assert var_9 == "'Value: None'"
    node_5 = module_0.Node()
    var_10 = node_5.__repr__()
    assert var_10 == 'Value: None'
    queue_13 = module_0.Queue(node_5)
    var_11 = queue_13.enqueue(var_10)
    queue_14 = module_0.Queue()

def test_case_2221():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_0.push(queue_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.push(queue_0)

def test_case_2222():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_1 = queue_0.enqueue(var_0)
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_3 = module_0.Node()
    var_2 = queue_4.size()
    assert var_2 == 0
    queue_6 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_3 = queue_6.peek()
    node_5 = module_0.Node()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_4 = double_linked_list_4.append(set_3)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_5 = node_6.__repr__()
    assert var_5 == 'Value: None'
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    queue_10 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_11 = module_0.Queue()
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    queue_12 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_13 = module_0.Queue()
    var_6 = queue_13.peek()
    queue_14 = module_0.Queue()
    set_6 = set()
    node_9 = module_0.Node(prev=set_6)
    queue_15 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    set_7 = set()
    node_10 = module_0.Node(prev=set_7)
    var_7 = double_linked_list_7.append(node_10)
    assert f'{type(double_linked_list_7.head).__module__}.{type(double_linked_list_7.head).__qualname__}' == 'queue4.Node'
    double_linked_list_8 = module_0.DoubleLinkedList()
    assert double_linked_list_8.head is None
    assert double_linked_list_8.tail is None

def test_case_2223():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_0 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    none_type_0 = None
    node_1 = module_0.Node(prev=none_type_0)
    var_1 = double_linked_list_0.append(none_type_0)
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_3 = double_linked_list_2.push(queue_5)
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    var_4 = double_linked_list_2.push(queue_5)
    queue_8 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    var_5 = double_linked_list_4.append(node_5)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue(node_4)
    queue_11 = module_0.Queue()
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    var_6 = queue_11.peek()
    node_7 = module_0.Node()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_7 = double_linked_list_5.push(var_6)
    assert f'{type(double_linked_list_5.tail).__module__}.{type(double_linked_list_5.tail).__qualname__}' == 'queue4.Node'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_0)
    queue_13 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_8 = queue_13.size()
    assert var_8 == 0
    queue_14 = module_0.Queue()
    var_9 = queue_13.size()
    assert var_9 == 0

def test_case_2224():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_4.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    double_linked_list_3 = module_0.DoubleLinkedList(var_1)
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_6 = module_0.Queue()
    var_2 = queue_6.enqueue(none_type_0)
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_7 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_8 = module_0.Queue()
    var_3 = queue_8.peek()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_11 = module_0.Queue(bytes_1)
    queue_12 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_4 = queue_12.size()
    assert var_4 == 0
    queue_13 = module_0.Queue()
    var_5 = queue_12.size()
    assert var_5 == 0
    queue_14 = module_0.Queue()
    str_0 = "d^_Z'j<ceXum|X7"
    node_5 = module_0.Node(str_0)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_15 = module_0.Queue(bytes_2)
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_16 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_17 = module_0.Queue()
    queue_18 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    var_6 = double_linked_list_7.append(set_5)
    assert f'{type(double_linked_list_7.head).__module__}.{type(double_linked_list_7.head).__qualname__}' == 'queue4.Node'
    var_7 = double_linked_list_7.push(set_5)

def test_case_2225():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    var_1 = var_0.__repr__()
    node_1 = module_0.Node()
    var_2 = node_1.__repr__()
    assert var_2 == 'Value: None'
    queue_1 = module_0.Queue(node_1)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)

def test_case_2226():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_1.size()
    assert var_0 == 0
    complex_0 = 2886.801252 + 1418.99508j
    queue_3 = module_0.Queue(complex_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    var_1 = queue_3.size()
    assert var_1 == 1
    var_2 = var_1.__repr__()
    assert var_2 == '1'
    node_1 = module_0.Node()
    var_3 = node_1.__repr__()
    assert var_3 == 'Value: None'
    queue_4 = module_0.Queue()
    complex_1 = 2886.801252 + 1418.99508j
    queue_5 = module_0.Queue(complex_1)
    var_4 = queue_5.size()
    assert var_4 == 1
    var_5 = var_4.__repr__()
    assert var_5 == '1'
    bool_0 = True
    double_linked_list_2 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_6 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    queue_8 = module_0.Queue(queue_6)
    var_7 = double_linked_list_2.append(node_2)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    queue_10 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_8 = queue_10.peek()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)

def test_case_2227():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    var_2 = queue_2.size()
    assert var_2 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_1.push(queue_3)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
    queue_6 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue(queue_7)
    var_5 = queue_6.peek()
    var_6 = queue_8.size()
    assert var_6 == 1
    var_7 = queue_8.dequeue()
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'queue4.Queue'
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    var_8 = node_1.__repr__()
    assert var_8 == 'Value: None'
    queue_10 = module_0.Queue(double_linked_list_4)
    var_9 = var_8.__repr__()
    assert var_9 == "'Value: None'"
    with pytest.raises(ValueError):
        double_linked_list_2.remove(var_5)

def test_case_2228():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    var_1 = queue_1.enqueue(queue_0)
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    var_3 = queue_4.peek()
    queue_5 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_4 = queue_5.size()
    assert var_4 == 0
    queue_6 = module_0.Queue()
    none_type_0 = None
    var_5 = queue_6.enqueue(none_type_0)
    var_6 = var_4.__repr__()
    assert var_6 == '0'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    var_7 = queue_7.dequeue()
    assert var_7 == 77
    none_type_1 = None
    node_5 = module_0.Node(prev=none_type_1)
    queue_8 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_1)
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_8 = double_linked_list_3.append(bytes_1)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_10 = module_0.Queue(queue_9)
    var_9 = queue_8.peek()
    queue_11 = module_0.Queue()
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_2)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_10 = double_linked_list_4.append(bytes_2)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    node_6 = module_0.Node()
    none_type_2 = None
    queue_13 = module_0.Queue(none_type_2)
    queue_14 = module_0.Queue()
    with pytest.raises(ValueError):
        double_linked_list_0.remove(set_0)

def test_case_2229():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    var_1 = queue_1.dequeue()
    assert var_1 == 77
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_0 = None
    queue_6 = module_0.Queue(none_type_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    complex_0 = 2886.801252 + 1418.99508j
    queue_7 = module_0.Queue(complex_0)
    var_2 = queue_7.size()
    assert var_2 == 1
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = queue_7.peek()
    assert var_3 == 2886.801252 + 1418.99508j
    queue_8 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_4 = double_linked_list_2.append(node_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'

def test_case_2230():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_1 = queue_1.enqueue(set_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_3.size()
    assert var_3 == 0
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_5.size()
    assert var_4 == 0
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_5 = queue_5.size()
    assert var_5 == 0

def test_case_2231():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_1 = module_0.Queue(queue_0)
    queue_2 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_1 = queue_2.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = queue_2.size()
    assert var_2 == 0
    complex_0 = 2886.801252 + 1418.99508j
    queue_4 = module_0.Queue(complex_0)
    var_3 = queue_4.size()
    assert var_3 == 1
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = queue_4.peek()
    assert var_4 == 2886.801252 + 1418.99508j
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_2 = module_0.Node()
    var_5 = queue_6.size()
    assert var_5 == 0
    var_6 = node_1.__repr__()
    assert var_6 == 'Value: None'
    queue_8 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_7 = queue_8.peek()
    node_4 = module_0.Node()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_8 = var_7.__repr__()
    complex_1 = 2886.801252 + 1418.99508j
    queue_11 = module_0.Queue(complex_1)
    var_9 = queue_11.size()
    assert var_9 == 1
    var_10 = var_9.__repr__()
    assert var_10 == '1'

def test_case_2232():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_1 = queue_0.enqueue(var_0)

def test_case_2233():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = queue_0.size()
    assert var_1 == 0
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_2 = queue_3.peek()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    queue_4 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_3 = double_linked_list_1.append(node_5)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_4 = queue_4.enqueue(var_3)
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_5 = node_6.__repr__()
    assert var_5 == 'Value: None'
    queue_7 = module_0.Queue(double_linked_list_2)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    var_6 = var_5.__repr__()
    assert var_6 == "'Value: None'"
    queue_8 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_7 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    queue_10 = module_0.Queue(queue_8)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_8 = queue_8.size()
    assert var_8 == 0
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_13 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_14 = module_0.Queue()
    queue_15 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_9 = queue_15.size()
    assert var_9 == 0
    node_9 = module_0.Node()
    queue_16 = module_0.Queue()
    set_7 = set()
    node_10 = module_0.Node(prev=set_7)
    var_10 = queue_16.peek()
    node_11 = module_0.Node()
    node_12 = module_0.Node(set_7)

def test_case_2234():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == 77
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue(queue_2)
    var_2 = queue_1.peek()
    var_3 = queue_3.size()
    assert var_3 == 1
    none_type_0 = None
    queue_4 = module_0.Queue(none_type_0)
    complex_0 = 2886.801252 + 1418.99508j
    queue_5 = module_0.Queue(complex_0)
    var_4 = queue_5.size()
    assert var_4 == 1
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_5 = queue_5.peek()
    assert var_5 == 2886.801252 + 1418.99508j
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_6 = node_0.__repr__()
    assert var_6 == 'Value: None'
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    none_type_1 = None
    queue_10 = module_0.Queue(none_type_1)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_11 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    bytes_2 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_14 = module_0.Queue(bytes_2)

def test_case_2235():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    var_1 = queue_2.dequeue()
    assert var_1 == 77
    queue_3 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    queue_5 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_2 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    queue_7 = module_0.Queue(queue_5)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_3 = queue_7.size()
    assert var_3 == 1
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_10 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_4 = node_4.__repr__()
    assert var_4 == 'Value: None'
    queue_11 = module_0.Queue(double_linked_list_1)
    var_5 = var_4.__repr__()
    assert var_5 == "'Value: None'"
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_12 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_13 = module_0.Queue()
    var_6 = node_5.__repr__()
    assert var_6 == 'Value: None'
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    queue_14 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_15 = module_0.Queue()
    queue_16 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_7 = queue_15.size()
    assert var_7 == 0

def test_case_2236():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    float_0 = -3043.800134
    str_0 = 'O,S|'
    str_1 = 'm'
    bool_0 = False
    tuple_0 = (float_0, str_0, str_1, bool_0)
    double_linked_list_2 = module_0.DoubleLinkedList(tuple_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_1 = double_linked_list_4.append(set_0)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_2 = double_linked_list_4.push(set_0)
    with pytest.raises(IndexError):
        double_linked_list_3.shift()

def test_case_2237():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_2.size()
    assert var_0 == 0
    queue_3 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_1 = module_0.Node()
    none_type_0 = None
    queue_5 = module_0.Queue(none_type_0)
    queue_6 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    var_2 = queue_7.dequeue()
    assert var_2 == 77
    queue_8 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_9 = module_0.Queue(complex_0)
    var_3 = queue_9.size()
    assert var_3 == 1
    var_4 = var_3.__repr__()
    assert var_4 == '1'
    queue_10 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_5 = queue_10.size()
    assert var_5 == 0
    queue_11 = module_0.Queue()
    var_6 = node_2.__repr__()
    assert var_6 == 'Value: None'
    node_3 = module_0.Node()
    var_7 = node_3.__repr__()
    assert var_7 == 'Value: None'
    queue_12 = module_0.Queue(node_3)

def test_case_2238():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    node_1 = module_0.Node()
    var_0 = queue_1.size()
    assert var_0 == 0
    var_1 = queue_0.size()
    assert var_1 == 0

def test_case_2239():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_2240():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.size()
    assert var_2 == 0
    complex_0 = 2886.801252 + 1418.99508j
    queue_2 = module_0.Queue(complex_0)
    assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
    var_3 = queue_2.size()
    assert var_3 == 1
    var_4 = var_3.__repr__()
    assert var_4 == '1'
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_5 = queue_3.size()
    assert var_5 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_6 = queue_4.peek()
    queue_6 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_7 = queue_6.peek()
    node_5 = module_0.Node()
    node_6 = module_0.Node(set_4)
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    queue_7 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_8 = queue_9.size()
    assert var_8 == 0
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    queue_13 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_9 = module_0.Node()
    var_9 = queue_12.size()
    assert var_9 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_0)
    queue_15 = module_0.Queue()
    set_7 = set()
    node_10 = module_0.Node(prev=set_7)
    var_10 = queue_15.size()
    assert var_10 == 0
    queue_16 = module_0.Queue()
    var_11 = queue_15.size()
    assert var_11 == 0
    node_11 = module_0.Node(next_node=var_10)
    assert node_11.next == 0
    set_8 = set()
    node_12 = module_0.Node(prev=set_8)
    queue_17 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_18 = module_0.Queue()
    queue_19 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_12 = double_linked_list_4.append(set_8)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_13 = node_12.__repr__()
    assert var_13 == 'Value: None'
    set_9 = set()
    node_13 = module_0.Node(prev=set_9)
    queue_20 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_14 = queue_20.size()
    assert var_14 == 0
    set_10 = set()
    node_14 = module_0.Node(prev=set_10)

def test_case_2241():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_3.size()
    assert var_2 == 0
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    complex_0 = 2886.801252 + 1418.99508j
    queue_6 = module_0.Queue(complex_0)
    assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
    var_3 = queue_6.size()
    assert var_3 == 1
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue(queue_7)
    complex_1 = 2886.801252 + 1418.99508j
    queue_9 = module_0.Queue(complex_1)
    var_5 = queue_9.size()
    assert var_5 == 1
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    none_type_0 = None
    queue_10 = module_0.Queue()
    var_6 = queue_10.enqueue(none_type_0)
    complex_2 = 2886.801252 + 1418.99508j
    queue_11 = module_0.Queue(complex_2)
    var_7 = queue_11.size()
    assert var_7 == 1
    var_8 = var_7.__repr__()
    assert var_8 == '1'
    queue_12 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_9 = queue_12.peek()
    queue_13 = module_0.Queue()

def test_case_2242():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    var_1 = queue_1.dequeue()
    assert var_1 == 77
    queue_2 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_2 = queue_2.peek()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = queue_4.peek()
    node_3 = module_0.Node()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_4 = double_linked_list_0.push(var_3)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    dict_0 = {}
    node_4 = module_0.Node(var_3, dict_0)
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_5 = queue_7.size()
    assert var_5 == 0
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_3 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'

def test_case_2243():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_0 = module_0.Queue(node_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_1 = queue_0.enqueue(var_0)
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_0.push(queue_1)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_3 = double_linked_list_2.append(bytes_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    node_3 = module_0.Node()
    var_4 = node_3.__repr__()
    assert var_4 == 'Value: None'
    node_4 = module_0.Node()
    queue_5 = module_0.Queue()
    set_1 = set()
    node_5 = module_0.Node(prev=set_1)
    queue_6 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_2 = set()
    node_6 = module_0.Node(prev=set_2)
    var_5 = double_linked_list_3.append(node_6)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    queue_7 = module_0.Queue(node_5)
    queue_8 = module_0.Queue()
    set_3 = set()
    node_7 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    var_6 = double_linked_list_4.append(node_8)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_7 = double_linked_list_4.shift()
    assert double_linked_list_4.tail is None
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'queue4.Node'
    assert var_7.data is None
    assert var_7.next is None
    assert var_7.prev == {*()}
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    set_5 = set()
    node_9 = module_0.Node(prev=set_5)
    var_8 = queue_12.peek()
    node_10 = module_0.Node()
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_9 = var_8.__repr__()
    queue_15 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_16 = module_0.Queue(bytes_1)
    queue_17 = module_0.Queue()
    set_6 = set()
    node_11 = module_0.Node(prev=set_6)
    var_10 = queue_17.size()
    assert var_10 == 0
    queue_18 = module_0.Queue()
    var_11 = queue_17.size()
    assert var_11 == 0
    queue_19 = module_0.Queue()
    set_7 = set()
    node_12 = module_0.Node(prev=set_7)
    queue_20 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    node_13 = module_0.Node()
    var_12 = queue_20.size()
    assert var_12 == 0
    var_13 = node_12.__repr__()
    assert var_13 == 'Value: None'

def test_case_2244():
    bytes_0 = b"\x0f\xb7)'\x9b\x0e^9B"
    node_0 = module_0.Node(next_node=bytes_0)
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    var_0 = node_1.__repr__()
    assert var_0 == 'Value: None'
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_1 = double_linked_list_2.append(set_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    var_3 = queue_5.dequeue()
    assert var_3 == 77
    queue_6 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    node_4 = module_0.Node()
    complex_0 = 2886.801252 + 1418.99508j
    queue_8 = module_0.Queue(complex_0)
    var_4 = queue_8.size()
    assert var_4 == 1
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_9 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    var_5 = queue_9.size()
    assert var_5 == 0
    queue_10 = module_0.Queue()
    var_6 = queue_10.size()
    assert var_6 == 0
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_4 = set()
    node_6 = module_0.Node(prev=set_4)
    queue_11 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    queue_12 = module_0.Queue()
    queue_13 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    var_7 = queue_13.size()
    assert var_7 == 0
    queue_14 = module_0.Queue()
    node_7 = module_0.Node()
    var_8 = node_7.__repr__()
    assert var_8 == 'Value: None'
    queue_15 = module_0.Queue(node_7)
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_16 = module_0.Queue(bytes_2)
    var_9 = queue_16.dequeue()
    assert var_9 == 77
    queue_17 = module_0.Queue()
    none_type_0 = None
    node_8 = module_0.Node(prev=none_type_0)
    with pytest.raises(IndexError):
        double_linked_list_5.pop()

def test_case_2245():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_0.push(queue_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    complex_0 = 2886.801252 + 1418.99508j
    queue_3 = module_0.Queue(complex_0)
    var_1 = queue_3.size()
    assert var_1 == 1
    var_2 = var_1.__repr__()
    assert var_2 == '1'
    node_1 = module_0.Node()
    var_3 = node_1.__repr__()
    assert var_3 == 'Value: None'
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None

def test_case_2246():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == 'Value: None'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = double_linked_list_1.append(bytes_1)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_3 = double_linked_list_1.append(queue_1)
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_4 = node_2.__repr__()
    assert var_4 == 'Value: None'
    queue_3 = module_0.Queue(double_linked_list_2)
    var_5 = var_4.__repr__()
    assert var_5 == "'Value: None'"
    queue_4 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_6 = queue_4.peek()
    node_4 = module_0.Node()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_7 = double_linked_list_3.push(var_6)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    dict_0 = {}
    node_5 = module_0.Node(var_6, dict_0)
    with pytest.raises(ValueError):
        double_linked_list_2.remove(queue_3)

def test_case_2247():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.peek()
    assert var_2 == 77
    queue_3 = module_0.Queue()
    var_3 = queue_3.size()
    assert var_3 == 0
    complex_0 = 2886.801252 + 1418.99508j
    queue_4 = module_0.Queue(complex_0)
    var_4 = queue_4.size()
    assert var_4 == 1
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_5 = var_4.__repr__()
    assert var_5 == '1'

def test_case_2248():
    node_0 = module_0.Node()
    int_0 = -3616
    queue_0 = module_0.Queue(int_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == -3616
    var_1 = queue_0.enqueue(queue_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    var_2 = queue_1.dequeue()
    assert var_2 == 77
    queue_2 = module_0.Queue()
    str_0 = 'hM\rEDND'

def test_case_2249():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == 77
    var_1 = queue_0.peek()
    assert var_1 == 249
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_2 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_3 = node_0.__repr__()
    assert var_3 == 'Value: None'
    node_1 = module_0.Node()

def test_case_2250():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = queue_0.peek()
    assert var_1 == 2886.801252 + 1418.99508j
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_2 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_0 = None
    queue_6 = module_0.Queue(none_type_0)
    complex_1 = 2886.801252 + 1418.99508j
    queue_7 = module_0.Queue(complex_1)
    var_2 = queue_7.size()
    assert var_2 == 1
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_8 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_8.size()
    assert var_3 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_0)
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_4 = double_linked_list_4.append(bytes_0)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    var_5 = double_linked_list_4.append(queue_9)
    str_0 = "d^_Z'j<ceXum|X7"
    node_2 = module_0.Node(str_0)
    queue_10 = module_0.Queue()
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_6 = queue_10.size()
    assert var_6 == 0
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_7 = queue_12.peek()
    queue_13 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_14 = module_0.Queue(bytes_1)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_8 = double_linked_list_5.append(bytes_1)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    queue_15 = module_0.Queue(queue_14)
    var_9 = queue_13.peek()
    var_10 = queue_15.size()
    assert var_10 == 1
    queue_16 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_11 = queue_16.size()
    assert var_11 == 0
    queue_17 = module_0.Queue()
    none_type_1 = None
    var_12 = queue_17.enqueue(none_type_1)

def test_case_2251():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_2 = module_0.Queue()
    var_1 = queue_2.peek()
    bytes_1 = b"\x0f\xb7)'\x9b\x0e^9B"
    node_1 = module_0.Node(next_node=bytes_1)
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_3 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    queue_4 = module_0.Queue(double_linked_list_4)

def test_case_2252():
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    node_1 = module_0.Node()
    var_2 = queue_0.dequeue()
    assert var_2 == 77
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = node_2.__repr__()
    assert var_3 == 'Value: None'
    queue_2 = module_0.Queue(double_linked_list_1)
    var_4 = var_3.__repr__()
    assert var_4 == "'Value: None'"
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_1)
    queue_4 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_5 = queue_4.size()
    assert var_5 == 0
    queue_5 = module_0.Queue()
    var_6 = queue_4.size()
    assert var_6 == 0
    node_4 = module_0.Node(next_node=var_5)
    assert node_4.next == 0
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_2)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_7 = double_linked_list_2.append(bytes_2)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    queue_7 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_8 = module_0.Queue()
    var_8 = queue_8.peek()

def test_case_2253():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    var_1 = var_0.__repr__()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    bytes_0 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    node_3 = module_0.Node()
    var_2 = node_3.__repr__()
    assert var_2 == 'Value: None'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = var_2.__repr__()
    assert var_3 == "'Value: None'"
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_2 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_2.tail).__module__}.{type(double_linked_list_2.tail).__qualname__}' == 'queue4.Node'
    none_type_0 = None
    node_4 = module_0.Node(prev=none_type_0)
    var_4 = double_linked_list_2.append(none_type_0)
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_5 = double_linked_list_3.push(queue_8)
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'

def test_case_2254():
    bool_0 = True
    double_linked_list_0 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_0 = module_0.Queue()
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    queue_2 = module_0.Queue(queue_0)
    var_1 = double_linked_list_0.append(node_0)
    var_2 = queue_1.dequeue()
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'queue4.Queue'

def test_case_2255():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    var_2 = queue_0.size()
    assert var_2 == 0
    queue_2 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_2.size()
    assert var_3 == 0
    queue_3 = module_0.Queue()
    var_4 = node_2.__repr__()
    assert var_4 == 'Value: None'
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_4 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_5 = double_linked_list_1.append(set_3)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_6 = node_3.__repr__()
    assert var_6 == 'Value: None'
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_7 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_7 = queue_9.size()
    assert var_7 == 0
    node_5 = module_0.Node()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_0)
    assert f'{type(queue_10).__module__}.{type(queue_10).__qualname__}' == 'queue4.Queue'
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    var_8 = double_linked_list_4.append(bytes_0)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    complex_0 = -1161.9557 + 1889.1364j
    queue_11 = module_0.Queue(complex_0)
    var_9 = queue_11.size()
    assert var_9 == 1
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_10 = double_linked_list_5.append(bytes_1)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    node_6 = module_0.Node()
    var_11 = queue_12.size()
    assert var_11 == 11
    queue_13 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_12 = queue_13.size()
    assert var_12 == 0
    queue_14 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_13 = queue_13.size()
    assert var_13 == 0

def test_case_2256():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_2.peek()
    queue_3 = module_0.Queue(queue_2)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_4.peek()
    node_3 = module_0.Node()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_3 = double_linked_list_0.push(var_2)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    dict_0 = {}
    node_4 = module_0.Node(var_2, dict_0)
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_6 = module_0.Node()
    var_4 = queue_5.size()
    assert var_4 == 0
    complex_0 = -1161.9557 + 1889.1364j
    queue_6 = module_0.Queue(complex_0)
    var_5 = queue_6.size()
    assert var_5 == 1
    queue_7 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_6 = queue_7.peek()
    node_8 = module_0.Node()
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_7 = var_6.__repr__()
    queue_10 = module_0.Queue()

def test_case_2257():
    bytes_0 = b"\x0f\xb7)'\x9b\x0e^9B"
    node_0 = module_0.Node(next_node=bytes_0)
    node_1 = module_0.Node()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_1)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_2 = module_0.Node(prev=set_0)
    var_0 = queue_1.size()
    assert var_0 == 0
    queue_2 = module_0.Queue()
    var_1 = queue_1.size()
    assert var_1 == 0
    node_3 = module_0.Node(next_node=var_0)
    assert node_3.next == 0
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    bytes_2 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_6 = module_0.Queue(bytes_2)
    queue_7 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_2 = queue_7.peek()
    queue_8 = module_0.Queue(queue_7)
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_3 = var_2.__repr__()
    bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_9 = module_0.Queue(bytes_3)
    var_4 = queue_9.dequeue()
    assert var_4 == 77
    queue_10 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    queue_11 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_12 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_5 = set()
    node_8 = module_0.Node(prev=set_5)
    none_type_0 = None
    queue_13 = module_0.Queue()
    var_5 = queue_13.enqueue(none_type_0)
    var_6 = var_5.__repr__()
    none_type_1 = None
    node_9 = module_0.Node(none_type_1, prev=none_type_1)
    list_0 = [set_0]

def test_case_2258():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.size()
    assert var_1 == 0
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_2 = queue_1.size()
    assert var_2 == 0
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_3 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_4 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_3 = queue_4.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    double_linked_list_4 = module_0.DoubleLinkedList(var_3)
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    queue_6 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_4 = queue_6.peek()
    queue_7 = module_0.Queue(queue_6)
    queue_8 = module_0.Queue(queue_6)
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    var_5 = queue_8.size()
    assert var_5 == 1

def test_case_2259():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = double_linked_list_0.push(var_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    dict_0 = {}
    node_2 = module_0.Node(var_0, dict_0)
    node_3 = module_0.Node()
    var_2 = node_3.__repr__()
    assert var_2 == 'Value: None'
    queue_1 = module_0.Queue(node_3)
    var_3 = queue_1.enqueue(var_2)
    queue_2 = module_0.Queue()
    set_1 = set()
    node_4 = module_0.Node(prev=set_1)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    var_4 = queue_4.peek()
    queue_5 = module_0.Queue()
    set_2 = set()
    node_5 = module_0.Node(prev=set_2)
    var_5 = queue_5.peek()
    queue_6 = module_0.Queue(queue_5)
    queue_7 = module_0.Queue(queue_5)
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    var_6 = queue_7.size()
    assert var_6 == 1
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_10 = module_0.Queue(bytes_0)
    queue_11 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    var_7 = queue_11.size()
    assert var_7 == 0
    queue_12 = module_0.Queue()
    var_8 = queue_11.size()
    assert var_8 == 0
    var_9 = queue_10.peek()
    assert var_9 == 77
    none_type_0 = None
    node_7 = module_0.Node(prev=none_type_0)
    complex_0 = 2886.801252 + 1418.99508j
    queue_13 = module_0.Queue(complex_0)
    var_10 = queue_13.size()
    assert var_10 == 1
    set_4 = set()
    node_8 = module_0.Node(prev=set_4)
    none_type_1 = None
    queue_14 = module_0.Queue()
    var_11 = queue_14.enqueue(none_type_1)
    var_12 = queue_13.enqueue(set_4)

def test_case_2260():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_1.append(set_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_3.peek()
    node_2 = module_0.Node()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    var_3 = var_2.__repr__()

def test_case_2261():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_1.peek()
    node_2 = module_0.Node()
    var_2 = node_2.__repr__()
    assert var_2 == 'Value: None'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_3 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    var_4 = queue_2.peek()
    var_5 = queue_4.size()
    assert var_5 == 1
    var_6 = queue_4.dequeue()
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'queue4.Queue'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_1)
    double_linked_list_2 = module_0.DoubleLinkedList()
    var_7 = double_linked_list_2.append(bytes_1)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    double_linked_list_3 = module_0.DoubleLinkedList()

def test_case_2262():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_0 = module_0.Queue(bytes_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == 77
    queue_1 = module_0.Queue()
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()

def test_case_2263():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = queue_0.size()
    assert var_1 == 0
    var_2 = queue_1.peek()
    queue_2 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_3 = queue_2.peek()
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_4 = queue_4.size()
    assert var_4 == 0
    queue_5 = module_0.Queue()
    var_5 = queue_5.peek()
    queue_6 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_6 = queue_6.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_0)
    assert f'{type(queue_7).__module__}.{type(queue_7).__qualname__}' == 'queue4.Queue'
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList(var_6)
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    bool_0 = True
    double_linked_list_3 = module_0.DoubleLinkedList(bool_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_7 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    queue_10 = module_0.Queue(queue_8)
    var_8 = double_linked_list_3.append(node_4)
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_11 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_12 = module_0.Queue()
    var_9 = node_5.__repr__()
    assert var_9 == 'Value: None'
    queue_13 = module_0.Queue()
    set_6 = set()
    node_6 = module_0.Node(prev=set_6)
    queue_14 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    set_7 = set()
    node_7 = module_0.Node(prev=set_7)
    var_10 = double_linked_list_5.append(node_7)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_11 = queue_14.enqueue(queue_13)

def test_case_2264():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_1 = queue_1.enqueue(set_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_0)
    queue_3 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_3.peek()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None

def test_case_2265():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    bytes_0 = b'=\xf0\xbcA\x04KK\xd9\xbc'
    queue_3 = module_0.Queue(bytes_0)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_1)
    queue_5 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = queue_5.size()
    assert var_0 == 0
    queue_6 = module_0.Queue()
    var_1 = queue_5.size()
    assert var_1 == 0
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = queue_8.peek()
    queue_9 = module_0.Queue(queue_8)
    queue_10 = module_0.Queue(queue_8)
    queue_11 = module_0.Queue()
    queue_12 = module_0.Queue()
    var_3 = queue_10.size()
    assert var_3 == 1
    bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_2)
    queue_14 = module_0.Queue()
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = queue_14.size()
    assert var_4 == 0
    queue_15 = module_0.Queue()
    var_5 = queue_14.size()
    assert var_5 == 0
    var_6 = var_5.__repr__()
    assert var_6 == '0'
    queue_16 = module_0.Queue()
    queue_17 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    queue_18 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    node_5 = module_0.Node()
    var_7 = queue_17.size()
    assert var_7 == 0
    var_8 = node_4.__repr__()
    assert var_8 == 'Value: None'
    set_5 = set()
    node_6 = module_0.Node(prev=set_5)
    none_type_0 = None
    queue_19 = module_0.Queue()
    var_9 = queue_19.enqueue(none_type_0)

def test_case_2266():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.size()
    assert var_0 == 0

def test_case_2267():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_0.push(queue_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    var_1 = double_linked_list_0.push(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    queue_5 = module_0.Queue()
    none_type_0 = None
    queue_6 = module_0.Queue(none_type_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    queue_7 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_2 = queue_7.size()
    assert var_2 == 0
    queue_8 = module_0.Queue()
    var_3 = queue_8.size()
    assert var_3 == 0
    queue_9 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    queue_10 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    var_4 = double_linked_list_3.append(node_3)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    with pytest.raises(ValueError):
        double_linked_list_0.remove(var_3)

def test_case_2268():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_0 = double_linked_list_0.append(node_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    node_2 = module_0.Node()

def test_case_2269():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_1 = module_0.Queue()
    var_1 = queue_1.enqueue(none_type_0)
    var_2 = queue_0.enqueue(set_0)
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_2 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_4 = module_0.Queue()
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_3 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    bool_0 = True
    with pytest.raises(ValueError):
        double_linked_list_1.remove(bool_0)

def test_case_2270():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = queue_1.size()
    assert var_0 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    queue_3 = module_0.Queue()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    var_1 = double_linked_list_2.append(node_3)
    assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
    var_2 = queue_3.enqueue(var_1)
    queue_5 = module_0.Queue()
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    var_3 = queue_5.size()
    assert var_3 == 0
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_8 = module_0.Queue(bytes_0)
    assert f'{type(queue_8).__module__}.{type(queue_8).__qualname__}' == 'queue4.Queue'
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    var_4 = double_linked_list_3.append(bytes_0)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    node_5 = module_0.Node()
    none_type_1 = None
    queue_9 = module_0.Queue(none_type_1)
    queue_10 = module_0.Queue()
    complex_0 = 1851.002 - 2261.566174j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    double_linked_list_4 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_4.tail).__module__}.{type(double_linked_list_4.tail).__qualname__}' == 'queue4.Node'
    none_type_2 = None
    node_6 = module_0.Node(prev=none_type_2)
    var_5 = double_linked_list_4.append(none_type_2)
    complex_1 = 2886.801252 + 1418.99508j
    queue_11 = module_0.Queue(complex_1)
    var_6 = queue_11.size()
    assert var_6 == 1
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_7 = var_6.__repr__()
    assert var_7 == '1'
    with pytest.raises(IndexError):
        double_linked_list_0.pop()

def test_case_2271():
    int_0 = -3616
    queue_0 = module_0.Queue(int_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.dequeue()
    assert var_0 == -3616
    bytes_0 = b"\x0f\xb7)'\x9b\x0e^9B"
    node_0 = module_0.Node(next_node=bytes_0)
    queue_1 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_2 = module_0.Queue(bytes_1)
    double_linked_list_0 = module_0.DoubleLinkedList()
    var_1 = double_linked_list_0.append(bytes_1)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue(queue_2)
    var_2 = queue_1.peek()
    var_3 = queue_3.size()
    assert var_3 == 1
    queue_4 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    var_4 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    queue_6 = module_0.Queue(queue_4)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    var_5 = queue_4.size()
    assert var_5 == 0

def test_case_2272():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()

def test_case_2273():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(var_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    complex_0 = -1161.9557 + 1889.1364j
    queue_2 = module_0.Queue(complex_0)
    var_1 = queue_2.size()
    assert var_1 == 1
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    queue_4 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_2 = set()
    node_2 = module_0.Node(prev=set_2)
    var_2 = double_linked_list_3.append(node_2)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_3 = queue_3.enqueue(var_2)
    set_3 = set()
    node_3 = module_0.Node(prev=set_3)
    queue_5 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    queue_6 = module_0.Queue()
    queue_7 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_4 = double_linked_list_4.push(queue_5)
    assert f'{type(double_linked_list_4.tail).__module__}.{type(double_linked_list_4.tail).__qualname__}' == 'queue4.Node'
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    none_type_0 = None
    queue_11 = module_0.Queue(none_type_0)
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_12 = module_0.Queue(bytes_1)
    queue_13 = module_0.Queue()
    set_4 = set()
    node_4 = module_0.Node(prev=set_4)
    var_5 = queue_13.size()
    assert var_5 == 0
    queue_14 = module_0.Queue()
    var_6 = queue_13.size()
    assert var_6 == 0
    var_7 = var_6.__repr__()
    assert var_7 == '0'
    set_5 = set()
    node_5 = module_0.Node(prev=set_5)
    queue_15 = module_0.Queue()
    double_linked_list_7 = module_0.DoubleLinkedList()
    assert double_linked_list_7.head is None
    assert double_linked_list_7.tail is None
    node_6 = module_0.Node()
    var_8 = queue_15.size()
    assert var_8 == 0
    str_0 = "d^_Z'j<ceXum|X7"
    node_7 = module_0.Node(str_0)
    queue_16 = module_0.Queue()
    set_6 = set()
    node_8 = module_0.Node(prev=set_6)
    var_9 = queue_16.peek()
    queue_17 = module_0.Queue(queue_16)
    queue_18 = module_0.Queue(queue_16)
    queue_19 = module_0.Queue()
    queue_20 = module_0.Queue()
    var_10 = queue_16.size()
    assert var_10 == 0

def test_case_2274():
    complex_0 = 2886.801252 + 1418.99508j
    queue_0 = module_0.Queue(complex_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.size()
    assert var_0 == 1
    var_1 = var_0.__repr__()
    assert var_1 == '1'
    node_0 = module_0.Node()
    var_2 = node_0.__repr__()
    assert var_2 == 'Value: None'
    queue_1 = module_0.Queue()

def test_case_2275():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_0 = double_linked_list_0.push(queue_0)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.peek()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_4 = module_0.Queue(bytes_0)
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    double_linked_list_3 = module_0.DoubleLinkedList(var_1)
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    double_linked_list_4 = module_0.DoubleLinkedList()
    assert double_linked_list_4.head is None
    assert double_linked_list_4.tail is None
    complex_0 = 2886.801252 + 1418.99508j
    queue_5 = module_0.Queue(complex_0)
    var_2 = queue_5.size()
    assert var_2 == 1
    var_3 = var_2.__repr__()
    assert var_3 == '1'
    node_2 = module_0.Node()
    var_4 = node_2.__repr__()
    assert var_4 == 'Value: None'
    queue_6 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_7 = module_0.Queue(bytes_1)
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    var_5 = double_linked_list_5.append(bytes_1)
    assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
    var_6 = double_linked_list_5.append(queue_7)
    str_0 = "d^_Z'j<ceXum|X7"
    node_3 = module_0.Node(str_0)
    queue_8 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_7 = queue_8.size()
    assert var_7 == 0
    queue_9 = module_0.Queue()
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_8 = queue_8.size()
    assert var_8 == 0

def test_case_2276():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_1 = var_0.__repr__()
    assert var_1 == "'Value: None'"
    queue_0 = module_0.Queue()
    var_2 = queue_0.size()
    assert var_2 == 0
    queue_1 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_2 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_3 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_3 = module_0.Queue(node_1)
    assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
    complex_0 = 2886.801252 + 1418.99508j
    queue_4 = module_0.Queue(complex_0)
    var_4 = queue_4.size()
    assert var_4 == 1
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    queue_5 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    complex_1 = 1851.002 - 2261.566174j
    list_0 = [complex_1, complex_1, complex_1, complex_1]
    double_linked_list_4 = module_0.DoubleLinkedList(list_0)
    assert f'{type(double_linked_list_4.head).__module__}.{type(double_linked_list_4.head).__qualname__}' == 'queue4.Node'
    assert f'{type(double_linked_list_4.tail).__module__}.{type(double_linked_list_4.tail).__qualname__}' == 'queue4.Node'
    none_type_0 = None
    node_4 = module_0.Node(prev=none_type_0)
    var_5 = double_linked_list_4.append(none_type_0)
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_6 = module_0.Queue(bytes_0)
    complex_2 = 2886.801252 + 1418.99508j
    queue_7 = module_0.Queue(complex_2)
    var_6 = queue_7.size()
    assert var_6 == 1
    var_7 = var_6.__repr__()
    assert var_7 == '1'
    node_5 = module_0.Node()
    var_8 = node_5.__repr__()
    assert var_8 == 'Value: None'
    queue_8 = module_0.Queue()
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    set_3 = set()
    node_6 = module_0.Node(prev=set_3)
    queue_11 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    assert double_linked_list_5.head is None
    assert double_linked_list_5.tail is None
    node_7 = module_0.Node()
    var_9 = queue_10.size()
    assert var_9 == 0
    var_10 = node_6.__repr__()
    assert var_10 == 'Value: None'
    queue_12 = module_0.Queue()
    bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_13 = module_0.Queue(bytes_1)
    double_linked_list_6 = module_0.DoubleLinkedList()
    assert double_linked_list_6.head is None
    assert double_linked_list_6.tail is None
    var_11 = double_linked_list_6.append(bytes_1)
    assert f'{type(double_linked_list_6.head).__module__}.{type(double_linked_list_6.head).__qualname__}' == 'queue4.Node'
    queue_14 = module_0.Queue(queue_13)
    var_12 = queue_12.peek()

def test_case_2277():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = node_0.__repr__()
    assert var_0 == 'Value: None'
    queue_1 = module_0.Queue(double_linked_list_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue()
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_3 = module_0.Queue(bytes_0)
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_1.append(bytes_0)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(queue_3)
    var_2 = queue_2.peek()
    var_3 = queue_4.size()
    assert var_3 == 1
    int_0 = -566

def test_case_2278():
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    none_type_0 = None
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    var_0 = queue_0.enqueue(none_type_0)
    queue_1 = module_0.Queue()
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    set_1 = set()
    node_1 = module_0.Node(prev=set_1)
    var_1 = queue_3.size()
    assert var_1 == 0
    queue_4 = module_0.Queue()
    var_2 = queue_4.size()
    assert var_2 == 0

def test_case_2279():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    queue_1 = module_0.Queue(queue_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    queue_2 = module_0.Queue(queue_0)
    queue_3 = module_0.Queue()
    queue_4 = module_0.Queue()
    var_1 = queue_0.size()
    assert var_1 == 0
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_5 = module_0.Queue(bytes_0)
    var_2 = queue_5.dequeue()
    assert var_2 == 77
    none_type_0 = None
    node_1 = module_0.Node(prev=none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1, prev=none_type_1)
    complex_0 = -1161.9557 + 1889.1364j
    queue_6 = module_0.Queue(complex_0)
    var_3 = queue_6.size()
    assert var_3 == 1
    queue_7 = module_0.Queue()
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    var_4 = queue_7.size()
    assert var_4 == 0
    queue_8 = module_0.Queue()
    var_5 = node_3.__repr__()
    assert var_5 == 'Value: None'
    queue_9 = module_0.Queue()
    queue_10 = module_0.Queue()
    queue_11 = module_0.Queue()
    none_type_2 = None
    queue_12 = module_0.Queue(none_type_2)
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None

def test_case_2280():
    none_type_0 = None
    queue_0 = module_0.Queue(none_type_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    int_0 = -3616
    queue_1 = module_0.Queue(int_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_0 = queue_1.dequeue()
    assert var_0 == -3616
    var_1 = queue_1.enqueue(queue_1)
    node_0 = module_0.Node()
    var_2 = node_0.__repr__()
    assert var_2 == 'Value: None'
    double_linked_list_0 = module_0.DoubleLinkedList()
    var_3 = var_2.__repr__()
    assert var_3 == "'Value: None'"
    queue_2 = module_0.Queue()
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    set_1 = set()
    node_2 = module_0.Node(prev=set_1)
    var_4 = double_linked_list_1.append(node_2)
    assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue(node_1)
    set_2 = set()
    node_3 = module_0.Node(prev=set_2)
    none_type_1 = None
    queue_5 = module_0.Queue()
    var_5 = queue_5.enqueue(none_type_1)
    set_3 = set()
    node_4 = module_0.Node(prev=set_3)
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    var_6 = double_linked_list_3.append(set_3)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    set_4 = set()
    node_5 = module_0.Node(prev=set_4)
    queue_9 = module_0.Queue()
    double_linked_list_4 = module_0.DoubleLinkedList()
    node_6 = module_0.Node()
    queue_10 = module_0.Queue()
    set_5 = set()
    node_7 = module_0.Node(prev=set_5)
    var_7 = queue_10.size()
    assert var_7 == 0
    queue_11 = module_0.Queue()
    double_linked_list_5 = module_0.DoubleLinkedList()
    var_8 = queue_10.size()
    assert var_8 == 0

def test_case_2281():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    set_0 = set()
    node_0 = module_0.Node(prev=set_0)
    var_0 = queue_0.peek()
    node_1 = module_0.Node()
    node_2 = module_0.Node(set_0)
    set_1 = set()
    node_3 = module_0.Node(prev=set_1)
    queue_1 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    var_1 = double_linked_list_0.push(queue_1)
    assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'queue4.Node'
    queue_4 = module_0.Queue()
    set_2 = set()
    node_4 = module_0.Node(prev=set_2)
    var_2 = queue_4.peek()
    queue_5 = module_0.Queue(queue_4)
    queue_6 = module_0.Queue(queue_4)
    queue_7 = module_0.Queue()
    queue_8 = module_0.Queue()
    set_3 = set()
    node_5 = module_0.Node(prev=set_3)
    queue_9 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    node_6 = module_0.Node()
    var_3 = queue_8.size()
    assert var_3 == 0
    var_4 = node_5.__repr__()
    assert var_4 == 'Value: None'
    queue_10 = module_0.Queue()
    set_4 = set()
    node_7 = module_0.Node(prev=set_4)
    var_5 = queue_10.size()
    assert var_5 == 0
    queue_11 = module_0.Queue()
    none_type_0 = None
    var_6 = queue_11.enqueue(none_type_0)
    str_0 = "d^_Z'j<ceXum|X7"
    node_8 = module_0.Node(str_0)
    queue_12 = module_0.Queue()
    set_5 = set()
    node_9 = module_0.Node(prev=set_5)
    var_7 = queue_12.size()
    assert var_7 == 0
    queue_13 = module_0.Queue()
    queue_14 = module_0.Queue()
    var_8 = queue_14.peek()
    queue_15 = module_0.Queue()
    set_6 = set()
    node_10 = module_0.Node(prev=set_6)
    queue_16 = module_0.Queue()
    double_linked_list_3 = module_0.DoubleLinkedList()
    assert double_linked_list_3.head is None
    assert double_linked_list_3.tail is None
    set_7 = set()
    node_11 = module_0.Node(prev=set_7)
    var_9 = double_linked_list_3.append(node_11)
    assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
    var_10 = double_linked_list_3.shift()
    assert double_linked_list_3.tail is None
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'queue4.Node'
    assert var_10.data is None
    assert var_10.next is None
    assert var_10.prev == {*()}

def test_case_2282():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
    queue_1 = module_0.Queue(bytes_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(bytes_0)
    assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
    queue_2 = module_0.Queue(queue_1)
    var_1 = queue_0.peek()
    var_2 = queue_2.size()
    assert var_2 == 1
    var_3 = queue_2.dequeue()
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'queue4.Queue'
    bytes_1 = b"\x0f\xb7)'\x9b\x0e^9B"
    node_0 = module_0.Node(next_node=bytes_1)

def test_case_2283():
    queue_0 = module_0.Queue()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
    complex_0 = 2886.801252 + 1418.99508j
    queue_1 = module_0.Queue(complex_0)
    assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
    var_0 = queue_1.size()
    assert var_0 == 1
    node_0 = module_0.Node()
    var_1 = node_0.__repr__()
    assert var_1 == 'Value: None'
    queue_2 = module_0.Queue()
    queue_3 = module_0.Queue()
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    set_0 = set()
    node_1 = module_0.Node(prev=set_0)
    queue_4 = module_0.Queue()
    double_linked_list_1 = module_0.DoubleLinkedList()
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None
    queue_5 = module_0.Queue()
    queue_6 = module_0.Queue()
    double_linked_list_2 = module_0.DoubleLinkedList()
    assert double_linked_list_2.head is None
    assert double_linked_list_2.tail is None
    var_2 = double_linked_list_1.push(queue_4)
    assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'queue4.Node'
