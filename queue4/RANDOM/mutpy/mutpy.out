[*] Start mutation process:
   - targets: queue4.py
   - tests: ./RANDOM
[*] 2284 tests passed:
   - test_queue4_RANDOM [3.02828 s]
[*] Start mutants generation and execution:
   - [#   1] ASR queue4: 
--------------------------------------------------------------------------------
   46:         if old_head:
   47:             old_head.prev = self.head
   48:         if not (self.tail):
   49:             self.tail = self.head
-  50:         self._length += 1
+  50:         self._length -= 1
   51:     
   52:     def pop(self):
   53:         '''Remove the val from the head of the list.'''
   54:         to_return = self.head
--------------------------------------------------------------------------------
[6.01672 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_87

def test_case_87():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        queue_1 = module_0.Queue()
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_2 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        queue_3 = module_0.Queue()
        var_0 = queue_3.peek()
        bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_4 = module_0.Queue(bytes_0)
        assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
        queue_5 = module_0.Queue()
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_1 = queue_5.size()
        assert var_1 == 0
        queue_6 = module_0.Queue()
        var_2 = queue_5.size()
        assert var_2 == 0
        var_3 = queue_4.peek()
        assert var_3 == 77
        queue_7 = module_0.Queue()
        queue_8 = module_0.Queue()
        queue_9 = module_0.Queue()
        none_type_0 = None
        queue_10 = module_0.Queue(none_type_0)
        queue_11 = module_0.Queue()
        set_2 = set()
        node_2 = module_0.Node(prev=set_2)
        var_4 = queue_11.peek()
        node_3 = module_0.Node()
        bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_12 = module_0.Queue(bytes_1)
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        var_5 = double_linked_list_1.append(bytes_1)
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
        queue_13 = module_0.Queue()
        set_3 = set()
        node_4 = module_0.Node(prev=set_3)
        var_6 = queue_13.size()
        assert var_6 == 0
        queue_14 = module_0.Queue()
        node_5 = module_0.Node()
        var_7 = node_5.__repr__()
        assert var_7 == 'Value: None'
        queue_15 = module_0.Queue()
        set_4 = set()
        node_6 = module_0.Node(prev=set_4)
        var_8 = queue_15.peek()
        queue_16 = module_0.Queue(queue_15)
        var_9 = queue_4.size()
>       assert var_9 == 11
E       AssertionError

RANDOM/test_queue4_RANDOM.py:3120: AssertionError
   - [#   2] ASR queue4: 
--------------------------------------------------------------------------------
   58:         new_head = self.head.next
   59:         if new_head:
   60:             new_head.prev = None
   61:         self.head = new_head
-  62:         self._length -= 1
+  62:         self._length += 1
   63:         if self._length < 1:
   64:             self.tail = None
   65:         return to_return.data
   66:     
--------------------------------------------------------------------------------
[5.93661 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_20

def test_case_20():
        node_0 = module_0.Node()
        var_0 = node_0.__repr__()
        assert var_0 == 'Value: None'
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_1 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_2 = module_0.Node(prev=set_1)
        var_1 = double_linked_list_0.append(node_2)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        var_2 = double_linked_list_0.pop()
        assert double_linked_list_0.head is None
>       assert double_linked_list_0.tail is None
E       AssertionError

RANDOM/test_queue4_RANDOM.py:428: AssertionError
   - [#   3] ASR queue4: 
--------------------------------------------------------------------------------
   71:         if old_tail:
   72:             old_tail.next = self.tail
   73:         if self._length < 1:
   74:             self.head = self.tail
-  75:         self._length += 1
+  75:         self._length -= 1
   76:     
   77:     def shift(self):
   78:         '''Remove the val from the tail of the list.'''
   79:         to_return = self.tail
--------------------------------------------------------------------------------
[5.64989 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_20

def test_case_20():
        node_0 = module_0.Node()
        var_0 = node_0.__repr__()
        assert var_0 == 'Value: None'
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_1 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_2 = module_0.Node(prev=set_1)
        var_1 = double_linked_list_0.append(node_2)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
>       var_2 = double_linked_list_0.pop()

RANDOM/test_queue4_RANDOM.py:426: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2cfbcfa0>

>   ???
E   IndexError: Cannot pop from an empty list.

queue4:56: IndexError
   - [#   4] ASR queue4: 
--------------------------------------------------------------------------------
   83:         new_tail = self.tail.prev
   84:         if new_tail:
   85:             new_tail.next = None
   86:         self.tail = new_tail
-  87:         self._length -= 1
+  87:         self._length += 1
   88:         if self._length < 1:
   89:             self.tail = None
   90:         return to_return.data
   91:     
--------------------------------------------------------------------------------
[6.71793 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_1253

def test_case_1253():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        queue_1 = module_0.Queue()
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_2 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        node_1 = module_0.Node()
        var_0 = queue_1.size()
        assert var_0 == 0
        queue_3 = module_0.Queue()
        queue_4 = module_0.Queue()
        queue_5 = module_0.Queue()
        none_type_0 = None
        queue_6 = module_0.Queue(none_type_0)
        set_1 = set()
        node_2 = module_0.Node(prev=set_1)
        queue_7 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        node_3 = module_0.Node()
        queue_8 = module_0.Queue()
        queue_9 = module_0.Queue()
        set_2 = set()
        node_4 = module_0.Node(prev=set_2)
        var_1 = queue_9.peek()
        queue_10 = module_0.Queue(queue_9)
        assert f'{type(queue_10).__module__}.{type(queue_10).__qualname__}' == 'queue4.Queue'
        set_3 = set()
        node_5 = module_0.Node(prev=set_3)
        var_2 = var_1.__repr__()
        set_4 = set()
        node_6 = module_0.Node(prev=set_4)
        queue_11 = module_0.Queue()
        double_linked_list_2 = module_0.DoubleLinkedList()
        assert double_linked_list_2.head is None
        assert double_linked_list_2.tail is None
        queue_12 = module_0.Queue()
        var_3 = queue_12.peek()
        queue_13 = module_0.Queue()
        set_5 = set()
        node_7 = module_0.Node(prev=set_5)
        queue_14 = module_0.Queue()
        double_linked_list_3 = module_0.DoubleLinkedList()
        assert double_linked_list_3.head is None
        assert double_linked_list_3.tail is None
        set_6 = set()
        node_8 = module_0.Node(prev=set_6)
        var_4 = double_linked_list_3.append(node_8)
        assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
        var_5 = double_linked_list_3.shift()
        assert double_linked_list_3.tail is None
        assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'queue4.Node'
        assert var_5.data is None
        assert var_5.next is None
        assert var_5.prev == {*()}
>       with pytest.raises(IndexError):
E       Failed: DID NOT RAISE <class 'IndexError'>

RANDOM/test_queue4_RANDOM.py:58218: Failed
   - [#   5] ASR queue4: 
--------------------------------------------------------------------------------
  101:                 elif curr is self.head:
  102:                     (self.head, curr.next.prev) = (curr.next, None)
  103:                 elif curr is self.tail:
  104:                     (self.tail, curr.prev.next) = (curr.prev, None)
- 105:                 self._length -= 1
+ 105:                 self._length += 1
  106:                 return
  107:             curr = curr.next
  108:         
  109:         raise ValueError('{} is not in the list'.format(val))
--------------------------------------------------------------------------------
[2.91121 s] survived
   - [#   6] BCR queue4: 
--------------------------------------------------------------------------------
  115:             try:
  116:                 popped_data = self.pop()
  117:                 l.append(popped_data)
  118:             except IndexError:
- 119:                 break
+ 119:                 continue
  120:         return l
  121: 
  122: 
  123: class Queue(object):
--------------------------------------------------------------------------------
[2.93257 s] survived
   - [#   7] CDI queue4: 
--------------------------------------------------------------------------------
    3: 
    4: class Node(object):
    5:     '''Node class for data storage.'''
    6:     
-   7:     def __init__(self, data=None, next_node=None, prev=None):
-   8:         '''Initialize Node.'''
-   9:         self.data = data
-  10:         self.next = next_node
-  11:         self.prev = prev
-  12:     
+   7:     @classmethod
+   8:     def __init__(self, data=None, next_node=None, prev=None):
+   9:         '''Initialize Node.'''
+  10:         self.data = data
+  11:         self.next = next_node
+  12:         self.prev = prev
   13:     def __repr__(self):
   14:         '''String representation.'''
   15:         return 'Value: {}'.format(self.data)
   16: 
--------------------------------------------------------------------------------
[6.09582 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_20

def test_case_20():
        node_0 = module_0.Node()
        var_0 = node_0.__repr__()
        assert var_0 == 'Value: None'
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_1 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_2 = module_0.Node(prev=set_1)
        var_1 = double_linked_list_0.append(node_2)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        var_2 = double_linked_list_0.pop()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'queue4.Node'
>       assert var_2.data is None
E       AssertionError

RANDOM/test_queue4_RANDOM.py:430: AssertionError
   - [#   8] CDI queue4: 
--------------------------------------------------------------------------------
    9:         self.data = data
   10:         self.next = next_node
   11:         self.prev = prev
   12:     
-  13:     def __repr__(self):
-  14:         '''String representation.'''
-  15:         return 'Value: {}'.format(self.data)
-  16: 
+  13:     @classmethod
+  14:     def __repr__(self):
+  15:         '''String representation.'''
+  16:         return 'Value: {}'.format(self.data)
   17: 
   18: class DoubleLinkedList(object):
   19:     '''Double linked list impplementation.
   20: 
--------------------------------------------------------------------------------
[5.65994 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_8

def test_case_8():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_0 = double_linked_list_0.append(node_1)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        queue_2 = module_0.Queue()
        set_2 = set()
        node_2 = module_0.Node(prev=set_2)
        var_1 = queue_2.peek()
        set_3 = set()
        node_3 = module_0.Node(prev=set_3)
        set_4 = set()
        node_4 = module_0.Node(prev=set_4)
        queue_3 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        queue_4 = module_0.Queue()
        queue_5 = module_0.Queue()
        set_5 = set()
        node_5 = module_0.Node(prev=set_5)
        var_2 = queue_5.size()
        assert var_2 == 0
>       var_3 = node_0.__repr__()

RANDOM/test_queue4_RANDOM.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'queue4.Node'>

>   ???
E   AttributeError: type object 'Node' has no attribute 'data'

queue4:16: AttributeError
   - [#   9] CDI queue4: 
--------------------------------------------------------------------------------
   26:     remove(val) - will remove the first instance of (val) found in the list,
   27:     starting from the head.
   28:     '''
   29:     
-  30:     def __init__(self, data=None):
-  31:         '''Initialize list.'''
-  32:         self.head = None
-  33:         self.tail = None
-  34:         self._length = 0
-  35:         try:
-  36:             for val in data:
-  37:                 self.push(val)
-  38:         except TypeError:
-  39:             if data:
-  40:                 self.push(data)
-  41:     
+  30:     @classmethod
+  31:     def __init__(self, data=None):
+  32:         '''Initialize list.'''
+  33:         self.head = None
+  34:         self.tail = None
+  35:         self._length = 0
+  36:         try:
+  37:             for val in data:
+  38:                 self.push(val)
+  39:         except TypeError:
+  40:             if data:
+  41:                 self.push(data)
   42:     def push(self, val):
   43:         '''Add val to the head of the list.'''
   44:         old_head = self.head
   45:         self.head = Node(val, next_node=old_head)
--------------------------------------------------------------------------------
[5.67808 s] incompetent

TypeError: queue4:41: TypeError: DoubleLinkedList.push() missing 1 required positional argument: 'val'

   - [#  10] CDI queue4: 
--------------------------------------------------------------------------------
   38:         except TypeError:
   39:             if data:
   40:                 self.push(data)
   41:     
-  42:     def push(self, val):
-  43:         '''Add val to the head of the list.'''
-  44:         old_head = self.head
-  45:         self.head = Node(val, next_node=old_head)
-  46:         if old_head:
-  47:             old_head.prev = self.head
-  48:         if not (self.tail):
-  49:             self.tail = self.head
-  50:         self._length += 1
-  51:     
+  42:     @classmethod
+  43:     def push(self, val):
+  44:         '''Add val to the head of the list.'''
+  45:         old_head = self.head
+  46:         self.head = Node(val, next_node=old_head)
+  47:         if old_head:
+  48:             old_head.prev = self.head
+  49:         if not (self.tail):
+  50:             self.tail = self.head
+  51:         self._length += 1
   52:     def pop(self):
   53:         '''Remove the val from the head of the list.'''
   54:         to_return = self.head
   55:         if self._length < 1:
--------------------------------------------------------------------------------
[5.65101 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_6

self = <queue4.DoubleLinkedList object at 0x7f1a2f4e61a0>
data = <queue4.Queue object at 0x7f1a2f4e7b20>

>   ???
E   TypeError: 'Queue' object is not iterable

queue4:36: TypeError

During handling of the above exception, another exception occurred:

    def test_case_6():
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_0 = queue_0.peek()
        queue_1 = module_0.Queue()
        set_2 = set()
        node_2 = module_0.Node(prev=set_2)
        var_1 = queue_1.size()
        assert var_1 == 0
        queue_2 = module_0.Queue()
        queue_3 = module_0.Queue()
        set_3 = set()
        node_3 = module_0.Node(prev=set_3)
        queue_4 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_4 = set()
        node_4 = module_0.Node(prev=set_4)
        var_2 = double_linked_list_0.append(node_4)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        set_5 = set()
        node_5 = module_0.Node(prev=set_5)
        queue_5 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
>       queue_6 = module_0.Queue(queue_1)

RANDOM/test_queue4_RANDOM.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue4:137: in __init__
    ???
queue4:40: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'queue4.DoubleLinkedList'>
val = <queue4.Queue object at 0x7f1a2f4e7b20>

>   ???
E   AttributeError: type object 'DoubleLinkedList' has no attribute 'head'

queue4:45: AttributeError
   - [#  11] CDI queue4: 
--------------------------------------------------------------------------------
   48:         if not (self.tail):
   49:             self.tail = self.head
   50:         self._length += 1
   51:     
-  52:     def pop(self):
-  53:         '''Remove the val from the head of the list.'''
-  54:         to_return = self.head
-  55:         if self._length < 1:
-  56:             raise IndexError('Cannot pop from an empty list.')
-  57:         
-  58:         new_head = self.head.next
-  59:         if new_head:
-  60:             new_head.prev = None
-  61:         self.head = new_head
-  62:         self._length -= 1
-  63:         if self._length < 1:
-  64:             self.tail = None
-  65:         return to_return.data
-  66:     
+  52:     @classmethod
+  53:     def pop(self):
+  54:         '''Remove the val from the head of the list.'''
+  55:         to_return = self.head
+  56:         if self._length < 1:
+  57:             raise IndexError('Cannot pop from an empty list.')
+  58:         
+  59:         new_head = self.head.next
+  60:         if new_head:
+  61:             new_head.prev = None
+  62:         self.head = new_head
+  63:         self._length -= 1
+  64:         if self._length < 1:
+  65:             self.tail = None
+  66:         return to_return.data
   67:     def append(self, val):
   68:         '''Add val to the tail of the list.'''
   69:         old_tail = self.tail
   70:         self.tail = Node(val, prev=old_tail)
--------------------------------------------------------------------------------
[5.57024 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_20

def test_case_20():
        node_0 = module_0.Node()
        var_0 = node_0.__repr__()
        assert var_0 == 'Value: None'
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_1 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_2 = module_0.Node(prev=set_1)
        var_1 = double_linked_list_0.append(node_2)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
>       var_2 = double_linked_list_0.pop()

RANDOM/test_queue4_RANDOM.py:426: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'queue4.DoubleLinkedList'>

>   ???
E   AttributeError: type object 'DoubleLinkedList' has no attribute 'head'

queue4:55: AttributeError
   - [#  12] CDI queue4: 
--------------------------------------------------------------------------------
   63:         if self._length < 1:
   64:             self.tail = None
   65:         return to_return.data
   66:     
-  67:     def append(self, val):
-  68:         '''Add val to the tail of the list.'''
-  69:         old_tail = self.tail
-  70:         self.tail = Node(val, prev=old_tail)
-  71:         if old_tail:
-  72:             old_tail.next = self.tail
-  73:         if self._length < 1:
-  74:             self.head = self.tail
-  75:         self._length += 1
-  76:     
+  67:     @classmethod
+  68:     def append(self, val):
+  69:         '''Add val to the tail of the list.'''
+  70:         old_tail = self.tail
+  71:         self.tail = Node(val, prev=old_tail)
+  72:         if old_tail:
+  73:             old_tail.next = self.tail
+  74:         if self._length < 1:
+  75:             self.head = self.tail
+  76:         self._length += 1
   77:     def shift(self):
   78:         '''Remove the val from the tail of the list.'''
   79:         to_return = self.tail
   80:         if self._length < 1:
--------------------------------------------------------------------------------
[5.58212 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_4

def test_case_4():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
>       var_0 = double_linked_list_0.append(node_1)

RANDOM/test_queue4_RANDOM.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'queue4.DoubleLinkedList'>, val = Value: None

>   ???
E   AttributeError: type object 'DoubleLinkedList' has no attribute 'tail'

queue4:70: AttributeError
   - [#  13] CDI queue4: 
--------------------------------------------------------------------------------
   73:         if self._length < 1:
   74:             self.head = self.tail
   75:         self._length += 1
   76:     
-  77:     def shift(self):
-  78:         '''Remove the val from the tail of the list.'''
-  79:         to_return = self.tail
-  80:         if self._length < 1:
-  81:             raise IndexError('Cannot shift from an empty list.')
-  82:         
-  83:         new_tail = self.tail.prev
-  84:         if new_tail:
-  85:             new_tail.next = None
-  86:         self.tail = new_tail
-  87:         self._length -= 1
-  88:         if self._length < 1:
-  89:             self.tail = None
-  90:         return to_return.data
-  91:     
+  77:     @classmethod
+  78:     def shift(self):
+  79:         '''Remove the val from the tail of the list.'''
+  80:         to_return = self.tail
+  81:         if self._length < 1:
+  82:             raise IndexError('Cannot shift from an empty list.')
+  83:         
+  84:         new_tail = self.tail.prev
+  85:         if new_tail:
+  86:             new_tail.next = None
+  87:         self.tail = new_tail
+  88:         self._length -= 1
+  89:         if self._length < 1:
+  90:             self.tail = None
+  91:         return to_return.data
   92:     def remove(self, val):
   93:         '''Remove first occurance of val from list.'''
   94:         curr = self.head
   95:         while curr:
--------------------------------------------------------------------------------
[5.52184 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_66

def test_case_66():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_0 = double_linked_list_0.append(node_1)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
>       var_1 = double_linked_list_0.shift()

RANDOM/test_queue4_RANDOM.py:2106: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'queue4.DoubleLinkedList'>

>   ???
E   AttributeError: type object 'DoubleLinkedList' has no attribute 'tail'

queue4:80: AttributeError
   - [#  14] CDI queue4: 
--------------------------------------------------------------------------------
   88:         if self._length < 1:
   89:             self.tail = None
   90:         return to_return.data
   91:     
-  92:     def remove(self, val):
-  93:         '''Remove first occurance of val from list.'''
-  94:         curr = self.head
-  95:         while curr:
-  96:             if curr.data is val:
-  97:                 if self._length == 1:
-  98:                     (self.head, self.tail) = (None, None)
-  99:                 elif (curr is not self.head and curr is not self.tail):
- 100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
- 101:                 elif curr is self.head:
- 102:                     (self.head, curr.next.prev) = (curr.next, None)
- 103:                 elif curr is self.tail:
- 104:                     (self.tail, curr.prev.next) = (curr.prev, None)
- 105:                 self._length -= 1
- 106:                 return
- 107:             curr = curr.next
- 108:         
- 109:         raise ValueError('{} is not in the list'.format(val))
- 110:     
+  92:     @classmethod
+  93:     def remove(self, val):
+  94:         '''Remove first occurance of val from list.'''
+  95:         curr = self.head
+  96:         while curr:
+  97:             if curr.data is val:
+  98:                 if self._length == 1:
+  99:                     (self.head, self.tail) = (None, None)
+ 100:                 elif (curr is not self.head and curr is not self.tail):
+ 101:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
+ 102:                 elif curr is self.head:
+ 103:                     (self.head, curr.next.prev) = (curr.next, None)
+ 104:                 elif curr is self.tail:
+ 105:                     (self.tail, curr.prev.next) = (curr.prev, None)
+ 106:                 self._length -= 1
+ 107:                 return
+ 108:             curr = curr.next
+ 109:         
+ 110:         raise ValueError('{} is not in the list'.format(val))
  111:     def _repr(self):
  112:         '''Return list representation of dll.'''
  113:         l = []
  114:         while True:
--------------------------------------------------------------------------------
[5.57954 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_85

def test_case_85():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        var_0 = queue_0.peek()
        node_1 = module_0.Node()
        queue_1 = module_0.Queue()
        set_1 = set()
        node_2 = module_0.Node(prev=set_1)
        var_1 = queue_1.size()
        assert var_1 == 0
        set_2 = set()
        node_3 = module_0.Node(prev=set_2)
        bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_2 = module_0.Queue(bytes_0)
        assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_2 = double_linked_list_0.append(bytes_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_3 = module_0.Queue(bytes_1)
        queue_4 = module_0.Queue()
        set_3 = set()
        node_4 = module_0.Node(prev=set_3)
        var_3 = queue_4.size()
        assert var_3 == 0
        queue_5 = module_0.Queue()
        var_4 = queue_4.size()
        assert var_4 == 0
        queue_6 = module_0.Queue()
        set_4 = set()
        node_5 = module_0.Node(prev=set_4)
        queue_7 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        node_6 = module_0.Node()
        queue_8 = module_0.Queue()
        set_5 = set()
        node_7 = module_0.Node(prev=set_5)
        queue_9 = module_0.Queue()
        double_linked_list_2 = module_0.DoubleLinkedList()
        assert double_linked_list_2.head is None
        assert double_linked_list_2.tail is None
        set_6 = set()
        node_8 = module_0.Node(prev=set_6)
        var_5 = double_linked_list_2.append(node_8)
        assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
>       var_6 = double_linked_list_0.remove(bytes_1)

RANDOM/test_queue4_RANDOM.py:2990: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'queue4.DoubleLinkedList'>
val = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'

>   ???
E   AttributeError: type object 'DoubleLinkedList' has no attribute 'head'

queue4:95: AttributeError
   - [#  15] CDI queue4: 
--------------------------------------------------------------------------------
  107:             curr = curr.next
  108:         
  109:         raise ValueError('{} is not in the list'.format(val))
  110:     
- 111:     def _repr(self):
- 112:         '''Return list representation of dll.'''
- 113:         l = []
- 114:         while True:
- 115:             try:
- 116:                 popped_data = self.pop()
- 117:                 l.append(popped_data)
- 118:             except IndexError:
- 119:                 break
- 120:         return l
- 121: 
+ 111:     @classmethod
+ 112:     def _repr(self):
+ 113:         '''Return list representation of dll.'''
+ 114:         l = []
+ 115:         while True:
+ 116:             try:
+ 117:                 popped_data = self.pop()
+ 118:                 l.append(popped_data)
+ 119:             except IndexError:
+ 120:                 break
+ 121:         return l
  122: 
  123: class Queue(object):
  124:     '''Implementation of Queue.
  125: 
--------------------------------------------------------------------------------
[3.03079 s] survived
   - [#  16] CDI queue4: 
--------------------------------------------------------------------------------
  131:     If the queue is empty, returns None
  132:     size(): return the size of the queue. Returns 0 if the queue is empty.
  133:     '''
  134:     
- 135:     def __init__(self, data=None):
- 136:         '''Initialize queue data structure.'''
- 137:         self._container = DoubleLinkedList(data)
- 138:     
+ 135:     @classmethod
+ 136:     def __init__(self, data=None):
+ 137:         '''Initialize queue data structure.'''
+ 138:         self._container = DoubleLinkedList(data)
  139:     def enqueue(self, val):
  140:         '''Add a value to the queue.'''
  141:         self._container.append(val)
  142:     
--------------------------------------------------------------------------------
[5.70838 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_65

def test_case_65():
        bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_0 = module_0.Queue(bytes_0)
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        queue_1 = module_0.Queue()
        assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        var_0 = queue_1.size()
        assert var_0 == 0
        queue_2 = module_0.Queue()
        var_1 = queue_1.size()
        assert var_1 == 0
        var_2 = queue_0.peek()
>       assert var_2 == 77
E       AssertionError

RANDOM/test_queue4_RANDOM.py:2091: AssertionError
   - [#  17] CDI queue4: 
--------------------------------------------------------------------------------
  135:     def __init__(self, data=None):
  136:         '''Initialize queue data structure.'''
  137:         self._container = DoubleLinkedList(data)
  138:     
- 139:     def enqueue(self, val):
- 140:         '''Add a value to the queue.'''
- 141:         self._container.append(val)
- 142:     
+ 139:     @classmethod
+ 140:     def enqueue(self, val):
+ 141:         '''Add a value to the queue.'''
+ 142:         self._container.append(val)
  143:     def dequeue(self):
  144:         '''Remove a value from the front of the queue.'''
  145:         return self._container.pop()
  146:     
--------------------------------------------------------------------------------
[5.63697 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_6

def test_case_6():
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_0 = queue_0.peek()
        queue_1 = module_0.Queue()
        set_2 = set()
        node_2 = module_0.Node(prev=set_2)
        var_1 = queue_1.size()
        assert var_1 == 0
        queue_2 = module_0.Queue()
        queue_3 = module_0.Queue()
        set_3 = set()
        node_3 = module_0.Node(prev=set_3)
        queue_4 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_4 = set()
        node_4 = module_0.Node(prev=set_4)
        var_2 = double_linked_list_0.append(node_4)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        set_5 = set()
        node_5 = module_0.Node(prev=set_5)
        queue_5 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        queue_6 = module_0.Queue(queue_1)
        assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
>       var_3 = queue_3.enqueue(queue_6)

RANDOM/test_queue4_RANDOM.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'queue4.Queue'>, val = <queue4.Queue object at 0x7f1a2ce16c20>

>   ???
E   AttributeError: type object 'Queue' has no attribute '_container'

queue4:142: AttributeError
   - [#  18] CDI queue4: 
--------------------------------------------------------------------------------
  139:     def enqueue(self, val):
  140:         '''Add a value to the queue.'''
  141:         self._container.append(val)
  142:     
- 143:     def dequeue(self):
- 144:         '''Remove a value from the front of the queue.'''
- 145:         return self._container.pop()
- 146:     
+ 143:     @classmethod
+ 144:     def dequeue(self):
+ 145:         '''Remove a value from the front of the queue.'''
+ 146:         return self._container.pop()
  147:     def peek(self):
  148:         '''Return the next value in the queue without dequing it.'''
  149:         try:
  150:             return self._container.head.data
--------------------------------------------------------------------------------
[5.69391 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_113

def test_case_113():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        queue_1 = module_0.Queue()
        bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_2 = module_0.Queue(bytes_0)
        assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
        queue_3 = module_0.Queue()
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_4 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_0 = double_linked_list_0.append(node_1)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        var_1 = double_linked_list_0.shift()
        assert double_linked_list_0.tail is None
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
        assert var_1.data is None
        assert var_1.next is None
        assert var_1.prev == {*()}
        set_2 = set()
        node_2 = module_0.Node(prev=set_2)
        set_3 = set()
        node_3 = module_0.Node(prev=set_3)
        queue_5 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        node_4 = module_0.Node()
        set_4 = set()
        node_5 = module_0.Node(prev=set_4)
        queue_6 = module_0.Queue()
        double_linked_list_2 = module_0.DoubleLinkedList()
        assert double_linked_list_2.head is None
        assert double_linked_list_2.tail is None
        queue_7 = module_0.Queue()
        var_2 = queue_7.peek()
        bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_8 = module_0.Queue(bytes_1)
        queue_9 = module_0.Queue()
        set_5 = set()
        node_6 = module_0.Node(prev=set_5)
        var_3 = queue_9.size()
        assert var_3 == 0
        queue_10 = module_0.Queue()
        var_4 = queue_9.size()
        assert var_4 == 0
        node_7 = module_0.Node()
        var_5 = node_7.__repr__()
        assert var_5 == 'Value: None'
        queue_11 = module_0.Queue(node_7)
        set_6 = set()
        node_8 = module_0.Node(prev=set_6)
        queue_12 = module_0.Queue()
        double_linked_list_3 = module_0.DoubleLinkedList()
        assert double_linked_list_3.head is None
        assert double_linked_list_3.tail is None
        queue_13 = module_0.Queue()
        queue_14 = module_0.Queue()
        double_linked_list_4 = module_0.DoubleLinkedList()
        assert double_linked_list_4.head is None
        assert double_linked_list_4.tail is None
        bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_15 = module_0.Queue(bytes_2)
        queue_16 = module_0.Queue()
        set_7 = set()
        node_9 = module_0.Node(prev=set_7)
        var_6 = queue_16.size()
        assert var_6 == 0
        queue_17 = module_0.Queue()
        var_7 = queue_16.size()
        assert var_7 == 0
        var_8 = queue_15.peek()
        assert var_8 == 77
        queue_18 = module_0.Queue(var_8)
>       var_9 = queue_18.dequeue()

RANDOM/test_queue4_RANDOM.py:4292: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'queue4.Queue'>

>   ???
E   AttributeError: type object 'Queue' has no attribute '_container'

queue4:146: AttributeError
   - [#  19] CDI queue4: 
--------------------------------------------------------------------------------
  143:     def dequeue(self):
  144:         '''Remove a value from the front of the queue.'''
  145:         return self._container.pop()
  146:     
- 147:     def peek(self):
- 148:         '''Return the next value in the queue without dequing it.'''
- 149:         try:
- 150:             return self._container.head.data
- 151:         except AttributeError:
- 152:             return None
- 153:     
+ 147:     @classmethod
+ 148:     def peek(self):
+ 149:         '''Return the next value in the queue without dequing it.'''
+ 150:         try:
+ 151:             return self._container.head.data
+ 152:         except AttributeError:
+ 153:             return None
  154:     def size(self):
  155:         '''Return the size of the queue.'''
  156:         return self._container._length
--------------------------------------------------------------------------------
[5.61731 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_65

def test_case_65():
        bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_0 = module_0.Queue(bytes_0)
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        queue_1 = module_0.Queue()
        assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        var_0 = queue_1.size()
        assert var_0 == 0
        queue_2 = module_0.Queue()
        var_1 = queue_1.size()
        assert var_1 == 0
        var_2 = queue_0.peek()
>       assert var_2 == 77
E       AssertionError

RANDOM/test_queue4_RANDOM.py:2091: AssertionError
   - [#  20] CDI queue4: 
--------------------------------------------------------------------------------
  150:             return self._container.head.data
  151:         except AttributeError:
  152:             return None
  153:     
- 154:     def size(self):
- 155:         '''Return the size of the queue.'''
- 156:         return self._container._length
+ 154:     @classmethod
+ 155:     def size(self):
+ 156:         '''Return the size of the queue.'''
+ 157:         return self._container._length
--------------------------------------------------------------------------------
[5.53384 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_2

def test_case_2():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
>       var_0 = queue_0.size()

RANDOM/test_queue4_RANDOM.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'queue4.Queue'>

>   ???
E   AttributeError: type object 'Queue' has no attribute '_container'

queue4:157: AttributeError
   - [#  21] COD queue4: 
--------------------------------------------------------------------------------
   44:         old_head = self.head
   45:         self.head = Node(val, next_node=old_head)
   46:         if old_head:
   47:             old_head.prev = self.head
-  48:         if not (self.tail):
+  48:         if self.tail:
   49:             self.tail = self.head
   50:         self._length += 1
   51:     
   52:     def pop(self):
--------------------------------------------------------------------------------
[5.57310 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_21

def test_case_21():
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        queue_1 = module_0.Queue()
        set_2 = set()
        node_2 = module_0.Node(prev=set_2)
        var_0 = queue_1.size()
        assert var_0 == 0
        queue_2 = module_0.Queue()
        queue_3 = module_0.Queue()
        set_3 = set()
        node_3 = module_0.Node(prev=set_3)
        queue_4 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        set_4 = set()
        node_4 = module_0.Node(prev=set_4)
        var_1 = double_linked_list_1.append(node_4)
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
        var_2 = queue_3.size()
        assert var_2 == 0
        set_5 = set()
        node_5 = module_0.Node(prev=set_5)
        queue_5 = module_0.Queue()
        double_linked_list_2 = module_0.DoubleLinkedList()
        assert double_linked_list_2.head is None
        assert double_linked_list_2.tail is None
        queue_6 = module_0.Queue()
        var_3 = queue_6.peek()
        queue_7 = module_0.Queue()
        set_6 = set()
        node_6 = module_0.Node(prev=set_6)
        var_4 = queue_7.peek()
        queue_8 = module_0.Queue()
        set_7 = set()
        node_7 = module_0.Node(prev=set_7)
        var_5 = queue_8.size()
        assert var_5 == 0
        double_linked_list_3 = module_0.DoubleLinkedList()
        assert double_linked_list_3.head is None
        assert double_linked_list_3.tail is None
        var_6 = double_linked_list_3.push(queue_8)
>       assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
E       AssertionError

RANDOM/test_queue4_RANDOM.py:484: AssertionError
   - [#  22] COI queue4: 
--------------------------------------------------------------------------------
   35:         try:
   36:             for val in data:
   37:                 self.push(val)
   38:         except TypeError:
-  39:             if data:
+  39:             if not data:
   40:                 self.push(data)
   41:     
   42:     def push(self, val):
   43:         '''Add val to the head of the list.'''
--------------------------------------------------------------------------------
[5.70101 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_2

def test_case_2():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        var_0 = queue_0.size()
>       assert var_0 == 0
E       AssertionError

RANDOM/test_queue4_RANDOM.py:20: AssertionError
   - [#  23] COI queue4: 
--------------------------------------------------------------------------------
   42:     def push(self, val):
   43:         '''Add val to the head of the list.'''
   44:         old_head = self.head
   45:         self.head = Node(val, next_node=old_head)
-  46:         if old_head:
+  46:         if not old_head:
   47:             old_head.prev = self.head
   48:         if not (self.tail):
   49:             self.tail = self.head
   50:         self._length += 1
--------------------------------------------------------------------------------
[5.71032 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_6

self = <queue4.DoubleLinkedList object at 0x7f1a2ce43dc0>
data = <queue4.Queue object at 0x7f1a2ce41150>

>   ???
E   TypeError: 'Queue' object is not iterable

queue4:36: TypeError

During handling of the above exception, another exception occurred:

    def test_case_6():
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_0 = queue_0.peek()
        queue_1 = module_0.Queue()
        set_2 = set()
        node_2 = module_0.Node(prev=set_2)
        var_1 = queue_1.size()
        assert var_1 == 0
        queue_2 = module_0.Queue()
        queue_3 = module_0.Queue()
        set_3 = set()
        node_3 = module_0.Node(prev=set_3)
        queue_4 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_4 = set()
        node_4 = module_0.Node(prev=set_4)
        var_2 = double_linked_list_0.append(node_4)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        set_5 = set()
        node_5 = module_0.Node(prev=set_5)
        queue_5 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
>       queue_6 = module_0.Queue(queue_1)

RANDOM/test_queue4_RANDOM.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue4:137: in __init__
    ???
queue4:40: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2ce43dc0>
val = <queue4.Queue object at 0x7f1a2ce41150>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

queue4:47: AttributeError
   - [#  24] COI queue4: 
--------------------------------------------------------------------------------
   44:         old_head = self.head
   45:         self.head = Node(val, next_node=old_head)
   46:         if old_head:
   47:             old_head.prev = self.head
-  48:         if not (self.tail):
+  48:         if not ((not (self.tail))):
   49:             self.tail = self.head
   50:         self._length += 1
   51:     
   52:     def pop(self):
--------------------------------------------------------------------------------
[5.76507 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_21

def test_case_21():
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        queue_1 = module_0.Queue()
        set_2 = set()
        node_2 = module_0.Node(prev=set_2)
        var_0 = queue_1.size()
        assert var_0 == 0
        queue_2 = module_0.Queue()
        queue_3 = module_0.Queue()
        set_3 = set()
        node_3 = module_0.Node(prev=set_3)
        queue_4 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        set_4 = set()
        node_4 = module_0.Node(prev=set_4)
        var_1 = double_linked_list_1.append(node_4)
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
        var_2 = queue_3.size()
        assert var_2 == 0
        set_5 = set()
        node_5 = module_0.Node(prev=set_5)
        queue_5 = module_0.Queue()
        double_linked_list_2 = module_0.DoubleLinkedList()
        assert double_linked_list_2.head is None
        assert double_linked_list_2.tail is None
        queue_6 = module_0.Queue()
        var_3 = queue_6.peek()
        queue_7 = module_0.Queue()
        set_6 = set()
        node_6 = module_0.Node(prev=set_6)
        var_4 = queue_7.peek()
        queue_8 = module_0.Queue()
        set_7 = set()
        node_7 = module_0.Node(prev=set_7)
        var_5 = queue_8.size()
        assert var_5 == 0
        double_linked_list_3 = module_0.DoubleLinkedList()
        assert double_linked_list_3.head is None
        assert double_linked_list_3.tail is None
        var_6 = double_linked_list_3.push(queue_8)
>       assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
E       AssertionError

RANDOM/test_queue4_RANDOM.py:484: AssertionError
   - [#  25] COI queue4: 
--------------------------------------------------------------------------------
   51:     
   52:     def pop(self):
   53:         '''Remove the val from the head of the list.'''
   54:         to_return = self.head
-  55:         if self._length < 1:
+  55:         if not (self._length < 1):
   56:             raise IndexError('Cannot pop from an empty list.')
   57:         
   58:         new_head = self.head.next
   59:         if new_head:
--------------------------------------------------------------------------------
[5.59631 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_20

def test_case_20():
        node_0 = module_0.Node()
        var_0 = node_0.__repr__()
        assert var_0 == 'Value: None'
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_1 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_2 = module_0.Node(prev=set_1)
        var_1 = double_linked_list_0.append(node_2)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
>       var_2 = double_linked_list_0.pop()

RANDOM/test_queue4_RANDOM.py:426: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2ce61ea0>

>   ???
E   IndexError: Cannot pop from an empty list.

queue4:56: IndexError
   - [#  26] COI queue4: 
--------------------------------------------------------------------------------
   55:         if self._length < 1:
   56:             raise IndexError('Cannot pop from an empty list.')
   57:         
   58:         new_head = self.head.next
-  59:         if new_head:
+  59:         if not new_head:
   60:             new_head.prev = None
   61:         self.head = new_head
   62:         self._length -= 1
   63:         if self._length < 1:
--------------------------------------------------------------------------------
[5.56647 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_20

def test_case_20():
        node_0 = module_0.Node()
        var_0 = node_0.__repr__()
        assert var_0 == 'Value: None'
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_1 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_2 = module_0.Node(prev=set_1)
        var_1 = double_linked_list_0.append(node_2)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
>       var_2 = double_linked_list_0.pop()

RANDOM/test_queue4_RANDOM.py:426: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2e28ead0>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

queue4:60: AttributeError
   - [#  27] COI queue4: 
--------------------------------------------------------------------------------
   59:         if new_head:
   60:             new_head.prev = None
   61:         self.head = new_head
   62:         self._length -= 1
-  63:         if self._length < 1:
+  63:         if not (self._length < 1):
   64:             self.tail = None
   65:         return to_return.data
   66:     
   67:     def append(self, val):
--------------------------------------------------------------------------------
[5.52363 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_20

def test_case_20():
        node_0 = module_0.Node()
        var_0 = node_0.__repr__()
        assert var_0 == 'Value: None'
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_1 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_2 = module_0.Node(prev=set_1)
        var_1 = double_linked_list_0.append(node_2)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        var_2 = double_linked_list_0.pop()
        assert double_linked_list_0.head is None
>       assert double_linked_list_0.tail is None
E       AssertionError

RANDOM/test_queue4_RANDOM.py:428: AssertionError
   - [#  28] COI queue4: 
--------------------------------------------------------------------------------
   67:     def append(self, val):
   68:         '''Add val to the tail of the list.'''
   69:         old_tail = self.tail
   70:         self.tail = Node(val, prev=old_tail)
-  71:         if old_tail:
+  71:         if not old_tail:
   72:             old_tail.next = self.tail
   73:         if self._length < 1:
   74:             self.head = self.tail
   75:         self._length += 1
--------------------------------------------------------------------------------
[5.47363 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_4

def test_case_4():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
>       var_0 = double_linked_list_0.append(node_1)

RANDOM/test_queue4_RANDOM.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2ce66950>, val = Value: None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

queue4:72: AttributeError
   - [#  29] COI queue4: 
--------------------------------------------------------------------------------
   69:         old_tail = self.tail
   70:         self.tail = Node(val, prev=old_tail)
   71:         if old_tail:
   72:             old_tail.next = self.tail
-  73:         if self._length < 1:
+  73:         if not (self._length < 1):
   74:             self.head = self.tail
   75:         self._length += 1
   76:     
   77:     def shift(self):
--------------------------------------------------------------------------------
[5.46780 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_4

def test_case_4():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_0 = double_linked_list_0.append(node_1)
>       assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
E       AssertionError

RANDOM/test_queue4_RANDOM.py:43: AssertionError
   - [#  30] COI queue4: 
--------------------------------------------------------------------------------
   76:     
   77:     def shift(self):
   78:         '''Remove the val from the tail of the list.'''
   79:         to_return = self.tail
-  80:         if self._length < 1:
+  80:         if not (self._length < 1):
   81:             raise IndexError('Cannot shift from an empty list.')
   82:         
   83:         new_tail = self.tail.prev
   84:         if new_tail:
--------------------------------------------------------------------------------
[5.76803 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_66

def test_case_66():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_0 = double_linked_list_0.append(node_1)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
>       var_1 = double_linked_list_0.shift()

RANDOM/test_queue4_RANDOM.py:2106: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2f4eeec0>

>   ???
E   IndexError: Cannot shift from an empty list.

queue4:81: IndexError
   - [#  31] COI queue4: 
--------------------------------------------------------------------------------
   80:         if self._length < 1:
   81:             raise IndexError('Cannot shift from an empty list.')
   82:         
   83:         new_tail = self.tail.prev
-  84:         if new_tail:
+  84:         if not new_tail:
   85:             new_tail.next = None
   86:         self.tail = new_tail
   87:         self._length -= 1
   88:         if self._length < 1:
--------------------------------------------------------------------------------
[5.72551 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_66

def test_case_66():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_0 = double_linked_list_0.append(node_1)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
>       var_1 = double_linked_list_0.shift()

RANDOM/test_queue4_RANDOM.py:2106: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2f4edcc0>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

queue4:85: AttributeError
   - [#  32] COI queue4: 
--------------------------------------------------------------------------------
   84:         if new_tail:
   85:             new_tail.next = None
   86:         self.tail = new_tail
   87:         self._length -= 1
-  88:         if self._length < 1:
+  88:         if not (self._length < 1):
   89:             self.tail = None
   90:         return to_return.data
   91:     
   92:     def remove(self, val):
--------------------------------------------------------------------------------
[2.97170 s] survived
   - [#  33] COI queue4: 
--------------------------------------------------------------------------------
   91:     
   92:     def remove(self, val):
   93:         '''Remove first occurance of val from list.'''
   94:         curr = self.head
-  95:         while curr:
+  95:         while not curr:
   96:             if curr.data is val:
   97:                 if self._length == 1:
   98:                     (self.head, self.tail) = (None, None)
   99:                 elif (curr is not self.head and curr is not self.tail):
--------------------------------------------------------------------------------
[5.71471 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_85

def test_case_85():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        var_0 = queue_0.peek()
        node_1 = module_0.Node()
        queue_1 = module_0.Queue()
        set_1 = set()
        node_2 = module_0.Node(prev=set_1)
        var_1 = queue_1.size()
        assert var_1 == 0
        set_2 = set()
        node_3 = module_0.Node(prev=set_2)
        bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_2 = module_0.Queue(bytes_0)
        assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_2 = double_linked_list_0.append(bytes_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_3 = module_0.Queue(bytes_1)
        queue_4 = module_0.Queue()
        set_3 = set()
        node_4 = module_0.Node(prev=set_3)
        var_3 = queue_4.size()
        assert var_3 == 0
        queue_5 = module_0.Queue()
        var_4 = queue_4.size()
        assert var_4 == 0
        queue_6 = module_0.Queue()
        set_4 = set()
        node_5 = module_0.Node(prev=set_4)
        queue_7 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        node_6 = module_0.Node()
        queue_8 = module_0.Queue()
        set_5 = set()
        node_7 = module_0.Node(prev=set_5)
        queue_9 = module_0.Queue()
        double_linked_list_2 = module_0.DoubleLinkedList()
        assert double_linked_list_2.head is None
        assert double_linked_list_2.tail is None
        set_6 = set()
        node_8 = module_0.Node(prev=set_6)
        var_5 = double_linked_list_2.append(node_8)
        assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
>       var_6 = double_linked_list_0.remove(bytes_1)

RANDOM/test_queue4_RANDOM.py:2990: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2cfbd1b0>
val = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'

>   ???
E   ValueError: b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M' is not in the list

queue4:109: ValueError
   - [#  34] COI queue4: 
--------------------------------------------------------------------------------
   92:     def remove(self, val):
   93:         '''Remove first occurance of val from list.'''
   94:         curr = self.head
   95:         while curr:
-  96:             if curr.data is val:
+  96:             if not (curr.data is val):
   97:                 if self._length == 1:
   98:                     (self.head, self.tail) = (None, None)
   99:                 elif (curr is not self.head and curr is not self.tail):
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
--------------------------------------------------------------------------------
[5.82022 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_85

def test_case_85():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        var_0 = queue_0.peek()
        node_1 = module_0.Node()
        queue_1 = module_0.Queue()
        set_1 = set()
        node_2 = module_0.Node(prev=set_1)
        var_1 = queue_1.size()
        assert var_1 == 0
        set_2 = set()
        node_3 = module_0.Node(prev=set_2)
        bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_2 = module_0.Queue(bytes_0)
        assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_2 = double_linked_list_0.append(bytes_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_3 = module_0.Queue(bytes_1)
        queue_4 = module_0.Queue()
        set_3 = set()
        node_4 = module_0.Node(prev=set_3)
        var_3 = queue_4.size()
        assert var_3 == 0
        queue_5 = module_0.Queue()
        var_4 = queue_4.size()
        assert var_4 == 0
        queue_6 = module_0.Queue()
        set_4 = set()
        node_5 = module_0.Node(prev=set_4)
        queue_7 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        node_6 = module_0.Node()
        queue_8 = module_0.Queue()
        set_5 = set()
        node_7 = module_0.Node(prev=set_5)
        queue_9 = module_0.Queue()
        double_linked_list_2 = module_0.DoubleLinkedList()
        assert double_linked_list_2.head is None
        assert double_linked_list_2.tail is None
        set_6 = set()
        node_8 = module_0.Node(prev=set_6)
        var_5 = double_linked_list_2.append(node_8)
        assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
>       var_6 = double_linked_list_0.remove(bytes_1)

RANDOM/test_queue4_RANDOM.py:2990: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2c6a3e80>
val = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'

>   ???
E   ValueError: b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M' is not in the list

queue4:109: ValueError
   - [#  35] COI queue4: 
--------------------------------------------------------------------------------
   93:         '''Remove first occurance of val from list.'''
   94:         curr = self.head
   95:         while curr:
   96:             if curr.data is val:
-  97:                 if self._length == 1:
+  97:                 if not (self._length == 1):
   98:                     (self.head, self.tail) = (None, None)
   99:                 elif (curr is not self.head and curr is not self.tail):
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  101:                 elif curr is self.head:
--------------------------------------------------------------------------------
[5.63931 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_85

def test_case_85():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        var_0 = queue_0.peek()
        node_1 = module_0.Node()
        queue_1 = module_0.Queue()
        set_1 = set()
        node_2 = module_0.Node(prev=set_1)
        var_1 = queue_1.size()
        assert var_1 == 0
        set_2 = set()
        node_3 = module_0.Node(prev=set_2)
        bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_2 = module_0.Queue(bytes_0)
        assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_2 = double_linked_list_0.append(bytes_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_3 = module_0.Queue(bytes_1)
        queue_4 = module_0.Queue()
        set_3 = set()
        node_4 = module_0.Node(prev=set_3)
        var_3 = queue_4.size()
        assert var_3 == 0
        queue_5 = module_0.Queue()
        var_4 = queue_4.size()
        assert var_4 == 0
        queue_6 = module_0.Queue()
        set_4 = set()
        node_5 = module_0.Node(prev=set_4)
        queue_7 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        node_6 = module_0.Node()
        queue_8 = module_0.Queue()
        set_5 = set()
        node_7 = module_0.Node(prev=set_5)
        queue_9 = module_0.Queue()
        double_linked_list_2 = module_0.DoubleLinkedList()
        assert double_linked_list_2.head is None
        assert double_linked_list_2.tail is None
        set_6 = set()
        node_8 = module_0.Node(prev=set_6)
        var_5 = double_linked_list_2.append(node_8)
        assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
>       var_6 = double_linked_list_0.remove(bytes_1)

RANDOM/test_queue4_RANDOM.py:2990: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2cfbfca0>
val = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

queue4:102: AttributeError
   - [#  36] COI queue4: 
--------------------------------------------------------------------------------
   95:         while curr:
   96:             if curr.data is val:
   97:                 if self._length == 1:
   98:                     (self.head, self.tail) = (None, None)
-  99:                 elif (curr is not self.head and curr is not self.tail):
+  99:                 elif not ((curr is not self.head and curr is not self.tail)):
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  101:                 elif curr is self.head:
  102:                     (self.head, curr.next.prev) = (curr.next, None)
  103:                 elif curr is self.tail:
--------------------------------------------------------------------------------
[3.03363 s] survived
   - [#  37] COI queue4: 
--------------------------------------------------------------------------------
   97:                 if self._length == 1:
   98:                     (self.head, self.tail) = (None, None)
   99:                 elif (curr is not self.head and curr is not self.tail):
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
- 101:                 elif curr is self.head:
+ 101:                 elif not (curr is self.head):
  102:                     (self.head, curr.next.prev) = (curr.next, None)
  103:                 elif curr is self.tail:
  104:                     (self.tail, curr.prev.next) = (curr.prev, None)
  105:                 self._length -= 1
--------------------------------------------------------------------------------
[3.02670 s] survived
   - [#  38] COI queue4: 
--------------------------------------------------------------------------------
   99:                 elif (curr is not self.head and curr is not self.tail):
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  101:                 elif curr is self.head:
  102:                     (self.head, curr.next.prev) = (curr.next, None)
- 103:                 elif curr is self.tail:
+ 103:                 elif not (curr is self.tail):
  104:                     (self.tail, curr.prev.next) = (curr.prev, None)
  105:                 self._length -= 1
  106:                 return
  107:             curr = curr.next
--------------------------------------------------------------------------------
[2.96143 s] survived
   - [#  39] COI queue4: 
--------------------------------------------------------------------------------
  110:     
  111:     def _repr(self):
  112:         '''Return list representation of dll.'''
  113:         l = []
- 114:         while True:
+ 114:         while not True:
  115:             try:
  116:                 popped_data = self.pop()
  117:                 l.append(popped_data)
  118:             except IndexError:
--------------------------------------------------------------------------------
[2.97757 s] survived
   - [#  40] CRP queue4: 
--------------------------------------------------------------------------------
   11:         self.prev = prev
   12:     
   13:     def __repr__(self):
   14:         '''String representation.'''
-  15:         return 'Value: {}'.format(self.data)
+  15:         return 'mutpy'.format(self.data)
   16: 
   17: 
   18: class DoubleLinkedList(object):
   19:     '''Double linked list impplementation.
--------------------------------------------------------------------------------
[5.53512 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_8

def test_case_8():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_0 = double_linked_list_0.append(node_1)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        queue_2 = module_0.Queue()
        set_2 = set()
        node_2 = module_0.Node(prev=set_2)
        var_1 = queue_2.peek()
        set_3 = set()
        node_3 = module_0.Node(prev=set_3)
        set_4 = set()
        node_4 = module_0.Node(prev=set_4)
        queue_3 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        queue_4 = module_0.Queue()
        queue_5 = module_0.Queue()
        set_5 = set()
        node_5 = module_0.Node(prev=set_5)
        var_2 = queue_5.size()
        assert var_2 == 0
        var_3 = node_0.__repr__()
>       assert var_3 == 'Value: None'
E       AssertionError

RANDOM/test_queue4_RANDOM.py:152: AssertionError
   - [#  41] CRP queue4: 
--------------------------------------------------------------------------------
   11:         self.prev = prev
   12:     
   13:     def __repr__(self):
   14:         '''String representation.'''
-  15:         return 'Value: {}'.format(self.data)
+  15:         return ''.format(self.data)
   16: 
   17: 
   18: class DoubleLinkedList(object):
   19:     '''Double linked list impplementation.
--------------------------------------------------------------------------------
[5.51530 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_8

def test_case_8():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_0 = double_linked_list_0.append(node_1)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        queue_2 = module_0.Queue()
        set_2 = set()
        node_2 = module_0.Node(prev=set_2)
        var_1 = queue_2.peek()
        set_3 = set()
        node_3 = module_0.Node(prev=set_3)
        set_4 = set()
        node_4 = module_0.Node(prev=set_4)
        queue_3 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        queue_4 = module_0.Queue()
        queue_5 = module_0.Queue()
        set_5 = set()
        node_5 = module_0.Node(prev=set_5)
        var_2 = queue_5.size()
        assert var_2 == 0
        var_3 = node_0.__repr__()
>       assert var_3 == 'Value: None'
E       AssertionError

RANDOM/test_queue4_RANDOM.py:152: AssertionError
   - [#  42] CRP queue4: 
--------------------------------------------------------------------------------
   30:     def __init__(self, data=None):
   31:         '''Initialize list.'''
   32:         self.head = None
   33:         self.tail = None
-  34:         self._length = 0
+  34:         self._length = 1
   35:         try:
   36:             for val in data:
   37:                 self.push(val)
   38:         except TypeError:
--------------------------------------------------------------------------------
[5.53952 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_2

def test_case_2():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        var_0 = queue_0.size()
>       assert var_0 == 0
E       AssertionError

RANDOM/test_queue4_RANDOM.py:20: AssertionError
   - [#  43] CRP queue4: 
--------------------------------------------------------------------------------
   46:         if old_head:
   47:             old_head.prev = self.head
   48:         if not (self.tail):
   49:             self.tail = self.head
-  50:         self._length += 1
+  50:         self._length += 2
   51:     
   52:     def pop(self):
   53:         '''Remove the val from the head of the list.'''
   54:         to_return = self.head
--------------------------------------------------------------------------------
[5.60353 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_87

def test_case_87():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        queue_1 = module_0.Queue()
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_2 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        queue_3 = module_0.Queue()
        var_0 = queue_3.peek()
        bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_4 = module_0.Queue(bytes_0)
        assert f'{type(queue_4).__module__}.{type(queue_4).__qualname__}' == 'queue4.Queue'
        queue_5 = module_0.Queue()
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_1 = queue_5.size()
        assert var_1 == 0
        queue_6 = module_0.Queue()
        var_2 = queue_5.size()
        assert var_2 == 0
        var_3 = queue_4.peek()
        assert var_3 == 77
        queue_7 = module_0.Queue()
        queue_8 = module_0.Queue()
        queue_9 = module_0.Queue()
        none_type_0 = None
        queue_10 = module_0.Queue(none_type_0)
        queue_11 = module_0.Queue()
        set_2 = set()
        node_2 = module_0.Node(prev=set_2)
        var_4 = queue_11.peek()
        node_3 = module_0.Node()
        bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_12 = module_0.Queue(bytes_1)
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        var_5 = double_linked_list_1.append(bytes_1)
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
        queue_13 = module_0.Queue()
        set_3 = set()
        node_4 = module_0.Node(prev=set_3)
        var_6 = queue_13.size()
        assert var_6 == 0
        queue_14 = module_0.Queue()
        node_5 = module_0.Node()
        var_7 = node_5.__repr__()
        assert var_7 == 'Value: None'
        queue_15 = module_0.Queue()
        set_4 = set()
        node_6 = module_0.Node(prev=set_4)
        var_8 = queue_15.peek()
        queue_16 = module_0.Queue(queue_15)
        var_9 = queue_4.size()
>       assert var_9 == 11
E       AssertionError

RANDOM/test_queue4_RANDOM.py:3120: AssertionError
   - [#  44] CRP queue4: 
--------------------------------------------------------------------------------
   51:     
   52:     def pop(self):
   53:         '''Remove the val from the head of the list.'''
   54:         to_return = self.head
-  55:         if self._length < 1:
+  55:         if self._length < 2:
   56:             raise IndexError('Cannot pop from an empty list.')
   57:         
   58:         new_head = self.head.next
   59:         if new_head:
--------------------------------------------------------------------------------
[5.69113 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_20

def test_case_20():
        node_0 = module_0.Node()
        var_0 = node_0.__repr__()
        assert var_0 == 'Value: None'
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_1 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_2 = module_0.Node(prev=set_1)
        var_1 = double_linked_list_0.append(node_2)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
>       var_2 = double_linked_list_0.pop()

RANDOM/test_queue4_RANDOM.py:426: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2e21e890>

>   ???
E   IndexError: Cannot pop from an empty list.

queue4:56: IndexError
   - [#  45] CRP queue4: 
--------------------------------------------------------------------------------
   52:     def pop(self):
   53:         '''Remove the val from the head of the list.'''
   54:         to_return = self.head
   55:         if self._length < 1:
-  56:             raise IndexError('Cannot pop from an empty list.')
+  56:             raise IndexError('mutpy')
   57:         
   58:         new_head = self.head.next
   59:         if new_head:
   60:             new_head.prev = None
--------------------------------------------------------------------------------
[2.93336 s] survived
   - [#  46] CRP queue4: 
--------------------------------------------------------------------------------
   52:     def pop(self):
   53:         '''Remove the val from the head of the list.'''
   54:         to_return = self.head
   55:         if self._length < 1:
-  56:             raise IndexError('Cannot pop from an empty list.')
+  56:             raise IndexError('')
   57:         
   58:         new_head = self.head.next
   59:         if new_head:
   60:             new_head.prev = None
--------------------------------------------------------------------------------
[2.97691 s] survived
   - [#  47] CRP queue4: 
--------------------------------------------------------------------------------
   58:         new_head = self.head.next
   59:         if new_head:
   60:             new_head.prev = None
   61:         self.head = new_head
-  62:         self._length -= 1
+  62:         self._length -= 2
   63:         if self._length < 1:
   64:             self.tail = None
   65:         return to_return.data
   66:     
--------------------------------------------------------------------------------
[6.55866 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_991

def test_case_991():
        node_0 = module_0.Node()
        var_0 = node_0.__repr__()
        assert var_0 == 'Value: None'
        queue_0 = module_0.Queue(node_0)
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_1 = module_0.Queue(bytes_0)
        var_1 = queue_1.dequeue()
        assert var_1 == 77
        queue_2 = module_0.Queue()
        set_0 = set()
        node_1 = module_0.Node(prev=set_0)
        none_type_0 = None
        queue_3 = module_0.Queue()
        var_2 = queue_3.enqueue(none_type_0)
        queue_4 = module_0.Queue()
        set_1 = set()
        node_2 = module_0.Node(prev=set_1)
        var_3 = queue_4.size()
        assert var_3 == 0
        queue_5 = module_0.Queue()
        queue_6 = module_0.Queue()
        queue_7 = module_0.Queue()
        set_2 = set()
        node_3 = module_0.Node(prev=set_2)
        queue_8 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_3 = set()
        node_4 = module_0.Node(prev=set_3)
        var_4 = double_linked_list_0.append(node_4)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        node_5 = module_0.Node()
        set_4 = set()
        node_6 = module_0.Node(prev=set_4)
        queue_9 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        queue_10 = module_0.Queue()
        queue_11 = module_0.Queue()
        double_linked_list_2 = module_0.DoubleLinkedList()
        assert double_linked_list_2.head is None
        assert double_linked_list_2.tail is None
        var_5 = double_linked_list_2.append(set_4)
        assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
        bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_12 = module_0.Queue(bytes_1)
        queue_13 = module_0.Queue()
        set_5 = set()
        node_7 = module_0.Node(prev=set_5)
        var_6 = queue_13.size()
        assert var_6 == 0
        queue_14 = module_0.Queue()
        var_7 = queue_13.size()
        assert var_7 == 0
        node_8 = module_0.Node(next_node=var_6)
        assert node_8.next == 0
        complex_0 = 2886.801252 + 1418.99508j
        queue_15 = module_0.Queue(complex_0)
        var_8 = queue_15.size()
        assert var_8 == 1
        set_6 = set()
        node_9 = module_0.Node(prev=set_6)
        queue_16 = module_0.Queue()
        double_linked_list_3 = module_0.DoubleLinkedList()
        assert double_linked_list_3.head is None
        assert double_linked_list_3.tail is None
        var_9 = node_9.__repr__()
        assert var_9 == 'Value: None'
        queue_17 = module_0.Queue(double_linked_list_3)
        set_7 = set()
        node_10 = module_0.Node(prev=set_7)
        queue_18 = module_0.Queue()
        double_linked_list_4 = module_0.DoubleLinkedList()
        assert double_linked_list_4.head is None
        assert double_linked_list_4.tail is None
        queue_19 = module_0.Queue()
        queue_20 = module_0.Queue()
        double_linked_list_5 = module_0.DoubleLinkedList()
        assert double_linked_list_5.head is None
        assert double_linked_list_5.tail is None
        var_10 = queue_20.size()
        assert var_10 == 0
        queue_21 = module_0.Queue()
        set_8 = set()
        node_11 = module_0.Node(prev=set_8)
        var_11 = queue_21.peek()
        var_12 = queue_1.size()
>       assert var_12 == 10
E       AssertionError

RANDOM/test_queue4_RANDOM.py:46858: AssertionError
   - [#  48] CRP queue4: 
--------------------------------------------------------------------------------
   59:         if new_head:
   60:             new_head.prev = None
   61:         self.head = new_head
   62:         self._length -= 1
-  63:         if self._length < 1:
+  63:         if self._length < 2:
   64:             self.tail = None
   65:         return to_return.data
   66:     
   67:     def append(self, val):
--------------------------------------------------------------------------------
[2.96912 s] survived
   - [#  49] CRP queue4: 
--------------------------------------------------------------------------------
   69:         old_tail = self.tail
   70:         self.tail = Node(val, prev=old_tail)
   71:         if old_tail:
   72:             old_tail.next = self.tail
-  73:         if self._length < 1:
+  73:         if self._length < 2:
   74:             self.head = self.tail
   75:         self._length += 1
   76:     
   77:     def shift(self):
--------------------------------------------------------------------------------
[5.94861 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_379

def test_case_379():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        var_0 = queue_0.size()
        assert var_0 == 0
        queue_1 = module_0.Queue()
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        queue_2 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        queue_3 = module_0.Queue()
        queue_4 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        var_1 = queue_4.size()
        assert var_1 == 0
        bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_5 = module_0.Queue(bytes_0)
        assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
        double_linked_list_2 = module_0.DoubleLinkedList()
        assert double_linked_list_2.head is None
        assert double_linked_list_2.tail is None
        var_2 = double_linked_list_2.append(bytes_0)
        assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
        var_3 = double_linked_list_2.append(queue_5)
        set_2 = set()
        node_2 = module_0.Node(prev=set_2)
        queue_6 = module_0.Queue()
        double_linked_list_3 = module_0.DoubleLinkedList()
        assert double_linked_list_3.head is None
        assert double_linked_list_3.tail is None
        set_3 = set()
        node_3 = module_0.Node(prev=set_3)
        queue_7 = module_0.Queue()
        double_linked_list_4 = module_0.DoubleLinkedList()
        assert double_linked_list_4.head is None
        assert double_linked_list_4.tail is None
        node_4 = module_0.Node()
        queue_8 = module_0.Queue()
        set_4 = set()
        node_5 = module_0.Node(prev=set_4)
        var_4 = queue_8.peek()
        queue_9 = module_0.Queue(queue_8)
        var_5 = queue_9.enqueue(set_4)
        queue_10 = module_0.Queue()
        set_5 = set()
        node_6 = module_0.Node(prev=set_5)
        var_6 = queue_10.peek()
        queue_11 = module_0.Queue(queue_10)
        var_7 = double_linked_list_2.pop()
>       assert var_7 == b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
E       AssertionError

RANDOM/test_queue4_RANDOM.py:16851: AssertionError
   - [#  50] CRP queue4: 
--------------------------------------------------------------------------------
   71:         if old_tail:
   72:             old_tail.next = self.tail
   73:         if self._length < 1:
   74:             self.head = self.tail
-  75:         self._length += 1
+  75:         self._length += 2
   76:     
   77:     def shift(self):
   78:         '''Remove the val from the tail of the list.'''
   79:         to_return = self.tail
--------------------------------------------------------------------------------
[5.52799 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_20

def test_case_20():
        node_0 = module_0.Node()
        var_0 = node_0.__repr__()
        assert var_0 == 'Value: None'
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_1 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_2 = module_0.Node(prev=set_1)
        var_1 = double_linked_list_0.append(node_2)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        var_2 = double_linked_list_0.pop()
        assert double_linked_list_0.head is None
>       assert double_linked_list_0.tail is None
E       AssertionError

RANDOM/test_queue4_RANDOM.py:428: AssertionError
   - [#  51] CRP queue4: 
--------------------------------------------------------------------------------
   76:     
   77:     def shift(self):
   78:         '''Remove the val from the tail of the list.'''
   79:         to_return = self.tail
-  80:         if self._length < 1:
+  80:         if self._length < 2:
   81:             raise IndexError('Cannot shift from an empty list.')
   82:         
   83:         new_tail = self.tail.prev
   84:         if new_tail:
--------------------------------------------------------------------------------
[5.73763 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_66

def test_case_66():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_0 = double_linked_list_0.append(node_1)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
>       var_1 = double_linked_list_0.shift()

RANDOM/test_queue4_RANDOM.py:2106: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2c6a35e0>

>   ???
E   IndexError: Cannot shift from an empty list.

queue4:81: IndexError
   - [#  52] CRP queue4: 
--------------------------------------------------------------------------------
   77:     def shift(self):
   78:         '''Remove the val from the tail of the list.'''
   79:         to_return = self.tail
   80:         if self._length < 1:
-  81:             raise IndexError('Cannot shift from an empty list.')
+  81:             raise IndexError('mutpy')
   82:         
   83:         new_tail = self.tail.prev
   84:         if new_tail:
   85:             new_tail.next = None
--------------------------------------------------------------------------------
[3.00180 s] survived
   - [#  53] CRP queue4: 
--------------------------------------------------------------------------------
   77:     def shift(self):
   78:         '''Remove the val from the tail of the list.'''
   79:         to_return = self.tail
   80:         if self._length < 1:
-  81:             raise IndexError('Cannot shift from an empty list.')
+  81:             raise IndexError('')
   82:         
   83:         new_tail = self.tail.prev
   84:         if new_tail:
   85:             new_tail.next = None
--------------------------------------------------------------------------------
[2.97734 s] survived
   - [#  54] CRP queue4: 
--------------------------------------------------------------------------------
   83:         new_tail = self.tail.prev
   84:         if new_tail:
   85:             new_tail.next = None
   86:         self.tail = new_tail
-  87:         self._length -= 1
+  87:         self._length -= 2
   88:         if self._length < 1:
   89:             self.tail = None
   90:         return to_return.data
   91:     
--------------------------------------------------------------------------------
[2.97029 s] survived
   - [#  55] CRP queue4: 
--------------------------------------------------------------------------------
   84:         if new_tail:
   85:             new_tail.next = None
   86:         self.tail = new_tail
   87:         self._length -= 1
-  88:         if self._length < 1:
+  88:         if self._length < 2:
   89:             self.tail = None
   90:         return to_return.data
   91:     
   92:     def remove(self, val):
--------------------------------------------------------------------------------
[2.98371 s] survived
   - [#  56] CRP queue4: 
--------------------------------------------------------------------------------
   93:         '''Remove first occurance of val from list.'''
   94:         curr = self.head
   95:         while curr:
   96:             if curr.data is val:
-  97:                 if self._length == 1:
+  97:                 if self._length == 2:
   98:                     (self.head, self.tail) = (None, None)
   99:                 elif (curr is not self.head and curr is not self.tail):
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  101:                 elif curr is self.head:
--------------------------------------------------------------------------------
[5.58736 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_85

def test_case_85():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        var_0 = queue_0.peek()
        node_1 = module_0.Node()
        queue_1 = module_0.Queue()
        set_1 = set()
        node_2 = module_0.Node(prev=set_1)
        var_1 = queue_1.size()
        assert var_1 == 0
        set_2 = set()
        node_3 = module_0.Node(prev=set_2)
        bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_2 = module_0.Queue(bytes_0)
        assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_2 = double_linked_list_0.append(bytes_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_3 = module_0.Queue(bytes_1)
        queue_4 = module_0.Queue()
        set_3 = set()
        node_4 = module_0.Node(prev=set_3)
        var_3 = queue_4.size()
        assert var_3 == 0
        queue_5 = module_0.Queue()
        var_4 = queue_4.size()
        assert var_4 == 0
        queue_6 = module_0.Queue()
        set_4 = set()
        node_5 = module_0.Node(prev=set_4)
        queue_7 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        node_6 = module_0.Node()
        queue_8 = module_0.Queue()
        set_5 = set()
        node_7 = module_0.Node(prev=set_5)
        queue_9 = module_0.Queue()
        double_linked_list_2 = module_0.DoubleLinkedList()
        assert double_linked_list_2.head is None
        assert double_linked_list_2.tail is None
        set_6 = set()
        node_8 = module_0.Node(prev=set_6)
        var_5 = double_linked_list_2.append(node_8)
        assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
>       var_6 = double_linked_list_0.remove(bytes_1)

RANDOM/test_queue4_RANDOM.py:2990: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2fba5150>
val = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

queue4:102: AttributeError
   - [#  57] CRP queue4: 
--------------------------------------------------------------------------------
  101:                 elif curr is self.head:
  102:                     (self.head, curr.next.prev) = (curr.next, None)
  103:                 elif curr is self.tail:
  104:                     (self.tail, curr.prev.next) = (curr.prev, None)
- 105:                 self._length -= 1
+ 105:                 self._length -= 2
  106:                 return
  107:             curr = curr.next
  108:         
  109:         raise ValueError('{} is not in the list'.format(val))
--------------------------------------------------------------------------------
[2.95603 s] survived
   - [#  58] CRP queue4: 
--------------------------------------------------------------------------------
  105:                 self._length -= 1
  106:                 return
  107:             curr = curr.next
  108:         
- 109:         raise ValueError('{} is not in the list'.format(val))
+ 109:         raise ValueError('mutpy'.format(val))
  110:     
  111:     def _repr(self):
  112:         '''Return list representation of dll.'''
  113:         l = []
--------------------------------------------------------------------------------
[3.01047 s] survived
   - [#  59] CRP queue4: 
--------------------------------------------------------------------------------
  105:                 self._length -= 1
  106:                 return
  107:             curr = curr.next
  108:         
- 109:         raise ValueError('{} is not in the list'.format(val))
+ 109:         raise ValueError(''.format(val))
  110:     
  111:     def _repr(self):
  112:         '''Return list representation of dll.'''
  113:         l = []
--------------------------------------------------------------------------------
[3.00022 s] survived
   - [#  60] EHD queue4: 
--------------------------------------------------------------------------------
   35:         try:
   36:             for val in data:
   37:                 self.push(val)
   38:         except TypeError:
-  39:             if data:
-  40:                 self.push(data)
+  39:             raise
+  40:     
   41:     
   42:     def push(self, val):
   43:         '''Add val to the head of the list.'''
   44:         old_head = self.head
--------------------------------------------------------------------------------
[5.61125 s] incompetent

TypeError: queue4:36: TypeError: 'NoneType' object is not iterable

   - [#  61] EHD queue4: 
--------------------------------------------------------------------------------
  115:             try:
  116:                 popped_data = self.pop()
  117:                 l.append(popped_data)
  118:             except IndexError:
- 119:                 break
+ 119:                 raise
  120:         return l
  121: 
  122: 
  123: class Queue(object):
--------------------------------------------------------------------------------
[2.96540 s] survived
   - [#  62] EHD queue4: 
--------------------------------------------------------------------------------
  148:         '''Return the next value in the queue without dequing it.'''
  149:         try:
  150:             return self._container.head.data
  151:         except AttributeError:
- 152:             return None
+ 152:             raise
  153:     
  154:     def size(self):
  155:         '''Return the size of the queue.'''
  156:         return self._container._length
--------------------------------------------------------------------------------
[5.64314 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_5

def test_case_5():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
>       var_0 = queue_0.peek()

RANDOM/test_queue4_RANDOM.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.Queue object at 0x7f1a2e08cc40>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'data'

queue4:150: AttributeError
   - [#  63] EXS queue4: 
--------------------------------------------------------------------------------
   35:         try:
   36:             for val in data:
   37:                 self.push(val)
   38:         except TypeError:
-  39:             if data:
-  40:                 self.push(data)
+  39:             pass
+  40:     
   41:     
   42:     def push(self, val):
   43:         '''Add val to the head of the list.'''
   44:         old_head = self.head
--------------------------------------------------------------------------------
[5.62770 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_61

def test_case_61():
        bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_0 = module_0.Queue(bytes_0)
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        node_1 = module_0.Node()
        set_1 = set()
        node_2 = module_0.Node(prev=set_1)
        queue_2 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        queue_3 = module_0.Queue()
        var_0 = queue_3.peek()
        queue_4 = module_0.Queue()
        queue_5 = module_0.Queue()
        double_linked_list_2 = module_0.DoubleLinkedList()
        assert double_linked_list_2.head is None
        assert double_linked_list_2.tail is None
        queue_6 = module_0.Queue()
        set_2 = set()
        node_3 = module_0.Node(prev=set_2)
        var_1 = queue_6.size()
        assert var_1 == 0
        queue_7 = module_0.Queue()
        node_4 = module_0.Node()
        var_2 = node_4.__repr__()
        assert var_2 == 'Value: None'
        queue_8 = module_0.Queue()
        set_3 = set()
        node_5 = module_0.Node(prev=set_3)
        var_3 = queue_8.size()
        assert var_3 == 0
        queue_9 = module_0.Queue()
        queue_10 = module_0.Queue()
        queue_11 = module_0.Queue()
        set_4 = set()
        node_6 = module_0.Node(prev=set_4)
        var_4 = queue_11.peek()
        node_7 = module_0.Node()
        queue_12 = module_0.Queue()
        set_5 = set()
        node_8 = module_0.Node(prev=set_5)
        queue_13 = module_0.Queue()
        double_linked_list_3 = module_0.DoubleLinkedList()
        assert double_linked_list_3.head is None
        assert double_linked_list_3.tail is None
        set_6 = set()
        node_9 = module_0.Node(prev=set_6)
        var_5 = double_linked_list_3.append(node_9)
        assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
        var_6 = queue_12.size()
        assert var_6 == 0
        set_7 = set()
        node_10 = module_0.Node(prev=set_7)
        queue_14 = module_0.Queue()
        double_linked_list_4 = module_0.DoubleLinkedList()
        assert double_linked_list_4.head is None
        assert double_linked_list_4.tail is None
        queue_15 = module_0.Queue()
        var_7 = queue_15.peek()
        double_linked_list_5 = module_0.DoubleLinkedList(node_3)
>       assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
E       AssertionError

RANDOM/test_queue4_RANDOM.py:2019: AssertionError
   - [#  64] EXS queue4: 
--------------------------------------------------------------------------------
  115:             try:
  116:                 popped_data = self.pop()
  117:                 l.append(popped_data)
  118:             except IndexError:
- 119:                 break
+ 119:                 pass
  120:         return l
  121: 
  122: 
  123: class Queue(object):
--------------------------------------------------------------------------------
[2.91032 s] survived
   - [#  65] EXS queue4: 
--------------------------------------------------------------------------------
  148:         '''Return the next value in the queue without dequing it.'''
  149:         try:
  150:             return self._container.head.data
  151:         except AttributeError:
- 152:             return None
+ 152:             pass
  153:     
  154:     def size(self):
  155:         '''Return the size of the queue.'''
  156:         return self._container._length
--------------------------------------------------------------------------------
[2.91952 s] survived
   - [#  66] LCR queue4: 
--------------------------------------------------------------------------------
   95:         while curr:
   96:             if curr.data is val:
   97:                 if self._length == 1:
   98:                     (self.head, self.tail) = (None, None)
-  99:                 elif (curr is not self.head and curr is not self.tail):
+  99:                 elif (curr is not self.head or curr is not self.tail):
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  101:                 elif curr is self.head:
  102:                     (self.head, curr.next.prev) = (curr.next, None)
  103:                 elif curr is self.tail:
--------------------------------------------------------------------------------
[2.98116 s] survived
   - [#  67] OIL queue4: 
--------------------------------------------------------------------------------
   34:         self._length = 0
   35:         try:
   36:             for val in data:
   37:                 self.push(val)
-  38:         except TypeError:
+  38:                 breakexcept TypeError:
   39:             if data:
   40:                 self.push(data)
   41:     
   42:     def push(self, val):
--------------------------------------------------------------------------------
[5.71267 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_65

def test_case_65():
        bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_0 = module_0.Queue(bytes_0)
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        queue_1 = module_0.Queue()
        assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        var_0 = queue_1.size()
        assert var_0 == 0
        queue_2 = module_0.Queue()
        var_1 = queue_1.size()
        assert var_1 == 0
        var_2 = queue_0.peek()
>       assert var_2 == 77
E       AssertionError

RANDOM/test_queue4_RANDOM.py:2091: AssertionError
   - [#  68] OIL queue4: 
--------------------------------------------------------------------------------
  104:                     (self.tail, curr.prev.next) = (curr.prev, None)
  105:                 self._length -= 1
  106:                 return
  107:             curr = curr.next
- 108:         
+ 108:             break
  109:         raise ValueError('{} is not in the list'.format(val))
  110:     
  111:     def _repr(self):
  112:         '''Return list representation of dll.'''
--------------------------------------------------------------------------------
[2.98023 s] survived
   - [#  69] OIL queue4: 
--------------------------------------------------------------------------------
  115:             try:
  116:                 popped_data = self.pop()
  117:                 l.append(popped_data)
  118:             except IndexError:
- 119:                 break
+ 119:                 breakbreak
  120:         return l
  121: 
  122: 
  123: class Queue(object):
--------------------------------------------------------------------------------
[2.96696 s] survived
   - [#  70] RIL queue4: 
--------------------------------------------------------------------------------
   32:         self.head = None
   33:         self.tail = None
   34:         self._length = 0
   35:         try:
-  36:             for val in data:
+  36:             for val in reversed(data):
   37:                 self.push(val)
   38:         except TypeError:
   39:             if data:
   40:                 self.push(data)
--------------------------------------------------------------------------------
[5.82905 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_65

def test_case_65():
        bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_0 = module_0.Queue(bytes_0)
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        queue_1 = module_0.Queue()
        assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        var_0 = queue_1.size()
        assert var_0 == 0
        queue_2 = module_0.Queue()
        var_1 = queue_1.size()
        assert var_1 == 0
        var_2 = queue_0.peek()
>       assert var_2 == 77
E       AssertionError

RANDOM/test_queue4_RANDOM.py:2091: AssertionError
   - [#  71] ROR queue4: 
--------------------------------------------------------------------------------
   51:     
   52:     def pop(self):
   53:         '''Remove the val from the head of the list.'''
   54:         to_return = self.head
-  55:         if self._length < 1:
+  55:         if self._length > 1:
   56:             raise IndexError('Cannot pop from an empty list.')
   57:         
   58:         new_head = self.head.next
   59:         if new_head:
--------------------------------------------------------------------------------
[5.86456 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_189

def test_case_189():
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        queue_1 = module_0.Queue()
        queue_2 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_3 = module_0.Queue(bytes_0)
        assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
        bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_4 = module_0.Queue(bytes_1)
        queue_5 = module_0.Queue()
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_0 = queue_5.size()
        assert var_0 == 0
        queue_6 = module_0.Queue()
        var_1 = queue_5.size()
        assert var_1 == 0
        queue_7 = module_0.Queue()
        bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_8 = module_0.Queue(bytes_2)
        double_linked_list_2 = module_0.DoubleLinkedList()
        assert double_linked_list_2.head is None
        assert double_linked_list_2.tail is None
        var_2 = double_linked_list_2.append(bytes_2)
        assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
        bytes_3 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_9 = module_0.Queue(bytes_3)
        queue_10 = module_0.Queue()
        set_2 = set()
        node_2 = module_0.Node(prev=set_2)
        var_3 = queue_10.size()
        assert var_3 == 0
        queue_11 = module_0.Queue()
        var_4 = queue_10.size()
        assert var_4 == 0
>       var_5 = queue_4.dequeue()

RANDOM/test_queue4_RANDOM.py:7659: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue4:145: in dequeue
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2f0fb640>

>   ???
E   IndexError: Cannot pop from an empty list.

queue4:56: IndexError
   - [#  72] ROR queue4: 
--------------------------------------------------------------------------------
   51:     
   52:     def pop(self):
   53:         '''Remove the val from the head of the list.'''
   54:         to_return = self.head
-  55:         if self._length < 1:
+  55:         if self._length <= 1:
   56:             raise IndexError('Cannot pop from an empty list.')
   57:         
   58:         new_head = self.head.next
   59:         if new_head:
--------------------------------------------------------------------------------
[5.74135 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_20

def test_case_20():
        node_0 = module_0.Node()
        var_0 = node_0.__repr__()
        assert var_0 == 'Value: None'
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_1 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_2 = module_0.Node(prev=set_1)
        var_1 = double_linked_list_0.append(node_2)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
>       var_2 = double_linked_list_0.pop()

RANDOM/test_queue4_RANDOM.py:426: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2df3b4f0>

>   ???
E   IndexError: Cannot pop from an empty list.

queue4:56: IndexError
   - [#  73] ROR queue4: 
--------------------------------------------------------------------------------
   59:         if new_head:
   60:             new_head.prev = None
   61:         self.head = new_head
   62:         self._length -= 1
-  63:         if self._length < 1:
+  63:         if self._length > 1:
   64:             self.tail = None
   65:         return to_return.data
   66:     
   67:     def append(self, val):
--------------------------------------------------------------------------------
[5.83478 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_20

def test_case_20():
        node_0 = module_0.Node()
        var_0 = node_0.__repr__()
        assert var_0 == 'Value: None'
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_1 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_2 = module_0.Node(prev=set_1)
        var_1 = double_linked_list_0.append(node_2)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        var_2 = double_linked_list_0.pop()
        assert double_linked_list_0.head is None
>       assert double_linked_list_0.tail is None
E       AssertionError

RANDOM/test_queue4_RANDOM.py:428: AssertionError
   - [#  74] ROR queue4: 
--------------------------------------------------------------------------------
   59:         if new_head:
   60:             new_head.prev = None
   61:         self.head = new_head
   62:         self._length -= 1
-  63:         if self._length < 1:
+  63:         if self._length <= 1:
   64:             self.tail = None
   65:         return to_return.data
   66:     
   67:     def append(self, val):
--------------------------------------------------------------------------------
[3.00547 s] survived
   - [#  75] ROR queue4: 
--------------------------------------------------------------------------------
   69:         old_tail = self.tail
   70:         self.tail = Node(val, prev=old_tail)
   71:         if old_tail:
   72:             old_tail.next = self.tail
-  73:         if self._length < 1:
+  73:         if self._length > 1:
   74:             self.head = self.tail
   75:         self._length += 1
   76:     
   77:     def shift(self):
--------------------------------------------------------------------------------
[5.71762 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_4

def test_case_4():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_0 = double_linked_list_0.append(node_1)
>       assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
E       AssertionError

RANDOM/test_queue4_RANDOM.py:43: AssertionError
   - [#  76] ROR queue4: 
--------------------------------------------------------------------------------
   69:         old_tail = self.tail
   70:         self.tail = Node(val, prev=old_tail)
   71:         if old_tail:
   72:             old_tail.next = self.tail
-  73:         if self._length < 1:
+  73:         if self._length <= 1:
   74:             self.head = self.tail
   75:         self._length += 1
   76:     
   77:     def shift(self):
--------------------------------------------------------------------------------
[6.00761 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_379

def test_case_379():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        var_0 = queue_0.size()
        assert var_0 == 0
        queue_1 = module_0.Queue()
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        queue_2 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        queue_3 = module_0.Queue()
        queue_4 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        var_1 = queue_4.size()
        assert var_1 == 0
        bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_5 = module_0.Queue(bytes_0)
        assert f'{type(queue_5).__module__}.{type(queue_5).__qualname__}' == 'queue4.Queue'
        double_linked_list_2 = module_0.DoubleLinkedList()
        assert double_linked_list_2.head is None
        assert double_linked_list_2.tail is None
        var_2 = double_linked_list_2.append(bytes_0)
        assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
        var_3 = double_linked_list_2.append(queue_5)
        set_2 = set()
        node_2 = module_0.Node(prev=set_2)
        queue_6 = module_0.Queue()
        double_linked_list_3 = module_0.DoubleLinkedList()
        assert double_linked_list_3.head is None
        assert double_linked_list_3.tail is None
        set_3 = set()
        node_3 = module_0.Node(prev=set_3)
        queue_7 = module_0.Queue()
        double_linked_list_4 = module_0.DoubleLinkedList()
        assert double_linked_list_4.head is None
        assert double_linked_list_4.tail is None
        node_4 = module_0.Node()
        queue_8 = module_0.Queue()
        set_4 = set()
        node_5 = module_0.Node(prev=set_4)
        var_4 = queue_8.peek()
        queue_9 = module_0.Queue(queue_8)
        var_5 = queue_9.enqueue(set_4)
        queue_10 = module_0.Queue()
        set_5 = set()
        node_6 = module_0.Node(prev=set_5)
        var_6 = queue_10.peek()
        queue_11 = module_0.Queue(queue_10)
        var_7 = double_linked_list_2.pop()
>       assert var_7 == b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
E       AssertionError

RANDOM/test_queue4_RANDOM.py:16851: AssertionError
   - [#  77] ROR queue4: 
--------------------------------------------------------------------------------
   76:     
   77:     def shift(self):
   78:         '''Remove the val from the tail of the list.'''
   79:         to_return = self.tail
-  80:         if self._length < 1:
+  80:         if self._length > 1:
   81:             raise IndexError('Cannot shift from an empty list.')
   82:         
   83:         new_tail = self.tail.prev
   84:         if new_tail:
--------------------------------------------------------------------------------
[6.08154 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_311

def test_case_311():
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_0 = module_0.Queue(bytes_0)
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        var_0 = queue_0.dequeue()
        assert var_0 == 77
        bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_1 = module_0.Queue(bytes_1)
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'queue4.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_1 = double_linked_list_0.append(bytes_1)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        var_2 = double_linked_list_0.append(queue_1)
        queue_2 = module_0.Queue()
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_3 = queue_2.size()
        assert var_3 == 0
        queue_3 = module_0.Queue()
>       var_4 = double_linked_list_0.shift()

RANDOM/test_queue4_RANDOM.py:13545: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2ce609a0>

>   ???
E   IndexError: Cannot shift from an empty list.

queue4:81: IndexError
   - [#  78] ROR queue4: 
--------------------------------------------------------------------------------
   76:     
   77:     def shift(self):
   78:         '''Remove the val from the tail of the list.'''
   79:         to_return = self.tail
-  80:         if self._length < 1:
+  80:         if self._length <= 1:
   81:             raise IndexError('Cannot shift from an empty list.')
   82:         
   83:         new_tail = self.tail.prev
   84:         if new_tail:
--------------------------------------------------------------------------------
[5.77386 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_66

def test_case_66():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_0 = double_linked_list_0.append(node_1)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
>       var_1 = double_linked_list_0.shift()

RANDOM/test_queue4_RANDOM.py:2106: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2f11eb00>

>   ???
E   IndexError: Cannot shift from an empty list.

queue4:81: IndexError
   - [#  79] ROR queue4: 
--------------------------------------------------------------------------------
   84:         if new_tail:
   85:             new_tail.next = None
   86:         self.tail = new_tail
   87:         self._length -= 1
-  88:         if self._length < 1:
+  88:         if self._length > 1:
   89:             self.tail = None
   90:         return to_return.data
   91:     
   92:     def remove(self, val):
--------------------------------------------------------------------------------
[3.18600 s] survived
   - [#  80] ROR queue4: 
--------------------------------------------------------------------------------
   84:         if new_tail:
   85:             new_tail.next = None
   86:         self.tail = new_tail
   87:         self._length -= 1
-  88:         if self._length < 1:
+  88:         if self._length <= 1:
   89:             self.tail = None
   90:         return to_return.data
   91:     
   92:     def remove(self, val):
--------------------------------------------------------------------------------
[3.04983 s] survived
   - [#  81] ROR queue4: 
--------------------------------------------------------------------------------
   93:         '''Remove first occurance of val from list.'''
   94:         curr = self.head
   95:         while curr:
   96:             if curr.data is val:
-  97:                 if self._length == 1:
+  97:                 if self._length != 1:
   98:                     (self.head, self.tail) = (None, None)
   99:                 elif (curr is not self.head and curr is not self.tail):
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  101:                 elif curr is self.head:
--------------------------------------------------------------------------------
[6.08946 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_85

def test_case_85():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        var_0 = queue_0.peek()
        node_1 = module_0.Node()
        queue_1 = module_0.Queue()
        set_1 = set()
        node_2 = module_0.Node(prev=set_1)
        var_1 = queue_1.size()
        assert var_1 == 0
        set_2 = set()
        node_3 = module_0.Node(prev=set_2)
        bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_2 = module_0.Queue(bytes_0)
        assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_2 = double_linked_list_0.append(bytes_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_3 = module_0.Queue(bytes_1)
        queue_4 = module_0.Queue()
        set_3 = set()
        node_4 = module_0.Node(prev=set_3)
        var_3 = queue_4.size()
        assert var_3 == 0
        queue_5 = module_0.Queue()
        var_4 = queue_4.size()
        assert var_4 == 0
        queue_6 = module_0.Queue()
        set_4 = set()
        node_5 = module_0.Node(prev=set_4)
        queue_7 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        node_6 = module_0.Node()
        queue_8 = module_0.Queue()
        set_5 = set()
        node_7 = module_0.Node(prev=set_5)
        queue_9 = module_0.Queue()
        double_linked_list_2 = module_0.DoubleLinkedList()
        assert double_linked_list_2.head is None
        assert double_linked_list_2.tail is None
        set_6 = set()
        node_8 = module_0.Node(prev=set_6)
        var_5 = double_linked_list_2.append(node_8)
        assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
>       var_6 = double_linked_list_0.remove(bytes_1)

RANDOM/test_queue4_RANDOM.py:2990: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2c760b50>
val = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

queue4:102: AttributeError
   - [#  82] SDI queue4: 
--------------------------------------------------------------------------------
    3: 
    4: class Node(object):
    5:     '''Node class for data storage.'''
    6:     
-   7:     def __init__(self, data=None, next_node=None, prev=None):
-   8:         '''Initialize Node.'''
-   9:         self.data = data
-  10:         self.next = next_node
-  11:         self.prev = prev
-  12:     
+   7:     @staticmethod
+   8:     def __init__(self, data=None, next_node=None, prev=None):
+   9:         '''Initialize Node.'''
+  10:         self.data = data
+  11:         self.next = next_node
+  12:         self.prev = prev
   13:     def __repr__(self):
   14:         '''String representation.'''
   15:         return 'Value: {}'.format(self.data)
   16: 
--------------------------------------------------------------------------------
[5.73569 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/queue4/RANDOM/test_queue4_RANDOM.py:8: TypeError: Node.__init__() missing 1 required positional argument: 'self'

   - [#  83] SDI queue4: 
--------------------------------------------------------------------------------
    9:         self.data = data
   10:         self.next = next_node
   11:         self.prev = prev
   12:     
-  13:     def __repr__(self):
-  14:         '''String representation.'''
-  15:         return 'Value: {}'.format(self.data)
-  16: 
+  13:     @staticmethod
+  14:     def __repr__(self):
+  15:         '''String representation.'''
+  16:         return 'Value: {}'.format(self.data)
   17: 
   18: class DoubleLinkedList(object):
   19:     '''Double linked list impplementation.
   20: 
--------------------------------------------------------------------------------
[5.72637 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/queue4/RANDOM/test_queue4_RANDOM.py:151: TypeError: Node.__repr__() missing 1 required positional argument: 'self'

   - [#  84] SDI queue4: 
--------------------------------------------------------------------------------
   26:     remove(val) - will remove the first instance of (val) found in the list,
   27:     starting from the head.
   28:     '''
   29:     
-  30:     def __init__(self, data=None):
-  31:         '''Initialize list.'''
-  32:         self.head = None
-  33:         self.tail = None
-  34:         self._length = 0
-  35:         try:
-  36:             for val in data:
-  37:                 self.push(val)
-  38:         except TypeError:
-  39:             if data:
-  40:                 self.push(data)
-  41:     
+  30:     @staticmethod
+  31:     def __init__(self, data=None):
+  32:         '''Initialize list.'''
+  33:         self.head = None
+  34:         self.tail = None
+  35:         self._length = 0
+  36:         try:
+  37:             for val in data:
+  38:                 self.push(val)
+  39:         except TypeError:
+  40:             if data:
+  41:                 self.push(data)
   42:     def push(self, val):
   43:         '''Add val to the head of the list.'''
   44:         old_head = self.head
   45:         self.head = Node(val, next_node=old_head)
--------------------------------------------------------------------------------
[5.64498 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_1

def test_case_1():
>       queue_0 = module_0.Queue()

RANDOM/test_queue4_RANDOM.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue4:137: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = None, data = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'head'

queue4:33: AttributeError
   - [#  85] SDI queue4: 
--------------------------------------------------------------------------------
   38:         except TypeError:
   39:             if data:
   40:                 self.push(data)
   41:     
-  42:     def push(self, val):
-  43:         '''Add val to the head of the list.'''
-  44:         old_head = self.head
-  45:         self.head = Node(val, next_node=old_head)
-  46:         if old_head:
-  47:             old_head.prev = self.head
-  48:         if not (self.tail):
-  49:             self.tail = self.head
-  50:         self._length += 1
-  51:     
+  42:     @staticmethod
+  43:     def push(self, val):
+  44:         '''Add val to the head of the list.'''
+  45:         old_head = self.head
+  46:         self.head = Node(val, next_node=old_head)
+  47:         if old_head:
+  48:             old_head.prev = self.head
+  49:         if not (self.tail):
+  50:             self.tail = self.head
+  51:         self._length += 1
   52:     def pop(self):
   53:         '''Remove the val from the head of the list.'''
   54:         to_return = self.head
   55:         if self._length < 1:
--------------------------------------------------------------------------------
[5.80961 s] incompetent

TypeError: queue4:40: TypeError: DoubleLinkedList.push() missing 1 required positional argument: 'val'

   - [#  86] SDI queue4: 
--------------------------------------------------------------------------------
   48:         if not (self.tail):
   49:             self.tail = self.head
   50:         self._length += 1
   51:     
-  52:     def pop(self):
-  53:         '''Remove the val from the head of the list.'''
-  54:         to_return = self.head
-  55:         if self._length < 1:
-  56:             raise IndexError('Cannot pop from an empty list.')
-  57:         
-  58:         new_head = self.head.next
-  59:         if new_head:
-  60:             new_head.prev = None
-  61:         self.head = new_head
-  62:         self._length -= 1
-  63:         if self._length < 1:
-  64:             self.tail = None
-  65:         return to_return.data
-  66:     
+  52:     @staticmethod
+  53:     def pop(self):
+  54:         '''Remove the val from the head of the list.'''
+  55:         to_return = self.head
+  56:         if self._length < 1:
+  57:             raise IndexError('Cannot pop from an empty list.')
+  58:         
+  59:         new_head = self.head.next
+  60:         if new_head:
+  61:             new_head.prev = None
+  62:         self.head = new_head
+  63:         self._length -= 1
+  64:         if self._length < 1:
+  65:             self.tail = None
+  66:         return to_return.data
   67:     def append(self, val):
   68:         '''Add val to the tail of the list.'''
   69:         old_tail = self.tail
   70:         self.tail = Node(val, prev=old_tail)
--------------------------------------------------------------------------------
[5.57936 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/queue4/RANDOM/test_queue4_RANDOM.py:426: TypeError: DoubleLinkedList.pop() missing 1 required positional argument: 'self'

   - [#  87] SDI queue4: 
--------------------------------------------------------------------------------
   63:         if self._length < 1:
   64:             self.tail = None
   65:         return to_return.data
   66:     
-  67:     def append(self, val):
-  68:         '''Add val to the tail of the list.'''
-  69:         old_tail = self.tail
-  70:         self.tail = Node(val, prev=old_tail)
-  71:         if old_tail:
-  72:             old_tail.next = self.tail
-  73:         if self._length < 1:
-  74:             self.head = self.tail
-  75:         self._length += 1
-  76:     
+  67:     @staticmethod
+  68:     def append(self, val):
+  69:         '''Add val to the tail of the list.'''
+  70:         old_tail = self.tail
+  71:         self.tail = Node(val, prev=old_tail)
+  72:         if old_tail:
+  73:             old_tail.next = self.tail
+  74:         if self._length < 1:
+  75:             self.head = self.tail
+  76:         self._length += 1
   77:     def shift(self):
   78:         '''Remove the val from the tail of the list.'''
   79:         to_return = self.tail
   80:         if self._length < 1:
--------------------------------------------------------------------------------
[5.81502 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/queue4/RANDOM/test_queue4_RANDOM.py:42: TypeError: DoubleLinkedList.append() missing 1 required positional argument: 'val'

   - [#  88] SDI queue4: 
--------------------------------------------------------------------------------
   73:         if self._length < 1:
   74:             self.head = self.tail
   75:         self._length += 1
   76:     
-  77:     def shift(self):
-  78:         '''Remove the val from the tail of the list.'''
-  79:         to_return = self.tail
-  80:         if self._length < 1:
-  81:             raise IndexError('Cannot shift from an empty list.')
-  82:         
-  83:         new_tail = self.tail.prev
-  84:         if new_tail:
-  85:             new_tail.next = None
-  86:         self.tail = new_tail
-  87:         self._length -= 1
-  88:         if self._length < 1:
-  89:             self.tail = None
-  90:         return to_return.data
-  91:     
+  77:     @staticmethod
+  78:     def shift(self):
+  79:         '''Remove the val from the tail of the list.'''
+  80:         to_return = self.tail
+  81:         if self._length < 1:
+  82:             raise IndexError('Cannot shift from an empty list.')
+  83:         
+  84:         new_tail = self.tail.prev
+  85:         if new_tail:
+  86:             new_tail.next = None
+  87:         self.tail = new_tail
+  88:         self._length -= 1
+  89:         if self._length < 1:
+  90:             self.tail = None
+  91:         return to_return.data
   92:     def remove(self, val):
   93:         '''Remove first occurance of val from list.'''
   94:         curr = self.head
   95:         while curr:
--------------------------------------------------------------------------------
[5.85833 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/queue4/RANDOM/test_queue4_RANDOM.py:2106: TypeError: DoubleLinkedList.shift() missing 1 required positional argument: 'self'

   - [#  89] SDI queue4: 
--------------------------------------------------------------------------------
   88:         if self._length < 1:
   89:             self.tail = None
   90:         return to_return.data
   91:     
-  92:     def remove(self, val):
-  93:         '''Remove first occurance of val from list.'''
-  94:         curr = self.head
-  95:         while curr:
-  96:             if curr.data is val:
-  97:                 if self._length == 1:
-  98:                     (self.head, self.tail) = (None, None)
-  99:                 elif (curr is not self.head and curr is not self.tail):
- 100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
- 101:                 elif curr is self.head:
- 102:                     (self.head, curr.next.prev) = (curr.next, None)
- 103:                 elif curr is self.tail:
- 104:                     (self.tail, curr.prev.next) = (curr.prev, None)
- 105:                 self._length -= 1
- 106:                 return
- 107:             curr = curr.next
- 108:         
- 109:         raise ValueError('{} is not in the list'.format(val))
- 110:     
+  92:     @staticmethod
+  93:     def remove(self, val):
+  94:         '''Remove first occurance of val from list.'''
+  95:         curr = self.head
+  96:         while curr:
+  97:             if curr.data is val:
+  98:                 if self._length == 1:
+  99:                     (self.head, self.tail) = (None, None)
+ 100:                 elif (curr is not self.head and curr is not self.tail):
+ 101:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
+ 102:                 elif curr is self.head:
+ 103:                     (self.head, curr.next.prev) = (curr.next, None)
+ 104:                 elif curr is self.tail:
+ 105:                     (self.tail, curr.prev.next) = (curr.prev, None)
+ 106:                 self._length -= 1
+ 107:                 return
+ 108:             curr = curr.next
+ 109:         
+ 110:         raise ValueError('{} is not in the list'.format(val))
  111:     def _repr(self):
  112:         '''Return list representation of dll.'''
  113:         l = []
  114:         while True:
--------------------------------------------------------------------------------
[5.76236 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/queue4/RANDOM/test_queue4_RANDOM.py:2990: TypeError: DoubleLinkedList.remove() missing 1 required positional argument: 'val'

   - [#  90] SDI queue4: 
--------------------------------------------------------------------------------
  107:             curr = curr.next
  108:         
  109:         raise ValueError('{} is not in the list'.format(val))
  110:     
- 111:     def _repr(self):
- 112:         '''Return list representation of dll.'''
- 113:         l = []
- 114:         while True:
- 115:             try:
- 116:                 popped_data = self.pop()
- 117:                 l.append(popped_data)
- 118:             except IndexError:
- 119:                 break
- 120:         return l
- 121: 
+ 111:     @staticmethod
+ 112:     def _repr(self):
+ 113:         '''Return list representation of dll.'''
+ 114:         l = []
+ 115:         while True:
+ 116:             try:
+ 117:                 popped_data = self.pop()
+ 118:                 l.append(popped_data)
+ 119:             except IndexError:
+ 120:                 break
+ 121:         return l
  122: 
  123: class Queue(object):
  124:     '''Implementation of Queue.
  125: 
--------------------------------------------------------------------------------
[3.04570 s] survived
   - [#  91] SDI queue4: 
--------------------------------------------------------------------------------
  131:     If the queue is empty, returns None
  132:     size(): return the size of the queue. Returns 0 if the queue is empty.
  133:     '''
  134:     
- 135:     def __init__(self, data=None):
- 136:         '''Initialize queue data structure.'''
- 137:         self._container = DoubleLinkedList(data)
- 138:     
+ 135:     @staticmethod
+ 136:     def __init__(self, data=None):
+ 137:         '''Initialize queue data structure.'''
+ 138:         self._container = DoubleLinkedList(data)
  139:     def enqueue(self, val):
  140:         '''Add a value to the queue.'''
  141:         self._container.append(val)
  142:     
--------------------------------------------------------------------------------
[5.62467 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/queue4/RANDOM/test_queue4_RANDOM.py:11: TypeError: Queue.__init__() missing 1 required positional argument: 'self'

   - [#  92] SDI queue4: 
--------------------------------------------------------------------------------
  135:     def __init__(self, data=None):
  136:         '''Initialize queue data structure.'''
  137:         self._container = DoubleLinkedList(data)
  138:     
- 139:     def enqueue(self, val):
- 140:         '''Add a value to the queue.'''
- 141:         self._container.append(val)
- 142:     
+ 139:     @staticmethod
+ 140:     def enqueue(self, val):
+ 141:         '''Add a value to the queue.'''
+ 142:         self._container.append(val)
  143:     def dequeue(self):
  144:         '''Remove a value from the front of the queue.'''
  145:         return self._container.pop()
  146:     
--------------------------------------------------------------------------------
[5.88180 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/queue4/RANDOM/test_queue4_RANDOM.py:85: TypeError: Queue.enqueue() missing 1 required positional argument: 'val'

   - [#  93] SDI queue4: 
--------------------------------------------------------------------------------
  139:     def enqueue(self, val):
  140:         '''Add a value to the queue.'''
  141:         self._container.append(val)
  142:     
- 143:     def dequeue(self):
- 144:         '''Remove a value from the front of the queue.'''
- 145:         return self._container.pop()
- 146:     
+ 143:     @staticmethod
+ 144:     def dequeue(self):
+ 145:         '''Remove a value from the front of the queue.'''
+ 146:         return self._container.pop()
  147:     def peek(self):
  148:         '''Return the next value in the queue without dequing it.'''
  149:         try:
  150:             return self._container.head.data
--------------------------------------------------------------------------------
[5.73074 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/queue4/RANDOM/test_queue4_RANDOM.py:4292: TypeError: Queue.dequeue() missing 1 required positional argument: 'self'

   - [#  94] SDI queue4: 
--------------------------------------------------------------------------------
  143:     def dequeue(self):
  144:         '''Remove a value from the front of the queue.'''
  145:         return self._container.pop()
  146:     
- 147:     def peek(self):
- 148:         '''Return the next value in the queue without dequing it.'''
- 149:         try:
- 150:             return self._container.head.data
- 151:         except AttributeError:
- 152:             return None
- 153:     
+ 147:     @staticmethod
+ 148:     def peek(self):
+ 149:         '''Return the next value in the queue without dequing it.'''
+ 150:         try:
+ 151:             return self._container.head.data
+ 152:         except AttributeError:
+ 153:             return None
  154:     def size(self):
  155:         '''Return the size of the queue.'''
  156:         return self._container._length
--------------------------------------------------------------------------------
[5.83460 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/queue4/RANDOM/test_queue4_RANDOM.py:50: TypeError: Queue.peek() missing 1 required positional argument: 'self'

   - [#  95] SDI queue4: 
--------------------------------------------------------------------------------
  150:             return self._container.head.data
  151:         except AttributeError:
  152:             return None
  153:     
- 154:     def size(self):
- 155:         '''Return the size of the queue.'''
- 156:         return self._container._length
+ 154:     @staticmethod
+ 155:     def size(self):
+ 156:         '''Return the size of the queue.'''
+ 157:         return self._container._length
--------------------------------------------------------------------------------
[5.69568 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/queue4/RANDOM/test_queue4_RANDOM.py:19: TypeError: Queue.size() missing 1 required positional argument: 'self'

   - [#  96] SDL queue4: 
--------------------------------------------------------------------------------
    5:     '''Node class for data storage.'''
    6:     
    7:     def __init__(self, data=None, next_node=None, prev=None):
    8:         '''Initialize Node.'''
-   9:         self.data = data
+   9:         pass
   10:         self.next = next_node
   11:         self.prev = prev
   12:     
   13:     def __repr__(self):
--------------------------------------------------------------------------------
[5.72944 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_8

def test_case_8():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_0 = double_linked_list_0.append(node_1)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        queue_2 = module_0.Queue()
        set_2 = set()
        node_2 = module_0.Node(prev=set_2)
        var_1 = queue_2.peek()
        set_3 = set()
        node_3 = module_0.Node(prev=set_3)
        set_4 = set()
        node_4 = module_0.Node(prev=set_4)
        queue_3 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        queue_4 = module_0.Queue()
        queue_5 = module_0.Queue()
        set_5 = set()
        node_5 = module_0.Node(prev=set_5)
        var_2 = queue_5.size()
        assert var_2 == 0
>       var_3 = node_0.__repr__()

RANDOM/test_queue4_RANDOM.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'Node' object has no attribute 'data'") raised in repr()] Node object at 0x7f1a2a541870>

>   ???
E   AttributeError: 'Node' object has no attribute 'data'

queue4:15: AttributeError
   - [#  97] SDL queue4: 
--------------------------------------------------------------------------------
    6:     
    7:     def __init__(self, data=None, next_node=None, prev=None):
    8:         '''Initialize Node.'''
    9:         self.data = data
-  10:         self.next = next_node
+  10:         pass
   11:         self.prev = prev
   12:     
   13:     def __repr__(self):
   14:         '''String representation.'''
--------------------------------------------------------------------------------
[5.64639 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_20

def test_case_20():
        node_0 = module_0.Node()
        var_0 = node_0.__repr__()
        assert var_0 == 'Value: None'
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_1 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_2 = module_0.Node(prev=set_1)
        var_1 = double_linked_list_0.append(node_2)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
>       var_2 = double_linked_list_0.pop()

RANDOM/test_queue4_RANDOM.py:426: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2ed10e80>

>   ???
E   AttributeError: 'Node' object has no attribute 'next'

queue4:58: AttributeError
   - [#  98] SDL queue4: 
--------------------------------------------------------------------------------
    7:     def __init__(self, data=None, next_node=None, prev=None):
    8:         '''Initialize Node.'''
    9:         self.data = data
   10:         self.next = next_node
-  11:         self.prev = prev
+  11:         pass
   12:     
   13:     def __repr__(self):
   14:         '''String representation.'''
   15:         return 'Value: {}'.format(self.data)
--------------------------------------------------------------------------------
[5.64602 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_20

def test_case_20():
        node_0 = module_0.Node()
        var_0 = node_0.__repr__()
        assert var_0 == 'Value: None'
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_1 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_2 = module_0.Node(prev=set_1)
        var_1 = double_linked_list_0.append(node_2)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        var_2 = double_linked_list_0.pop()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'queue4.Node'
        assert var_2.data is None
        assert var_2.next is None
>       assert var_2.prev == {*()}
E       AttributeError: 'Node' object has no attribute 'prev'

RANDOM/test_queue4_RANDOM.py:432: AttributeError
   - [#  99] SDL queue4: 
--------------------------------------------------------------------------------
   11:         self.prev = prev
   12:     
   13:     def __repr__(self):
   14:         '''String representation.'''
-  15:         return 'Value: {}'.format(self.data)
+  15:         pass
   16: 
   17: 
   18: class DoubleLinkedList(object):
   19:     '''Double linked list impplementation.
--------------------------------------------------------------------------------
[5.68905 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_8

def test_case_8():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_0 = double_linked_list_0.append(node_1)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        queue_2 = module_0.Queue()
        set_2 = set()
        node_2 = module_0.Node(prev=set_2)
        var_1 = queue_2.peek()
        set_3 = set()
        node_3 = module_0.Node(prev=set_3)
        set_4 = set()
        node_4 = module_0.Node(prev=set_4)
        queue_3 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        queue_4 = module_0.Queue()
        queue_5 = module_0.Queue()
        set_5 = set()
        node_5 = module_0.Node(prev=set_5)
        var_2 = queue_5.size()
        assert var_2 == 0
        var_3 = node_0.__repr__()
>       assert var_3 == 'Value: None'
E       AssertionError

RANDOM/test_queue4_RANDOM.py:152: AssertionError
   - [# 100] SDL queue4: 
--------------------------------------------------------------------------------
   28:     '''
   29:     
   30:     def __init__(self, data=None):
   31:         '''Initialize list.'''
-  32:         self.head = None
+  32:         pass
   33:         self.tail = None
   34:         self._length = 0
   35:         try:
   36:             for val in data:
--------------------------------------------------------------------------------
[5.77272 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_3

def test_case_3():
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        double_linked_list_0 = module_0.DoubleLinkedList()
>       assert double_linked_list_0.head is None
E       AttributeError: 'DoubleLinkedList' object has no attribute 'head'

RANDOM/test_queue4_RANDOM.py:28: AttributeError
   - [# 101] SDL queue4: 
--------------------------------------------------------------------------------
   29:     
   30:     def __init__(self, data=None):
   31:         '''Initialize list.'''
   32:         self.head = None
-  33:         self.tail = None
+  33:         pass
   34:         self._length = 0
   35:         try:
   36:             for val in data:
   37:                 self.push(val)
--------------------------------------------------------------------------------
[5.56062 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_3

def test_case_3():
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
>       assert double_linked_list_0.tail is None
E       AttributeError: 'DoubleLinkedList' object has no attribute 'tail'

RANDOM/test_queue4_RANDOM.py:29: AttributeError
   - [# 102] SDL queue4: 
--------------------------------------------------------------------------------
   30:     def __init__(self, data=None):
   31:         '''Initialize list.'''
   32:         self.head = None
   33:         self.tail = None
-  34:         self._length = 0
+  34:         pass
   35:         try:
   36:             for val in data:
   37:                 self.push(val)
   38:         except TypeError:
--------------------------------------------------------------------------------
[5.75701 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_2

def test_case_2():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
>       var_0 = queue_0.size()

RANDOM/test_queue4_RANDOM.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.Queue object at 0x7f1a2ed10ac0>

>   ???
E   AttributeError: 'DoubleLinkedList' object has no attribute '_length'

queue4:156: AttributeError
   - [# 103] SDL queue4: 
--------------------------------------------------------------------------------
   33:         self.tail = None
   34:         self._length = 0
   35:         try:
   36:             for val in data:
-  37:                 self.push(val)
+  37:                 pass
   38:         except TypeError:
   39:             if data:
   40:                 self.push(data)
   41:     
--------------------------------------------------------------------------------
[5.81229 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_65

def test_case_65():
        bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_0 = module_0.Queue(bytes_0)
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        queue_1 = module_0.Queue()
        assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        var_0 = queue_1.size()
        assert var_0 == 0
        queue_2 = module_0.Queue()
        var_1 = queue_1.size()
        assert var_1 == 0
        var_2 = queue_0.peek()
>       assert var_2 == 77
E       AssertionError

RANDOM/test_queue4_RANDOM.py:2091: AssertionError
   - [# 104] SDL queue4: 
--------------------------------------------------------------------------------
   36:             for val in data:
   37:                 self.push(val)
   38:         except TypeError:
   39:             if data:
-  40:                 self.push(data)
+  40:                 pass
   41:     
   42:     def push(self, val):
   43:         '''Add val to the head of the list.'''
   44:         old_head = self.head
--------------------------------------------------------------------------------
[5.75304 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_61

def test_case_61():
        bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_0 = module_0.Queue(bytes_0)
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        node_1 = module_0.Node()
        set_1 = set()
        node_2 = module_0.Node(prev=set_1)
        queue_2 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        queue_3 = module_0.Queue()
        var_0 = queue_3.peek()
        queue_4 = module_0.Queue()
        queue_5 = module_0.Queue()
        double_linked_list_2 = module_0.DoubleLinkedList()
        assert double_linked_list_2.head is None
        assert double_linked_list_2.tail is None
        queue_6 = module_0.Queue()
        set_2 = set()
        node_3 = module_0.Node(prev=set_2)
        var_1 = queue_6.size()
        assert var_1 == 0
        queue_7 = module_0.Queue()
        node_4 = module_0.Node()
        var_2 = node_4.__repr__()
        assert var_2 == 'Value: None'
        queue_8 = module_0.Queue()
        set_3 = set()
        node_5 = module_0.Node(prev=set_3)
        var_3 = queue_8.size()
        assert var_3 == 0
        queue_9 = module_0.Queue()
        queue_10 = module_0.Queue()
        queue_11 = module_0.Queue()
        set_4 = set()
        node_6 = module_0.Node(prev=set_4)
        var_4 = queue_11.peek()
        node_7 = module_0.Node()
        queue_12 = module_0.Queue()
        set_5 = set()
        node_8 = module_0.Node(prev=set_5)
        queue_13 = module_0.Queue()
        double_linked_list_3 = module_0.DoubleLinkedList()
        assert double_linked_list_3.head is None
        assert double_linked_list_3.tail is None
        set_6 = set()
        node_9 = module_0.Node(prev=set_6)
        var_5 = double_linked_list_3.append(node_9)
        assert f'{type(double_linked_list_3.head).__module__}.{type(double_linked_list_3.head).__qualname__}' == 'queue4.Node'
        var_6 = queue_12.size()
        assert var_6 == 0
        set_7 = set()
        node_10 = module_0.Node(prev=set_7)
        queue_14 = module_0.Queue()
        double_linked_list_4 = module_0.DoubleLinkedList()
        assert double_linked_list_4.head is None
        assert double_linked_list_4.tail is None
        queue_15 = module_0.Queue()
        var_7 = queue_15.peek()
        double_linked_list_5 = module_0.DoubleLinkedList(node_3)
>       assert f'{type(double_linked_list_5.head).__module__}.{type(double_linked_list_5.head).__qualname__}' == 'queue4.Node'
E       AssertionError

RANDOM/test_queue4_RANDOM.py:2019: AssertionError
   - [# 105] SDL queue4: 
--------------------------------------------------------------------------------
   40:                 self.push(data)
   41:     
   42:     def push(self, val):
   43:         '''Add val to the head of the list.'''
-  44:         old_head = self.head
+  44:         pass
   45:         self.head = Node(val, next_node=old_head)
   46:         if old_head:
   47:             old_head.prev = self.head
   48:         if not (self.tail):
--------------------------------------------------------------------------------
[5.60119 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_6

self = <queue4.DoubleLinkedList object at 0x7f1a2e21e740>
data = <queue4.Queue object at 0x7f1a2e21ed10>

>   ???
E   TypeError: 'Queue' object is not iterable

queue4:36: TypeError

During handling of the above exception, another exception occurred:

    def test_case_6():
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_0 = queue_0.peek()
        queue_1 = module_0.Queue()
        set_2 = set()
        node_2 = module_0.Node(prev=set_2)
        var_1 = queue_1.size()
        assert var_1 == 0
        queue_2 = module_0.Queue()
        queue_3 = module_0.Queue()
        set_3 = set()
        node_3 = module_0.Node(prev=set_3)
        queue_4 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_4 = set()
        node_4 = module_0.Node(prev=set_4)
        var_2 = double_linked_list_0.append(node_4)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        set_5 = set()
        node_5 = module_0.Node(prev=set_5)
        queue_5 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
>       queue_6 = module_0.Queue(queue_1)

RANDOM/test_queue4_RANDOM.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue4:137: in __init__
    ???
queue4:40: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2e21e740>
val = <queue4.Queue object at 0x7f1a2e21ed10>

>   ???
E   NameError: name 'old_head' is not defined

queue4:45: NameError
   - [# 106] SDL queue4: 
--------------------------------------------------------------------------------
   41:     
   42:     def push(self, val):
   43:         '''Add val to the head of the list.'''
   44:         old_head = self.head
-  45:         self.head = Node(val, next_node=old_head)
+  45:         pass
   46:         if old_head:
   47:             old_head.prev = self.head
   48:         if not (self.tail):
   49:             self.tail = self.head
--------------------------------------------------------------------------------
[5.64520 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_21

def test_case_21():
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        queue_1 = module_0.Queue()
        set_2 = set()
        node_2 = module_0.Node(prev=set_2)
        var_0 = queue_1.size()
        assert var_0 == 0
        queue_2 = module_0.Queue()
        queue_3 = module_0.Queue()
        set_3 = set()
        node_3 = module_0.Node(prev=set_3)
        queue_4 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        set_4 = set()
        node_4 = module_0.Node(prev=set_4)
        var_1 = double_linked_list_1.append(node_4)
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
        var_2 = queue_3.size()
        assert var_2 == 0
        set_5 = set()
        node_5 = module_0.Node(prev=set_5)
        queue_5 = module_0.Queue()
        double_linked_list_2 = module_0.DoubleLinkedList()
        assert double_linked_list_2.head is None
        assert double_linked_list_2.tail is None
        queue_6 = module_0.Queue()
        var_3 = queue_6.peek()
        queue_7 = module_0.Queue()
        set_6 = set()
        node_6 = module_0.Node(prev=set_6)
        var_4 = queue_7.peek()
        queue_8 = module_0.Queue()
        set_7 = set()
        node_7 = module_0.Node(prev=set_7)
        var_5 = queue_8.size()
        assert var_5 == 0
        double_linked_list_3 = module_0.DoubleLinkedList()
        assert double_linked_list_3.head is None
        assert double_linked_list_3.tail is None
        var_6 = double_linked_list_3.push(queue_8)
>       assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
E       AssertionError

RANDOM/test_queue4_RANDOM.py:484: AssertionError
   - [# 107] SDL queue4: 
--------------------------------------------------------------------------------
   43:         '''Add val to the head of the list.'''
   44:         old_head = self.head
   45:         self.head = Node(val, next_node=old_head)
   46:         if old_head:
-  47:             old_head.prev = self.head
+  47:             pass
   48:         if not (self.tail):
   49:             self.tail = self.head
   50:         self._length += 1
   51:     
--------------------------------------------------------------------------------
[2.95972 s] survived
   - [# 108] SDL queue4: 
--------------------------------------------------------------------------------
   45:         self.head = Node(val, next_node=old_head)
   46:         if old_head:
   47:             old_head.prev = self.head
   48:         if not (self.tail):
-  49:             self.tail = self.head
+  49:             pass
   50:         self._length += 1
   51:     
   52:     def pop(self):
   53:         '''Remove the val from the head of the list.'''
--------------------------------------------------------------------------------
[5.58296 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_21

def test_case_21():
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        queue_1 = module_0.Queue()
        set_2 = set()
        node_2 = module_0.Node(prev=set_2)
        var_0 = queue_1.size()
        assert var_0 == 0
        queue_2 = module_0.Queue()
        queue_3 = module_0.Queue()
        set_3 = set()
        node_3 = module_0.Node(prev=set_3)
        queue_4 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        set_4 = set()
        node_4 = module_0.Node(prev=set_4)
        var_1 = double_linked_list_1.append(node_4)
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'queue4.Node'
        var_2 = queue_3.size()
        assert var_2 == 0
        set_5 = set()
        node_5 = module_0.Node(prev=set_5)
        queue_5 = module_0.Queue()
        double_linked_list_2 = module_0.DoubleLinkedList()
        assert double_linked_list_2.head is None
        assert double_linked_list_2.tail is None
        queue_6 = module_0.Queue()
        var_3 = queue_6.peek()
        queue_7 = module_0.Queue()
        set_6 = set()
        node_6 = module_0.Node(prev=set_6)
        var_4 = queue_7.peek()
        queue_8 = module_0.Queue()
        set_7 = set()
        node_7 = module_0.Node(prev=set_7)
        var_5 = queue_8.size()
        assert var_5 == 0
        double_linked_list_3 = module_0.DoubleLinkedList()
        assert double_linked_list_3.head is None
        assert double_linked_list_3.tail is None
        var_6 = double_linked_list_3.push(queue_8)
>       assert f'{type(double_linked_list_3.tail).__module__}.{type(double_linked_list_3.tail).__qualname__}' == 'queue4.Node'
E       AssertionError

RANDOM/test_queue4_RANDOM.py:484: AssertionError
   - [# 109] SDL queue4: 
--------------------------------------------------------------------------------
   50:         self._length += 1
   51:     
   52:     def pop(self):
   53:         '''Remove the val from the head of the list.'''
-  54:         to_return = self.head
+  54:         pass
   55:         if self._length < 1:
   56:             raise IndexError('Cannot pop from an empty list.')
   57:         
   58:         new_head = self.head.next
--------------------------------------------------------------------------------
[5.83216 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_20

def test_case_20():
        node_0 = module_0.Node()
        var_0 = node_0.__repr__()
        assert var_0 == 'Value: None'
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_1 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_2 = module_0.Node(prev=set_1)
        var_1 = double_linked_list_0.append(node_2)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
>       var_2 = double_linked_list_0.pop()

RANDOM/test_queue4_RANDOM.py:426: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2ea81ba0>

>   ???
E   NameError: name 'to_return' is not defined

queue4:65: NameError
   - [# 110] SDL queue4: 
--------------------------------------------------------------------------------
   54:         to_return = self.head
   55:         if self._length < 1:
   56:             raise IndexError('Cannot pop from an empty list.')
   57:         
-  58:         new_head = self.head.next
+  58:         pass
   59:         if new_head:
   60:             new_head.prev = None
   61:         self.head = new_head
   62:         self._length -= 1
--------------------------------------------------------------------------------
[5.78145 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_20

def test_case_20():
        node_0 = module_0.Node()
        var_0 = node_0.__repr__()
        assert var_0 == 'Value: None'
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_1 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_2 = module_0.Node(prev=set_1)
        var_1 = double_linked_list_0.append(node_2)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
>       var_2 = double_linked_list_0.pop()

RANDOM/test_queue4_RANDOM.py:426: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2ea81de0>

>   ???
E   NameError: name 'new_head' is not defined

queue4:59: NameError
   - [# 111] SDL queue4: 
--------------------------------------------------------------------------------
   56:             raise IndexError('Cannot pop from an empty list.')
   57:         
   58:         new_head = self.head.next
   59:         if new_head:
-  60:             new_head.prev = None
+  60:             pass
   61:         self.head = new_head
   62:         self._length -= 1
   63:         if self._length < 1:
   64:             self.tail = None
--------------------------------------------------------------------------------
[2.96078 s] survived
   - [# 112] SDL queue4: 
--------------------------------------------------------------------------------
   57:         
   58:         new_head = self.head.next
   59:         if new_head:
   60:             new_head.prev = None
-  61:         self.head = new_head
+  61:         pass
   62:         self._length -= 1
   63:         if self._length < 1:
   64:             self.tail = None
   65:         return to_return.data
--------------------------------------------------------------------------------
[5.63694 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_20

def test_case_20():
        node_0 = module_0.Node()
        var_0 = node_0.__repr__()
        assert var_0 == 'Value: None'
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_1 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_2 = module_0.Node(prev=set_1)
        var_1 = double_linked_list_0.append(node_2)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        var_2 = double_linked_list_0.pop()
>       assert double_linked_list_0.head is None
E       AssertionError

RANDOM/test_queue4_RANDOM.py:427: AssertionError
   - [# 113] SDL queue4: 
--------------------------------------------------------------------------------
   60:             new_head.prev = None
   61:         self.head = new_head
   62:         self._length -= 1
   63:         if self._length < 1:
-  64:             self.tail = None
+  64:             pass
   65:         return to_return.data
   66:     
   67:     def append(self, val):
   68:         '''Add val to the tail of the list.'''
--------------------------------------------------------------------------------
[5.64641 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_20

def test_case_20():
        node_0 = module_0.Node()
        var_0 = node_0.__repr__()
        assert var_0 == 'Value: None'
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_1 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_2 = module_0.Node(prev=set_1)
        var_1 = double_linked_list_0.append(node_2)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        var_2 = double_linked_list_0.pop()
        assert double_linked_list_0.head is None
>       assert double_linked_list_0.tail is None
E       AssertionError

RANDOM/test_queue4_RANDOM.py:428: AssertionError
   - [# 114] SDL queue4: 
--------------------------------------------------------------------------------
   61:         self.head = new_head
   62:         self._length -= 1
   63:         if self._length < 1:
   64:             self.tail = None
-  65:         return to_return.data
+  65:         pass
   66:     
   67:     def append(self, val):
   68:         '''Add val to the tail of the list.'''
   69:         old_tail = self.tail
--------------------------------------------------------------------------------
[5.56537 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_20

def test_case_20():
        node_0 = module_0.Node()
        var_0 = node_0.__repr__()
        assert var_0 == 'Value: None'
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_1 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_2 = module_0.Node(prev=set_1)
        var_1 = double_linked_list_0.append(node_2)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        var_2 = double_linked_list_0.pop()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
>       assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'queue4.Node'
E       AssertionError

RANDOM/test_queue4_RANDOM.py:429: AssertionError
   - [# 115] SDL queue4: 
--------------------------------------------------------------------------------
   65:         return to_return.data
   66:     
   67:     def append(self, val):
   68:         '''Add val to the tail of the list.'''
-  69:         old_tail = self.tail
+  69:         pass
   70:         self.tail = Node(val, prev=old_tail)
   71:         if old_tail:
   72:             old_tail.next = self.tail
   73:         if self._length < 1:
--------------------------------------------------------------------------------
[5.63952 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_4

def test_case_4():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
>       var_0 = double_linked_list_0.append(node_1)

RANDOM/test_queue4_RANDOM.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2c852dd0>, val = Value: None

>   ???
E   NameError: name 'old_tail' is not defined

queue4:70: NameError
   - [# 116] SDL queue4: 
--------------------------------------------------------------------------------
   66:     
   67:     def append(self, val):
   68:         '''Add val to the tail of the list.'''
   69:         old_tail = self.tail
-  70:         self.tail = Node(val, prev=old_tail)
+  70:         pass
   71:         if old_tail:
   72:             old_tail.next = self.tail
   73:         if self._length < 1:
   74:             self.head = self.tail
--------------------------------------------------------------------------------
[5.79292 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_4

def test_case_4():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_0 = double_linked_list_0.append(node_1)
>       assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
E       AssertionError

RANDOM/test_queue4_RANDOM.py:43: AssertionError
   - [# 117] SDL queue4: 
--------------------------------------------------------------------------------
   68:         '''Add val to the tail of the list.'''
   69:         old_tail = self.tail
   70:         self.tail = Node(val, prev=old_tail)
   71:         if old_tail:
-  72:             old_tail.next = self.tail
+  72:             pass
   73:         if self._length < 1:
   74:             self.head = self.tail
   75:         self._length += 1
   76:     
--------------------------------------------------------------------------------
[3.02473 s] survived
   - [# 118] SDL queue4: 
--------------------------------------------------------------------------------
   70:         self.tail = Node(val, prev=old_tail)
   71:         if old_tail:
   72:             old_tail.next = self.tail
   73:         if self._length < 1:
-  74:             self.head = self.tail
+  74:             pass
   75:         self._length += 1
   76:     
   77:     def shift(self):
   78:         '''Remove the val from the tail of the list.'''
--------------------------------------------------------------------------------
[5.73218 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_4

def test_case_4():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_0 = double_linked_list_0.append(node_1)
>       assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
E       AssertionError

RANDOM/test_queue4_RANDOM.py:43: AssertionError
   - [# 119] SDL queue4: 
--------------------------------------------------------------------------------
   75:         self._length += 1
   76:     
   77:     def shift(self):
   78:         '''Remove the val from the tail of the list.'''
-  79:         to_return = self.tail
+  79:         pass
   80:         if self._length < 1:
   81:             raise IndexError('Cannot shift from an empty list.')
   82:         
   83:         new_tail = self.tail.prev
--------------------------------------------------------------------------------
[5.90471 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_66

def test_case_66():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_0 = double_linked_list_0.append(node_1)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
>       var_1 = double_linked_list_0.shift()

RANDOM/test_queue4_RANDOM.py:2106: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2e47bdc0>

>   ???
E   NameError: name 'to_return' is not defined

queue4:90: NameError
   - [# 120] SDL queue4: 
--------------------------------------------------------------------------------
   79:         to_return = self.tail
   80:         if self._length < 1:
   81:             raise IndexError('Cannot shift from an empty list.')
   82:         
-  83:         new_tail = self.tail.prev
+  83:         pass
   84:         if new_tail:
   85:             new_tail.next = None
   86:         self.tail = new_tail
   87:         self._length -= 1
--------------------------------------------------------------------------------
[5.85145 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_66

def test_case_66():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_0 = double_linked_list_0.append(node_1)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
>       var_1 = double_linked_list_0.shift()

RANDOM/test_queue4_RANDOM.py:2106: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2de166b0>

>   ???
E   NameError: name 'new_tail' is not defined

queue4:84: NameError
   - [# 121] SDL queue4: 
--------------------------------------------------------------------------------
   81:             raise IndexError('Cannot shift from an empty list.')
   82:         
   83:         new_tail = self.tail.prev
   84:         if new_tail:
-  85:             new_tail.next = None
+  85:             pass
   86:         self.tail = new_tail
   87:         self._length -= 1
   88:         if self._length < 1:
   89:             self.tail = None
--------------------------------------------------------------------------------
[2.95412 s] survived
   - [# 122] SDL queue4: 
--------------------------------------------------------------------------------
   82:         
   83:         new_tail = self.tail.prev
   84:         if new_tail:
   85:             new_tail.next = None
-  86:         self.tail = new_tail
+  86:         pass
   87:         self._length -= 1
   88:         if self._length < 1:
   89:             self.tail = None
   90:         return to_return.data
--------------------------------------------------------------------------------
[2.98520 s] survived
   - [# 123] SDL queue4: 
--------------------------------------------------------------------------------
   85:             new_tail.next = None
   86:         self.tail = new_tail
   87:         self._length -= 1
   88:         if self._length < 1:
-  89:             self.tail = None
+  89:             pass
   90:         return to_return.data
   91:     
   92:     def remove(self, val):
   93:         '''Remove first occurance of val from list.'''
--------------------------------------------------------------------------------
[3.05361 s] survived
   - [# 124] SDL queue4: 
--------------------------------------------------------------------------------
   86:         self.tail = new_tail
   87:         self._length -= 1
   88:         if self._length < 1:
   89:             self.tail = None
-  90:         return to_return.data
+  90:         pass
   91:     
   92:     def remove(self, val):
   93:         '''Remove first occurance of val from list.'''
   94:         curr = self.head
--------------------------------------------------------------------------------
[5.83313 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_66

def test_case_66():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_0 = double_linked_list_0.append(node_1)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        var_1 = double_linked_list_0.shift()
        assert double_linked_list_0.tail is None
>       assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
E       AssertionError

RANDOM/test_queue4_RANDOM.py:2108: AssertionError
   - [# 125] SDL queue4: 
--------------------------------------------------------------------------------
   90:         return to_return.data
   91:     
   92:     def remove(self, val):
   93:         '''Remove first occurance of val from list.'''
-  94:         curr = self.head
+  94:         pass
   95:         while curr:
   96:             if curr.data is val:
   97:                 if self._length == 1:
   98:                     (self.head, self.tail) = (None, None)
--------------------------------------------------------------------------------
[5.88820 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_85

def test_case_85():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        var_0 = queue_0.peek()
        node_1 = module_0.Node()
        queue_1 = module_0.Queue()
        set_1 = set()
        node_2 = module_0.Node(prev=set_1)
        var_1 = queue_1.size()
        assert var_1 == 0
        set_2 = set()
        node_3 = module_0.Node(prev=set_2)
        bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_2 = module_0.Queue(bytes_0)
        assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_2 = double_linked_list_0.append(bytes_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_3 = module_0.Queue(bytes_1)
        queue_4 = module_0.Queue()
        set_3 = set()
        node_4 = module_0.Node(prev=set_3)
        var_3 = queue_4.size()
        assert var_3 == 0
        queue_5 = module_0.Queue()
        var_4 = queue_4.size()
        assert var_4 == 0
        queue_6 = module_0.Queue()
        set_4 = set()
        node_5 = module_0.Node(prev=set_4)
        queue_7 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        node_6 = module_0.Node()
        queue_8 = module_0.Queue()
        set_5 = set()
        node_7 = module_0.Node(prev=set_5)
        queue_9 = module_0.Queue()
        double_linked_list_2 = module_0.DoubleLinkedList()
        assert double_linked_list_2.head is None
        assert double_linked_list_2.tail is None
        set_6 = set()
        node_8 = module_0.Node(prev=set_6)
        var_5 = double_linked_list_2.append(node_8)
        assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
>       var_6 = double_linked_list_0.remove(bytes_1)

RANDOM/test_queue4_RANDOM.py:2990: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2efc98d0>
val = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'

>   ???
E   UnboundLocalError: local variable 'curr' referenced before assignment

queue4:95: UnboundLocalError
   - [# 126] SDL queue4: 
--------------------------------------------------------------------------------
   94:         curr = self.head
   95:         while curr:
   96:             if curr.data is val:
   97:                 if self._length == 1:
-  98:                     (self.head, self.tail) = (None, None)
+  98:                     pass
   99:                 elif (curr is not self.head and curr is not self.tail):
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  101:                 elif curr is self.head:
  102:                     (self.head, curr.next.prev) = (curr.next, None)
--------------------------------------------------------------------------------
[5.73403 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_85

def test_case_85():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        var_0 = queue_0.peek()
        node_1 = module_0.Node()
        queue_1 = module_0.Queue()
        set_1 = set()
        node_2 = module_0.Node(prev=set_1)
        var_1 = queue_1.size()
        assert var_1 == 0
        set_2 = set()
        node_3 = module_0.Node(prev=set_2)
        bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_2 = module_0.Queue(bytes_0)
        assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_2 = double_linked_list_0.append(bytes_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_3 = module_0.Queue(bytes_1)
        queue_4 = module_0.Queue()
        set_3 = set()
        node_4 = module_0.Node(prev=set_3)
        var_3 = queue_4.size()
        assert var_3 == 0
        queue_5 = module_0.Queue()
        var_4 = queue_4.size()
        assert var_4 == 0
        queue_6 = module_0.Queue()
        set_4 = set()
        node_5 = module_0.Node(prev=set_4)
        queue_7 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        node_6 = module_0.Node()
        queue_8 = module_0.Queue()
        set_5 = set()
        node_7 = module_0.Node(prev=set_5)
        queue_9 = module_0.Queue()
        double_linked_list_2 = module_0.DoubleLinkedList()
        assert double_linked_list_2.head is None
        assert double_linked_list_2.tail is None
        set_6 = set()
        node_8 = module_0.Node(prev=set_6)
        var_5 = double_linked_list_2.append(node_8)
        assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
        var_6 = double_linked_list_0.remove(bytes_1)
>       assert double_linked_list_0.head is None
E       AssertionError

RANDOM/test_queue4_RANDOM.py:2991: AssertionError
   - [# 127] SDL queue4: 
--------------------------------------------------------------------------------
   96:             if curr.data is val:
   97:                 if self._length == 1:
   98:                     (self.head, self.tail) = (None, None)
   99:                 elif (curr is not self.head and curr is not self.tail):
- 100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
+ 100:                     pass
  101:                 elif curr is self.head:
  102:                     (self.head, curr.next.prev) = (curr.next, None)
  103:                 elif curr is self.tail:
  104:                     (self.tail, curr.prev.next) = (curr.prev, None)
--------------------------------------------------------------------------------
[2.92998 s] survived
   - [# 128] SDL queue4: 
--------------------------------------------------------------------------------
   98:                     (self.head, self.tail) = (None, None)
   99:                 elif (curr is not self.head and curr is not self.tail):
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  101:                 elif curr is self.head:
- 102:                     (self.head, curr.next.prev) = (curr.next, None)
+ 102:                     pass
  103:                 elif curr is self.tail:
  104:                     (self.tail, curr.prev.next) = (curr.prev, None)
  105:                 self._length -= 1
  106:                 return
--------------------------------------------------------------------------------
[2.93392 s] survived
   - [# 129] SDL queue4: 
--------------------------------------------------------------------------------
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  101:                 elif curr is self.head:
  102:                     (self.head, curr.next.prev) = (curr.next, None)
  103:                 elif curr is self.tail:
- 104:                     (self.tail, curr.prev.next) = (curr.prev, None)
+ 104:                     pass
  105:                 self._length -= 1
  106:                 return
  107:             curr = curr.next
  108:         
--------------------------------------------------------------------------------
[3.00812 s] survived
   - [# 130] SDL queue4: 
--------------------------------------------------------------------------------
  102:                     (self.head, curr.next.prev) = (curr.next, None)
  103:                 elif curr is self.tail:
  104:                     (self.tail, curr.prev.next) = (curr.prev, None)
  105:                 self._length -= 1
- 106:                 return
+ 106:                 pass
  107:             curr = curr.next
  108:         
  109:         raise ValueError('{} is not in the list'.format(val))
  110:     
--------------------------------------------------------------------------------
[5.68169 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_85

def test_case_85():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        var_0 = queue_0.peek()
        node_1 = module_0.Node()
        queue_1 = module_0.Queue()
        set_1 = set()
        node_2 = module_0.Node(prev=set_1)
        var_1 = queue_1.size()
        assert var_1 == 0
        set_2 = set()
        node_3 = module_0.Node(prev=set_2)
        bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_2 = module_0.Queue(bytes_0)
        assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_2 = double_linked_list_0.append(bytes_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_3 = module_0.Queue(bytes_1)
        queue_4 = module_0.Queue()
        set_3 = set()
        node_4 = module_0.Node(prev=set_3)
        var_3 = queue_4.size()
        assert var_3 == 0
        queue_5 = module_0.Queue()
        var_4 = queue_4.size()
        assert var_4 == 0
        queue_6 = module_0.Queue()
        set_4 = set()
        node_5 = module_0.Node(prev=set_4)
        queue_7 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        node_6 = module_0.Node()
        queue_8 = module_0.Queue()
        set_5 = set()
        node_7 = module_0.Node(prev=set_5)
        queue_9 = module_0.Queue()
        double_linked_list_2 = module_0.DoubleLinkedList()
        assert double_linked_list_2.head is None
        assert double_linked_list_2.tail is None
        set_6 = set()
        node_8 = module_0.Node(prev=set_6)
        var_5 = double_linked_list_2.append(node_8)
        assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
>       var_6 = double_linked_list_0.remove(bytes_1)

RANDOM/test_queue4_RANDOM.py:2990: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2e56f370>
val = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'

>   ???
E   ValueError: b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M' is not in the list

queue4:109: ValueError
   - [# 131] SDL queue4: 
--------------------------------------------------------------------------------
  103:                 elif curr is self.tail:
  104:                     (self.tail, curr.prev.next) = (curr.prev, None)
  105:                 self._length -= 1
  106:                 return
- 107:             curr = curr.next
+ 107:             pass
  108:         
  109:         raise ValueError('{} is not in the list'.format(val))
  110:     
  111:     def _repr(self):
--------------------------------------------------------------------------------
[15.16410 s] timeout
   - [# 132] SDL queue4: 
--------------------------------------------------------------------------------
  109:         raise ValueError('{} is not in the list'.format(val))
  110:     
  111:     def _repr(self):
  112:         '''Return list representation of dll.'''
- 113:         l = []
+ 113:         pass
  114:         while True:
  115:             try:
  116:                 popped_data = self.pop()
  117:                 l.append(popped_data)
--------------------------------------------------------------------------------
[3.00798 s] survived
   - [# 133] SDL queue4: 
--------------------------------------------------------------------------------
  112:         '''Return list representation of dll.'''
  113:         l = []
  114:         while True:
  115:             try:
- 116:                 popped_data = self.pop()
+ 116:                 pass
  117:                 l.append(popped_data)
  118:             except IndexError:
  119:                 break
  120:         return l
--------------------------------------------------------------------------------
[3.01319 s] survived
   - [# 134] SDL queue4: 
--------------------------------------------------------------------------------
  113:         l = []
  114:         while True:
  115:             try:
  116:                 popped_data = self.pop()
- 117:                 l.append(popped_data)
+ 117:                 pass
  118:             except IndexError:
  119:                 break
  120:         return l
  121: 
--------------------------------------------------------------------------------
[2.98549 s] survived
   - [# 135] SDL queue4: 
--------------------------------------------------------------------------------
  116:                 popped_data = self.pop()
  117:                 l.append(popped_data)
  118:             except IndexError:
  119:                 break
- 120:         return l
+ 120:         pass
  121: 
  122: 
  123: class Queue(object):
  124:     '''Implementation of Queue.
--------------------------------------------------------------------------------
[2.95975 s] survived
   - [# 136] SDL queue4: 
--------------------------------------------------------------------------------
  133:     '''
  134:     
  135:     def __init__(self, data=None):
  136:         '''Initialize queue data structure.'''
- 137:         self._container = DoubleLinkedList(data)
+ 137:         pass
  138:     
  139:     def enqueue(self, val):
  140:         '''Add a value to the queue.'''
  141:         self._container.append(val)
--------------------------------------------------------------------------------
[5.62160 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_2

def test_case_2():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
>       var_0 = queue_0.size()

RANDOM/test_queue4_RANDOM.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.Queue object at 0x7f1a2e27bb20>

>   ???
E   AttributeError: 'Queue' object has no attribute '_container'

queue4:156: AttributeError
   - [# 137] SDL queue4: 
--------------------------------------------------------------------------------
  137:         self._container = DoubleLinkedList(data)
  138:     
  139:     def enqueue(self, val):
  140:         '''Add a value to the queue.'''
- 141:         self._container.append(val)
+ 141:         pass
  142:     
  143:     def dequeue(self):
  144:         '''Remove a value from the front of the queue.'''
  145:         return self._container.pop()
--------------------------------------------------------------------------------
[5.76392 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_190

def test_case_190():
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        none_type_0 = None
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        var_0 = queue_0.enqueue(none_type_0)
        queue_1 = module_0.Queue()
        queue_2 = module_0.Queue()
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_1 = queue_2.peek()
        queue_3 = module_0.Queue(queue_2)
        assert f'{type(queue_3).__module__}.{type(queue_3).__qualname__}' == 'queue4.Queue'
        set_2 = set()
        node_2 = module_0.Node(prev=set_2)
        var_2 = var_1.__repr__()
        queue_4 = module_0.Queue()
        set_3 = set()
        node_3 = module_0.Node(prev=set_3)
        var_3 = queue_4.size()
        assert var_3 == 0
        queue_5 = module_0.Queue()
        set_4 = set()
        node_4 = module_0.Node(prev=set_4)
        queue_6 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        queue_7 = module_0.Queue()
        var_4 = queue_7.peek()
        queue_8 = module_0.Queue()
        set_5 = set()
        node_5 = module_0.Node(prev=set_5)
        var_5 = queue_8.peek()
        node_6 = module_0.Node()
        queue_9 = module_0.Queue()
        set_6 = set()
        node_7 = module_0.Node(prev=set_6)
        var_6 = queue_9.peek()
        queue_10 = module_0.Queue(queue_9)
        var_7 = queue_10.enqueue(set_6)
        bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_11 = module_0.Queue(bytes_0)
        queue_12 = module_0.Queue()
        set_7 = set()
        node_8 = module_0.Node(prev=set_7)
        var_8 = queue_12.size()
        assert var_8 == 0
        queue_13 = module_0.Queue()
        var_9 = queue_12.size()
        assert var_9 == 0
        queue_14 = module_0.Queue()
        queue_15 = module_0.Queue()
        set_8 = set()
        node_9 = module_0.Node(prev=set_8)
        var_10 = queue_15.peek()
>       var_11 = queue_0.dequeue()

RANDOM/test_queue4_RANDOM.py:7719: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue4:145: in dequeue
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2ce64250>

>   ???
E   IndexError: Cannot pop from an empty list.

queue4:56: IndexError
   - [# 138] SDL queue4: 
--------------------------------------------------------------------------------
  141:         self._container.append(val)
  142:     
  143:     def dequeue(self):
  144:         '''Remove a value from the front of the queue.'''
- 145:         return self._container.pop()
+ 145:         pass
  146:     
  147:     def peek(self):
  148:         '''Return the next value in the queue without dequing it.'''
  149:         try:
--------------------------------------------------------------------------------
[6.23643 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_113

def test_case_113():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        queue_1 = module_0.Queue()
        bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_2 = module_0.Queue(bytes_0)
        assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
        queue_3 = module_0.Queue()
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_4 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_0 = double_linked_list_0.append(node_1)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        var_1 = double_linked_list_0.shift()
        assert double_linked_list_0.tail is None
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
        assert var_1.data is None
        assert var_1.next is None
        assert var_1.prev == {*()}
        set_2 = set()
        node_2 = module_0.Node(prev=set_2)
        set_3 = set()
        node_3 = module_0.Node(prev=set_3)
        queue_5 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        node_4 = module_0.Node()
        set_4 = set()
        node_5 = module_0.Node(prev=set_4)
        queue_6 = module_0.Queue()
        double_linked_list_2 = module_0.DoubleLinkedList()
        assert double_linked_list_2.head is None
        assert double_linked_list_2.tail is None
        queue_7 = module_0.Queue()
        var_2 = queue_7.peek()
        bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_8 = module_0.Queue(bytes_1)
        queue_9 = module_0.Queue()
        set_5 = set()
        node_6 = module_0.Node(prev=set_5)
        var_3 = queue_9.size()
        assert var_3 == 0
        queue_10 = module_0.Queue()
        var_4 = queue_9.size()
        assert var_4 == 0
        node_7 = module_0.Node()
        var_5 = node_7.__repr__()
        assert var_5 == 'Value: None'
        queue_11 = module_0.Queue(node_7)
        set_6 = set()
        node_8 = module_0.Node(prev=set_6)
        queue_12 = module_0.Queue()
        double_linked_list_3 = module_0.DoubleLinkedList()
        assert double_linked_list_3.head is None
        assert double_linked_list_3.tail is None
        queue_13 = module_0.Queue()
        queue_14 = module_0.Queue()
        double_linked_list_4 = module_0.DoubleLinkedList()
        assert double_linked_list_4.head is None
        assert double_linked_list_4.tail is None
        bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_15 = module_0.Queue(bytes_2)
        queue_16 = module_0.Queue()
        set_7 = set()
        node_9 = module_0.Node(prev=set_7)
        var_6 = queue_16.size()
        assert var_6 == 0
        queue_17 = module_0.Queue()
        var_7 = queue_16.size()
        assert var_7 == 0
        var_8 = queue_15.peek()
        assert var_8 == 77
        queue_18 = module_0.Queue(var_8)
        var_9 = queue_18.dequeue()
>       assert var_9 == 77
E       AssertionError

RANDOM/test_queue4_RANDOM.py:4293: AssertionError
   - [# 139] SDL queue4: 
--------------------------------------------------------------------------------
  146:     
  147:     def peek(self):
  148:         '''Return the next value in the queue without dequing it.'''
  149:         try:
- 150:             return self._container.head.data
+ 150:             pass
  151:         except AttributeError:
  152:             return None
  153:     
  154:     def size(self):
--------------------------------------------------------------------------------
[5.88857 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_65

def test_case_65():
        bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_0 = module_0.Queue(bytes_0)
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        queue_1 = module_0.Queue()
        assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        var_0 = queue_1.size()
        assert var_0 == 0
        queue_2 = module_0.Queue()
        var_1 = queue_1.size()
        assert var_1 == 0
        var_2 = queue_0.peek()
>       assert var_2 == 77
E       AssertionError

RANDOM/test_queue4_RANDOM.py:2091: AssertionError
   - [# 140] SDL queue4: 
--------------------------------------------------------------------------------
  148:         '''Return the next value in the queue without dequing it.'''
  149:         try:
  150:             return self._container.head.data
  151:         except AttributeError:
- 152:             return None
+ 152:             pass
  153:     
  154:     def size(self):
  155:         '''Return the size of the queue.'''
  156:         return self._container._length
--------------------------------------------------------------------------------
[3.04206 s] survived
   - [# 141] SDL queue4: 
--------------------------------------------------------------------------------
  152:             return None
  153:     
  154:     def size(self):
  155:         '''Return the size of the queue.'''
- 156:         return self._container._length
+ 156:         pass
--------------------------------------------------------------------------------
[5.75654 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_2

def test_case_2():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        var_0 = queue_0.size()
>       assert var_0 == 0
E       AssertionError

RANDOM/test_queue4_RANDOM.py:20: AssertionError
   - [# 142] SVD queue4: 
--------------------------------------------------------------------------------
    5:     '''Node class for data storage.'''
    6:     
    7:     def __init__(self, data=None, next_node=None, prev=None):
    8:         '''Initialize Node.'''
-   9:         self.data = data
+   9:         data = data
   10:         self.next = next_node
   11:         self.prev = prev
   12:     
   13:     def __repr__(self):
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 143] SVD queue4: 
--------------------------------------------------------------------------------
    6:     
    7:     def __init__(self, data=None, next_node=None, prev=None):
    8:         '''Initialize Node.'''
    9:         self.data = data
-  10:         self.next = next_node
+  10:         next = next_node
   11:         self.prev = prev
   12:     
   13:     def __repr__(self):
   14:         '''String representation.'''
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 144] SVD queue4: 
--------------------------------------------------------------------------------
    7:     def __init__(self, data=None, next_node=None, prev=None):
    8:         '''Initialize Node.'''
    9:         self.data = data
   10:         self.next = next_node
-  11:         self.prev = prev
+  11:         prev = prev
   12:     
   13:     def __repr__(self):
   14:         '''String representation.'''
   15:         return 'Value: {}'.format(self.data)
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 145] SVD queue4: 
--------------------------------------------------------------------------------
   11:         self.prev = prev
   12:     
   13:     def __repr__(self):
   14:         '''String representation.'''
-  15:         return 'Value: {}'.format(self.data)
+  15:         return 'Value: {}'.format(data)
   16: 
   17: 
   18: class DoubleLinkedList(object):
   19:     '''Double linked list impplementation.
--------------------------------------------------------------------------------
[5.56752 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_8

def test_case_8():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_0 = double_linked_list_0.append(node_1)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        queue_2 = module_0.Queue()
        set_2 = set()
        node_2 = module_0.Node(prev=set_2)
        var_1 = queue_2.peek()
        set_3 = set()
        node_3 = module_0.Node(prev=set_3)
        set_4 = set()
        node_4 = module_0.Node(prev=set_4)
        queue_3 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        queue_4 = module_0.Queue()
        queue_5 = module_0.Queue()
        set_5 = set()
        node_5 = module_0.Node(prev=set_5)
        var_2 = queue_5.size()
        assert var_2 == 0
>       var_3 = node_0.__repr__()

RANDOM/test_queue4_RANDOM.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[NameError("name 'data' is not defined") raised in repr()] Node object at 0x7f1a2df9a830>

>   ???
E   NameError: name 'data' is not defined

queue4:15: NameError
   - [# 146] SVD queue4: 
--------------------------------------------------------------------------------
   28:     '''
   29:     
   30:     def __init__(self, data=None):
   31:         '''Initialize list.'''
-  32:         self.head = None
+  32:         head = None
   33:         self.tail = None
   34:         self._length = 0
   35:         try:
   36:             for val in data:
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 147] SVD queue4: 
--------------------------------------------------------------------------------
   29:     
   30:     def __init__(self, data=None):
   31:         '''Initialize list.'''
   32:         self.head = None
-  33:         self.tail = None
+  33:         tail = None
   34:         self._length = 0
   35:         try:
   36:             for val in data:
   37:                 self.push(val)
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 148] SVD queue4: 
--------------------------------------------------------------------------------
   30:     def __init__(self, data=None):
   31:         '''Initialize list.'''
   32:         self.head = None
   33:         self.tail = None
-  34:         self._length = 0
+  34:         _length = 0
   35:         try:
   36:             for val in data:
   37:                 self.push(val)
   38:         except TypeError:
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 149] SVD queue4: 
--------------------------------------------------------------------------------
   33:         self.tail = None
   34:         self._length = 0
   35:         try:
   36:             for val in data:
-  37:                 self.push(val)
+  37:                 push(val)
   38:         except TypeError:
   39:             if data:
   40:                 self.push(data)
   41:     
--------------------------------------------------------------------------------
[5.79605 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_52

def test_case_52():
        bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
>       queue_0 = module_0.Queue(bytes_0)

RANDOM/test_queue4_RANDOM.py:1745: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue4:137: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2df77820>
data = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'

>   ???
E   NameError: name 'push' is not defined

queue4:37: NameError
   - [# 150] SVD queue4: 
--------------------------------------------------------------------------------
   36:             for val in data:
   37:                 self.push(val)
   38:         except TypeError:
   39:             if data:
-  40:                 self.push(data)
+  40:                 push(data)
   41:     
   42:     def push(self, val):
   43:         '''Add val to the head of the list.'''
   44:         old_head = self.head
--------------------------------------------------------------------------------
[5.56430 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_6

self = <queue4.DoubleLinkedList object at 0x7f1a2df74c70>
data = <queue4.Queue object at 0x7f1a2df75570>

>   ???
E   TypeError: 'Queue' object is not iterable

queue4:36: TypeError

During handling of the above exception, another exception occurred:

    def test_case_6():
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_0 = queue_0.peek()
        queue_1 = module_0.Queue()
        set_2 = set()
        node_2 = module_0.Node(prev=set_2)
        var_1 = queue_1.size()
        assert var_1 == 0
        queue_2 = module_0.Queue()
        queue_3 = module_0.Queue()
        set_3 = set()
        node_3 = module_0.Node(prev=set_3)
        queue_4 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_4 = set()
        node_4 = module_0.Node(prev=set_4)
        var_2 = double_linked_list_0.append(node_4)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        set_5 = set()
        node_5 = module_0.Node(prev=set_5)
        queue_5 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
>       queue_6 = module_0.Queue(queue_1)

RANDOM/test_queue4_RANDOM.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue4:137: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2df74c70>
data = <queue4.Queue object at 0x7f1a2df75570>

>   ???
E   NameError: name 'push' is not defined

queue4:40: NameError
   - [# 151] SVD queue4: 
--------------------------------------------------------------------------------
   40:                 self.push(data)
   41:     
   42:     def push(self, val):
   43:         '''Add val to the head of the list.'''
-  44:         old_head = self.head
+  44:         old_head = head
   45:         self.head = Node(val, next_node=old_head)
   46:         if old_head:
   47:             old_head.prev = self.head
   48:         if not (self.tail):
--------------------------------------------------------------------------------
[5.62338 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_6

self = <queue4.DoubleLinkedList object at 0x7f1a2ce439a0>
data = <queue4.Queue object at 0x7f1a2ce43370>

>   ???
E   TypeError: 'Queue' object is not iterable

queue4:36: TypeError

During handling of the above exception, another exception occurred:

    def test_case_6():
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_0 = queue_0.peek()
        queue_1 = module_0.Queue()
        set_2 = set()
        node_2 = module_0.Node(prev=set_2)
        var_1 = queue_1.size()
        assert var_1 == 0
        queue_2 = module_0.Queue()
        queue_3 = module_0.Queue()
        set_3 = set()
        node_3 = module_0.Node(prev=set_3)
        queue_4 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_4 = set()
        node_4 = module_0.Node(prev=set_4)
        var_2 = double_linked_list_0.append(node_4)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        set_5 = set()
        node_5 = module_0.Node(prev=set_5)
        queue_5 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
>       queue_6 = module_0.Queue(queue_1)

RANDOM/test_queue4_RANDOM.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue4:137: in __init__
    ???
queue4:40: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2ce439a0>
val = <queue4.Queue object at 0x7f1a2ce43370>

>   ???
E   NameError: name 'head' is not defined

queue4:44: NameError
   - [# 152] SVD queue4: 
--------------------------------------------------------------------------------
   41:     
   42:     def push(self, val):
   43:         '''Add val to the head of the list.'''
   44:         old_head = self.head
-  45:         self.head = Node(val, next_node=old_head)
+  45:         head = Node(val, next_node=old_head)
   46:         if old_head:
   47:             old_head.prev = self.head
   48:         if not (self.tail):
   49:             self.tail = self.head
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 153] SVD queue4: 
--------------------------------------------------------------------------------
   43:         '''Add val to the head of the list.'''
   44:         old_head = self.head
   45:         self.head = Node(val, next_node=old_head)
   46:         if old_head:
-  47:             old_head.prev = self.head
+  47:             old_head.prev = head
   48:         if not (self.tail):
   49:             self.tail = self.head
   50:         self._length += 1
   51:     
--------------------------------------------------------------------------------
[5.88647 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_11

def test_case_11():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        var_0 = queue_0.peek()
        queue_1 = module_0.Queue()
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_1 = queue_1.size()
        assert var_1 == 0
        queue_2 = module_0.Queue()
        set_2 = set()
        node_2 = module_0.Node(prev=set_2)
        queue_3 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_3 = set()
        node_3 = module_0.Node(prev=set_3)
        var_2 = double_linked_list_0.append(node_3)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        queue_4 = module_0.Queue()
>       var_3 = double_linked_list_0.push(queue_2)

RANDOM/test_queue4_RANDOM.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2e278d00>
val = <queue4.Queue object at 0x7f1a2e27a710>

>   ???
E   NameError: name 'head' is not defined

queue4:47: NameError
   - [# 154] SVD queue4: 
--------------------------------------------------------------------------------
   44:         old_head = self.head
   45:         self.head = Node(val, next_node=old_head)
   46:         if old_head:
   47:             old_head.prev = self.head
-  48:         if not (self.tail):
+  48:         if not tail:
   49:             self.tail = self.head
   50:         self._length += 1
   51:     
   52:     def pop(self):
--------------------------------------------------------------------------------
[5.69579 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_6

self = <queue4.DoubleLinkedList object at 0x7f1a2e279f60>
data = <queue4.Queue object at 0x7f1a2e2e8d30>

>   ???
E   TypeError: 'Queue' object is not iterable

queue4:36: TypeError

During handling of the above exception, another exception occurred:

    def test_case_6():
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_0 = queue_0.peek()
        queue_1 = module_0.Queue()
        set_2 = set()
        node_2 = module_0.Node(prev=set_2)
        var_1 = queue_1.size()
        assert var_1 == 0
        queue_2 = module_0.Queue()
        queue_3 = module_0.Queue()
        set_3 = set()
        node_3 = module_0.Node(prev=set_3)
        queue_4 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_4 = set()
        node_4 = module_0.Node(prev=set_4)
        var_2 = double_linked_list_0.append(node_4)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        set_5 = set()
        node_5 = module_0.Node(prev=set_5)
        queue_5 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
>       queue_6 = module_0.Queue(queue_1)

RANDOM/test_queue4_RANDOM.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue4:137: in __init__
    ???
queue4:40: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2e279f60>
val = <queue4.Queue object at 0x7f1a2e2e8d30>

>   ???
E   NameError: name 'tail' is not defined

queue4:48: NameError
   - [# 155] SVD queue4: 
--------------------------------------------------------------------------------
   45:         self.head = Node(val, next_node=old_head)
   46:         if old_head:
   47:             old_head.prev = self.head
   48:         if not (self.tail):
-  49:             self.tail = self.head
+  49:             tail = self.head
   50:         self._length += 1
   51:     
   52:     def pop(self):
   53:         '''Remove the val from the head of the list.'''
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 156] SVD queue4: 
--------------------------------------------------------------------------------
   45:         self.head = Node(val, next_node=old_head)
   46:         if old_head:
   47:             old_head.prev = self.head
   48:         if not (self.tail):
-  49:             self.tail = self.head
+  49:             self.tail = head
   50:         self._length += 1
   51:     
   52:     def pop(self):
   53:         '''Remove the val from the head of the list.'''
--------------------------------------------------------------------------------
[5.59954 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_6

self = <queue4.DoubleLinkedList object at 0x7f1a2e08f100>
data = <queue4.Queue object at 0x7f1a2e08e800>

>   ???
E   TypeError: 'Queue' object is not iterable

queue4:36: TypeError

During handling of the above exception, another exception occurred:

    def test_case_6():
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_0 = queue_0.peek()
        queue_1 = module_0.Queue()
        set_2 = set()
        node_2 = module_0.Node(prev=set_2)
        var_1 = queue_1.size()
        assert var_1 == 0
        queue_2 = module_0.Queue()
        queue_3 = module_0.Queue()
        set_3 = set()
        node_3 = module_0.Node(prev=set_3)
        queue_4 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_4 = set()
        node_4 = module_0.Node(prev=set_4)
        var_2 = double_linked_list_0.append(node_4)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        set_5 = set()
        node_5 = module_0.Node(prev=set_5)
        queue_5 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
>       queue_6 = module_0.Queue(queue_1)

RANDOM/test_queue4_RANDOM.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue4:137: in __init__
    ???
queue4:40: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2e08f100>
val = <queue4.Queue object at 0x7f1a2e08e800>

>   ???
E   NameError: name 'head' is not defined

queue4:49: NameError
   - [# 157] SVD queue4: 
--------------------------------------------------------------------------------
   46:         if old_head:
   47:             old_head.prev = self.head
   48:         if not (self.tail):
   49:             self.tail = self.head
-  50:         self._length += 1
+  50:         _length += 1
   51:     
   52:     def pop(self):
   53:         '''Remove the val from the head of the list.'''
   54:         to_return = self.head
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 158] SVD queue4: 
--------------------------------------------------------------------------------
   50:         self._length += 1
   51:     
   52:     def pop(self):
   53:         '''Remove the val from the head of the list.'''
-  54:         to_return = self.head
+  54:         to_return = head
   55:         if self._length < 1:
   56:             raise IndexError('Cannot pop from an empty list.')
   57:         
   58:         new_head = self.head.next
--------------------------------------------------------------------------------
[5.66660 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_20

def test_case_20():
        node_0 = module_0.Node()
        var_0 = node_0.__repr__()
        assert var_0 == 'Value: None'
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_1 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_2 = module_0.Node(prev=set_1)
        var_1 = double_linked_list_0.append(node_2)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
>       var_2 = double_linked_list_0.pop()

RANDOM/test_queue4_RANDOM.py:426: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2de166b0>

>   ???
E   NameError: name 'head' is not defined

queue4:54: NameError
   - [# 159] SVD queue4: 
--------------------------------------------------------------------------------
   51:     
   52:     def pop(self):
   53:         '''Remove the val from the head of the list.'''
   54:         to_return = self.head
-  55:         if self._length < 1:
+  55:         if _length < 1:
   56:             raise IndexError('Cannot pop from an empty list.')
   57:         
   58:         new_head = self.head.next
   59:         if new_head:
--------------------------------------------------------------------------------
[5.87293 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_20

def test_case_20():
        node_0 = module_0.Node()
        var_0 = node_0.__repr__()
        assert var_0 == 'Value: None'
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_1 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_2 = module_0.Node(prev=set_1)
        var_1 = double_linked_list_0.append(node_2)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
>       var_2 = double_linked_list_0.pop()

RANDOM/test_queue4_RANDOM.py:426: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2f0f9480>

>   ???
E   NameError: name '_length' is not defined

queue4:55: NameError
   - [# 160] SVD queue4: 
--------------------------------------------------------------------------------
   54:         to_return = self.head
   55:         if self._length < 1:
   56:             raise IndexError('Cannot pop from an empty list.')
   57:         
-  58:         new_head = self.head.next
+  58:         new_head = head.next
   59:         if new_head:
   60:             new_head.prev = None
   61:         self.head = new_head
   62:         self._length -= 1
--------------------------------------------------------------------------------
[5.45292 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_20

def test_case_20():
        node_0 = module_0.Node()
        var_0 = node_0.__repr__()
        assert var_0 == 'Value: None'
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_1 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_2 = module_0.Node(prev=set_1)
        var_1 = double_linked_list_0.append(node_2)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
>       var_2 = double_linked_list_0.pop()

RANDOM/test_queue4_RANDOM.py:426: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2de870a0>

>   ???
E   NameError: name 'head' is not defined

queue4:58: NameError
   - [# 161] SVD queue4: 
--------------------------------------------------------------------------------
   57:         
   58:         new_head = self.head.next
   59:         if new_head:
   60:             new_head.prev = None
-  61:         self.head = new_head
+  61:         head = new_head
   62:         self._length -= 1
   63:         if self._length < 1:
   64:             self.tail = None
   65:         return to_return.data
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 162] SVD queue4: 
--------------------------------------------------------------------------------
   58:         new_head = self.head.next
   59:         if new_head:
   60:             new_head.prev = None
   61:         self.head = new_head
-  62:         self._length -= 1
+  62:         _length -= 1
   63:         if self._length < 1:
   64:             self.tail = None
   65:         return to_return.data
   66:     
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 163] SVD queue4: 
--------------------------------------------------------------------------------
   59:         if new_head:
   60:             new_head.prev = None
   61:         self.head = new_head
   62:         self._length -= 1
-  63:         if self._length < 1:
+  63:         if _length < 1:
   64:             self.tail = None
   65:         return to_return.data
   66:     
   67:     def append(self, val):
--------------------------------------------------------------------------------
[5.54729 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_20

def test_case_20():
        node_0 = module_0.Node()
        var_0 = node_0.__repr__()
        assert var_0 == 'Value: None'
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_1 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_2 = module_0.Node(prev=set_1)
        var_1 = double_linked_list_0.append(node_2)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
>       var_2 = double_linked_list_0.pop()

RANDOM/test_queue4_RANDOM.py:426: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2cf3a950>

>   ???
E   NameError: name '_length' is not defined

queue4:63: NameError
   - [# 164] SVD queue4: 
--------------------------------------------------------------------------------
   60:             new_head.prev = None
   61:         self.head = new_head
   62:         self._length -= 1
   63:         if self._length < 1:
-  64:             self.tail = None
+  64:             tail = None
   65:         return to_return.data
   66:     
   67:     def append(self, val):
   68:         '''Add val to the tail of the list.'''
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 165] SVD queue4: 
--------------------------------------------------------------------------------
   65:         return to_return.data
   66:     
   67:     def append(self, val):
   68:         '''Add val to the tail of the list.'''
-  69:         old_tail = self.tail
+  69:         old_tail = tail
   70:         self.tail = Node(val, prev=old_tail)
   71:         if old_tail:
   72:             old_tail.next = self.tail
   73:         if self._length < 1:
--------------------------------------------------------------------------------
[5.86772 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_4

def test_case_4():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
>       var_0 = double_linked_list_0.append(node_1)

RANDOM/test_queue4_RANDOM.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2e251e40>, val = Value: None

>   ???
E   NameError: name 'tail' is not defined

queue4:69: NameError
   - [# 166] SVD queue4: 
--------------------------------------------------------------------------------
   66:     
   67:     def append(self, val):
   68:         '''Add val to the tail of the list.'''
   69:         old_tail = self.tail
-  70:         self.tail = Node(val, prev=old_tail)
+  70:         tail = Node(val, prev=old_tail)
   71:         if old_tail:
   72:             old_tail.next = self.tail
   73:         if self._length < 1:
   74:             self.head = self.tail
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 167] SVD queue4: 
--------------------------------------------------------------------------------
   68:         '''Add val to the tail of the list.'''
   69:         old_tail = self.tail
   70:         self.tail = Node(val, prev=old_tail)
   71:         if old_tail:
-  72:             old_tail.next = self.tail
+  72:             old_tail.next = tail
   73:         if self._length < 1:
   74:             self.head = self.tail
   75:         self._length += 1
   76:     
--------------------------------------------------------------------------------
[5.52218 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_47

def test_case_47():
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        queue_1 = module_0.Queue()
        var_0 = queue_1.peek()
        queue_2 = module_0.Queue()
        queue_3 = module_0.Queue()
        queue_4 = module_0.Queue()
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        queue_5 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        node_2 = module_0.Node()
        queue_6 = module_0.Queue()
        set_2 = set()
        node_3 = module_0.Node(prev=set_2)
        queue_7 = module_0.Queue()
        double_linked_list_2 = module_0.DoubleLinkedList()
        assert double_linked_list_2.head is None
        assert double_linked_list_2.tail is None
        set_3 = set()
        node_4 = module_0.Node(prev=set_3)
        var_1 = double_linked_list_2.append(node_4)
        assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
        var_2 = queue_6.size()
        assert var_2 == 0
>       var_3 = double_linked_list_2.append(node_2)

RANDOM/test_queue4_RANDOM.py:1585: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2df3a800>, val = Value: None

>   ???
E   NameError: name 'tail' is not defined

queue4:72: NameError
   - [# 168] SVD queue4: 
--------------------------------------------------------------------------------
   69:         old_tail = self.tail
   70:         self.tail = Node(val, prev=old_tail)
   71:         if old_tail:
   72:             old_tail.next = self.tail
-  73:         if self._length < 1:
+  73:         if _length < 1:
   74:             self.head = self.tail
   75:         self._length += 1
   76:     
   77:     def shift(self):
--------------------------------------------------------------------------------
[5.60233 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_4

def test_case_4():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
>       var_0 = double_linked_list_0.append(node_1)

RANDOM/test_queue4_RANDOM.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2df3bee0>, val = Value: None

>   ???
E   NameError: name '_length' is not defined

queue4:73: NameError
   - [# 169] SVD queue4: 
--------------------------------------------------------------------------------
   70:         self.tail = Node(val, prev=old_tail)
   71:         if old_tail:
   72:             old_tail.next = self.tail
   73:         if self._length < 1:
-  74:             self.head = self.tail
+  74:             head = self.tail
   75:         self._length += 1
   76:     
   77:     def shift(self):
   78:         '''Remove the val from the tail of the list.'''
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 170] SVD queue4: 
--------------------------------------------------------------------------------
   70:         self.tail = Node(val, prev=old_tail)
   71:         if old_tail:
   72:             old_tail.next = self.tail
   73:         if self._length < 1:
-  74:             self.head = self.tail
+  74:             self.head = tail
   75:         self._length += 1
   76:     
   77:     def shift(self):
   78:         '''Remove the val from the tail of the list.'''
--------------------------------------------------------------------------------
[5.80854 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_4

def test_case_4():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
>       var_0 = double_linked_list_0.append(node_1)

RANDOM/test_queue4_RANDOM.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2e23f3a0>, val = Value: None

>   ???
E   NameError: name 'tail' is not defined

queue4:74: NameError
   - [# 171] SVD queue4: 
--------------------------------------------------------------------------------
   71:         if old_tail:
   72:             old_tail.next = self.tail
   73:         if self._length < 1:
   74:             self.head = self.tail
-  75:         self._length += 1
+  75:         _length += 1
   76:     
   77:     def shift(self):
   78:         '''Remove the val from the tail of the list.'''
   79:         to_return = self.tail
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 172] SVD queue4: 
--------------------------------------------------------------------------------
   75:         self._length += 1
   76:     
   77:     def shift(self):
   78:         '''Remove the val from the tail of the list.'''
-  79:         to_return = self.tail
+  79:         to_return = tail
   80:         if self._length < 1:
   81:             raise IndexError('Cannot shift from an empty list.')
   82:         
   83:         new_tail = self.tail.prev
--------------------------------------------------------------------------------
[5.53477 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_66

def test_case_66():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_0 = double_linked_list_0.append(node_1)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
>       var_1 = double_linked_list_0.shift()

RANDOM/test_queue4_RANDOM.py:2106: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2cfbf2e0>

>   ???
E   NameError: name 'tail' is not defined

queue4:79: NameError
   - [# 173] SVD queue4: 
--------------------------------------------------------------------------------
   76:     
   77:     def shift(self):
   78:         '''Remove the val from the tail of the list.'''
   79:         to_return = self.tail
-  80:         if self._length < 1:
+  80:         if _length < 1:
   81:             raise IndexError('Cannot shift from an empty list.')
   82:         
   83:         new_tail = self.tail.prev
   84:         if new_tail:
--------------------------------------------------------------------------------
[5.70786 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_66

def test_case_66():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_0 = double_linked_list_0.append(node_1)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
>       var_1 = double_linked_list_0.shift()

RANDOM/test_queue4_RANDOM.py:2106: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2e28f0d0>

>   ???
E   NameError: name '_length' is not defined

queue4:80: NameError
   - [# 174] SVD queue4: 
--------------------------------------------------------------------------------
   79:         to_return = self.tail
   80:         if self._length < 1:
   81:             raise IndexError('Cannot shift from an empty list.')
   82:         
-  83:         new_tail = self.tail.prev
+  83:         new_tail = tail.prev
   84:         if new_tail:
   85:             new_tail.next = None
   86:         self.tail = new_tail
   87:         self._length -= 1
--------------------------------------------------------------------------------
[5.61149 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_66

def test_case_66():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_0 = double_linked_list_0.append(node_1)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
>       var_1 = double_linked_list_0.shift()

RANDOM/test_queue4_RANDOM.py:2106: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2e23ed70>

>   ???
E   NameError: name 'tail' is not defined

queue4:83: NameError
   - [# 175] SVD queue4: 
--------------------------------------------------------------------------------
   82:         
   83:         new_tail = self.tail.prev
   84:         if new_tail:
   85:             new_tail.next = None
-  86:         self.tail = new_tail
+  86:         tail = new_tail
   87:         self._length -= 1
   88:         if self._length < 1:
   89:             self.tail = None
   90:         return to_return.data
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 176] SVD queue4: 
--------------------------------------------------------------------------------
   83:         new_tail = self.tail.prev
   84:         if new_tail:
   85:             new_tail.next = None
   86:         self.tail = new_tail
-  87:         self._length -= 1
+  87:         _length -= 1
   88:         if self._length < 1:
   89:             self.tail = None
   90:         return to_return.data
   91:     
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 177] SVD queue4: 
--------------------------------------------------------------------------------
   84:         if new_tail:
   85:             new_tail.next = None
   86:         self.tail = new_tail
   87:         self._length -= 1
-  88:         if self._length < 1:
+  88:         if _length < 1:
   89:             self.tail = None
   90:         return to_return.data
   91:     
   92:     def remove(self, val):
--------------------------------------------------------------------------------
[5.93281 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_66

def test_case_66():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_1 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_0 = double_linked_list_0.append(node_1)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
>       var_1 = double_linked_list_0.shift()

RANDOM/test_queue4_RANDOM.py:2106: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2e23e890>

>   ???
E   NameError: name '_length' is not defined

queue4:88: NameError
   - [# 178] SVD queue4: 
--------------------------------------------------------------------------------
   85:             new_tail.next = None
   86:         self.tail = new_tail
   87:         self._length -= 1
   88:         if self._length < 1:
-  89:             self.tail = None
+  89:             tail = None
   90:         return to_return.data
   91:     
   92:     def remove(self, val):
   93:         '''Remove first occurance of val from list.'''
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 179] SVD queue4: 
--------------------------------------------------------------------------------
   90:         return to_return.data
   91:     
   92:     def remove(self, val):
   93:         '''Remove first occurance of val from list.'''
-  94:         curr = self.head
+  94:         curr = head
   95:         while curr:
   96:             if curr.data is val:
   97:                 if self._length == 1:
   98:                     (self.head, self.tail) = (None, None)
--------------------------------------------------------------------------------
[5.69845 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_85

def test_case_85():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        var_0 = queue_0.peek()
        node_1 = module_0.Node()
        queue_1 = module_0.Queue()
        set_1 = set()
        node_2 = module_0.Node(prev=set_1)
        var_1 = queue_1.size()
        assert var_1 == 0
        set_2 = set()
        node_3 = module_0.Node(prev=set_2)
        bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_2 = module_0.Queue(bytes_0)
        assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_2 = double_linked_list_0.append(bytes_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_3 = module_0.Queue(bytes_1)
        queue_4 = module_0.Queue()
        set_3 = set()
        node_4 = module_0.Node(prev=set_3)
        var_3 = queue_4.size()
        assert var_3 == 0
        queue_5 = module_0.Queue()
        var_4 = queue_4.size()
        assert var_4 == 0
        queue_6 = module_0.Queue()
        set_4 = set()
        node_5 = module_0.Node(prev=set_4)
        queue_7 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        node_6 = module_0.Node()
        queue_8 = module_0.Queue()
        set_5 = set()
        node_7 = module_0.Node(prev=set_5)
        queue_9 = module_0.Queue()
        double_linked_list_2 = module_0.DoubleLinkedList()
        assert double_linked_list_2.head is None
        assert double_linked_list_2.tail is None
        set_6 = set()
        node_8 = module_0.Node(prev=set_6)
        var_5 = double_linked_list_2.append(node_8)
        assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
>       var_6 = double_linked_list_0.remove(bytes_1)

RANDOM/test_queue4_RANDOM.py:2990: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2e2d2b30>
val = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'

>   ???
E   NameError: name 'head' is not defined

queue4:94: NameError
   - [# 180] SVD queue4: 
--------------------------------------------------------------------------------
   93:         '''Remove first occurance of val from list.'''
   94:         curr = self.head
   95:         while curr:
   96:             if curr.data is val:
-  97:                 if self._length == 1:
+  97:                 if _length == 1:
   98:                     (self.head, self.tail) = (None, None)
   99:                 elif (curr is not self.head and curr is not self.tail):
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  101:                 elif curr is self.head:
--------------------------------------------------------------------------------
[5.55671 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_85

def test_case_85():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        var_0 = queue_0.peek()
        node_1 = module_0.Node()
        queue_1 = module_0.Queue()
        set_1 = set()
        node_2 = module_0.Node(prev=set_1)
        var_1 = queue_1.size()
        assert var_1 == 0
        set_2 = set()
        node_3 = module_0.Node(prev=set_2)
        bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_2 = module_0.Queue(bytes_0)
        assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_2 = double_linked_list_0.append(bytes_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_3 = module_0.Queue(bytes_1)
        queue_4 = module_0.Queue()
        set_3 = set()
        node_4 = module_0.Node(prev=set_3)
        var_3 = queue_4.size()
        assert var_3 == 0
        queue_5 = module_0.Queue()
        var_4 = queue_4.size()
        assert var_4 == 0
        queue_6 = module_0.Queue()
        set_4 = set()
        node_5 = module_0.Node(prev=set_4)
        queue_7 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        node_6 = module_0.Node()
        queue_8 = module_0.Queue()
        set_5 = set()
        node_7 = module_0.Node(prev=set_5)
        queue_9 = module_0.Queue()
        double_linked_list_2 = module_0.DoubleLinkedList()
        assert double_linked_list_2.head is None
        assert double_linked_list_2.tail is None
        set_6 = set()
        node_8 = module_0.Node(prev=set_6)
        var_5 = double_linked_list_2.append(node_8)
        assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
>       var_6 = double_linked_list_0.remove(bytes_1)

RANDOM/test_queue4_RANDOM.py:2990: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2e23db40>
val = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'

>   ???
E   NameError: name '_length' is not defined

queue4:97: NameError
   - [# 181] SVD queue4: 
--------------------------------------------------------------------------------
   94:         curr = self.head
   95:         while curr:
   96:             if curr.data is val:
   97:                 if self._length == 1:
-  98:                     (self.head, self.tail) = (None, None)
+  98:                     (head, self.tail) = (None, None)
   99:                 elif (curr is not self.head and curr is not self.tail):
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  101:                 elif curr is self.head:
  102:                     (self.head, curr.next.prev) = (curr.next, None)
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 182] SVD queue4: 
--------------------------------------------------------------------------------
   94:         curr = self.head
   95:         while curr:
   96:             if curr.data is val:
   97:                 if self._length == 1:
-  98:                     (self.head, self.tail) = (None, None)
+  98:                     (self.head, tail) = (None, None)
   99:                 elif (curr is not self.head and curr is not self.tail):
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  101:                 elif curr is self.head:
  102:                     (self.head, curr.next.prev) = (curr.next, None)
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 183] SVD queue4: 
--------------------------------------------------------------------------------
   95:         while curr:
   96:             if curr.data is val:
   97:                 if self._length == 1:
   98:                     (self.head, self.tail) = (None, None)
-  99:                 elif (curr is not self.head and curr is not self.tail):
+  99:                 elif (curr is not head and curr is not self.tail):
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  101:                 elif curr is self.head:
  102:                     (self.head, curr.next.prev) = (curr.next, None)
  103:                 elif curr is self.tail:
--------------------------------------------------------------------------------
[2.90755 s] survived
   - [# 184] SVD queue4: 
--------------------------------------------------------------------------------
   95:         while curr:
   96:             if curr.data is val:
   97:                 if self._length == 1:
   98:                     (self.head, self.tail) = (None, None)
-  99:                 elif (curr is not self.head and curr is not self.tail):
+  99:                 elif (curr is not self.head and curr is not tail):
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  101:                 elif curr is self.head:
  102:                     (self.head, curr.next.prev) = (curr.next, None)
  103:                 elif curr is self.tail:
--------------------------------------------------------------------------------
[2.91149 s] survived
   - [# 185] SVD queue4: 
--------------------------------------------------------------------------------
   97:                 if self._length == 1:
   98:                     (self.head, self.tail) = (None, None)
   99:                 elif (curr is not self.head and curr is not self.tail):
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
- 101:                 elif curr is self.head:
+ 101:                 elif curr is head:
  102:                     (self.head, curr.next.prev) = (curr.next, None)
  103:                 elif curr is self.tail:
  104:                     (self.tail, curr.prev.next) = (curr.prev, None)
  105:                 self._length -= 1
--------------------------------------------------------------------------------
[2.92186 s] survived
   - [# 186] SVD queue4: 
--------------------------------------------------------------------------------
   98:                     (self.head, self.tail) = (None, None)
   99:                 elif (curr is not self.head and curr is not self.tail):
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  101:                 elif curr is self.head:
- 102:                     (self.head, curr.next.prev) = (curr.next, None)
+ 102:                     (head, curr.next.prev) = (curr.next, None)
  103:                 elif curr is self.tail:
  104:                     (self.tail, curr.prev.next) = (curr.prev, None)
  105:                 self._length -= 1
  106:                 return
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 187] SVD queue4: 
--------------------------------------------------------------------------------
   99:                 elif (curr is not self.head and curr is not self.tail):
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  101:                 elif curr is self.head:
  102:                     (self.head, curr.next.prev) = (curr.next, None)
- 103:                 elif curr is self.tail:
+ 103:                 elif curr is tail:
  104:                     (self.tail, curr.prev.next) = (curr.prev, None)
  105:                 self._length -= 1
  106:                 return
  107:             curr = curr.next
--------------------------------------------------------------------------------
[2.98360 s] survived
   - [# 188] SVD queue4: 
--------------------------------------------------------------------------------
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  101:                 elif curr is self.head:
  102:                     (self.head, curr.next.prev) = (curr.next, None)
  103:                 elif curr is self.tail:
- 104:                     (self.tail, curr.prev.next) = (curr.prev, None)
+ 104:                     (tail, curr.prev.next) = (curr.prev, None)
  105:                 self._length -= 1
  106:                 return
  107:             curr = curr.next
  108:         
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 189] SVD queue4: 
--------------------------------------------------------------------------------
  101:                 elif curr is self.head:
  102:                     (self.head, curr.next.prev) = (curr.next, None)
  103:                 elif curr is self.tail:
  104:                     (self.tail, curr.prev.next) = (curr.prev, None)
- 105:                 self._length -= 1
+ 105:                 _length -= 1
  106:                 return
  107:             curr = curr.next
  108:         
  109:         raise ValueError('{} is not in the list'.format(val))
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 190] SVD queue4: 
--------------------------------------------------------------------------------
  112:         '''Return list representation of dll.'''
  113:         l = []
  114:         while True:
  115:             try:
- 116:                 popped_data = self.pop()
+ 116:                 popped_data = pop()
  117:                 l.append(popped_data)
  118:             except IndexError:
  119:                 break
  120:         return l
--------------------------------------------------------------------------------
[2.98975 s] survived
   - [# 191] SVD queue4: 
--------------------------------------------------------------------------------
  133:     '''
  134:     
  135:     def __init__(self, data=None):
  136:         '''Initialize queue data structure.'''
- 137:         self._container = DoubleLinkedList(data)
+ 137:         _container = DoubleLinkedList(data)
  138:     
  139:     def enqueue(self, val):
  140:         '''Add a value to the queue.'''
  141:         self._container.append(val)
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 192] SVD queue4: 
--------------------------------------------------------------------------------
  137:         self._container = DoubleLinkedList(data)
  138:     
  139:     def enqueue(self, val):
  140:         '''Add a value to the queue.'''
- 141:         self._container.append(val)
+ 141:         _container.append(val)
  142:     
  143:     def dequeue(self):
  144:         '''Remove a value from the front of the queue.'''
  145:         return self._container.pop()
--------------------------------------------------------------------------------
[5.73534 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_6

def test_case_6():
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_0 = queue_0.peek()
        queue_1 = module_0.Queue()
        set_2 = set()
        node_2 = module_0.Node(prev=set_2)
        var_1 = queue_1.size()
        assert var_1 == 0
        queue_2 = module_0.Queue()
        queue_3 = module_0.Queue()
        set_3 = set()
        node_3 = module_0.Node(prev=set_3)
        queue_4 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_4 = set()
        node_4 = module_0.Node(prev=set_4)
        var_2 = double_linked_list_0.append(node_4)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        set_5 = set()
        node_5 = module_0.Node(prev=set_5)
        queue_5 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        queue_6 = module_0.Queue(queue_1)
        assert f'{type(queue_6).__module__}.{type(queue_6).__qualname__}' == 'queue4.Queue'
>       var_3 = queue_3.enqueue(queue_6)

RANDOM/test_queue4_RANDOM.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.Queue object at 0x7f1a2df39180>
val = <queue4.Queue object at 0x7f1a2df3a410>

>   ???
E   NameError: name '_container' is not defined

queue4:141: NameError
   - [# 193] SVD queue4: 
--------------------------------------------------------------------------------
  141:         self._container.append(val)
  142:     
  143:     def dequeue(self):
  144:         '''Remove a value from the front of the queue.'''
- 145:         return self._container.pop()
+ 145:         return _container.pop()
  146:     
  147:     def peek(self):
  148:         '''Return the next value in the queue without dequing it.'''
  149:         try:
--------------------------------------------------------------------------------
[5.77787 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_113

def test_case_113():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        queue_1 = module_0.Queue()
        bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_2 = module_0.Queue(bytes_0)
        assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
        queue_3 = module_0.Queue()
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        queue_4 = module_0.Queue()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_1 = set()
        node_1 = module_0.Node(prev=set_1)
        var_0 = double_linked_list_0.append(node_1)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        var_1 = double_linked_list_0.shift()
        assert double_linked_list_0.tail is None
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue4.Node'
        assert var_1.data is None
        assert var_1.next is None
        assert var_1.prev == {*()}
        set_2 = set()
        node_2 = module_0.Node(prev=set_2)
        set_3 = set()
        node_3 = module_0.Node(prev=set_3)
        queue_5 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        node_4 = module_0.Node()
        set_4 = set()
        node_5 = module_0.Node(prev=set_4)
        queue_6 = module_0.Queue()
        double_linked_list_2 = module_0.DoubleLinkedList()
        assert double_linked_list_2.head is None
        assert double_linked_list_2.tail is None
        queue_7 = module_0.Queue()
        var_2 = queue_7.peek()
        bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_8 = module_0.Queue(bytes_1)
        queue_9 = module_0.Queue()
        set_5 = set()
        node_6 = module_0.Node(prev=set_5)
        var_3 = queue_9.size()
        assert var_3 == 0
        queue_10 = module_0.Queue()
        var_4 = queue_9.size()
        assert var_4 == 0
        node_7 = module_0.Node()
        var_5 = node_7.__repr__()
        assert var_5 == 'Value: None'
        queue_11 = module_0.Queue(node_7)
        set_6 = set()
        node_8 = module_0.Node(prev=set_6)
        queue_12 = module_0.Queue()
        double_linked_list_3 = module_0.DoubleLinkedList()
        assert double_linked_list_3.head is None
        assert double_linked_list_3.tail is None
        queue_13 = module_0.Queue()
        queue_14 = module_0.Queue()
        double_linked_list_4 = module_0.DoubleLinkedList()
        assert double_linked_list_4.head is None
        assert double_linked_list_4.tail is None
        bytes_2 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_15 = module_0.Queue(bytes_2)
        queue_16 = module_0.Queue()
        set_7 = set()
        node_9 = module_0.Node(prev=set_7)
        var_6 = queue_16.size()
        assert var_6 == 0
        queue_17 = module_0.Queue()
        var_7 = queue_16.size()
        assert var_7 == 0
        var_8 = queue_15.peek()
        assert var_8 == 77
        queue_18 = module_0.Queue(var_8)
>       var_9 = queue_18.dequeue()

RANDOM/test_queue4_RANDOM.py:4292: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.Queue object at 0x7f1a2e23fbb0>

>   ???
E   NameError: name '_container' is not defined

queue4:145: NameError
   - [# 194] SVD queue4: 
--------------------------------------------------------------------------------
  146:     
  147:     def peek(self):
  148:         '''Return the next value in the queue without dequing it.'''
  149:         try:
- 150:             return self._container.head.data
+ 150:             return _container.head.data
  151:         except AttributeError:
  152:             return None
  153:     
  154:     def size(self):
--------------------------------------------------------------------------------
[5.76428 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_5

def test_case_5():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
>       var_0 = queue_0.peek()

RANDOM/test_queue4_RANDOM.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.Queue object at 0x7f1a2e2d14e0>

>   ???
E   NameError: name '_container' is not defined

queue4:150: NameError
   - [# 195] SVD queue4: 
--------------------------------------------------------------------------------
  152:             return None
  153:     
  154:     def size(self):
  155:         '''Return the size of the queue.'''
- 156:         return self._container._length
+ 156:         return _container._length
--------------------------------------------------------------------------------
[5.61680 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_2

def test_case_2():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
>       var_0 = queue_0.size()

RANDOM/test_queue4_RANDOM.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.Queue object at 0x7f1a2ce65a20>

>   ???
E   NameError: name '_container' is not defined

queue4:156: NameError
   - [# 196] ZIL queue4: 
--------------------------------------------------------------------------------
   33:         self.tail = None
   34:         self._length = 0
   35:         try:
   36:             for val in data:
-  37:                 self.push(val)
+  37:                 break
   38:         except TypeError:
   39:             if data:
   40:                 self.push(data)
   41:     
--------------------------------------------------------------------------------
[5.64212 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_65

def test_case_65():
        bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_0 = module_0.Queue(bytes_0)
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        queue_1 = module_0.Queue()
        assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        var_0 = queue_1.size()
        assert var_0 == 0
        queue_2 = module_0.Queue()
        var_1 = queue_1.size()
        assert var_1 == 0
        var_2 = queue_0.peek()
>       assert var_2 == 77
E       AssertionError

RANDOM/test_queue4_RANDOM.py:2091: AssertionError
   - [# 197] ZIL queue4: 
--------------------------------------------------------------------------------
   92:     def remove(self, val):
   93:         '''Remove first occurance of val from list.'''
   94:         curr = self.head
   95:         while curr:
-  96:             if curr.data is val:
-  97:                 if self._length == 1:
-  98:                     (self.head, self.tail) = (None, None)
-  99:                 elif (curr is not self.head and curr is not self.tail):
- 100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
- 101:                 elif curr is self.head:
- 102:                     (self.head, curr.next.prev) = (curr.next, None)
- 103:                 elif curr is self.tail:
- 104:                     (self.tail, curr.prev.next) = (curr.prev, None)
- 105:                 self._length -= 1
- 106:                 return
- 107:             curr = curr.next
+  96:             break
+  97:         
+  98:         
+  99:         
+ 100:         
+ 101:         
+ 102:         
+ 103:         
+ 104:         
+ 105:         
+ 106:         
+ 107:         
  108:         
  109:         raise ValueError('{} is not in the list'.format(val))
  110:     
  111:     def _repr(self):
--------------------------------------------------------------------------------
[5.65373 s] killed by RANDOM/test_queue4_RANDOM.py::test_case_85

def test_case_85():
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'queue4.Queue'
        set_0 = set()
        node_0 = module_0.Node(prev=set_0)
        var_0 = queue_0.peek()
        node_1 = module_0.Node()
        queue_1 = module_0.Queue()
        set_1 = set()
        node_2 = module_0.Node(prev=set_1)
        var_1 = queue_1.size()
        assert var_1 == 0
        set_2 = set()
        node_3 = module_0.Node(prev=set_2)
        bytes_0 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_2 = module_0.Queue(bytes_0)
        assert f'{type(queue_2).__module__}.{type(queue_2).__qualname__}' == 'queue4.Queue'
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_2 = double_linked_list_0.append(bytes_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'queue4.Node'
        bytes_1 = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'
        queue_3 = module_0.Queue(bytes_1)
        queue_4 = module_0.Queue()
        set_3 = set()
        node_4 = module_0.Node(prev=set_3)
        var_3 = queue_4.size()
        assert var_3 == 0
        queue_5 = module_0.Queue()
        var_4 = queue_4.size()
        assert var_4 == 0
        queue_6 = module_0.Queue()
        set_4 = set()
        node_5 = module_0.Node(prev=set_4)
        queue_7 = module_0.Queue()
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        node_6 = module_0.Node()
        queue_8 = module_0.Queue()
        set_5 = set()
        node_7 = module_0.Node(prev=set_5)
        queue_9 = module_0.Queue()
        double_linked_list_2 = module_0.DoubleLinkedList()
        assert double_linked_list_2.head is None
        assert double_linked_list_2.tail is None
        set_6 = set()
        node_8 = module_0.Node(prev=set_6)
        var_5 = double_linked_list_2.append(node_8)
        assert f'{type(double_linked_list_2.head).__module__}.{type(double_linked_list_2.head).__qualname__}' == 'queue4.Node'
>       var_6 = double_linked_list_0.remove(bytes_1)

RANDOM/test_queue4_RANDOM.py:2990: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue4.DoubleLinkedList object at 0x7f1a2df39ea0>
val = b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M'

>   ???
E   ValueError: b'\x94U\xd7\x90\xd4e\x96\x0co\xf9M' is not in the list

queue4:109: ValueError
   - [# 198] ZIL queue4: 
--------------------------------------------------------------------------------
  111:     def _repr(self):
  112:         '''Return list representation of dll.'''
  113:         l = []
  114:         while True:
- 115:             try:
- 116:                 popped_data = self.pop()
- 117:                 l.append(popped_data)
- 118:             except IndexError:
- 119:                 break
+ 115:             break
+ 116:         
+ 117:         
+ 118:         
+ 119:         
  120:         return l
  121: 
  122: 
  123: class Queue(object):
--------------------------------------------------------------------------------
[2.90235 s] survived
[*] Mutation score [905.21470 s]: 70.0%
   - all: 198
   - killed: 111 (56.1%)
   - survived: 48 (24.2%)
   - incompetent: 38 (19.2%)
   - timeout: 1 (0.5%)
