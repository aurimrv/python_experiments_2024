[*] Start mutation process:
   - targets: stack2.py
   - tests: ./RANDOM
[*] 96 tests passed:
   - test_stack2_RANDOM [0.20475 s]
[*] Start mutants generation and execution:
   - [#   1] AOR stack2: 
--------------------------------------------------------------------------------
  23:         return self.stack.pop()
  24:     
  25:     def __repr__(self):
  26:         '''show representation.'''
- 27:         return 'stack:' + str(self.stack)
+ 27:         return 'stack:' - str(self.stack)
--------------------------------------------------------------------------------
[0.27482 s] incompetent

TypeError: stack2:27: TypeError: unsupported operand type(s) for -: 'str' and 'str'

   - [#   2] CDI stack2: 
--------------------------------------------------------------------------------
   3: 
   4:     Author: George Heineman
   5: '''
   6: class Stack:
-  7:     def __init__(self):
-  8:         '''Demonstrate using list as storage for a Stack.'''
-  9:         self.stack = []
- 10:     
+  7:     @classmethod
+  8:     def __init__(self):
+  9:         '''Demonstrate using list as storage for a Stack.'''
+ 10:         self.stack = []
  11:     def isEmpty(self):
  12:         '''Determines whether stack is empty. O(1) performance'''
  13:         return len(self.stack) == 0
  14:     
--------------------------------------------------------------------------------
[0.28943 s] killed by RANDOM/test_stack2_RANDOM.py::test_case_13

def test_case_13():
        stack_0 = module_0.Stack()
        var_0 = stack_0.isEmpty()
        assert var_0 is True
        object_0 = module_1.object()
        set_0 = {object_0, object_0, object_0}
        stack_1 = module_0.Stack()
        var_1 = stack_1.push(set_0)
        stack_2 = module_0.Stack()
        var_2 = stack_2.isEmpty()
        assert var_2 is True
        stack_3 = module_0.Stack()
        var_3 = stack_2.isEmpty()
        assert var_3 is True
        stack_4 = module_0.Stack()
        stack_5 = module_0.Stack()
        var_4 = stack_5.isEmpty()
        assert var_4 is True
        stack_6 = module_0.Stack()
        var_5 = stack_6.__repr__()
        assert var_5 == 'stack:[]'
        stack_7 = module_0.Stack()
        object_1 = module_1.object()
        set_1 = {object_1, object_1, object_1}
        stack_8 = module_0.Stack()
        var_6 = stack_8.push(set_1)
        var_7 = stack_8.isEmpty()
        assert var_7 is False
        stack_9 = module_0.Stack()
        var_8 = stack_9.isEmpty()
        assert var_8 is True
        var_9 = stack_9.isEmpty()
        assert var_9 is True
        stack_10 = module_0.Stack()
        stack_11 = module_0.Stack()
        var_10 = stack_11.isEmpty()
        assert var_10 is True
        stack_12 = module_0.Stack()
        var_11 = stack_11.isEmpty()
        assert var_11 is True
        stack_13 = module_0.Stack()
        var_12 = stack_13.isEmpty()
        assert var_12 is True
        var_13 = stack_13.push(var_12)
        assert stack_13.stack == [True]
        stack_14 = module_0.Stack()
        var_14 = stack_14.isEmpty()
        assert var_14 is True
        stack_15 = module_0.Stack()
        var_15 = stack_14.isEmpty()
        assert var_15 is True
        var_16 = stack_13.__repr__()
>       assert var_16 == 'stack:[True]'
E       AssertionError

RANDOM/test_stack2_RANDOM.py:250: AssertionError
   - [#   3] CDI stack2: 
--------------------------------------------------------------------------------
   7:     def __init__(self):
   8:         '''Demonstrate using list as storage for a Stack.'''
   9:         self.stack = []
  10:     
- 11:     def isEmpty(self):
- 12:         '''Determines whether stack is empty. O(1) performance'''
- 13:         return len(self.stack) == 0
- 14:     
+ 11:     @classmethod
+ 12:     def isEmpty(self):
+ 13:         '''Determines whether stack is empty. O(1) performance'''
+ 14:         return len(self.stack) == 0
  15:     def push(self, v):
  16:         '''Push v onto the stack. O(1) performance.'''
  17:         self.stack.append(v)
  18:     
--------------------------------------------------------------------------------
[0.28914 s] killed by RANDOM/test_stack2_RANDOM.py::test_case_1

def test_case_1():
        stack_0 = module_0.Stack()
>       var_0 = stack_0.isEmpty()

RANDOM/test_stack2_RANDOM.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'stack2.Stack'>

>   ???
E   AttributeError: type object 'Stack' has no attribute 'stack'

stack2:14: AttributeError
   - [#   4] CDI stack2: 
--------------------------------------------------------------------------------
  11:     def isEmpty(self):
  12:         '''Determines whether stack is empty. O(1) performance'''
  13:         return len(self.stack) == 0
  14:     
- 15:     def push(self, v):
- 16:         '''Push v onto the stack. O(1) performance.'''
- 17:         self.stack.append(v)
- 18:     
+ 15:     @classmethod
+ 16:     def push(self, v):
+ 17:         '''Push v onto the stack. O(1) performance.'''
+ 18:         self.stack.append(v)
  19:     def pop(self):
  20:         '''Remove topmost element and return it. O(1) performance.'''
  21:         if self.isEmpty():
  22:             raise Exception('Stack is empty.')
--------------------------------------------------------------------------------
[0.27684 s] killed by RANDOM/test_stack2_RANDOM.py::test_case_3

def test_case_3():
        stack_0 = module_0.Stack()
        stack_1 = module_0.Stack()
        var_0 = stack_1.isEmpty()
        assert var_0 is True
        stack_2 = module_0.Stack()
        var_1 = stack_1.isEmpty()
        assert var_1 is True
        stack_3 = module_0.Stack()
        var_2 = stack_3.isEmpty()
        assert var_2 is True
>       var_3 = stack_3.push(var_2)

RANDOM/test_stack2_RANDOM.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'stack2.Stack'>, v = True

>   ???
E   AttributeError: type object 'Stack' has no attribute 'stack'

stack2:18: AttributeError
   - [#   5] CDI stack2: 
--------------------------------------------------------------------------------
  15:     def push(self, v):
  16:         '''Push v onto the stack. O(1) performance.'''
  17:         self.stack.append(v)
  18:     
- 19:     def pop(self):
- 20:         '''Remove topmost element and return it. O(1) performance.'''
- 21:         if self.isEmpty():
- 22:             raise Exception('Stack is empty.')
- 23:         return self.stack.pop()
- 24:     
+ 19:     @classmethod
+ 20:     def pop(self):
+ 21:         '''Remove topmost element and return it. O(1) performance.'''
+ 22:         if self.isEmpty():
+ 23:             raise Exception('Stack is empty.')
+ 24:         return self.stack.pop()
  25:     def __repr__(self):
  26:         '''show representation.'''
  27:         return 'stack:' + str(self.stack)
--------------------------------------------------------------------------------
[0.31159 s] incompetent

TypeError: stack2:22: TypeError: Stack.isEmpty() missing 1 required positional argument: 'self'

   - [#   6] CDI stack2: 
--------------------------------------------------------------------------------
  21:         if self.isEmpty():
  22:             raise Exception('Stack is empty.')
  23:         return self.stack.pop()
  24:     
- 25:     def __repr__(self):
- 26:         '''show representation.'''
- 27:         return 'stack:' + str(self.stack)
+ 25:     @classmethod
+ 26:     def __repr__(self):
+ 27:         '''show representation.'''
+ 28:         return 'stack:' + str(self.stack)
--------------------------------------------------------------------------------
[0.26017 s] killed by RANDOM/test_stack2_RANDOM.py::test_case_12

def test_case_12():
        stack_0 = module_0.Stack()
        var_0 = stack_0.isEmpty()
        assert var_0 is True
        stack_1 = module_0.Stack()
        var_1 = stack_0.isEmpty()
        assert var_1 is True
        stack_2 = module_0.Stack()
        stack_3 = module_0.Stack()
        var_2 = stack_3.isEmpty()
        assert var_2 is True
        stack_4 = module_0.Stack()
>       var_3 = stack_4.__repr__()

RANDOM/test_stack2_RANDOM.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'stack2.Stack'>

>   ???
E   AttributeError: type object 'Stack' has no attribute 'stack'

stack2:28: AttributeError
   - [#   7] COI stack2: 
--------------------------------------------------------------------------------
  17:         self.stack.append(v)
  18:     
  19:     def pop(self):
  20:         '''Remove topmost element and return it. O(1) performance.'''
- 21:         if self.isEmpty():
+ 21:         if not (self.isEmpty()):
  22:             raise Exception('Stack is empty.')
  23:         return self.stack.pop()
  24:     
  25:     def __repr__(self):
--------------------------------------------------------------------------------
[0.31687 s] killed by RANDOM/test_stack2_RANDOM.py::test_case_62

def test_case_62():
        stack_0 = module_0.Stack()
        var_0 = stack_0.isEmpty()
        assert var_0 is True
        stack_1 = module_0.Stack()
        stack_2 = module_0.Stack()
        stack_3 = module_0.Stack()
        var_1 = stack_3.isEmpty()
        assert var_1 is True
        stack_4 = module_0.Stack()
        var_2 = stack_3.isEmpty()
        assert var_2 is True
        stack_5 = module_0.Stack()
        var_3 = stack_5.isEmpty()
        assert var_3 is True
        var_4 = stack_5.push(var_3)
        assert stack_5.stack == [True]
        object_0 = module_1.object()
        set_0 = {object_0, object_0, object_0}
        stack_6 = module_0.Stack()
        var_5 = stack_6.push(set_0)
        var_6 = stack_6.isEmpty()
        assert var_6 is False
        object_1 = module_1.object()
        set_1 = {object_1, object_1, object_1}
        stack_7 = module_0.Stack()
        var_7 = stack_7.push(set_1)
        var_8 = stack_7.push(stack_7)
        stack_8 = module_0.Stack()
        var_9 = stack_8.isEmpty()
        assert var_9 is True
        var_10 = stack_8.isEmpty()
        assert var_10 is True
        object_2 = module_1.object()
        set_2 = {object_2, object_2, object_2}
        stack_9 = module_0.Stack()
        var_11 = stack_9.push(set_2)
        var_12 = var_9.__repr__()
        assert var_12 == 'True'
        stack_10 = module_0.Stack()
        var_13 = stack_10.isEmpty()
        assert var_13 is True
        stack_11 = module_0.Stack()
        var_14 = stack_10.isEmpty()
        assert var_14 is True
        stack_12 = module_0.Stack()
        stack_13 = module_0.Stack()
        var_15 = stack_13.isEmpty()
        assert var_15 is True
        stack_14 = module_0.Stack()
        var_16 = stack_14.__repr__()
        assert var_16 == 'stack:[]'
        object_3 = module_1.object()
        set_3 = {object_3, object_3, object_3}
        stack_15 = module_0.Stack()
        var_17 = stack_15.push(set_3)
>       var_18 = stack_9.pop()

RANDOM/test_stack2_RANDOM.py:2166: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = stack:[{<object object at 0x7f2c9ffaa8c0>}]

>   ???
E   Exception: Stack is empty.

stack2:22: Exception
   - [#   8] CRP stack2: 
--------------------------------------------------------------------------------
   9:         self.stack = []
  10:     
  11:     def isEmpty(self):
  12:         '''Determines whether stack is empty. O(1) performance'''
- 13:         return len(self.stack) == 0
+ 13:         return len(self.stack) == 1
  14:     
  15:     def push(self, v):
  16:         '''Push v onto the stack. O(1) performance.'''
  17:         self.stack.append(v)
--------------------------------------------------------------------------------
[0.27102 s] killed by RANDOM/test_stack2_RANDOM.py::test_case_1

def test_case_1():
        stack_0 = module_0.Stack()
        var_0 = stack_0.isEmpty()
>       assert var_0 is True
E       AssertionError

RANDOM/test_stack2_RANDOM.py:12: AssertionError
   - [#   9] CRP stack2: 
--------------------------------------------------------------------------------
  18:     
  19:     def pop(self):
  20:         '''Remove topmost element and return it. O(1) performance.'''
  21:         if self.isEmpty():
- 22:             raise Exception('Stack is empty.')
+ 22:             raise Exception('mutpy')
  23:         return self.stack.pop()
  24:     
  25:     def __repr__(self):
  26:         '''show representation.'''
--------------------------------------------------------------------------------
[0.19977 s] survived
   - [#  10] CRP stack2: 
--------------------------------------------------------------------------------
  18:     
  19:     def pop(self):
  20:         '''Remove topmost element and return it. O(1) performance.'''
  21:         if self.isEmpty():
- 22:             raise Exception('Stack is empty.')
+ 22:             raise Exception('')
  23:         return self.stack.pop()
  24:     
  25:     def __repr__(self):
  26:         '''show representation.'''
--------------------------------------------------------------------------------
[0.19555 s] survived
   - [#  11] CRP stack2: 
--------------------------------------------------------------------------------
  23:         return self.stack.pop()
  24:     
  25:     def __repr__(self):
  26:         '''show representation.'''
- 27:         return 'stack:' + str(self.stack)
+ 27:         return 'mutpy' + str(self.stack)
--------------------------------------------------------------------------------
[0.26663 s] killed by RANDOM/test_stack2_RANDOM.py::test_case_12

def test_case_12():
        stack_0 = module_0.Stack()
        var_0 = stack_0.isEmpty()
        assert var_0 is True
        stack_1 = module_0.Stack()
        var_1 = stack_0.isEmpty()
        assert var_1 is True
        stack_2 = module_0.Stack()
        stack_3 = module_0.Stack()
        var_2 = stack_3.isEmpty()
        assert var_2 is True
        stack_4 = module_0.Stack()
        var_3 = stack_4.__repr__()
>       assert var_3 == 'stack:[]'
E       AssertionError

RANDOM/test_stack2_RANDOM.py:196: AssertionError
   - [#  12] CRP stack2: 
--------------------------------------------------------------------------------
  23:         return self.stack.pop()
  24:     
  25:     def __repr__(self):
  26:         '''show representation.'''
- 27:         return 'stack:' + str(self.stack)
+ 27:         return '' + str(self.stack)
--------------------------------------------------------------------------------
[0.26927 s] killed by RANDOM/test_stack2_RANDOM.py::test_case_12

def test_case_12():
        stack_0 = module_0.Stack()
        var_0 = stack_0.isEmpty()
        assert var_0 is True
        stack_1 = module_0.Stack()
        var_1 = stack_0.isEmpty()
        assert var_1 is True
        stack_2 = module_0.Stack()
        stack_3 = module_0.Stack()
        var_2 = stack_3.isEmpty()
        assert var_2 is True
        stack_4 = module_0.Stack()
        var_3 = stack_4.__repr__()
>       assert var_3 == 'stack:[]'
E       AssertionError

RANDOM/test_stack2_RANDOM.py:196: AssertionError
   - [#  13] ROR stack2: 
--------------------------------------------------------------------------------
   9:         self.stack = []
  10:     
  11:     def isEmpty(self):
  12:         '''Determines whether stack is empty. O(1) performance'''
- 13:         return len(self.stack) == 0
+ 13:         return len(self.stack) != 0
  14:     
  15:     def push(self, v):
  16:         '''Push v onto the stack. O(1) performance.'''
  17:         self.stack.append(v)
--------------------------------------------------------------------------------
[0.25694 s] killed by RANDOM/test_stack2_RANDOM.py::test_case_1

def test_case_1():
        stack_0 = module_0.Stack()
        var_0 = stack_0.isEmpty()
>       assert var_0 is True
E       AssertionError

RANDOM/test_stack2_RANDOM.py:12: AssertionError
   - [#  14] SDI stack2: 
--------------------------------------------------------------------------------
   3: 
   4:     Author: George Heineman
   5: '''
   6: class Stack:
-  7:     def __init__(self):
-  8:         '''Demonstrate using list as storage for a Stack.'''
-  9:         self.stack = []
- 10:     
+  7:     @staticmethod
+  8:     def __init__(self):
+  9:         '''Demonstrate using list as storage for a Stack.'''
+ 10:         self.stack = []
  11:     def isEmpty(self):
  12:         '''Determines whether stack is empty. O(1) performance'''
  13:         return len(self.stack) == 0
  14:     
--------------------------------------------------------------------------------
[0.25537 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/stack2/RANDOM/test_stack2_RANDOM.py:7: TypeError: Stack.__init__() missing 1 required positional argument: 'self'

   - [#  15] SDI stack2: 
--------------------------------------------------------------------------------
   7:     def __init__(self):
   8:         '''Demonstrate using list as storage for a Stack.'''
   9:         self.stack = []
  10:     
- 11:     def isEmpty(self):
- 12:         '''Determines whether stack is empty. O(1) performance'''
- 13:         return len(self.stack) == 0
- 14:     
+ 11:     @staticmethod
+ 12:     def isEmpty(self):
+ 13:         '''Determines whether stack is empty. O(1) performance'''
+ 14:         return len(self.stack) == 0
  15:     def push(self, v):
  16:         '''Push v onto the stack. O(1) performance.'''
  17:         self.stack.append(v)
  18:     
--------------------------------------------------------------------------------
[0.25033 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/stack2/RANDOM/test_stack2_RANDOM.py:11: TypeError: Stack.isEmpty() missing 1 required positional argument: 'self'

   - [#  16] SDI stack2: 
--------------------------------------------------------------------------------
  11:     def isEmpty(self):
  12:         '''Determines whether stack is empty. O(1) performance'''
  13:         return len(self.stack) == 0
  14:     
- 15:     def push(self, v):
- 16:         '''Push v onto the stack. O(1) performance.'''
- 17:         self.stack.append(v)
- 18:     
+ 15:     @staticmethod
+ 16:     def push(self, v):
+ 17:         '''Push v onto the stack. O(1) performance.'''
+ 18:         self.stack.append(v)
  19:     def pop(self):
  20:         '''Remove topmost element and return it. O(1) performance.'''
  21:         if self.isEmpty():
  22:             raise Exception('Stack is empty.')
--------------------------------------------------------------------------------
[0.25012 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/stack2/RANDOM/test_stack2_RANDOM.py:33: TypeError: Stack.push() missing 1 required positional argument: 'v'

   - [#  17] SDI stack2: 
--------------------------------------------------------------------------------
  15:     def push(self, v):
  16:         '''Push v onto the stack. O(1) performance.'''
  17:         self.stack.append(v)
  18:     
- 19:     def pop(self):
- 20:         '''Remove topmost element and return it. O(1) performance.'''
- 21:         if self.isEmpty():
- 22:             raise Exception('Stack is empty.')
- 23:         return self.stack.pop()
- 24:     
+ 19:     @staticmethod
+ 20:     def pop(self):
+ 21:         '''Remove topmost element and return it. O(1) performance.'''
+ 22:         if self.isEmpty():
+ 23:             raise Exception('Stack is empty.')
+ 24:         return self.stack.pop()
  25:     def __repr__(self):
  26:         '''show representation.'''
  27:         return 'stack:' + str(self.stack)
--------------------------------------------------------------------------------
[0.31350 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/stack2/RANDOM/test_stack2_RANDOM.py:2166: TypeError: Stack.pop() missing 1 required positional argument: 'self'

   - [#  18] SDI stack2: 
--------------------------------------------------------------------------------
  21:         if self.isEmpty():
  22:             raise Exception('Stack is empty.')
  23:         return self.stack.pop()
  24:     
- 25:     def __repr__(self):
- 26:         '''show representation.'''
- 27:         return 'stack:' + str(self.stack)
+ 25:     @staticmethod
+ 26:     def __repr__(self):
+ 27:         '''show representation.'''
+ 28:         return 'stack:' + str(self.stack)
--------------------------------------------------------------------------------
[0.27707 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/stack2/RANDOM/test_stack2_RANDOM.py:195: TypeError: Stack.__repr__() missing 1 required positional argument: 'self'

   - [#  19] SDL stack2: 
--------------------------------------------------------------------------------
   5: '''
   6: class Stack:
   7:     def __init__(self):
   8:         '''Demonstrate using list as storage for a Stack.'''
-  9:         self.stack = []
+  9:         pass
  10:     
  11:     def isEmpty(self):
  12:         '''Determines whether stack is empty. O(1) performance'''
  13:         return len(self.stack) == 0
--------------------------------------------------------------------------------
[0.25380 s] killed by RANDOM/test_stack2_RANDOM.py::test_case_1

def test_case_1():
        stack_0 = module_0.Stack()
>       var_0 = stack_0.isEmpty()

RANDOM/test_stack2_RANDOM.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'Stack' object has no attribute 'stack'") raised in repr()] Stack object at 0x7f2c9e4ef580>

>   ???
E   AttributeError: 'Stack' object has no attribute 'stack'

stack2:13: AttributeError
   - [#  20] SDL stack2: 
--------------------------------------------------------------------------------
   9:         self.stack = []
  10:     
  11:     def isEmpty(self):
  12:         '''Determines whether stack is empty. O(1) performance'''
- 13:         return len(self.stack) == 0
+ 13:         pass
  14:     
  15:     def push(self, v):
  16:         '''Push v onto the stack. O(1) performance.'''
  17:         self.stack.append(v)
--------------------------------------------------------------------------------
[0.25918 s] killed by RANDOM/test_stack2_RANDOM.py::test_case_1

def test_case_1():
        stack_0 = module_0.Stack()
        var_0 = stack_0.isEmpty()
>       assert var_0 is True
E       AssertionError

RANDOM/test_stack2_RANDOM.py:12: AssertionError
   - [#  21] SDL stack2: 
--------------------------------------------------------------------------------
  13:         return len(self.stack) == 0
  14:     
  15:     def push(self, v):
  16:         '''Push v onto the stack. O(1) performance.'''
- 17:         self.stack.append(v)
+ 17:         pass
  18:     
  19:     def pop(self):
  20:         '''Remove topmost element and return it. O(1) performance.'''
  21:         if self.isEmpty():
--------------------------------------------------------------------------------
[0.25916 s] killed by RANDOM/test_stack2_RANDOM.py::test_case_3

def test_case_3():
        stack_0 = module_0.Stack()
        stack_1 = module_0.Stack()
        var_0 = stack_1.isEmpty()
        assert var_0 is True
        stack_2 = module_0.Stack()
        var_1 = stack_1.isEmpty()
        assert var_1 is True
        stack_3 = module_0.Stack()
        var_2 = stack_3.isEmpty()
        assert var_2 is True
        var_3 = stack_3.push(var_2)
>       assert stack_3.stack == [True]
E       AssertionError

RANDOM/test_stack2_RANDOM.py:34: AssertionError
   - [#  22] SDL stack2: 
--------------------------------------------------------------------------------
  19:     def pop(self):
  20:         '''Remove topmost element and return it. O(1) performance.'''
  21:         if self.isEmpty():
  22:             raise Exception('Stack is empty.')
- 23:         return self.stack.pop()
+ 23:         pass
  24:     
  25:     def __repr__(self):
  26:         '''show representation.'''
  27:         return 'stack:' + str(self.stack)
--------------------------------------------------------------------------------
[0.31777 s] killed by RANDOM/test_stack2_RANDOM.py::test_case_62

def test_case_62():
        stack_0 = module_0.Stack()
        var_0 = stack_0.isEmpty()
        assert var_0 is True
        stack_1 = module_0.Stack()
        stack_2 = module_0.Stack()
        stack_3 = module_0.Stack()
        var_1 = stack_3.isEmpty()
        assert var_1 is True
        stack_4 = module_0.Stack()
        var_2 = stack_3.isEmpty()
        assert var_2 is True
        stack_5 = module_0.Stack()
        var_3 = stack_5.isEmpty()
        assert var_3 is True
        var_4 = stack_5.push(var_3)
        assert stack_5.stack == [True]
        object_0 = module_1.object()
        set_0 = {object_0, object_0, object_0}
        stack_6 = module_0.Stack()
        var_5 = stack_6.push(set_0)
        var_6 = stack_6.isEmpty()
        assert var_6 is False
        object_1 = module_1.object()
        set_1 = {object_1, object_1, object_1}
        stack_7 = module_0.Stack()
        var_7 = stack_7.push(set_1)
        var_8 = stack_7.push(stack_7)
        stack_8 = module_0.Stack()
        var_9 = stack_8.isEmpty()
        assert var_9 is True
        var_10 = stack_8.isEmpty()
        assert var_10 is True
        object_2 = module_1.object()
        set_2 = {object_2, object_2, object_2}
        stack_9 = module_0.Stack()
        var_11 = stack_9.push(set_2)
        var_12 = var_9.__repr__()
        assert var_12 == 'True'
        stack_10 = module_0.Stack()
        var_13 = stack_10.isEmpty()
        assert var_13 is True
        stack_11 = module_0.Stack()
        var_14 = stack_10.isEmpty()
        assert var_14 is True
        stack_12 = module_0.Stack()
        stack_13 = module_0.Stack()
        var_15 = stack_13.isEmpty()
        assert var_15 is True
        stack_14 = module_0.Stack()
        var_16 = stack_14.__repr__()
        assert var_16 == 'stack:[]'
        object_3 = module_1.object()
        set_3 = {object_3, object_3, object_3}
        stack_15 = module_0.Stack()
        var_17 = stack_15.push(set_3)
        var_18 = stack_9.pop()
>       assert stack_9.stack == []
E       AssertionError

RANDOM/test_stack2_RANDOM.py:2167: AssertionError
   - [#  23] SDL stack2: 
--------------------------------------------------------------------------------
  23:         return self.stack.pop()
  24:     
  25:     def __repr__(self):
  26:         '''show representation.'''
- 27:         return 'stack:' + str(self.stack)
+ 27:         pass
--------------------------------------------------------------------------------
[0.26959 s] killed by RANDOM/test_stack2_RANDOM.py::test_case_12

def test_case_12():
        stack_0 = module_0.Stack()
        var_0 = stack_0.isEmpty()
        assert var_0 is True
        stack_1 = module_0.Stack()
        var_1 = stack_0.isEmpty()
        assert var_1 is True
        stack_2 = module_0.Stack()
        stack_3 = module_0.Stack()
        var_2 = stack_3.isEmpty()
        assert var_2 is True
        stack_4 = module_0.Stack()
        var_3 = stack_4.__repr__()
>       assert var_3 == 'stack:[]'
E       AssertionError

RANDOM/test_stack2_RANDOM.py:196: AssertionError
   - [#  24] SVD stack2: 
--------------------------------------------------------------------------------
   5: '''
   6: class Stack:
   7:     def __init__(self):
   8:         '''Demonstrate using list as storage for a Stack.'''
-  9:         self.stack = []
+  9:         stack = []
  10:     
  11:     def isEmpty(self):
  12:         '''Determines whether stack is empty. O(1) performance'''
  13:         return len(self.stack) == 0
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [#  25] SVD stack2: 
--------------------------------------------------------------------------------
   9:         self.stack = []
  10:     
  11:     def isEmpty(self):
  12:         '''Determines whether stack is empty. O(1) performance'''
- 13:         return len(self.stack) == 0
+ 13:         return len(stack) == 0
  14:     
  15:     def push(self, v):
  16:         '''Push v onto the stack. O(1) performance.'''
  17:         self.stack.append(v)
--------------------------------------------------------------------------------
[0.39947 s] killed by RANDOM/test_stack2_RANDOM.py::test_case_1

def test_case_1():
        stack_0 = module_0.Stack()
>       var_0 = stack_0.isEmpty()

RANDOM/test_stack2_RANDOM.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = stack:[]

>   ???
E   NameError: name 'stack' is not defined

stack2:13: NameError
   - [#  26] SVD stack2: 
--------------------------------------------------------------------------------
  13:         return len(self.stack) == 0
  14:     
  15:     def push(self, v):
  16:         '''Push v onto the stack. O(1) performance.'''
- 17:         self.stack.append(v)
+ 17:         stack.append(v)
  18:     
  19:     def pop(self):
  20:         '''Remove topmost element and return it. O(1) performance.'''
  21:         if self.isEmpty():
--------------------------------------------------------------------------------
[0.25172 s] killed by RANDOM/test_stack2_RANDOM.py::test_case_3

def test_case_3():
        stack_0 = module_0.Stack()
        stack_1 = module_0.Stack()
        var_0 = stack_1.isEmpty()
        assert var_0 is True
        stack_2 = module_0.Stack()
        var_1 = stack_1.isEmpty()
        assert var_1 is True
        stack_3 = module_0.Stack()
        var_2 = stack_3.isEmpty()
        assert var_2 is True
>       var_3 = stack_3.push(var_2)

RANDOM/test_stack2_RANDOM.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = stack:[], v = True

>   ???
E   NameError: name 'stack' is not defined

stack2:17: NameError
   - [#  27] SVD stack2: 
--------------------------------------------------------------------------------
  17:         self.stack.append(v)
  18:     
  19:     def pop(self):
  20:         '''Remove topmost element and return it. O(1) performance.'''
- 21:         if self.isEmpty():
+ 21:         if isEmpty():
  22:             raise Exception('Stack is empty.')
  23:         return self.stack.pop()
  24:     
  25:     def __repr__(self):
--------------------------------------------------------------------------------
[0.30936 s] killed by RANDOM/test_stack2_RANDOM.py::test_case_62

def test_case_62():
        stack_0 = module_0.Stack()
        var_0 = stack_0.isEmpty()
        assert var_0 is True
        stack_1 = module_0.Stack()
        stack_2 = module_0.Stack()
        stack_3 = module_0.Stack()
        var_1 = stack_3.isEmpty()
        assert var_1 is True
        stack_4 = module_0.Stack()
        var_2 = stack_3.isEmpty()
        assert var_2 is True
        stack_5 = module_0.Stack()
        var_3 = stack_5.isEmpty()
        assert var_3 is True
        var_4 = stack_5.push(var_3)
        assert stack_5.stack == [True]
        object_0 = module_1.object()
        set_0 = {object_0, object_0, object_0}
        stack_6 = module_0.Stack()
        var_5 = stack_6.push(set_0)
        var_6 = stack_6.isEmpty()
        assert var_6 is False
        object_1 = module_1.object()
        set_1 = {object_1, object_1, object_1}
        stack_7 = module_0.Stack()
        var_7 = stack_7.push(set_1)
        var_8 = stack_7.push(stack_7)
        stack_8 = module_0.Stack()
        var_9 = stack_8.isEmpty()
        assert var_9 is True
        var_10 = stack_8.isEmpty()
        assert var_10 is True
        object_2 = module_1.object()
        set_2 = {object_2, object_2, object_2}
        stack_9 = module_0.Stack()
        var_11 = stack_9.push(set_2)
        var_12 = var_9.__repr__()
        assert var_12 == 'True'
        stack_10 = module_0.Stack()
        var_13 = stack_10.isEmpty()
        assert var_13 is True
        stack_11 = module_0.Stack()
        var_14 = stack_10.isEmpty()
        assert var_14 is True
        stack_12 = module_0.Stack()
        stack_13 = module_0.Stack()
        var_15 = stack_13.isEmpty()
        assert var_15 is True
        stack_14 = module_0.Stack()
        var_16 = stack_14.__repr__()
        assert var_16 == 'stack:[]'
        object_3 = module_1.object()
        set_3 = {object_3, object_3, object_3}
        stack_15 = module_0.Stack()
        var_17 = stack_15.push(set_3)
>       var_18 = stack_9.pop()

RANDOM/test_stack2_RANDOM.py:2166: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = stack:[{<object object at 0x7f2c9ffaa940>}]

>   ???
E   NameError: name 'isEmpty' is not defined

stack2:21: NameError
   - [#  28] SVD stack2: 
--------------------------------------------------------------------------------
  19:     def pop(self):
  20:         '''Remove topmost element and return it. O(1) performance.'''
  21:         if self.isEmpty():
  22:             raise Exception('Stack is empty.')
- 23:         return self.stack.pop()
+ 23:         return stack.pop()
  24:     
  25:     def __repr__(self):
  26:         '''show representation.'''
  27:         return 'stack:' + str(self.stack)
--------------------------------------------------------------------------------
[0.30896 s] killed by RANDOM/test_stack2_RANDOM.py::test_case_62

def test_case_62():
        stack_0 = module_0.Stack()
        var_0 = stack_0.isEmpty()
        assert var_0 is True
        stack_1 = module_0.Stack()
        stack_2 = module_0.Stack()
        stack_3 = module_0.Stack()
        var_1 = stack_3.isEmpty()
        assert var_1 is True
        stack_4 = module_0.Stack()
        var_2 = stack_3.isEmpty()
        assert var_2 is True
        stack_5 = module_0.Stack()
        var_3 = stack_5.isEmpty()
        assert var_3 is True
        var_4 = stack_5.push(var_3)
        assert stack_5.stack == [True]
        object_0 = module_1.object()
        set_0 = {object_0, object_0, object_0}
        stack_6 = module_0.Stack()
        var_5 = stack_6.push(set_0)
        var_6 = stack_6.isEmpty()
        assert var_6 is False
        object_1 = module_1.object()
        set_1 = {object_1, object_1, object_1}
        stack_7 = module_0.Stack()
        var_7 = stack_7.push(set_1)
        var_8 = stack_7.push(stack_7)
        stack_8 = module_0.Stack()
        var_9 = stack_8.isEmpty()
        assert var_9 is True
        var_10 = stack_8.isEmpty()
        assert var_10 is True
        object_2 = module_1.object()
        set_2 = {object_2, object_2, object_2}
        stack_9 = module_0.Stack()
        var_11 = stack_9.push(set_2)
        var_12 = var_9.__repr__()
        assert var_12 == 'True'
        stack_10 = module_0.Stack()
        var_13 = stack_10.isEmpty()
        assert var_13 is True
        stack_11 = module_0.Stack()
        var_14 = stack_10.isEmpty()
        assert var_14 is True
        stack_12 = module_0.Stack()
        stack_13 = module_0.Stack()
        var_15 = stack_13.isEmpty()
        assert var_15 is True
        stack_14 = module_0.Stack()
        var_16 = stack_14.__repr__()
        assert var_16 == 'stack:[]'
        object_3 = module_1.object()
        set_3 = {object_3, object_3, object_3}
        stack_15 = module_0.Stack()
        var_17 = stack_15.push(set_3)
>       var_18 = stack_9.pop()

RANDOM/test_stack2_RANDOM.py:2166: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = stack:[{<object object at 0x7f2c9ffaa940>}]

>   ???
E   NameError: name 'stack' is not defined

stack2:23: NameError
   - [#  29] SVD stack2: 
--------------------------------------------------------------------------------
  23:         return self.stack.pop()
  24:     
  25:     def __repr__(self):
  26:         '''show representation.'''
- 27:         return 'stack:' + str(self.stack)
+ 27:         return 'stack:' + str(stack)
--------------------------------------------------------------------------------
[0.26237 s] killed by RANDOM/test_stack2_RANDOM.py::test_case_12

def test_case_12():
        stack_0 = module_0.Stack()
        var_0 = stack_0.isEmpty()
        assert var_0 is True
        stack_1 = module_0.Stack()
        var_1 = stack_0.isEmpty()
        assert var_1 is True
        stack_2 = module_0.Stack()
        stack_3 = module_0.Stack()
        var_2 = stack_3.isEmpty()
        assert var_2 is True
        stack_4 = module_0.Stack()
>       var_3 = stack_4.__repr__()

RANDOM/test_stack2_RANDOM.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[NameError("name 'stack' is not defined") raised in repr()] Stack object at 0x7f2c9e57eda0>

>   ???
E   NameError: name 'stack' is not defined

stack2:27: NameError
[*] Mutation score [8.64764 s]: 90.5%
   - all: 29
   - killed: 19 (65.5%)
   - survived: 2 (6.9%)
   - incompetent: 8 (27.6%)
   - timeout: 0 (0.0%)
