[*] Start mutation process:
   - targets: linkedList5.py
   - tests: ./RANDOM
[*] 2206 tests passed:
   - test_linkedList5_RANDOM [2.69444 s]
[*] Start mutants generation and execution:
   - [#   1] ASR linkedList5: 
--------------------------------------------------------------------------------
  16:     def __len__(self):
  17:         curr = self.head
  18:         counter = 0
  19:         while curr is not None:
- 20:             counter += 1
+ 20:             counter -= 1
  21:             curr = curr.next
  22:         return counter
  23:     
  24:     def insert_to_front(self, data):
--------------------------------------------------------------------------------
[7.16664 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_1

def test_case_1():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
>       assert len(linked_list_0) == 1
E       ValueError: __len__() should return >= 0

RANDOM/test_linkedList5_RANDOM.py:16: ValueError
   - [#   2] CDI linkedList5: 
--------------------------------------------------------------------------------
   1: class Node(object):
   2:     
-  3:     def __init__(self, data, next=None):
-  4:         self.next = next
-  5:         self.data = data
-  6:     
+  3:     @classmethod
+  4:     def __init__(self, data, next=None):
+  5:         self.next = next
+  6:         self.data = data
   7:     def __str__(self):
   8:         return self.data
   9: 
  10: 
--------------------------------------------------------------------------------
[7.25998 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_2

def test_case_2():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
>       assert var_1.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
E       AssertionError

RANDOM/test_linkedList5_RANDOM.py:34: AssertionError
   - [#   3] CDI linkedList5: 
--------------------------------------------------------------------------------
   3:     def __init__(self, data, next=None):
   4:         self.next = next
   5:         self.data = data
   6:     
-  7:     def __str__(self):
-  8:         return self.data
-  9: 
+  7:     @classmethod
+  8:     def __str__(self):
+  9:         return self.data
  10: 
  11: class LinkedList(object):
  12:     
  13:     def __init__(self, head=None):
--------------------------------------------------------------------------------
[7.16398 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_2

def test_case_2():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
>       var_1 = var_0.__str__()

RANDOM/test_linkedList5_RANDOM.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linkedList5.Node'>

>   ???
E   AttributeError: type object 'Node' has no attribute 'data'

linkedList5:9: AttributeError
   - [#   4] CDI linkedList5: 
--------------------------------------------------------------------------------
   9: 
  10: 
  11: class LinkedList(object):
  12:     
- 13:     def __init__(self, head=None):
- 14:         self.head = head
- 15:     
+ 13:     @classmethod
+ 14:     def __init__(self, head=None):
+ 15:         self.head = head
  16:     def __len__(self):
  17:         curr = self.head
  18:         counter = 0
  19:         while curr is not None:
--------------------------------------------------------------------------------
[7.42601 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_334

def test_case_334():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.__len__()
        assert var_0 == 0
        complex_0 = -1571.872432 - 1247.364j
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_1 = linked_list_1.delete(complex_0)
        var_2 = linked_list_1.get_all_data()
        var_3 = linked_list_0.get_all_data()
        none_type_0 = None
        linked_list_2 = module_0.LinkedList()
        assert len(linked_list_2) == 0
        var_4 = linked_list_2.delete(none_type_0)
        linked_list_3 = module_0.LinkedList()
        assert len(linked_list_3) == 0
        linked_list_4 = module_0.LinkedList()
        assert len(linked_list_4) == 0
        var_5 = linked_list_4.__len__()
        assert var_5 == 0
        linked_list_5 = module_0.LinkedList()
        assert len(linked_list_5) == 0
        bool_0 = True
        node_1 = module_0.Node(bool_0)
        var_6 = node_1.__str__()
        linked_list_6 = module_0.LinkedList()
        assert len(linked_list_6) == 0
        var_7 = linked_list_6.__len__()
        assert var_7 == 0
        complex_1 = -1571.872432 - 1247.364j
        linked_list_7 = module_0.LinkedList()
        assert len(linked_list_7) == 0
        var_8 = linked_list_7.delete(complex_1)
        linked_list_8 = module_0.LinkedList(complex_1)
>       var_9 = linked_list_6.__len__()

RANDOM/test_linkedList5_RANDOM.py:20830: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f27250e6da0>

>   ???
E   AttributeError: 'complex' object has no attribute 'next'

linkedList5:21: AttributeError
   - [#   5] CDI linkedList5: 
--------------------------------------------------------------------------------
  12:     
  13:     def __init__(self, head=None):
  14:         self.head = head
  15:     
- 16:     def __len__(self):
- 17:         curr = self.head
- 18:         counter = 0
- 19:         while curr is not None:
- 20:             counter += 1
- 21:             curr = curr.next
- 22:         return counter
- 23:     
+ 16:     @classmethod
+ 17:     def __len__(self):
+ 18:         curr = self.head
+ 19:         counter = 0
+ 20:         while curr is not None:
+ 21:             counter += 1
+ 22:             curr = curr.next
+ 23:         return counter
  24:     def insert_to_front(self, data):
  25:         if data is None:
  26:             return None
  27:         node = Node(data, self.head)
--------------------------------------------------------------------------------
[7.07156 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_1

def test_case_1():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
>       assert len(linked_list_0) == 0

RANDOM/test_linkedList5_RANDOM.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linkedList5.LinkedList'>

>   ???
E   AttributeError: type object 'LinkedList' has no attribute 'head'

linkedList5:18: AttributeError
   - [#   6] CDI linkedList5: 
--------------------------------------------------------------------------------
  20:             counter += 1
  21:             curr = curr.next
  22:         return counter
  23:     
- 24:     def insert_to_front(self, data):
- 25:         if data is None:
- 26:             return None
- 27:         node = Node(data, self.head)
- 28:         self.head = node
- 29:         return node
- 30:     
+ 24:     @classmethod
+ 25:     def insert_to_front(self, data):
+ 26:         if data is None:
+ 27:             return None
+ 28:         node = Node(data, self.head)
+ 29:         self.head = node
+ 30:         return node
  31:     def append(self, data):
  32:         if data is None:
  33:             return None
  34:         node = Node(data)
--------------------------------------------------------------------------------
[7.47661 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_10

def test_case_10():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert var_1.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        bytes_1 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_1 = module_0.Node(bytes_1)
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_2 = linked_list_1.append(node_1)
        assert len(linked_list_1) == 1
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList5.Node'
        assert var_2.next is None
        assert f'{type(var_2.data).__module__}.{type(var_2.data).__qualname__}' == 'linkedList5.Node'
        var_3 = var_2.__str__()
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList5.Node'
        assert var_3.next is None
        assert var_3.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_2 = module_0.LinkedList()
        assert len(linked_list_2) == 0
        var_4 = linked_list_2.__len__()
        assert var_4 == 0
        var_5 = linked_list_1.delete(bytes_1)
        bytes_2 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_2 = module_0.Node(bytes_2)
        linked_list_3 = module_0.LinkedList()
        assert len(linked_list_3) == 0
        var_6 = linked_list_3.append(node_2)
        assert len(linked_list_3) == 1
        assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'linkedList5.Node'
        assert var_6.next is None
        assert f'{type(var_6.data).__module__}.{type(var_6.data).__qualname__}' == 'linkedList5.Node'
        var_7 = var_6.__str__()
        assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'linkedList5.Node'
        assert var_7.next is None
        assert var_7.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        var_8 = linked_list_3.get_all_data()
>       var_9 = linked_list_2.insert_to_front(linked_list_2)

RANDOM/test_linkedList5_RANDOM.py:265: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linkedList5.LinkedList'>
data = <linkedList5.LinkedList object at 0x7f2724f98e20>

>   ???
E   AttributeError: type object 'LinkedList' has no attribute 'head'

linkedList5:28: AttributeError
   - [#   7] CDI linkedList5: 
--------------------------------------------------------------------------------
  27:         node = Node(data, self.head)
  28:         self.head = node
  29:         return node
  30:     
- 31:     def append(self, data):
- 32:         if data is None:
- 33:             return None
- 34:         node = Node(data)
- 35:         if self.head is None:
- 36:             self.head = node
- 37:             return node
- 38:         curr_node = self.head
- 39:         while curr_node.next is not None:
- 40:             curr_node = curr_node.next
- 41:         curr_node.next = node
- 42:         return node
- 43:     
+ 31:     @classmethod
+ 32:     def append(self, data):
+ 33:         if data is None:
+ 34:             return None
+ 35:         node = Node(data)
+ 36:         if self.head is None:
+ 37:             self.head = node
+ 38:             return node
+ 39:         curr_node = self.head
+ 40:         while curr_node.next is not None:
+ 41:             curr_node = curr_node.next
+ 42:         curr_node.next = node
+ 43:         return node
  44:     def find(self, data):
  45:         if data is None:
  46:             return None
  47:         curr_node = self.head
--------------------------------------------------------------------------------
[7.32795 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_1

def test_case_1():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
>       var_0 = linked_list_0.append(node_0)

RANDOM/test_linkedList5_RANDOM.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linkedList5.LinkedList'>
data = <linkedList5.Node object at 0x7f272393b760>

>   ???
E   AttributeError: type object 'LinkedList' has no attribute 'head'

linkedList5:36: AttributeError
   - [#   8] CDI linkedList5: 
--------------------------------------------------------------------------------
  40:             curr_node = curr_node.next
  41:         curr_node.next = node
  42:         return node
  43:     
- 44:     def find(self, data):
- 45:         if data is None:
- 46:             return None
- 47:         curr_node = self.head
- 48:         while curr_node is not None:
- 49:             if curr_node.data == data:
- 50:                 return curr_node
- 51:             curr_node = curr_node.next
- 52:         return None
- 53:     
+ 44:     @classmethod
+ 45:     def find(self, data):
+ 46:         if data is None:
+ 47:             return None
+ 48:         curr_node = self.head
+ 49:         while curr_node is not None:
+ 50:             if curr_node.data == data:
+ 51:                 return curr_node
+ 52:             curr_node = curr_node.next
+ 53:         return None
  54:     def delete(self, data):
  55:         if data is None:
  56:             return
  57:         if self.head is None:
--------------------------------------------------------------------------------
[7.48971 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_86

def test_case_86():
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.__len__()
        assert var_0 == 0
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_1 = linked_list_1.append(node_0)
        assert len(linked_list_1) == 1
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert f'{type(var_1.data).__module__}.{type(var_1.data).__qualname__}' == 'linkedList5.Node'
        var_2 = var_1.__str__()
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList5.Node'
        assert var_2.next is None
        assert var_2.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        str_0 = 'JLcd4+\n\\'
        var_3 = linked_list_0.append(str_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList5.Node'
        assert var_3.next is None
        assert var_3.data == 'JLcd4+\n\\'
        bytes_1 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_1 = module_0.Node(bytes_1)
        linked_list_2 = module_0.LinkedList()
        assert len(linked_list_2) == 0
        var_4 = linked_list_2.append(node_1)
        assert len(linked_list_2) == 1
        assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'linkedList5.Node'
        assert var_4.next is None
        assert f'{type(var_4.data).__module__}.{type(var_4.data).__qualname__}' == 'linkedList5.Node'
        var_5 = var_4.__str__()
        assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'linkedList5.Node'
        assert var_5.next is None
        assert var_5.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_3 = module_0.LinkedList()
        assert len(linked_list_3) == 0
        var_6 = linked_list_3.__len__()
        assert var_6 == 0
        bytes_2 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_2 = module_0.Node(bytes_2)
        linked_list_4 = module_0.LinkedList()
        assert len(linked_list_4) == 0
        var_7 = linked_list_4.append(node_2)
        assert len(linked_list_4) == 1
        assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'linkedList5.Node'
        assert var_7.next is None
        assert f'{type(var_7.data).__module__}.{type(var_7.data).__qualname__}' == 'linkedList5.Node'
        var_8 = var_7.__str__()
        assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'linkedList5.Node'
        assert var_8.next is None
        assert var_8.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        bytes_3 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_3 = module_0.Node(bytes_3)
        bytes_4 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_4 = module_0.Node(bytes_4)
        linked_list_5 = module_0.LinkedList()
        assert len(linked_list_5) == 0
        var_9 = linked_list_5.append(node_4)
        assert len(linked_list_5) == 1
        assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'linkedList5.Node'
        assert var_9.next is None
        assert f'{type(var_9.data).__module__}.{type(var_9.data).__qualname__}' == 'linkedList5.Node'
        var_10 = node_3.__str__()
        var_11 = var_10.find(bytes_3)
        linked_list_6 = module_0.LinkedList()
        assert len(linked_list_6) == 0
        var_12 = linked_list_6.__len__()
        assert var_12 == 0
        complex_0 = -1571.872432 - 1247.364j
        linked_list_7 = module_0.LinkedList()
        assert len(linked_list_7) == 0
        var_13 = linked_list_7.delete(complex_0)
        bytes_5 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_5 = module_0.Node(bytes_5)
        bytes_6 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_6 = module_0.Node(bytes_6)
        linked_list_8 = module_0.LinkedList()
        assert len(linked_list_8) == 0
        var_14 = linked_list_8.append(node_6)
        assert len(linked_list_8) == 1
        assert f'{type(var_14).__module__}.{type(var_14).__qualname__}' == 'linkedList5.Node'
        assert var_14.next is None
        assert f'{type(var_14.data).__module__}.{type(var_14.data).__qualname__}' == 'linkedList5.Node'
        var_15 = node_5.__str__()
        bytes_7 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_7 = module_0.Node(bytes_7)
        bytes_8 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_8 = module_0.Node(bytes_8)
        linked_list_9 = module_0.LinkedList()
        assert len(linked_list_9) == 0
        var_16 = linked_list_9.append(node_8)
        assert len(linked_list_9) == 1
        assert f'{type(var_16).__module__}.{type(var_16).__qualname__}' == 'linkedList5.Node'
        assert var_16.next is None
        assert f'{type(var_16.data).__module__}.{type(var_16.data).__qualname__}' == 'linkedList5.Node'
        var_17 = var_16.__str__()
        assert f'{type(var_17).__module__}.{type(var_17).__qualname__}' == 'linkedList5.Node'
        assert var_17.next is None
        assert var_17.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_10 = module_0.LinkedList()
        assert len(linked_list_10) == 0
        bytes_9 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_9 = module_0.Node(bytes_9)
        bytes_10 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_10 = module_0.Node(bytes_10)
        linked_list_11 = module_0.LinkedList()
        assert len(linked_list_11) == 0
        var_18 = linked_list_11.append(node_10)
        assert len(linked_list_11) == 1
        assert f'{type(var_18).__module__}.{type(var_18).__qualname__}' == 'linkedList5.Node'
        assert var_18.next is None
        assert f'{type(var_18.data).__module__}.{type(var_18.data).__qualname__}' == 'linkedList5.Node'
        var_19 = var_18.__str__()
        assert f'{type(var_19).__module__}.{type(var_19).__qualname__}' == 'linkedList5.Node'
        assert var_19.next is None
        assert var_19.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
>       var_20 = linked_list_10.find(linked_list_11)

RANDOM/test_linkedList5_RANDOM.py:4829: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linkedList5.LinkedList'>
data = <linkedList5.LinkedList object at 0x7f2724f9b760>

>   ???
E   AttributeError: type object 'LinkedList' has no attribute 'head'

linkedList5:48: AttributeError
   - [#   9] CDI linkedList5: 
--------------------------------------------------------------------------------
  50:                 return curr_node
  51:             curr_node = curr_node.next
  52:         return None
  53:     
- 54:     def delete(self, data):
- 55:         if data is None:
- 56:             return
- 57:         if self.head is None:
- 58:             return
- 59:         if self.head.data == data:
- 60:             self.head = self.head.next
- 61:             return
- 62:         prev_node = self.head
- 63:         curr_node = self.head.next
- 64:         while curr_node is not None:
- 65:             if curr_node.data == data:
- 66:                 prev_node.next = curr_node.next
- 67:                 return
- 68:             prev_node = curr_node
- 69:             curr_node = curr_node.next
- 70:     
+ 54:     @classmethod
+ 55:     def delete(self, data):
+ 56:         if data is None:
+ 57:             return
+ 58:         if self.head is None:
+ 59:             return
+ 60:         if self.head.data == data:
+ 61:             self.head = self.head.next
+ 62:             return
+ 63:         prev_node = self.head
+ 64:         curr_node = self.head.next
+ 65:         while curr_node is not None:
+ 66:             if curr_node.data == data:
+ 67:                 prev_node.next = curr_node.next
+ 68:                 return
+ 69:             prev_node = curr_node
+ 70:             curr_node = curr_node.next
  71:     def delete_alt(self, data):
  72:         if data is None:
  73:             return
  74:         if self.head is None:
--------------------------------------------------------------------------------
[7.30439 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_7

def test_case_7():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert var_1.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_2 = linked_list_1.__len__()
        assert var_2 == 0
>       var_3 = linked_list_0.delete(bytes_0)

RANDOM/test_linkedList5_RANDOM.py:173: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linkedList5.LinkedList'>
data = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'

>   ???
E   AttributeError: type object 'LinkedList' has no attribute 'head'

linkedList5:58: AttributeError
   - [#  10] CDI linkedList5: 
--------------------------------------------------------------------------------
  67:                 return
  68:             prev_node = curr_node
  69:             curr_node = curr_node.next
  70:     
- 71:     def delete_alt(self, data):
- 72:         if data is None:
- 73:             return
- 74:         if self.head is None:
- 75:             return
- 76:         curr_node = self.head
- 77:         if curr_node.data == data:
- 78:             curr_node = curr_node.next
- 79:             return
- 80:         while curr_node.next is not None:
- 81:             if curr_node.next.data == data:
- 82:                 curr_node.next = curr_node.next.next
- 83:                 return
- 84:             curr_node = curr_node.next
- 85:     
+ 71:     @classmethod
+ 72:     def delete_alt(self, data):
+ 73:         if data is None:
+ 74:             return
+ 75:         if self.head is None:
+ 76:             return
+ 77:         curr_node = self.head
+ 78:         if curr_node.data == data:
+ 79:             curr_node = curr_node.next
+ 80:             return
+ 81:         while curr_node.next is not None:
+ 82:             if curr_node.next.data == data:
+ 83:                 curr_node.next = curr_node.next.next
+ 84:                 return
+ 85:             curr_node = curr_node.next
  86:     def print_list(self):
  87:         curr_node = self.head
  88:         while curr_node is not None:
  89:             print(curr_node.data)
--------------------------------------------------------------------------------
[7.25483 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_17

def test_case_17():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert var_1.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_2 = linked_list_1.__len__()
        assert var_2 == 0
        bytes_1 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_1 = module_0.Node(bytes_1)
        linked_list_2 = module_0.LinkedList()
        assert len(linked_list_2) == 0
        var_3 = linked_list_2.append(node_1)
        assert len(linked_list_2) == 1
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList5.Node'
        assert var_3.next is None
        assert f'{type(var_3.data).__module__}.{type(var_3.data).__qualname__}' == 'linkedList5.Node'
        var_4 = var_3.__str__()
        assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'linkedList5.Node'
        assert var_4.next is None
        assert var_4.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_3 = module_0.LinkedList()
        assert len(linked_list_3) == 0
        var_5 = linked_list_3.__len__()
        assert var_5 == 0
        var_6 = linked_list_2.delete(bytes_1)
        bool_0 = True
        node_2 = module_0.Node(bool_0)
        var_7 = node_2.__str__()
>       var_8 = linked_list_1.delete_alt(bytes_0)

RANDOM/test_linkedList5_RANDOM.py:530: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linkedList5.LinkedList'>
data = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'

>   ???
E   AttributeError: type object 'LinkedList' has no attribute 'head'

linkedList5:75: AttributeError
   - [#  11] CDI linkedList5: 
--------------------------------------------------------------------------------
  82:                 curr_node.next = curr_node.next.next
  83:                 return
  84:             curr_node = curr_node.next
  85:     
- 86:     def print_list(self):
- 87:         curr_node = self.head
- 88:         while curr_node is not None:
- 89:             print(curr_node.data)
- 90:             curr_node = curr_node.next
- 91:     
+ 86:     @classmethod
+ 87:     def print_list(self):
+ 88:         curr_node = self.head
+ 89:         while curr_node is not None:
+ 90:             print(curr_node.data)
+ 91:             curr_node = curr_node.next
  92:     def get_all_data(self):
  93:         data = []
  94:         curr_node = self.head
  95:         while curr_node is not None:
--------------------------------------------------------------------------------
[7.34045 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_65

def test_case_65():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        bytes_1 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_1 = module_0.Node(bytes_1)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_1)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = node_0.__str__()
        bytes_2 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_2 = module_0.Node(bytes_2)
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_2 = linked_list_1.append(node_2)
        assert len(linked_list_1) == 1
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList5.Node'
        assert var_2.next is None
        assert f'{type(var_2.data).__module__}.{type(var_2.data).__qualname__}' == 'linkedList5.Node'
        bytes_3 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_3 = module_0.Node(bytes_3)
        bytes_4 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_4 = module_0.Node(bytes_4)
        linked_list_2 = module_0.LinkedList()
        assert len(linked_list_2) == 0
        var_3 = linked_list_2.append(node_4)
        assert len(linked_list_2) == 1
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList5.Node'
        assert var_3.next is None
        assert f'{type(var_3.data).__module__}.{type(var_3.data).__qualname__}' == 'linkedList5.Node'
        var_4 = var_3.__str__()
        assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'linkedList5.Node'
        assert var_4.next is None
        assert var_4.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        bytes_5 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_5 = module_0.Node(bytes_5)
        linked_list_3 = module_0.LinkedList()
        assert len(linked_list_3) == 0
        var_5 = linked_list_3.append(node_5)
        assert len(linked_list_3) == 1
        assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'linkedList5.Node'
        assert var_5.next is None
        assert f'{type(var_5.data).__module__}.{type(var_5.data).__qualname__}' == 'linkedList5.Node'
        var_6 = var_5.__str__()
        assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'linkedList5.Node'
        assert var_6.next is None
        assert var_6.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        var_7 = linked_list_3.get_all_data()
        bytes_6 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_6 = module_0.Node(bytes_6)
        bytes_7 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_7 = module_0.Node(bytes_7)
        linked_list_4 = module_0.LinkedList()
        assert len(linked_list_4) == 0
        var_8 = linked_list_4.append(node_7)
        assert len(linked_list_4) == 1
        assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'linkedList5.Node'
        assert var_8.next is None
        assert f'{type(var_8.data).__module__}.{type(var_8.data).__qualname__}' == 'linkedList5.Node'
        var_9 = var_8.__str__()
        assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'linkedList5.Node'
        assert var_9.next is None
        assert var_9.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_5 = module_0.LinkedList()
        assert len(linked_list_5) == 0
        var_10 = linked_list_5.__len__()
        assert var_10 == 0
        bytes_8 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_8 = module_0.Node(bytes_8)
        linked_list_6 = module_0.LinkedList()
        assert len(linked_list_6) == 0
        var_11 = linked_list_6.append(node_8)
        assert len(linked_list_6) == 1
        assert f'{type(var_11).__module__}.{type(var_11).__qualname__}' == 'linkedList5.Node'
        assert var_11.next is None
        assert f'{type(var_11.data).__module__}.{type(var_11.data).__qualname__}' == 'linkedList5.Node'
        var_12 = var_11.__str__()
        assert f'{type(var_12).__module__}.{type(var_12).__qualname__}' == 'linkedList5.Node'
        assert var_12.next is None
        assert var_12.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        str_0 = 'JLcd4+\n\\'
        var_13 = linked_list_5.append(str_0)
        assert len(linked_list_5) == 1
        assert f'{type(var_13).__module__}.{type(var_13).__qualname__}' == 'linkedList5.Node'
        assert var_13.next is None
        assert var_13.data == 'JLcd4+\n\\'
        bytes_9 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_9 = module_0.Node(bytes_9)
        linked_list_7 = module_0.LinkedList()
        assert len(linked_list_7) == 0
        var_14 = linked_list_7.append(node_9)
        assert len(linked_list_7) == 1
        assert f'{type(var_14).__module__}.{type(var_14).__qualname__}' == 'linkedList5.Node'
        assert var_14.next is None
        assert f'{type(var_14.data).__module__}.{type(var_14.data).__qualname__}' == 'linkedList5.Node'
        var_15 = var_14.__str__()
        assert f'{type(var_15).__module__}.{type(var_15).__qualname__}' == 'linkedList5.Node'
        assert var_15.next is None
        assert var_15.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_8 = module_0.LinkedList()
        assert len(linked_list_8) == 0
        var_16 = linked_list_8.__len__()
        assert var_16 == 0
        var_17 = linked_list_7.delete(bytes_9)
        bytes_10 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_10 = module_0.Node(bytes_10)
        bytes_11 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_11 = module_0.Node(bytes_11)
        linked_list_9 = module_0.LinkedList()
        assert len(linked_list_9) == 0
        var_18 = linked_list_9.append(node_11)
        assert len(linked_list_9) == 1
        assert f'{type(var_18).__module__}.{type(var_18).__qualname__}' == 'linkedList5.Node'
        assert var_18.next is None
        assert f'{type(var_18.data).__module__}.{type(var_18.data).__qualname__}' == 'linkedList5.Node'
        var_19 = node_10.__str__()
        var_20 = var_19.find(bytes_10)
        complex_0 = -1571.872432 - 1247.364j
        linked_list_10 = module_0.LinkedList()
        assert len(linked_list_10) == 0
        var_21 = linked_list_10.delete(complex_0)
        var_22 = linked_list_10.get_all_data()
>       var_23 = linked_list_5.print_list()

RANDOM/test_linkedList5_RANDOM.py:3495: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linkedList5.LinkedList'>

>   ???
E   AttributeError: type object 'LinkedList' has no attribute 'head'

linkedList5:88: AttributeError
   - [#  12] CDI linkedList5: 
--------------------------------------------------------------------------------
  88:         while curr_node is not None:
  89:             print(curr_node.data)
  90:             curr_node = curr_node.next
  91:     
- 92:     def get_all_data(self):
- 93:         data = []
- 94:         curr_node = self.head
- 95:         while curr_node is not None:
- 96:             data.append(curr_node.data)
- 97:             curr_node = curr_node.next
- 98:         return data
+ 92:     @classmethod
+ 93:     def get_all_data(self):
+ 94:         data = []
+ 95:         curr_node = self.head
+ 96:         while curr_node is not None:
+ 97:             data.append(curr_node.data)
+ 98:             curr_node = curr_node.next
+ 99:         return data
--------------------------------------------------------------------------------
[7.26934 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_9

def test_case_9():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert var_1.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
>       var_2 = linked_list_0.get_all_data()

RANDOM/test_linkedList5_RANDOM.py:217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linkedList5.LinkedList'>

>   ???
E   AttributeError: type object 'LinkedList' has no attribute 'head'

linkedList5:95: AttributeError
   - [#  13] COI linkedList5: 
--------------------------------------------------------------------------------
  15:     
  16:     def __len__(self):
  17:         curr = self.head
  18:         counter = 0
- 19:         while curr is not None:
+ 19:         while not (curr is not None):
  20:             counter += 1
  21:             curr = curr.next
  22:         return counter
  23:     
--------------------------------------------------------------------------------
[7.17458 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_1

def test_case_1():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
>       assert len(linked_list_0) == 0

RANDOM/test_linkedList5_RANDOM.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f2723423430>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

linkedList5:21: AttributeError
   - [#  14] COI linkedList5: 
--------------------------------------------------------------------------------
  21:             curr = curr.next
  22:         return counter
  23:     
  24:     def insert_to_front(self, data):
- 25:         if data is None:
+ 25:         if not (data is None):
  26:             return None
  27:         node = Node(data, self.head)
  28:         self.head = node
  29:         return node
--------------------------------------------------------------------------------
[7.05924 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_10

def test_case_10():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert var_1.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        bytes_1 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_1 = module_0.Node(bytes_1)
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_2 = linked_list_1.append(node_1)
        assert len(linked_list_1) == 1
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList5.Node'
        assert var_2.next is None
        assert f'{type(var_2.data).__module__}.{type(var_2.data).__qualname__}' == 'linkedList5.Node'
        var_3 = var_2.__str__()
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList5.Node'
        assert var_3.next is None
        assert var_3.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_2 = module_0.LinkedList()
        assert len(linked_list_2) == 0
        var_4 = linked_list_2.__len__()
        assert var_4 == 0
        var_5 = linked_list_1.delete(bytes_1)
        bytes_2 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_2 = module_0.Node(bytes_2)
        linked_list_3 = module_0.LinkedList()
        assert len(linked_list_3) == 0
        var_6 = linked_list_3.append(node_2)
        assert len(linked_list_3) == 1
        assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'linkedList5.Node'
        assert var_6.next is None
        assert f'{type(var_6.data).__module__}.{type(var_6.data).__qualname__}' == 'linkedList5.Node'
        var_7 = var_6.__str__()
        assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'linkedList5.Node'
        assert var_7.next is None
        assert var_7.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        var_8 = linked_list_3.get_all_data()
        var_9 = linked_list_2.insert_to_front(linked_list_2)
>       assert len(linked_list_2) == 1
E       AssertionError

RANDOM/test_linkedList5_RANDOM.py:266: AssertionError
   - [#  15] COI linkedList5: 
--------------------------------------------------------------------------------
  28:         self.head = node
  29:         return node
  30:     
  31:     def append(self, data):
- 32:         if data is None:
+ 32:         if not (data is None):
  33:             return None
  34:         node = Node(data)
  35:         if self.head is None:
  36:             self.head = node
--------------------------------------------------------------------------------
[7.18457 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_1

def test_case_1():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
>       assert len(linked_list_0) == 1
E       AssertionError

RANDOM/test_linkedList5_RANDOM.py:16: AssertionError
   - [#  16] COI linkedList5: 
--------------------------------------------------------------------------------
  31:     def append(self, data):
  32:         if data is None:
  33:             return None
  34:         node = Node(data)
- 35:         if self.head is None:
+ 35:         if not (self.head is None):
  36:             self.head = node
  37:             return node
  38:         curr_node = self.head
  39:         while curr_node.next is not None:
--------------------------------------------------------------------------------
[7.46771 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_1

def test_case_1():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
>       var_0 = linked_list_0.append(node_0)

RANDOM/test_linkedList5_RANDOM.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f27233022c0>
data = <linkedList5.Node object at 0x7f2723302b00>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

linkedList5:39: AttributeError
   - [#  17] COI linkedList5: 
--------------------------------------------------------------------------------
  35:         if self.head is None:
  36:             self.head = node
  37:             return node
  38:         curr_node = self.head
- 39:         while curr_node.next is not None:
+ 39:         while not (curr_node.next is not None):
  40:             curr_node = curr_node.next
  41:         curr_node.next = node
  42:         return node
  43:     
--------------------------------------------------------------------------------
[7.36253 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_43

def test_case_43():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert var_1.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        var_2 = linked_list_0.get_all_data()
        bytes_1 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_1 = module_0.Node(bytes_1)
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_3 = linked_list_1.append(node_1)
        assert len(linked_list_1) == 1
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList5.Node'
        assert var_3.next is None
        assert f'{type(var_3.data).__module__}.{type(var_3.data).__qualname__}' == 'linkedList5.Node'
        bool_0 = True
        node_2 = module_0.Node(bool_0)
        var_4 = node_2.__str__()
        node_3 = module_0.Node(var_4)
        bytes_2 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_4 = module_0.Node(bytes_2)
        linked_list_2 = module_0.LinkedList()
        assert len(linked_list_2) == 0
        var_5 = linked_list_2.append(node_4)
        assert len(linked_list_2) == 1
        assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'linkedList5.Node'
        assert var_5.next is None
        assert f'{type(var_5.data).__module__}.{type(var_5.data).__qualname__}' == 'linkedList5.Node'
        var_6 = var_5.__str__()
        assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'linkedList5.Node'
        assert var_6.next is None
        assert var_6.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_3 = module_0.LinkedList()
        assert len(linked_list_3) == 0
        var_7 = linked_list_3.__len__()
        assert var_7 == 0
        var_8 = linked_list_2.delete(bytes_2)
        bytes_3 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_5 = module_0.Node(bytes_3)
        linked_list_4 = module_0.LinkedList()
        assert len(linked_list_4) == 0
        var_9 = linked_list_4.append(node_5)
        assert len(linked_list_4) == 1
        assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'linkedList5.Node'
        assert var_9.next is None
        assert f'{type(var_9.data).__module__}.{type(var_9.data).__qualname__}' == 'linkedList5.Node'
        var_10 = var_9.__str__()
        assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'linkedList5.Node'
        assert var_10.next is None
        assert var_10.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_5 = module_0.LinkedList()
        assert len(linked_list_5) == 0
        var_11 = linked_list_5.__len__()
        assert var_11 == 0
        complex_0 = -1571.872432 - 1247.364j
        linked_list_6 = module_0.LinkedList()
        assert len(linked_list_6) == 0
        var_12 = linked_list_6.delete(complex_0)
        bool_1 = True
        node_6 = module_0.Node(bool_1)
        var_13 = node_6.__str__()
        bytes_4 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_7 = module_0.Node(bytes_4)
        bytes_5 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_8 = module_0.Node(bytes_5)
        linked_list_7 = module_0.LinkedList()
        assert len(linked_list_7) == 0
        var_14 = linked_list_7.append(node_8)
        assert len(linked_list_7) == 1
        assert f'{type(var_14).__module__}.{type(var_14).__qualname__}' == 'linkedList5.Node'
        assert var_14.next is None
        assert f'{type(var_14.data).__module__}.{type(var_14.data).__qualname__}' == 'linkedList5.Node'
        var_15 = node_7.__str__()
        bytes_6 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_9 = module_0.Node(bytes_6)
>       var_16 = linked_list_7.append(bytes_3)

RANDOM/test_linkedList5_RANDOM.py:2171: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f27233037f0>
data = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

linkedList5:39: AttributeError
   - [#  18] COI linkedList5: 
--------------------------------------------------------------------------------
  41:         curr_node.next = node
  42:         return node
  43:     
  44:     def find(self, data):
- 45:         if data is None:
+ 45:         if not (data is None):
  46:             return None
  47:         curr_node = self.head
  48:         while curr_node is not None:
  49:             if curr_node.data == data:
--------------------------------------------------------------------------------
[9.26764 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_2071

def test_case_2071():
        bool_0 = True
        none_type_0 = None
        complex_0 = 2248.5481 + 207.1799j
        linked_list_0 = module_0.LinkedList(complex_0)
>       var_0 = linked_list_0.find(none_type_0)

RANDOM/test_linkedList5_RANDOM.py:118069: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f272408cb80>, data = None

>   ???
E   AttributeError: 'complex' object has no attribute 'data'

linkedList5:49: AttributeError
   - [#  19] COI linkedList5: 
--------------------------------------------------------------------------------
  44:     def find(self, data):
  45:         if data is None:
  46:             return None
  47:         curr_node = self.head
- 48:         while curr_node is not None:
+ 48:         while not (curr_node is not None):
  49:             if curr_node.data == data:
  50:                 return curr_node
  51:             curr_node = curr_node.next
  52:         return None
--------------------------------------------------------------------------------
[7.40763 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_86

def test_case_86():
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.__len__()
        assert var_0 == 0
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_1 = linked_list_1.append(node_0)
        assert len(linked_list_1) == 1
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert f'{type(var_1.data).__module__}.{type(var_1.data).__qualname__}' == 'linkedList5.Node'
        var_2 = var_1.__str__()
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList5.Node'
        assert var_2.next is None
        assert var_2.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        str_0 = 'JLcd4+\n\\'
        var_3 = linked_list_0.append(str_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList5.Node'
        assert var_3.next is None
        assert var_3.data == 'JLcd4+\n\\'
        bytes_1 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_1 = module_0.Node(bytes_1)
        linked_list_2 = module_0.LinkedList()
        assert len(linked_list_2) == 0
        var_4 = linked_list_2.append(node_1)
        assert len(linked_list_2) == 1
        assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'linkedList5.Node'
        assert var_4.next is None
        assert f'{type(var_4.data).__module__}.{type(var_4.data).__qualname__}' == 'linkedList5.Node'
        var_5 = var_4.__str__()
        assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'linkedList5.Node'
        assert var_5.next is None
        assert var_5.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_3 = module_0.LinkedList()
        assert len(linked_list_3) == 0
        var_6 = linked_list_3.__len__()
        assert var_6 == 0
        bytes_2 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_2 = module_0.Node(bytes_2)
        linked_list_4 = module_0.LinkedList()
        assert len(linked_list_4) == 0
        var_7 = linked_list_4.append(node_2)
        assert len(linked_list_4) == 1
        assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'linkedList5.Node'
        assert var_7.next is None
        assert f'{type(var_7.data).__module__}.{type(var_7.data).__qualname__}' == 'linkedList5.Node'
        var_8 = var_7.__str__()
        assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'linkedList5.Node'
        assert var_8.next is None
        assert var_8.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        bytes_3 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_3 = module_0.Node(bytes_3)
        bytes_4 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_4 = module_0.Node(bytes_4)
        linked_list_5 = module_0.LinkedList()
        assert len(linked_list_5) == 0
        var_9 = linked_list_5.append(node_4)
        assert len(linked_list_5) == 1
        assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'linkedList5.Node'
        assert var_9.next is None
        assert f'{type(var_9.data).__module__}.{type(var_9.data).__qualname__}' == 'linkedList5.Node'
        var_10 = node_3.__str__()
        var_11 = var_10.find(bytes_3)
        linked_list_6 = module_0.LinkedList()
        assert len(linked_list_6) == 0
        var_12 = linked_list_6.__len__()
        assert var_12 == 0
        complex_0 = -1571.872432 - 1247.364j
        linked_list_7 = module_0.LinkedList()
        assert len(linked_list_7) == 0
        var_13 = linked_list_7.delete(complex_0)
        bytes_5 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_5 = module_0.Node(bytes_5)
        bytes_6 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_6 = module_0.Node(bytes_6)
        linked_list_8 = module_0.LinkedList()
        assert len(linked_list_8) == 0
        var_14 = linked_list_8.append(node_6)
        assert len(linked_list_8) == 1
        assert f'{type(var_14).__module__}.{type(var_14).__qualname__}' == 'linkedList5.Node'
        assert var_14.next is None
        assert f'{type(var_14.data).__module__}.{type(var_14.data).__qualname__}' == 'linkedList5.Node'
        var_15 = node_5.__str__()
        bytes_7 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_7 = module_0.Node(bytes_7)
        bytes_8 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_8 = module_0.Node(bytes_8)
        linked_list_9 = module_0.LinkedList()
        assert len(linked_list_9) == 0
        var_16 = linked_list_9.append(node_8)
        assert len(linked_list_9) == 1
        assert f'{type(var_16).__module__}.{type(var_16).__qualname__}' == 'linkedList5.Node'
        assert var_16.next is None
        assert f'{type(var_16.data).__module__}.{type(var_16.data).__qualname__}' == 'linkedList5.Node'
        var_17 = var_16.__str__()
        assert f'{type(var_17).__module__}.{type(var_17).__qualname__}' == 'linkedList5.Node'
        assert var_17.next is None
        assert var_17.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_10 = module_0.LinkedList()
        assert len(linked_list_10) == 0
        bytes_9 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_9 = module_0.Node(bytes_9)
        bytes_10 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_10 = module_0.Node(bytes_10)
        linked_list_11 = module_0.LinkedList()
        assert len(linked_list_11) == 0
        var_18 = linked_list_11.append(node_10)
        assert len(linked_list_11) == 1
        assert f'{type(var_18).__module__}.{type(var_18).__qualname__}' == 'linkedList5.Node'
        assert var_18.next is None
        assert f'{type(var_18.data).__module__}.{type(var_18.data).__qualname__}' == 'linkedList5.Node'
        var_19 = var_18.__str__()
        assert f'{type(var_19).__module__}.{type(var_19).__qualname__}' == 'linkedList5.Node'
        assert var_19.next is None
        assert var_19.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
>       var_20 = linked_list_10.find(linked_list_11)

RANDOM/test_linkedList5_RANDOM.py:4829: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f2724f86140>
data = <linkedList5.LinkedList object at 0x7f2724f84760>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'data'

linkedList5:49: AttributeError
   - [#  20] COI linkedList5: 
--------------------------------------------------------------------------------
  45:         if data is None:
  46:             return None
  47:         curr_node = self.head
  48:         while curr_node is not None:
- 49:             if curr_node.data == data:
+ 49:             if not (curr_node.data == data):
  50:                 return curr_node
  51:             curr_node = curr_node.next
  52:         return None
  53:     
--------------------------------------------------------------------------------
[7.92304 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_771

def test_case_771():
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.delete_alt(linked_list_0)
        node_0 = module_0.Node(var_0, var_0)
        var_1 = node_0.__str__()
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_2 = linked_list_1.__len__()
        assert var_2 == 0
        var_3 = linked_list_1.delete(var_2)
        var_4 = linked_list_0.delete_alt(linked_list_0)
        linked_list_2 = module_0.LinkedList()
        assert len(linked_list_2) == 0
        bool_0 = True
        linked_list_3 = module_0.LinkedList()
        assert len(linked_list_3) == 0
        var_5 = linked_list_3.delete_alt(bool_0)
        linked_list_4 = module_0.LinkedList()
        assert len(linked_list_4) == 0
        var_6 = linked_list_4.delete_alt(linked_list_4)
        node_1 = module_0.Node(var_6, var_6)
        var_7 = node_1.__str__()
        var_8 = node_1.__str__()
        complex_0 = -1571.872432 - 1247.364j
        linked_list_5 = module_0.LinkedList()
        assert len(linked_list_5) == 0
        var_9 = linked_list_5.delete(complex_0)
        var_10 = linked_list_5.get_all_data()
        var_11 = var_10.append(var_10)
        str_0 = '\tD\rb9y@AZRea'
        linked_list_6 = module_0.LinkedList()
        assert len(linked_list_6) == 0
        var_12 = linked_list_6.append(str_0)
        assert len(linked_list_6) == 1
        assert f'{type(var_12).__module__}.{type(var_12).__qualname__}' == 'linkedList5.Node'
        assert var_12.next is None
        assert var_12.data == '\tD\rb9y@AZRea'
        var_13 = linked_list_6.find(linked_list_6)
        node_2 = module_0.Node(var_4, var_13)
>       assert node_2.next is None
E       AssertionError

RANDOM/test_linkedList5_RANDOM.py:46680: AssertionError
   - [#  21] COI linkedList5: 
--------------------------------------------------------------------------------
  51:             curr_node = curr_node.next
  52:         return None
  53:     
  54:     def delete(self, data):
- 55:         if data is None:
+ 55:         if not (data is None):
  56:             return
  57:         if self.head is None:
  58:             return
  59:         if self.head.data == data:
--------------------------------------------------------------------------------
[7.37328 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_115

def test_case_115():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        bytes_1 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_1 = module_0.Node(bytes_1)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_1)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert var_1.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        bytes_2 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_2 = module_0.Node(bytes_2)
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_2 = linked_list_1.append(node_2)
        assert len(linked_list_1) == 1
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList5.Node'
        assert var_2.next is None
        assert f'{type(var_2.data).__module__}.{type(var_2.data).__qualname__}' == 'linkedList5.Node'
        var_3 = var_2.__str__()
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList5.Node'
        assert var_3.next is None
        assert var_3.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_2 = module_0.LinkedList()
        assert len(linked_list_2) == 0
        var_4 = linked_list_2.__len__()
        assert var_4 == 0
        var_5 = linked_list_1.delete(bytes_2)
        complex_0 = -1571.872432 - 1247.364j
        linked_list_3 = module_0.LinkedList()
        assert len(linked_list_3) == 0
        var_6 = linked_list_3.delete(complex_0)
        var_7 = linked_list_3.get_all_data()
        var_8 = var_7.append(var_7)
        node_3 = module_0.Node(var_8, var_8)
        var_9 = linked_list_0.delete(var_1)
>       assert len(linked_list_0) == 0
E       AssertionError

RANDOM/test_linkedList5_RANDOM.py:6580: AssertionError
   - [#  22] COI linkedList5: 
--------------------------------------------------------------------------------
  53:     
  54:     def delete(self, data):
  55:         if data is None:
  56:             return
- 57:         if self.head is None:
+ 57:         if not (self.head is None):
  58:             return
  59:         if self.head.data == data:
  60:             self.head = self.head.next
  61:             return
--------------------------------------------------------------------------------
[7.14087 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_19

def test_case_19():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert var_1.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_2 = linked_list_1.__len__()
        assert var_2 == 0
        bool_0 = True
        node_1 = module_0.Node(bool_0)
        var_3 = node_1.__str__()
>       var_4 = linked_list_1.delete(var_2)

RANDOM/test_linkedList5_RANDOM.py:616: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f2724066770>, data = 0

>   ???
E   AttributeError: 'NoneType' object has no attribute 'data'

linkedList5:59: AttributeError
   - [#  23] COI linkedList5: 
--------------------------------------------------------------------------------
  55:         if data is None:
  56:             return
  57:         if self.head is None:
  58:             return
- 59:         if self.head.data == data:
+ 59:         if not (self.head.data == data):
  60:             self.head = self.head.next
  61:             return
  62:         prev_node = self.head
  63:         curr_node = self.head.next
--------------------------------------------------------------------------------
[7.11738 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_32

def test_case_32():
        bool_0 = True
        node_0 = module_0.Node(bool_0)
        var_0 = node_0.__str__()
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_1 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_1 = linked_list_0.append(node_1)
        assert len(linked_list_0) == 1
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert f'{type(var_1.data).__module__}.{type(var_1.data).__qualname__}' == 'linkedList5.Node'
        var_2 = var_1.__str__()
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList5.Node'
        assert var_2.next is None
        assert var_2.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_3 = linked_list_1.__len__()
        assert var_3 == 0
        bytes_1 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_2 = module_0.Node(bytes_1)
        linked_list_2 = module_0.LinkedList()
        assert len(linked_list_2) == 0
        var_4 = linked_list_2.append(node_2)
        assert len(linked_list_2) == 1
        assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'linkedList5.Node'
        assert var_4.next is None
        assert f'{type(var_4.data).__module__}.{type(var_4.data).__qualname__}' == 'linkedList5.Node'
        var_5 = var_4.__str__()
        assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'linkedList5.Node'
        assert var_5.next is None
        assert var_5.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        var_6 = linked_list_2.get_all_data()
        bytes_2 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_3 = module_0.Node(bytes_2)
        linked_list_3 = module_0.LinkedList()
        assert len(linked_list_3) == 0
        var_7 = linked_list_3.append(node_3)
        assert len(linked_list_3) == 1
        assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'linkedList5.Node'
        assert var_7.next is None
        assert f'{type(var_7.data).__module__}.{type(var_7.data).__qualname__}' == 'linkedList5.Node'
        bool_1 = True
        node_4 = module_0.Node(bool_1)
        var_8 = node_4.__str__()
        node_5 = module_0.Node(var_8)
        bytes_3 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_6 = module_0.Node(bytes_3)
        linked_list_4 = module_0.LinkedList()
        assert len(linked_list_4) == 0
        var_9 = linked_list_4.append(node_6)
        assert len(linked_list_4) == 1
        assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'linkedList5.Node'
        assert var_9.next is None
        assert f'{type(var_9.data).__module__}.{type(var_9.data).__qualname__}' == 'linkedList5.Node'
        var_10 = var_9.__str__()
        assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'linkedList5.Node'
        assert var_10.next is None
        assert var_10.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_5 = module_0.LinkedList()
        assert len(linked_list_5) == 0
        var_11 = linked_list_5.__len__()
        assert var_11 == 0
        var_12 = linked_list_4.delete(bytes_3)
        bytes_4 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_7 = module_0.Node(bytes_4)
        linked_list_6 = module_0.LinkedList()
        assert len(linked_list_6) == 0
        var_13 = linked_list_6.append(node_7)
        assert len(linked_list_6) == 1
        assert f'{type(var_13).__module__}.{type(var_13).__qualname__}' == 'linkedList5.Node'
        assert var_13.next is None
        assert f'{type(var_13.data).__module__}.{type(var_13.data).__qualname__}' == 'linkedList5.Node'
        var_14 = var_13.__str__()
        assert f'{type(var_14).__module__}.{type(var_14).__qualname__}' == 'linkedList5.Node'
        assert var_14.next is None
        assert var_14.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        var_15 = linked_list_4.__len__()
>       assert var_15 == 1
E       AssertionError

RANDOM/test_linkedList5_RANDOM.py:1493: AssertionError
   - [#  24] COI linkedList5: 
--------------------------------------------------------------------------------
  60:             self.head = self.head.next
  61:             return
  62:         prev_node = self.head
  63:         curr_node = self.head.next
- 64:         while curr_node is not None:
+ 64:         while not (curr_node is not None):
  65:             if curr_node.data == data:
  66:                 prev_node.next = curr_node.next
  67:                 return
  68:             prev_node = curr_node
--------------------------------------------------------------------------------
[7.10887 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_7

def test_case_7():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert var_1.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_2 = linked_list_1.__len__()
        assert var_2 == 0
>       var_3 = linked_list_0.delete(bytes_0)

RANDOM/test_linkedList5_RANDOM.py:173: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f2723fdc400>
data = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'

>   ???
E   AttributeError: 'NoneType' object has no attribute 'data'

linkedList5:65: AttributeError
   - [#  25] COI linkedList5: 
--------------------------------------------------------------------------------
  61:             return
  62:         prev_node = self.head
  63:         curr_node = self.head.next
  64:         while curr_node is not None:
- 65:             if curr_node.data == data:
+ 65:             if not (curr_node.data == data):
  66:                 prev_node.next = curr_node.next
  67:                 return
  68:             prev_node = curr_node
  69:             curr_node = curr_node.next
--------------------------------------------------------------------------------
[2.75880 s] survived
   - [#  26] COI linkedList5: 
--------------------------------------------------------------------------------
  68:             prev_node = curr_node
  69:             curr_node = curr_node.next
  70:     
  71:     def delete_alt(self, data):
- 72:         if data is None:
+ 72:         if not (data is None):
  73:             return
  74:         if self.head is None:
  75:             return
  76:         curr_node = self.head
--------------------------------------------------------------------------------
[2.72767 s] survived
   - [#  27] COI linkedList5: 
--------------------------------------------------------------------------------
  70:     
  71:     def delete_alt(self, data):
  72:         if data is None:
  73:             return
- 74:         if self.head is None:
+ 74:         if not (self.head is None):
  75:             return
  76:         curr_node = self.head
  77:         if curr_node.data == data:
  78:             curr_node = curr_node.next
--------------------------------------------------------------------------------
[7.30911 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_17

def test_case_17():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert var_1.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_2 = linked_list_1.__len__()
        assert var_2 == 0
        bytes_1 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_1 = module_0.Node(bytes_1)
        linked_list_2 = module_0.LinkedList()
        assert len(linked_list_2) == 0
        var_3 = linked_list_2.append(node_1)
        assert len(linked_list_2) == 1
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList5.Node'
        assert var_3.next is None
        assert f'{type(var_3.data).__module__}.{type(var_3.data).__qualname__}' == 'linkedList5.Node'
        var_4 = var_3.__str__()
        assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'linkedList5.Node'
        assert var_4.next is None
        assert var_4.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_3 = module_0.LinkedList()
        assert len(linked_list_3) == 0
        var_5 = linked_list_3.__len__()
        assert var_5 == 0
        var_6 = linked_list_2.delete(bytes_1)
        bool_0 = True
        node_2 = module_0.Node(bool_0)
        var_7 = node_2.__str__()
>       var_8 = linked_list_1.delete_alt(bytes_0)

RANDOM/test_linkedList5_RANDOM.py:530: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f2724ff3df0>
data = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'

>   ???
E   AttributeError: 'NoneType' object has no attribute 'data'

linkedList5:77: AttributeError
   - [#  28] COI linkedList5: 
--------------------------------------------------------------------------------
  73:             return
  74:         if self.head is None:
  75:             return
  76:         curr_node = self.head
- 77:         if curr_node.data == data:
+ 77:         if not (curr_node.data == data):
  78:             curr_node = curr_node.next
  79:             return
  80:         while curr_node.next is not None:
  81:             if curr_node.next.data == data:
--------------------------------------------------------------------------------
[2.78358 s] survived
   - [#  29] COI linkedList5: 
--------------------------------------------------------------------------------
  76:         curr_node = self.head
  77:         if curr_node.data == data:
  78:             curr_node = curr_node.next
  79:             return
- 80:         while curr_node.next is not None:
+ 80:         while not (curr_node.next is not None):
  81:             if curr_node.next.data == data:
  82:                 curr_node.next = curr_node.next.next
  83:                 return
  84:             curr_node = curr_node.next
--------------------------------------------------------------------------------
[7.26498 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_44

def test_case_44():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
>       var_1 = linked_list_0.delete_alt(var_0)

RANDOM/test_linkedList5_RANDOM.py:2188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f2724ff14b0>
data = <linkedList5.Node object at 0x7f2724ff2e60>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'data'

linkedList5:81: AttributeError
   - [#  30] COI linkedList5: 
--------------------------------------------------------------------------------
  77:         if curr_node.data == data:
  78:             curr_node = curr_node.next
  79:             return
  80:         while curr_node.next is not None:
- 81:             if curr_node.next.data == data:
+ 81:             if not (curr_node.next.data == data):
  82:                 curr_node.next = curr_node.next.next
  83:                 return
  84:             curr_node = curr_node.next
  85:     
--------------------------------------------------------------------------------
[2.80183 s] survived
   - [#  31] COI linkedList5: 
--------------------------------------------------------------------------------
  84:             curr_node = curr_node.next
  85:     
  86:     def print_list(self):
  87:         curr_node = self.head
- 88:         while curr_node is not None:
+ 88:         while not (curr_node is not None):
  89:             print(curr_node.data)
  90:             curr_node = curr_node.next
  91:     
  92:     def get_all_data(self):
--------------------------------------------------------------------------------
[7.33254 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_103

def test_case_103():
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.__len__()
        assert var_0 == 0
        complex_0 = -1571.872432 - 1247.364j
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_1 = linked_list_1.delete(complex_0)
        var_2 = linked_list_1.get_all_data()
>       var_3 = linked_list_0.print_list()

RANDOM/test_linkedList5_RANDOM.py:5707: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f2724ff3a60>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'data'

linkedList5:89: AttributeError
   - [#  32] COI linkedList5: 
--------------------------------------------------------------------------------
  91:     
  92:     def get_all_data(self):
  93:         data = []
  94:         curr_node = self.head
- 95:         while curr_node is not None:
+ 95:         while not (curr_node is not None):
  96:             data.append(curr_node.data)
  97:             curr_node = curr_node.next
  98:         return data
--------------------------------------------------------------------------------
[7.18214 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_45

def test_case_45():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        bytes_1 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_1 = module_0.Node(bytes_1)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_1)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert var_1.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_2 = linked_list_1.__len__()
        assert var_2 == 0
        complex_0 = -1571.872432 - 1247.364j
        linked_list_2 = module_0.LinkedList()
        assert len(linked_list_2) == 0
        var_3 = linked_list_2.delete(complex_0)
        linked_list_3 = module_0.LinkedList()
        assert len(linked_list_3) == 0
        var_4 = linked_list_3.__len__()
        assert var_4 == 0
        bytes_2 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_2 = module_0.Node(bytes_2)
        linked_list_4 = module_0.LinkedList()
        assert len(linked_list_4) == 0
        var_5 = linked_list_4.append(node_2)
        assert len(linked_list_4) == 1
        assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'linkedList5.Node'
        assert var_5.next is None
        assert f'{type(var_5.data).__module__}.{type(var_5.data).__qualname__}' == 'linkedList5.Node'
        var_6 = linked_list_4.delete_alt(var_5)
        bytes_3 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_3 = module_0.Node(bytes_3)
        linked_list_5 = module_0.LinkedList()
        assert len(linked_list_5) == 0
        var_7 = linked_list_5.append(node_3)
        assert len(linked_list_5) == 1
        assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'linkedList5.Node'
        assert var_7.next is None
        assert f'{type(var_7.data).__module__}.{type(var_7.data).__qualname__}' == 'linkedList5.Node'
        bytes_4 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_4 = module_0.Node(bytes_4)
        linked_list_6 = module_0.LinkedList()
        assert len(linked_list_6) == 0
        var_8 = linked_list_6.append(node_4)
        assert len(linked_list_6) == 1
        assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'linkedList5.Node'
        assert var_8.next is None
        assert f'{type(var_8.data).__module__}.{type(var_8.data).__qualname__}' == 'linkedList5.Node'
        var_9 = var_8.__str__()
        assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'linkedList5.Node'
        assert var_9.next is None
        assert var_9.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        bytes_5 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_5 = module_0.Node(bytes_5)
        linked_list_7 = module_0.LinkedList()
        assert len(linked_list_7) == 0
        var_10 = linked_list_7.append(node_5)
        assert len(linked_list_7) == 1
        assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'linkedList5.Node'
        assert var_10.next is None
        assert f'{type(var_10.data).__module__}.{type(var_10.data).__qualname__}' == 'linkedList5.Node'
        var_11 = var_10.__str__()
        assert f'{type(var_11).__module__}.{type(var_11).__qualname__}' == 'linkedList5.Node'
        assert var_11.next is None
        assert var_11.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        var_12 = linked_list_7.get_all_data()
>       var_13 = linked_list_3.get_all_data()

RANDOM/test_linkedList5_RANDOM.py:2264: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f2724077d90>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'data'

linkedList5:96: AttributeError
   - [#  33] CRP linkedList5: 
--------------------------------------------------------------------------------
  14:         self.head = head
  15:     
  16:     def __len__(self):
  17:         curr = self.head
- 18:         counter = 0
+ 18:         counter = 1
  19:         while curr is not None:
  20:             counter += 1
  21:             curr = curr.next
  22:         return counter
--------------------------------------------------------------------------------
[7.19998 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_1

def test_case_1():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
>       assert len(linked_list_0) == 0
E       AssertionError

RANDOM/test_linkedList5_RANDOM.py:14: AssertionError
   - [#  34] CRP linkedList5: 
--------------------------------------------------------------------------------
  16:     def __len__(self):
  17:         curr = self.head
  18:         counter = 0
  19:         while curr is not None:
- 20:             counter += 1
+ 20:             counter += 2
  21:             curr = curr.next
  22:         return counter
  23:     
  24:     def insert_to_front(self, data):
--------------------------------------------------------------------------------
[7.23777 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_1

def test_case_1():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
>       assert len(linked_list_0) == 1
E       AssertionError

RANDOM/test_linkedList5_RANDOM.py:16: AssertionError
   - [#  35] OIL linkedList5: 
--------------------------------------------------------------------------------
  18:         counter = 0
  19:         while curr is not None:
  20:             counter += 1
  21:             curr = curr.next
- 22:         return counter
- 23:     
+ 22:             break
+ 23:         return counter
  24:     def insert_to_front(self, data):
  25:         if data is None:
  26:             return None
  27:         node = Node(data, self.head)
--------------------------------------------------------------------------------
[7.13425 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_43

def test_case_43():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert var_1.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        var_2 = linked_list_0.get_all_data()
        bytes_1 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_1 = module_0.Node(bytes_1)
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_3 = linked_list_1.append(node_1)
        assert len(linked_list_1) == 1
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList5.Node'
        assert var_3.next is None
        assert f'{type(var_3.data).__module__}.{type(var_3.data).__qualname__}' == 'linkedList5.Node'
        bool_0 = True
        node_2 = module_0.Node(bool_0)
        var_4 = node_2.__str__()
        node_3 = module_0.Node(var_4)
        bytes_2 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_4 = module_0.Node(bytes_2)
        linked_list_2 = module_0.LinkedList()
        assert len(linked_list_2) == 0
        var_5 = linked_list_2.append(node_4)
        assert len(linked_list_2) == 1
        assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'linkedList5.Node'
        assert var_5.next is None
        assert f'{type(var_5.data).__module__}.{type(var_5.data).__qualname__}' == 'linkedList5.Node'
        var_6 = var_5.__str__()
        assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'linkedList5.Node'
        assert var_6.next is None
        assert var_6.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_3 = module_0.LinkedList()
        assert len(linked_list_3) == 0
        var_7 = linked_list_3.__len__()
        assert var_7 == 0
        var_8 = linked_list_2.delete(bytes_2)
        bytes_3 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_5 = module_0.Node(bytes_3)
        linked_list_4 = module_0.LinkedList()
        assert len(linked_list_4) == 0
        var_9 = linked_list_4.append(node_5)
        assert len(linked_list_4) == 1
        assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'linkedList5.Node'
        assert var_9.next is None
        assert f'{type(var_9.data).__module__}.{type(var_9.data).__qualname__}' == 'linkedList5.Node'
        var_10 = var_9.__str__()
        assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'linkedList5.Node'
        assert var_10.next is None
        assert var_10.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_5 = module_0.LinkedList()
        assert len(linked_list_5) == 0
        var_11 = linked_list_5.__len__()
        assert var_11 == 0
        complex_0 = -1571.872432 - 1247.364j
        linked_list_6 = module_0.LinkedList()
        assert len(linked_list_6) == 0
        var_12 = linked_list_6.delete(complex_0)
        bool_1 = True
        node_6 = module_0.Node(bool_1)
        var_13 = node_6.__str__()
        bytes_4 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_7 = module_0.Node(bytes_4)
        bytes_5 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_8 = module_0.Node(bytes_5)
        linked_list_7 = module_0.LinkedList()
        assert len(linked_list_7) == 0
        var_14 = linked_list_7.append(node_8)
        assert len(linked_list_7) == 1
        assert f'{type(var_14).__module__}.{type(var_14).__qualname__}' == 'linkedList5.Node'
        assert var_14.next is None
        assert f'{type(var_14.data).__module__}.{type(var_14.data).__qualname__}' == 'linkedList5.Node'
        var_15 = node_7.__str__()
        bytes_6 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_9 = module_0.Node(bytes_6)
        var_16 = linked_list_7.append(bytes_3)
>       assert len(linked_list_7) == 2
E       AssertionError

RANDOM/test_linkedList5_RANDOM.py:2172: AssertionError
   - [#  36] OIL linkedList5: 
--------------------------------------------------------------------------------
  37:             return node
  38:         curr_node = self.head
  39:         while curr_node.next is not None:
  40:             curr_node = curr_node.next
- 41:         curr_node.next = node
- 42:         return node
- 43:     
+ 41:             break
+ 42:         curr_node.next = node
+ 43:         return node
  44:     def find(self, data):
  45:         if data is None:
  46:             return None
  47:         curr_node = self.head
--------------------------------------------------------------------------------
[2.69735 s] survived
   - [#  37] OIL linkedList5: 
--------------------------------------------------------------------------------
  48:         while curr_node is not None:
  49:             if curr_node.data == data:
  50:                 return curr_node
  51:             curr_node = curr_node.next
- 52:         return None
- 53:     
+ 52:             break
+ 53:         return None
  54:     def delete(self, data):
  55:         if data is None:
  56:             return
  57:         if self.head is None:
--------------------------------------------------------------------------------
[2.71058 s] survived
   - [#  38] OIL linkedList5: 
--------------------------------------------------------------------------------
  66:                 prev_node.next = curr_node.next
  67:                 return
  68:             prev_node = curr_node
  69:             curr_node = curr_node.next
- 70:     
+ 70:             break
  71:     def delete_alt(self, data):
  72:         if data is None:
  73:             return
  74:         if self.head is None:
--------------------------------------------------------------------------------
[2.80152 s] survived
   - [#  39] OIL linkedList5: 
--------------------------------------------------------------------------------
  81:             if curr_node.next.data == data:
  82:                 curr_node.next = curr_node.next.next
  83:                 return
  84:             curr_node = curr_node.next
- 85:     
+ 85:             break
  86:     def print_list(self):
  87:         curr_node = self.head
  88:         while curr_node is not None:
  89:             print(curr_node.data)
--------------------------------------------------------------------------------
[2.73224 s] survived
   - [#  40] OIL linkedList5: 
--------------------------------------------------------------------------------
  87:         curr_node = self.head
  88:         while curr_node is not None:
  89:             print(curr_node.data)
  90:             curr_node = curr_node.next
- 91:     
+ 91:             break
  92:     def get_all_data(self):
  93:         data = []
  94:         curr_node = self.head
  95:         while curr_node is not None:
--------------------------------------------------------------------------------
[2.76765 s] survived
   - [#  41] OIL linkedList5: 
--------------------------------------------------------------------------------
  94:         curr_node = self.head
  95:         while curr_node is not None:
  96:             data.append(curr_node.data)
  97:             curr_node = curr_node.next
- 98:         return data
+ 98:             break
+ 99:         return data
--------------------------------------------------------------------------------
[2.67752 s] survived
   - [#  42] ROR linkedList5: 
--------------------------------------------------------------------------------
  45:         if data is None:
  46:             return None
  47:         curr_node = self.head
  48:         while curr_node is not None:
- 49:             if curr_node.data == data:
+ 49:             if curr_node.data != data:
  50:                 return curr_node
  51:             curr_node = curr_node.next
  52:         return None
  53:     
--------------------------------------------------------------------------------
[7.89190 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_771

def test_case_771():
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.delete_alt(linked_list_0)
        node_0 = module_0.Node(var_0, var_0)
        var_1 = node_0.__str__()
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_2 = linked_list_1.__len__()
        assert var_2 == 0
        var_3 = linked_list_1.delete(var_2)
        var_4 = linked_list_0.delete_alt(linked_list_0)
        linked_list_2 = module_0.LinkedList()
        assert len(linked_list_2) == 0
        bool_0 = True
        linked_list_3 = module_0.LinkedList()
        assert len(linked_list_3) == 0
        var_5 = linked_list_3.delete_alt(bool_0)
        linked_list_4 = module_0.LinkedList()
        assert len(linked_list_4) == 0
        var_6 = linked_list_4.delete_alt(linked_list_4)
        node_1 = module_0.Node(var_6, var_6)
        var_7 = node_1.__str__()
        var_8 = node_1.__str__()
        complex_0 = -1571.872432 - 1247.364j
        linked_list_5 = module_0.LinkedList()
        assert len(linked_list_5) == 0
        var_9 = linked_list_5.delete(complex_0)
        var_10 = linked_list_5.get_all_data()
        var_11 = var_10.append(var_10)
        str_0 = '\tD\rb9y@AZRea'
        linked_list_6 = module_0.LinkedList()
        assert len(linked_list_6) == 0
        var_12 = linked_list_6.append(str_0)
        assert len(linked_list_6) == 1
        assert f'{type(var_12).__module__}.{type(var_12).__qualname__}' == 'linkedList5.Node'
        assert var_12.next is None
        assert var_12.data == '\tD\rb9y@AZRea'
        var_13 = linked_list_6.find(linked_list_6)
        node_2 = module_0.Node(var_4, var_13)
>       assert node_2.next is None
E       AssertionError

RANDOM/test_linkedList5_RANDOM.py:46680: AssertionError
   - [#  43] ROR linkedList5: 
--------------------------------------------------------------------------------
  55:         if data is None:
  56:             return
  57:         if self.head is None:
  58:             return
- 59:         if self.head.data == data:
+ 59:         if self.head.data != data:
  60:             self.head = self.head.next
  61:             return
  62:         prev_node = self.head
  63:         curr_node = self.head.next
--------------------------------------------------------------------------------
[7.15269 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_32

def test_case_32():
        bool_0 = True
        node_0 = module_0.Node(bool_0)
        var_0 = node_0.__str__()
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_1 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_1 = linked_list_0.append(node_1)
        assert len(linked_list_0) == 1
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert f'{type(var_1.data).__module__}.{type(var_1.data).__qualname__}' == 'linkedList5.Node'
        var_2 = var_1.__str__()
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList5.Node'
        assert var_2.next is None
        assert var_2.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_3 = linked_list_1.__len__()
        assert var_3 == 0
        bytes_1 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_2 = module_0.Node(bytes_1)
        linked_list_2 = module_0.LinkedList()
        assert len(linked_list_2) == 0
        var_4 = linked_list_2.append(node_2)
        assert len(linked_list_2) == 1
        assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'linkedList5.Node'
        assert var_4.next is None
        assert f'{type(var_4.data).__module__}.{type(var_4.data).__qualname__}' == 'linkedList5.Node'
        var_5 = var_4.__str__()
        assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'linkedList5.Node'
        assert var_5.next is None
        assert var_5.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        var_6 = linked_list_2.get_all_data()
        bytes_2 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_3 = module_0.Node(bytes_2)
        linked_list_3 = module_0.LinkedList()
        assert len(linked_list_3) == 0
        var_7 = linked_list_3.append(node_3)
        assert len(linked_list_3) == 1
        assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'linkedList5.Node'
        assert var_7.next is None
        assert f'{type(var_7.data).__module__}.{type(var_7.data).__qualname__}' == 'linkedList5.Node'
        bool_1 = True
        node_4 = module_0.Node(bool_1)
        var_8 = node_4.__str__()
        node_5 = module_0.Node(var_8)
        bytes_3 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_6 = module_0.Node(bytes_3)
        linked_list_4 = module_0.LinkedList()
        assert len(linked_list_4) == 0
        var_9 = linked_list_4.append(node_6)
        assert len(linked_list_4) == 1
        assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'linkedList5.Node'
        assert var_9.next is None
        assert f'{type(var_9.data).__module__}.{type(var_9.data).__qualname__}' == 'linkedList5.Node'
        var_10 = var_9.__str__()
        assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'linkedList5.Node'
        assert var_10.next is None
        assert var_10.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_5 = module_0.LinkedList()
        assert len(linked_list_5) == 0
        var_11 = linked_list_5.__len__()
        assert var_11 == 0
        var_12 = linked_list_4.delete(bytes_3)
        bytes_4 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_7 = module_0.Node(bytes_4)
        linked_list_6 = module_0.LinkedList()
        assert len(linked_list_6) == 0
        var_13 = linked_list_6.append(node_7)
        assert len(linked_list_6) == 1
        assert f'{type(var_13).__module__}.{type(var_13).__qualname__}' == 'linkedList5.Node'
        assert var_13.next is None
        assert f'{type(var_13.data).__module__}.{type(var_13.data).__qualname__}' == 'linkedList5.Node'
        var_14 = var_13.__str__()
        assert f'{type(var_14).__module__}.{type(var_14).__qualname__}' == 'linkedList5.Node'
        assert var_14.next is None
        assert var_14.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        var_15 = linked_list_4.__len__()
>       assert var_15 == 1
E       AssertionError

RANDOM/test_linkedList5_RANDOM.py:1493: AssertionError
   - [#  44] ROR linkedList5: 
--------------------------------------------------------------------------------
  61:             return
  62:         prev_node = self.head
  63:         curr_node = self.head.next
  64:         while curr_node is not None:
- 65:             if curr_node.data == data:
+ 65:             if curr_node.data != data:
  66:                 prev_node.next = curr_node.next
  67:                 return
  68:             prev_node = curr_node
  69:             curr_node = curr_node.next
--------------------------------------------------------------------------------
[2.69726 s] survived
   - [#  45] ROR linkedList5: 
--------------------------------------------------------------------------------
  73:             return
  74:         if self.head is None:
  75:             return
  76:         curr_node = self.head
- 77:         if curr_node.data == data:
+ 77:         if curr_node.data != data:
  78:             curr_node = curr_node.next
  79:             return
  80:         while curr_node.next is not None:
  81:             if curr_node.next.data == data:
--------------------------------------------------------------------------------
[2.71716 s] survived
   - [#  46] ROR linkedList5: 
--------------------------------------------------------------------------------
  77:         if curr_node.data == data:
  78:             curr_node = curr_node.next
  79:             return
  80:         while curr_node.next is not None:
- 81:             if curr_node.next.data == data:
+ 81:             if curr_node.next.data != data:
  82:                 curr_node.next = curr_node.next.next
  83:                 return
  84:             curr_node = curr_node.next
  85:     
--------------------------------------------------------------------------------
[2.83096 s] survived
   - [#  47] SDI linkedList5: 
--------------------------------------------------------------------------------
   1: class Node(object):
   2:     
-  3:     def __init__(self, data, next=None):
-  4:         self.next = next
-  5:         self.data = data
-  6:     
+  3:     @staticmethod
+  4:     def __init__(self, data, next=None):
+  5:         self.next = next
+  6:         self.data = data
   7:     def __str__(self):
   8:         return self.data
   9: 
  10: 
--------------------------------------------------------------------------------
[7.40855 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/linkedList5/RANDOM/test_linkedList5_RANDOM.py:8: TypeError: Node.__init__() missing 1 required positional argument: 'data'

   - [#  48] SDI linkedList5: 
--------------------------------------------------------------------------------
   3:     def __init__(self, data, next=None):
   4:         self.next = next
   5:         self.data = data
   6:     
-  7:     def __str__(self):
-  8:         return self.data
-  9: 
+  7:     @staticmethod
+  8:     def __str__(self):
+  9:         return self.data
  10: 
  11: class LinkedList(object):
  12:     
  13:     def __init__(self, head=None):
--------------------------------------------------------------------------------
[7.43888 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/linkedList5/RANDOM/test_linkedList5_RANDOM.py:31: TypeError: Node.__str__() missing 1 required positional argument: 'self'

   - [#  49] SDI linkedList5: 
--------------------------------------------------------------------------------
   9: 
  10: 
  11: class LinkedList(object):
  12:     
- 13:     def __init__(self, head=None):
- 14:         self.head = head
- 15:     
+ 13:     @staticmethod
+ 14:     def __init__(self, head=None):
+ 15:         self.head = head
  16:     def __len__(self):
  17:         curr = self.head
  18:         counter = 0
  19:         while curr is not None:
--------------------------------------------------------------------------------
[7.27788 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/linkedList5/RANDOM/test_linkedList5_RANDOM.py:13: TypeError: LinkedList.__init__() missing 1 required positional argument: 'self'

   - [#  50] SDI linkedList5: 
--------------------------------------------------------------------------------
  12:     
  13:     def __init__(self, head=None):
  14:         self.head = head
  15:     
- 16:     def __len__(self):
- 17:         curr = self.head
- 18:         counter = 0
- 19:         while curr is not None:
- 20:             counter += 1
- 21:             curr = curr.next
- 22:         return counter
- 23:     
+ 16:     @staticmethod
+ 17:     def __len__(self):
+ 18:         curr = self.head
+ 19:         counter = 0
+ 20:         while curr is not None:
+ 21:             counter += 1
+ 22:             curr = curr.next
+ 23:         return counter
  24:     def insert_to_front(self, data):
  25:         if data is None:
  26:             return None
  27:         node = Node(data, self.head)
--------------------------------------------------------------------------------
[7.31894 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/linkedList5/RANDOM/test_linkedList5_RANDOM.py:14: TypeError: LinkedList.__len__() missing 1 required positional argument: 'self'

   - [#  51] SDI linkedList5: 
--------------------------------------------------------------------------------
  20:             counter += 1
  21:             curr = curr.next
  22:         return counter
  23:     
- 24:     def insert_to_front(self, data):
- 25:         if data is None:
- 26:             return None
- 27:         node = Node(data, self.head)
- 28:         self.head = node
- 29:         return node
- 30:     
+ 24:     @staticmethod
+ 25:     def insert_to_front(self, data):
+ 26:         if data is None:
+ 27:             return None
+ 28:         node = Node(data, self.head)
+ 29:         self.head = node
+ 30:         return node
  31:     def append(self, data):
  32:         if data is None:
  33:             return None
  34:         node = Node(data)
--------------------------------------------------------------------------------
[7.16274 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/linkedList5/RANDOM/test_linkedList5_RANDOM.py:265: TypeError: LinkedList.insert_to_front() missing 1 required positional argument: 'data'

   - [#  52] SDI linkedList5: 
--------------------------------------------------------------------------------
  27:         node = Node(data, self.head)
  28:         self.head = node
  29:         return node
  30:     
- 31:     def append(self, data):
- 32:         if data is None:
- 33:             return None
- 34:         node = Node(data)
- 35:         if self.head is None:
- 36:             self.head = node
- 37:             return node
- 38:         curr_node = self.head
- 39:         while curr_node.next is not None:
- 40:             curr_node = curr_node.next
- 41:         curr_node.next = node
- 42:         return node
- 43:     
+ 31:     @staticmethod
+ 32:     def append(self, data):
+ 33:         if data is None:
+ 34:             return None
+ 35:         node = Node(data)
+ 36:         if self.head is None:
+ 37:             self.head = node
+ 38:             return node
+ 39:         curr_node = self.head
+ 40:         while curr_node.next is not None:
+ 41:             curr_node = curr_node.next
+ 42:         curr_node.next = node
+ 43:         return node
  44:     def find(self, data):
  45:         if data is None:
  46:             return None
  47:         curr_node = self.head
--------------------------------------------------------------------------------
[7.15995 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/linkedList5/RANDOM/test_linkedList5_RANDOM.py:15: TypeError: LinkedList.append() missing 1 required positional argument: 'data'

   - [#  53] SDI linkedList5: 
--------------------------------------------------------------------------------
  40:             curr_node = curr_node.next
  41:         curr_node.next = node
  42:         return node
  43:     
- 44:     def find(self, data):
- 45:         if data is None:
- 46:             return None
- 47:         curr_node = self.head
- 48:         while curr_node is not None:
- 49:             if curr_node.data == data:
- 50:                 return curr_node
- 51:             curr_node = curr_node.next
- 52:         return None
- 53:     
+ 44:     @staticmethod
+ 45:     def find(self, data):
+ 46:         if data is None:
+ 47:             return None
+ 48:         curr_node = self.head
+ 49:         while curr_node is not None:
+ 50:             if curr_node.data == data:
+ 51:                 return curr_node
+ 52:             curr_node = curr_node.next
+ 53:         return None
  54:     def delete(self, data):
  55:         if data is None:
  56:             return
  57:         if self.head is None:
--------------------------------------------------------------------------------
[7.25309 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/linkedList5/RANDOM/test_linkedList5_RANDOM.py:4829: TypeError: LinkedList.find() missing 1 required positional argument: 'data'

   - [#  54] SDI linkedList5: 
--------------------------------------------------------------------------------
  50:                 return curr_node
  51:             curr_node = curr_node.next
  52:         return None
  53:     
- 54:     def delete(self, data):
- 55:         if data is None:
- 56:             return
- 57:         if self.head is None:
- 58:             return
- 59:         if self.head.data == data:
- 60:             self.head = self.head.next
- 61:             return
- 62:         prev_node = self.head
- 63:         curr_node = self.head.next
- 64:         while curr_node is not None:
- 65:             if curr_node.data == data:
- 66:                 prev_node.next = curr_node.next
- 67:                 return
- 68:             prev_node = curr_node
- 69:             curr_node = curr_node.next
- 70:     
+ 54:     @staticmethod
+ 55:     def delete(self, data):
+ 56:         if data is None:
+ 57:             return
+ 58:         if self.head is None:
+ 59:             return
+ 60:         if self.head.data == data:
+ 61:             self.head = self.head.next
+ 62:             return
+ 63:         prev_node = self.head
+ 64:         curr_node = self.head.next
+ 65:         while curr_node is not None:
+ 66:             if curr_node.data == data:
+ 67:                 prev_node.next = curr_node.next
+ 68:                 return
+ 69:             prev_node = curr_node
+ 70:             curr_node = curr_node.next
  71:     def delete_alt(self, data):
  72:         if data is None:
  73:             return
  74:         if self.head is None:
--------------------------------------------------------------------------------
[7.07363 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/linkedList5/RANDOM/test_linkedList5_RANDOM.py:173: TypeError: LinkedList.delete() missing 1 required positional argument: 'data'

   - [#  55] SDI linkedList5: 
--------------------------------------------------------------------------------
  67:                 return
  68:             prev_node = curr_node
  69:             curr_node = curr_node.next
  70:     
- 71:     def delete_alt(self, data):
- 72:         if data is None:
- 73:             return
- 74:         if self.head is None:
- 75:             return
- 76:         curr_node = self.head
- 77:         if curr_node.data == data:
- 78:             curr_node = curr_node.next
- 79:             return
- 80:         while curr_node.next is not None:
- 81:             if curr_node.next.data == data:
- 82:                 curr_node.next = curr_node.next.next
- 83:                 return
- 84:             curr_node = curr_node.next
- 85:     
+ 71:     @staticmethod
+ 72:     def delete_alt(self, data):
+ 73:         if data is None:
+ 74:             return
+ 75:         if self.head is None:
+ 76:             return
+ 77:         curr_node = self.head
+ 78:         if curr_node.data == data:
+ 79:             curr_node = curr_node.next
+ 80:             return
+ 81:         while curr_node.next is not None:
+ 82:             if curr_node.next.data == data:
+ 83:                 curr_node.next = curr_node.next.next
+ 84:                 return
+ 85:             curr_node = curr_node.next
  86:     def print_list(self):
  87:         curr_node = self.head
  88:         while curr_node is not None:
  89:             print(curr_node.data)
--------------------------------------------------------------------------------
[7.28634 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/linkedList5/RANDOM/test_linkedList5_RANDOM.py:530: TypeError: LinkedList.delete_alt() missing 1 required positional argument: 'data'

   - [#  56] SDI linkedList5: 
--------------------------------------------------------------------------------
  82:                 curr_node.next = curr_node.next.next
  83:                 return
  84:             curr_node = curr_node.next
  85:     
- 86:     def print_list(self):
- 87:         curr_node = self.head
- 88:         while curr_node is not None:
- 89:             print(curr_node.data)
- 90:             curr_node = curr_node.next
- 91:     
+ 86:     @staticmethod
+ 87:     def print_list(self):
+ 88:         curr_node = self.head
+ 89:         while curr_node is not None:
+ 90:             print(curr_node.data)
+ 91:             curr_node = curr_node.next
  92:     def get_all_data(self):
  93:         data = []
  94:         curr_node = self.head
  95:         while curr_node is not None:
--------------------------------------------------------------------------------
[7.75542 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/linkedList5/RANDOM/test_linkedList5_RANDOM.py:3495: TypeError: LinkedList.print_list() missing 1 required positional argument: 'self'

   - [#  57] SDI linkedList5: 
--------------------------------------------------------------------------------
  88:         while curr_node is not None:
  89:             print(curr_node.data)
  90:             curr_node = curr_node.next
  91:     
- 92:     def get_all_data(self):
- 93:         data = []
- 94:         curr_node = self.head
- 95:         while curr_node is not None:
- 96:             data.append(curr_node.data)
- 97:             curr_node = curr_node.next
- 98:         return data
+ 92:     @staticmethod
+ 93:     def get_all_data(self):
+ 94:         data = []
+ 95:         curr_node = self.head
+ 96:         while curr_node is not None:
+ 97:             data.append(curr_node.data)
+ 98:             curr_node = curr_node.next
+ 99:         return data
--------------------------------------------------------------------------------
[7.34371 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/linkedList5/RANDOM/test_linkedList5_RANDOM.py:217: TypeError: LinkedList.get_all_data() missing 1 required positional argument: 'self'

   - [#  58] SDL linkedList5: 
--------------------------------------------------------------------------------
   1: class Node(object):
   2:     
   3:     def __init__(self, data, next=None):
-  4:         self.next = next
+  4:         pass
   5:         self.data = data
   6:     
   7:     def __str__(self):
   8:         return self.data
--------------------------------------------------------------------------------
[7.26582 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_1

def test_case_1():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
>       assert len(linked_list_0) == 1

RANDOM/test_linkedList5_RANDOM.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f2723cdef20>

>   ???
E   AttributeError: 'Node' object has no attribute 'next'

linkedList5:21: AttributeError
   - [#  59] SDL linkedList5: 
--------------------------------------------------------------------------------
   1: class Node(object):
   2:     
   3:     def __init__(self, data, next=None):
   4:         self.next = next
-  5:         self.data = data
+  5:         pass
   6:     
   7:     def __str__(self):
   8:         return self.data
   9: 
--------------------------------------------------------------------------------
[7.35750 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_1

def test_case_1():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
>       assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
E       AttributeError: 'Node' object has no attribute 'data'

RANDOM/test_linkedList5_RANDOM.py:19: AttributeError
   - [#  60] SDL linkedList5: 
--------------------------------------------------------------------------------
   4:         self.next = next
   5:         self.data = data
   6:     
   7:     def __str__(self):
-  8:         return self.data
+  8:         pass
   9: 
  10: 
  11: class LinkedList(object):
  12:     
--------------------------------------------------------------------------------
[7.35328 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_2

def test_case_2():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
>       assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
E       AssertionError

RANDOM/test_linkedList5_RANDOM.py:32: AssertionError
   - [#  61] SDL linkedList5: 
--------------------------------------------------------------------------------
  10: 
  11: class LinkedList(object):
  12:     
  13:     def __init__(self, head=None):
- 14:         self.head = head
+ 14:         pass
  15:     
  16:     def __len__(self):
  17:         curr = self.head
  18:         counter = 0
--------------------------------------------------------------------------------
[7.18063 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_1

def test_case_1():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
>       assert len(linked_list_0) == 0

RANDOM/test_linkedList5_RANDOM.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f27268cd420>

>   ???
E   AttributeError: 'LinkedList' object has no attribute 'head'

linkedList5:17: AttributeError
   - [#  62] SDL linkedList5: 
--------------------------------------------------------------------------------
  13:     def __init__(self, head=None):
  14:         self.head = head
  15:     
  16:     def __len__(self):
- 17:         curr = self.head
+ 17:         pass
  18:         counter = 0
  19:         while curr is not None:
  20:             counter += 1
  21:             curr = curr.next
--------------------------------------------------------------------------------
[7.08760 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_1

def test_case_1():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
>       assert len(linked_list_0) == 0

RANDOM/test_linkedList5_RANDOM.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f2724fad750>

>   ???
E   UnboundLocalError: local variable 'curr' referenced before assignment

linkedList5:19: UnboundLocalError
   - [#  63] SDL linkedList5: 
--------------------------------------------------------------------------------
  14:         self.head = head
  15:     
  16:     def __len__(self):
  17:         curr = self.head
- 18:         counter = 0
+ 18:         pass
  19:         while curr is not None:
  20:             counter += 1
  21:             curr = curr.next
  22:         return counter
--------------------------------------------------------------------------------
[7.21035 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_1

def test_case_1():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
>       assert len(linked_list_0) == 0

RANDOM/test_linkedList5_RANDOM.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f2723939f30>

>   ???
E   UnboundLocalError: local variable 'counter' referenced before assignment

linkedList5:22: UnboundLocalError
   - [#  64] SDL linkedList5: 
--------------------------------------------------------------------------------
  17:         curr = self.head
  18:         counter = 0
  19:         while curr is not None:
  20:             counter += 1
- 21:             curr = curr.next
+ 21:             pass
  22:         return counter
  23:     
  24:     def insert_to_front(self, data):
  25:         if data is None:
--------------------------------------------------------------------------------
[13.49055 s] timeout
   - [#  65] SDL linkedList5: 
--------------------------------------------------------------------------------
  18:         counter = 0
  19:         while curr is not None:
  20:             counter += 1
  21:             curr = curr.next
- 22:         return counter
+ 22:         pass
  23:     
  24:     def insert_to_front(self, data):
  25:         if data is None:
  26:             return None
--------------------------------------------------------------------------------
[7.16864 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/linkedList5/RANDOM/test_linkedList5_RANDOM.py:14: TypeError: 'NoneType' object cannot be interpreted as an integer

   - [#  66] SDL linkedList5: 
--------------------------------------------------------------------------------
  22:         return counter
  23:     
  24:     def insert_to_front(self, data):
  25:         if data is None:
- 26:             return None
+ 26:             pass
  27:         node = Node(data, self.head)
  28:         self.head = node
  29:         return node
  30:     
--------------------------------------------------------------------------------
[2.63132 s] survived
   - [#  67] SDL linkedList5: 
--------------------------------------------------------------------------------
  23:     
  24:     def insert_to_front(self, data):
  25:         if data is None:
  26:             return None
- 27:         node = Node(data, self.head)
+ 27:         pass
  28:         self.head = node
  29:         return node
  30:     
  31:     def append(self, data):
--------------------------------------------------------------------------------
[7.42966 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_10

def test_case_10():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert var_1.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        bytes_1 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_1 = module_0.Node(bytes_1)
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_2 = linked_list_1.append(node_1)
        assert len(linked_list_1) == 1
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList5.Node'
        assert var_2.next is None
        assert f'{type(var_2.data).__module__}.{type(var_2.data).__qualname__}' == 'linkedList5.Node'
        var_3 = var_2.__str__()
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList5.Node'
        assert var_3.next is None
        assert var_3.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_2 = module_0.LinkedList()
        assert len(linked_list_2) == 0
        var_4 = linked_list_2.__len__()
        assert var_4 == 0
        var_5 = linked_list_1.delete(bytes_1)
        bytes_2 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_2 = module_0.Node(bytes_2)
        linked_list_3 = module_0.LinkedList()
        assert len(linked_list_3) == 0
        var_6 = linked_list_3.append(node_2)
        assert len(linked_list_3) == 1
        assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'linkedList5.Node'
        assert var_6.next is None
        assert f'{type(var_6.data).__module__}.{type(var_6.data).__qualname__}' == 'linkedList5.Node'
        var_7 = var_6.__str__()
        assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'linkedList5.Node'
        assert var_7.next is None
        assert var_7.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        var_8 = linked_list_3.get_all_data()
>       var_9 = linked_list_2.insert_to_front(linked_list_2)

RANDOM/test_linkedList5_RANDOM.py:265: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f2723d57a90>
data = <linkedList5.LinkedList object at 0x7f2723d57a90>

>   ???
E   NameError: name 'node' is not defined

linkedList5:28: NameError
   - [#  68] SDL linkedList5: 
--------------------------------------------------------------------------------
  24:     def insert_to_front(self, data):
  25:         if data is None:
  26:             return None
  27:         node = Node(data, self.head)
- 28:         self.head = node
+ 28:         pass
  29:         return node
  30:     
  31:     def append(self, data):
  32:         if data is None:
--------------------------------------------------------------------------------
[7.30452 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_10

def test_case_10():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert var_1.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        bytes_1 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_1 = module_0.Node(bytes_1)
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_2 = linked_list_1.append(node_1)
        assert len(linked_list_1) == 1
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList5.Node'
        assert var_2.next is None
        assert f'{type(var_2.data).__module__}.{type(var_2.data).__qualname__}' == 'linkedList5.Node'
        var_3 = var_2.__str__()
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList5.Node'
        assert var_3.next is None
        assert var_3.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_2 = module_0.LinkedList()
        assert len(linked_list_2) == 0
        var_4 = linked_list_2.__len__()
        assert var_4 == 0
        var_5 = linked_list_1.delete(bytes_1)
        bytes_2 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_2 = module_0.Node(bytes_2)
        linked_list_3 = module_0.LinkedList()
        assert len(linked_list_3) == 0
        var_6 = linked_list_3.append(node_2)
        assert len(linked_list_3) == 1
        assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'linkedList5.Node'
        assert var_6.next is None
        assert f'{type(var_6.data).__module__}.{type(var_6.data).__qualname__}' == 'linkedList5.Node'
        var_7 = var_6.__str__()
        assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'linkedList5.Node'
        assert var_7.next is None
        assert var_7.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        var_8 = linked_list_3.get_all_data()
        var_9 = linked_list_2.insert_to_front(linked_list_2)
>       assert len(linked_list_2) == 1
E       AssertionError

RANDOM/test_linkedList5_RANDOM.py:266: AssertionError
   - [#  69] SDL linkedList5: 
--------------------------------------------------------------------------------
  25:         if data is None:
  26:             return None
  27:         node = Node(data, self.head)
  28:         self.head = node
- 29:         return node
+ 29:         pass
  30:     
  31:     def append(self, data):
  32:         if data is None:
  33:             return None
--------------------------------------------------------------------------------
[7.46385 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_10

def test_case_10():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert var_1.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        bytes_1 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_1 = module_0.Node(bytes_1)
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_2 = linked_list_1.append(node_1)
        assert len(linked_list_1) == 1
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList5.Node'
        assert var_2.next is None
        assert f'{type(var_2.data).__module__}.{type(var_2.data).__qualname__}' == 'linkedList5.Node'
        var_3 = var_2.__str__()
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList5.Node'
        assert var_3.next is None
        assert var_3.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_2 = module_0.LinkedList()
        assert len(linked_list_2) == 0
        var_4 = linked_list_2.__len__()
        assert var_4 == 0
        var_5 = linked_list_1.delete(bytes_1)
        bytes_2 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_2 = module_0.Node(bytes_2)
        linked_list_3 = module_0.LinkedList()
        assert len(linked_list_3) == 0
        var_6 = linked_list_3.append(node_2)
        assert len(linked_list_3) == 1
        assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'linkedList5.Node'
        assert var_6.next is None
        assert f'{type(var_6.data).__module__}.{type(var_6.data).__qualname__}' == 'linkedList5.Node'
        var_7 = var_6.__str__()
        assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'linkedList5.Node'
        assert var_7.next is None
        assert var_7.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        var_8 = linked_list_3.get_all_data()
        var_9 = linked_list_2.insert_to_front(linked_list_2)
        assert len(linked_list_2) == 1
>       assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'linkedList5.Node'
E       AssertionError

RANDOM/test_linkedList5_RANDOM.py:267: AssertionError
   - [#  70] SDL linkedList5: 
--------------------------------------------------------------------------------
  29:         return node
  30:     
  31:     def append(self, data):
  32:         if data is None:
- 33:             return None
+ 33:             pass
  34:         node = Node(data)
  35:         if self.head is None:
  36:             self.head = node
  37:             return node
--------------------------------------------------------------------------------
[8.17455 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_889

def test_case_889():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert var_1.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_2 = linked_list_1.__len__()
        assert var_2 == 0
        var_3 = linked_list_0.delete(bytes_0)
        node_1 = module_0.Node(node_0)
        linked_list_2 = module_0.LinkedList()
        assert len(linked_list_2) == 0
        var_4 = linked_list_2.__len__()
        assert var_4 == 0
        var_5 = linked_list_2.delete(var_4)
        linked_list_3 = module_0.LinkedList()
        assert len(linked_list_3) == 0
        var_6 = linked_list_3.__len__()
        assert var_6 == 0
        var_7 = linked_list_3.__len__()
        assert var_7 == 0
        linked_list_4 = module_0.LinkedList()
        assert len(linked_list_4) == 0
        var_8 = linked_list_4.get_all_data()
        linked_list_5 = module_0.LinkedList()
        assert len(linked_list_5) == 0
        complex_0 = -1571.872432 - 1247.364j
        linked_list_6 = module_0.LinkedList()
        assert len(linked_list_6) == 0
        var_9 = linked_list_6.delete(complex_0)
        var_10 = linked_list_6.get_all_data()
        var_11 = var_10.append(var_10)
        node_2 = module_0.Node(var_11, var_11)
        var_12 = var_10.__str__()
        linked_list_7 = module_0.LinkedList(var_11)
        assert len(linked_list_7) == 0
        complex_1 = -1571.872432 - 1247.364j
        linked_list_8 = module_0.LinkedList()
        assert len(linked_list_8) == 0
        var_13 = linked_list_8.delete(complex_1)
        var_14 = linked_list_8.find(complex_1)
        linked_list_9 = module_0.LinkedList()
        assert len(linked_list_9) == 0
        bytes_1 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_3 = module_0.Node(bytes_1)
        var_15 = linked_list_8.delete_alt(var_14)
        var_16 = linked_list_9.delete(var_15)
        var_17 = linked_list_6.append(var_11)
        var_18 = var_17.__str__()
>       assert var_18 == 'None'
E       AssertionError

RANDOM/test_linkedList5_RANDOM.py:53274: AssertionError
   - [#  71] SDL linkedList5: 
--------------------------------------------------------------------------------
  30:     
  31:     def append(self, data):
  32:         if data is None:
  33:             return None
- 34:         node = Node(data)
+ 34:         pass
  35:         if self.head is None:
  36:             self.head = node
  37:             return node
  38:         curr_node = self.head
--------------------------------------------------------------------------------
[7.30221 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_1

def test_case_1():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
>       var_0 = linked_list_0.append(node_0)

RANDOM/test_linkedList5_RANDOM.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f2723d195a0>
data = <linkedList5.Node object at 0x7f2723d1a920>

>   ???
E   NameError: name 'node' is not defined

linkedList5:36: NameError
   - [#  72] SDL linkedList5: 
--------------------------------------------------------------------------------
  32:         if data is None:
  33:             return None
  34:         node = Node(data)
  35:         if self.head is None:
- 36:             self.head = node
+ 36:             pass
  37:             return node
  38:         curr_node = self.head
  39:         while curr_node.next is not None:
  40:             curr_node = curr_node.next
--------------------------------------------------------------------------------
[7.16415 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_1

def test_case_1():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
>       assert len(linked_list_0) == 1
E       AssertionError

RANDOM/test_linkedList5_RANDOM.py:16: AssertionError
   - [#  73] SDL linkedList5: 
--------------------------------------------------------------------------------
  33:             return None
  34:         node = Node(data)
  35:         if self.head is None:
  36:             self.head = node
- 37:             return node
+ 37:             pass
  38:         curr_node = self.head
  39:         while curr_node.next is not None:
  40:             curr_node = curr_node.next
  41:         curr_node.next = node
--------------------------------------------------------------------------------
[13.49071 s] timeout
   - [#  74] SDL linkedList5: 
--------------------------------------------------------------------------------
  34:         node = Node(data)
  35:         if self.head is None:
  36:             self.head = node
  37:             return node
- 38:         curr_node = self.head
+ 38:         pass
  39:         while curr_node.next is not None:
  40:             curr_node = curr_node.next
  41:         curr_node.next = node
  42:         return node
--------------------------------------------------------------------------------
[7.17357 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_43

def test_case_43():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert var_1.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        var_2 = linked_list_0.get_all_data()
        bytes_1 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_1 = module_0.Node(bytes_1)
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_3 = linked_list_1.append(node_1)
        assert len(linked_list_1) == 1
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList5.Node'
        assert var_3.next is None
        assert f'{type(var_3.data).__module__}.{type(var_3.data).__qualname__}' == 'linkedList5.Node'
        bool_0 = True
        node_2 = module_0.Node(bool_0)
        var_4 = node_2.__str__()
        node_3 = module_0.Node(var_4)
        bytes_2 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_4 = module_0.Node(bytes_2)
        linked_list_2 = module_0.LinkedList()
        assert len(linked_list_2) == 0
        var_5 = linked_list_2.append(node_4)
        assert len(linked_list_2) == 1
        assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'linkedList5.Node'
        assert var_5.next is None
        assert f'{type(var_5.data).__module__}.{type(var_5.data).__qualname__}' == 'linkedList5.Node'
        var_6 = var_5.__str__()
        assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'linkedList5.Node'
        assert var_6.next is None
        assert var_6.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_3 = module_0.LinkedList()
        assert len(linked_list_3) == 0
        var_7 = linked_list_3.__len__()
        assert var_7 == 0
        var_8 = linked_list_2.delete(bytes_2)
        bytes_3 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_5 = module_0.Node(bytes_3)
        linked_list_4 = module_0.LinkedList()
        assert len(linked_list_4) == 0
        var_9 = linked_list_4.append(node_5)
        assert len(linked_list_4) == 1
        assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'linkedList5.Node'
        assert var_9.next is None
        assert f'{type(var_9.data).__module__}.{type(var_9.data).__qualname__}' == 'linkedList5.Node'
        var_10 = var_9.__str__()
        assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'linkedList5.Node'
        assert var_10.next is None
        assert var_10.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_5 = module_0.LinkedList()
        assert len(linked_list_5) == 0
        var_11 = linked_list_5.__len__()
        assert var_11 == 0
        complex_0 = -1571.872432 - 1247.364j
        linked_list_6 = module_0.LinkedList()
        assert len(linked_list_6) == 0
        var_12 = linked_list_6.delete(complex_0)
        bool_1 = True
        node_6 = module_0.Node(bool_1)
        var_13 = node_6.__str__()
        bytes_4 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_7 = module_0.Node(bytes_4)
        bytes_5 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_8 = module_0.Node(bytes_5)
        linked_list_7 = module_0.LinkedList()
        assert len(linked_list_7) == 0
        var_14 = linked_list_7.append(node_8)
        assert len(linked_list_7) == 1
        assert f'{type(var_14).__module__}.{type(var_14).__qualname__}' == 'linkedList5.Node'
        assert var_14.next is None
        assert f'{type(var_14.data).__module__}.{type(var_14.data).__qualname__}' == 'linkedList5.Node'
        var_15 = node_7.__str__()
        bytes_6 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_9 = module_0.Node(bytes_6)
>       var_16 = linked_list_7.append(bytes_3)

RANDOM/test_linkedList5_RANDOM.py:2171: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f2724fad990>
data = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'

>   ???
E   UnboundLocalError: local variable 'curr_node' referenced before assignment

linkedList5:39: UnboundLocalError
   - [#  75] SDL linkedList5: 
--------------------------------------------------------------------------------
  36:             self.head = node
  37:             return node
  38:         curr_node = self.head
  39:         while curr_node.next is not None:
- 40:             curr_node = curr_node.next
+ 40:             pass
  41:         curr_node.next = node
  42:         return node
  43:     
  44:     def find(self, data):
--------------------------------------------------------------------------------
[2.72830 s] survived
   - [#  76] SDL linkedList5: 
--------------------------------------------------------------------------------
  37:             return node
  38:         curr_node = self.head
  39:         while curr_node.next is not None:
  40:             curr_node = curr_node.next
- 41:         curr_node.next = node
+ 41:         pass
  42:         return node
  43:     
  44:     def find(self, data):
  45:         if data is None:
--------------------------------------------------------------------------------
[7.12127 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_43

def test_case_43():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert var_1.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        var_2 = linked_list_0.get_all_data()
        bytes_1 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_1 = module_0.Node(bytes_1)
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_3 = linked_list_1.append(node_1)
        assert len(linked_list_1) == 1
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList5.Node'
        assert var_3.next is None
        assert f'{type(var_3.data).__module__}.{type(var_3.data).__qualname__}' == 'linkedList5.Node'
        bool_0 = True
        node_2 = module_0.Node(bool_0)
        var_4 = node_2.__str__()
        node_3 = module_0.Node(var_4)
        bytes_2 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_4 = module_0.Node(bytes_2)
        linked_list_2 = module_0.LinkedList()
        assert len(linked_list_2) == 0
        var_5 = linked_list_2.append(node_4)
        assert len(linked_list_2) == 1
        assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'linkedList5.Node'
        assert var_5.next is None
        assert f'{type(var_5.data).__module__}.{type(var_5.data).__qualname__}' == 'linkedList5.Node'
        var_6 = var_5.__str__()
        assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'linkedList5.Node'
        assert var_6.next is None
        assert var_6.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_3 = module_0.LinkedList()
        assert len(linked_list_3) == 0
        var_7 = linked_list_3.__len__()
        assert var_7 == 0
        var_8 = linked_list_2.delete(bytes_2)
        bytes_3 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_5 = module_0.Node(bytes_3)
        linked_list_4 = module_0.LinkedList()
        assert len(linked_list_4) == 0
        var_9 = linked_list_4.append(node_5)
        assert len(linked_list_4) == 1
        assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'linkedList5.Node'
        assert var_9.next is None
        assert f'{type(var_9.data).__module__}.{type(var_9.data).__qualname__}' == 'linkedList5.Node'
        var_10 = var_9.__str__()
        assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'linkedList5.Node'
        assert var_10.next is None
        assert var_10.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_5 = module_0.LinkedList()
        assert len(linked_list_5) == 0
        var_11 = linked_list_5.__len__()
        assert var_11 == 0
        complex_0 = -1571.872432 - 1247.364j
        linked_list_6 = module_0.LinkedList()
        assert len(linked_list_6) == 0
        var_12 = linked_list_6.delete(complex_0)
        bool_1 = True
        node_6 = module_0.Node(bool_1)
        var_13 = node_6.__str__()
        bytes_4 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_7 = module_0.Node(bytes_4)
        bytes_5 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_8 = module_0.Node(bytes_5)
        linked_list_7 = module_0.LinkedList()
        assert len(linked_list_7) == 0
        var_14 = linked_list_7.append(node_8)
        assert len(linked_list_7) == 1
        assert f'{type(var_14).__module__}.{type(var_14).__qualname__}' == 'linkedList5.Node'
        assert var_14.next is None
        assert f'{type(var_14.data).__module__}.{type(var_14.data).__qualname__}' == 'linkedList5.Node'
        var_15 = node_7.__str__()
        bytes_6 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_9 = module_0.Node(bytes_6)
        var_16 = linked_list_7.append(bytes_3)
>       assert len(linked_list_7) == 2
E       AssertionError

RANDOM/test_linkedList5_RANDOM.py:2172: AssertionError
   - [#  77] SDL linkedList5: 
--------------------------------------------------------------------------------
  38:         curr_node = self.head
  39:         while curr_node.next is not None:
  40:             curr_node = curr_node.next
  41:         curr_node.next = node
- 42:         return node
+ 42:         pass
  43:     
  44:     def find(self, data):
  45:         if data is None:
  46:             return None
--------------------------------------------------------------------------------
[7.45091 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_43

def test_case_43():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert var_1.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        var_2 = linked_list_0.get_all_data()
        bytes_1 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_1 = module_0.Node(bytes_1)
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_3 = linked_list_1.append(node_1)
        assert len(linked_list_1) == 1
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList5.Node'
        assert var_3.next is None
        assert f'{type(var_3.data).__module__}.{type(var_3.data).__qualname__}' == 'linkedList5.Node'
        bool_0 = True
        node_2 = module_0.Node(bool_0)
        var_4 = node_2.__str__()
        node_3 = module_0.Node(var_4)
        bytes_2 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_4 = module_0.Node(bytes_2)
        linked_list_2 = module_0.LinkedList()
        assert len(linked_list_2) == 0
        var_5 = linked_list_2.append(node_4)
        assert len(linked_list_2) == 1
        assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'linkedList5.Node'
        assert var_5.next is None
        assert f'{type(var_5.data).__module__}.{type(var_5.data).__qualname__}' == 'linkedList5.Node'
        var_6 = var_5.__str__()
        assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'linkedList5.Node'
        assert var_6.next is None
        assert var_6.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_3 = module_0.LinkedList()
        assert len(linked_list_3) == 0
        var_7 = linked_list_3.__len__()
        assert var_7 == 0
        var_8 = linked_list_2.delete(bytes_2)
        bytes_3 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_5 = module_0.Node(bytes_3)
        linked_list_4 = module_0.LinkedList()
        assert len(linked_list_4) == 0
        var_9 = linked_list_4.append(node_5)
        assert len(linked_list_4) == 1
        assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'linkedList5.Node'
        assert var_9.next is None
        assert f'{type(var_9.data).__module__}.{type(var_9.data).__qualname__}' == 'linkedList5.Node'
        var_10 = var_9.__str__()
        assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'linkedList5.Node'
        assert var_10.next is None
        assert var_10.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_5 = module_0.LinkedList()
        assert len(linked_list_5) == 0
        var_11 = linked_list_5.__len__()
        assert var_11 == 0
        complex_0 = -1571.872432 - 1247.364j
        linked_list_6 = module_0.LinkedList()
        assert len(linked_list_6) == 0
        var_12 = linked_list_6.delete(complex_0)
        bool_1 = True
        node_6 = module_0.Node(bool_1)
        var_13 = node_6.__str__()
        bytes_4 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_7 = module_0.Node(bytes_4)
        bytes_5 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_8 = module_0.Node(bytes_5)
        linked_list_7 = module_0.LinkedList()
        assert len(linked_list_7) == 0
        var_14 = linked_list_7.append(node_8)
        assert len(linked_list_7) == 1
        assert f'{type(var_14).__module__}.{type(var_14).__qualname__}' == 'linkedList5.Node'
        assert var_14.next is None
        assert f'{type(var_14.data).__module__}.{type(var_14.data).__qualname__}' == 'linkedList5.Node'
        var_15 = node_7.__str__()
        bytes_6 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_9 = module_0.Node(bytes_6)
        var_16 = linked_list_7.append(bytes_3)
        assert len(linked_list_7) == 2
        assert f'{type(var_14.next).__module__}.{type(var_14.next).__qualname__}' == 'linkedList5.Node'
>       assert f'{type(var_16).__module__}.{type(var_16).__qualname__}' == 'linkedList5.Node'
E       AssertionError

RANDOM/test_linkedList5_RANDOM.py:2174: AssertionError
   - [#  78] SDL linkedList5: 
--------------------------------------------------------------------------------
  42:         return node
  43:     
  44:     def find(self, data):
  45:         if data is None:
- 46:             return None
+ 46:             pass
  47:         curr_node = self.head
  48:         while curr_node is not None:
  49:             if curr_node.data == data:
  50:                 return curr_node
--------------------------------------------------------------------------------
[9.28314 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_2071

def test_case_2071():
        bool_0 = True
        none_type_0 = None
        complex_0 = 2248.5481 + 207.1799j
        linked_list_0 = module_0.LinkedList(complex_0)
>       var_0 = linked_list_0.find(none_type_0)

RANDOM/test_linkedList5_RANDOM.py:118069: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f27268c4ac0>, data = None

>   ???
E   AttributeError: 'complex' object has no attribute 'data'

linkedList5:49: AttributeError
   - [#  79] SDL linkedList5: 
--------------------------------------------------------------------------------
  43:     
  44:     def find(self, data):
  45:         if data is None:
  46:             return None
- 47:         curr_node = self.head
+ 47:         pass
  48:         while curr_node is not None:
  49:             if curr_node.data == data:
  50:                 return curr_node
  51:             curr_node = curr_node.next
--------------------------------------------------------------------------------
[7.53434 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_86

def test_case_86():
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.__len__()
        assert var_0 == 0
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_1 = linked_list_1.append(node_0)
        assert len(linked_list_1) == 1
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert f'{type(var_1.data).__module__}.{type(var_1.data).__qualname__}' == 'linkedList5.Node'
        var_2 = var_1.__str__()
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList5.Node'
        assert var_2.next is None
        assert var_2.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        str_0 = 'JLcd4+\n\\'
        var_3 = linked_list_0.append(str_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList5.Node'
        assert var_3.next is None
        assert var_3.data == 'JLcd4+\n\\'
        bytes_1 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_1 = module_0.Node(bytes_1)
        linked_list_2 = module_0.LinkedList()
        assert len(linked_list_2) == 0
        var_4 = linked_list_2.append(node_1)
        assert len(linked_list_2) == 1
        assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'linkedList5.Node'
        assert var_4.next is None
        assert f'{type(var_4.data).__module__}.{type(var_4.data).__qualname__}' == 'linkedList5.Node'
        var_5 = var_4.__str__()
        assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'linkedList5.Node'
        assert var_5.next is None
        assert var_5.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_3 = module_0.LinkedList()
        assert len(linked_list_3) == 0
        var_6 = linked_list_3.__len__()
        assert var_6 == 0
        bytes_2 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_2 = module_0.Node(bytes_2)
        linked_list_4 = module_0.LinkedList()
        assert len(linked_list_4) == 0
        var_7 = linked_list_4.append(node_2)
        assert len(linked_list_4) == 1
        assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'linkedList5.Node'
        assert var_7.next is None
        assert f'{type(var_7.data).__module__}.{type(var_7.data).__qualname__}' == 'linkedList5.Node'
        var_8 = var_7.__str__()
        assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'linkedList5.Node'
        assert var_8.next is None
        assert var_8.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        bytes_3 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_3 = module_0.Node(bytes_3)
        bytes_4 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_4 = module_0.Node(bytes_4)
        linked_list_5 = module_0.LinkedList()
        assert len(linked_list_5) == 0
        var_9 = linked_list_5.append(node_4)
        assert len(linked_list_5) == 1
        assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'linkedList5.Node'
        assert var_9.next is None
        assert f'{type(var_9.data).__module__}.{type(var_9.data).__qualname__}' == 'linkedList5.Node'
        var_10 = node_3.__str__()
        var_11 = var_10.find(bytes_3)
        linked_list_6 = module_0.LinkedList()
        assert len(linked_list_6) == 0
        var_12 = linked_list_6.__len__()
        assert var_12 == 0
        complex_0 = -1571.872432 - 1247.364j
        linked_list_7 = module_0.LinkedList()
        assert len(linked_list_7) == 0
        var_13 = linked_list_7.delete(complex_0)
        bytes_5 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_5 = module_0.Node(bytes_5)
        bytes_6 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_6 = module_0.Node(bytes_6)
        linked_list_8 = module_0.LinkedList()
        assert len(linked_list_8) == 0
        var_14 = linked_list_8.append(node_6)
        assert len(linked_list_8) == 1
        assert f'{type(var_14).__module__}.{type(var_14).__qualname__}' == 'linkedList5.Node'
        assert var_14.next is None
        assert f'{type(var_14.data).__module__}.{type(var_14.data).__qualname__}' == 'linkedList5.Node'
        var_15 = node_5.__str__()
        bytes_7 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_7 = module_0.Node(bytes_7)
        bytes_8 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_8 = module_0.Node(bytes_8)
        linked_list_9 = module_0.LinkedList()
        assert len(linked_list_9) == 0
        var_16 = linked_list_9.append(node_8)
        assert len(linked_list_9) == 1
        assert f'{type(var_16).__module__}.{type(var_16).__qualname__}' == 'linkedList5.Node'
        assert var_16.next is None
        assert f'{type(var_16.data).__module__}.{type(var_16.data).__qualname__}' == 'linkedList5.Node'
        var_17 = var_16.__str__()
        assert f'{type(var_17).__module__}.{type(var_17).__qualname__}' == 'linkedList5.Node'
        assert var_17.next is None
        assert var_17.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_10 = module_0.LinkedList()
        assert len(linked_list_10) == 0
        bytes_9 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_9 = module_0.Node(bytes_9)
        bytes_10 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_10 = module_0.Node(bytes_10)
        linked_list_11 = module_0.LinkedList()
        assert len(linked_list_11) == 0
        var_18 = linked_list_11.append(node_10)
        assert len(linked_list_11) == 1
        assert f'{type(var_18).__module__}.{type(var_18).__qualname__}' == 'linkedList5.Node'
        assert var_18.next is None
        assert f'{type(var_18.data).__module__}.{type(var_18.data).__qualname__}' == 'linkedList5.Node'
        var_19 = var_18.__str__()
        assert f'{type(var_19).__module__}.{type(var_19).__qualname__}' == 'linkedList5.Node'
        assert var_19.next is None
        assert var_19.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
>       var_20 = linked_list_10.find(linked_list_11)

RANDOM/test_linkedList5_RANDOM.py:4829: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f2723d18730>
data = <linkedList5.LinkedList object at 0x7f2723d1b520>

>   ???
E   UnboundLocalError: local variable 'curr_node' referenced before assignment

linkedList5:48: UnboundLocalError
   - [#  80] SDL linkedList5: 
--------------------------------------------------------------------------------
  46:             return None
  47:         curr_node = self.head
  48:         while curr_node is not None:
  49:             if curr_node.data == data:
- 50:                 return curr_node
+ 50:                 pass
  51:             curr_node = curr_node.next
  52:         return None
  53:     
  54:     def delete(self, data):
--------------------------------------------------------------------------------
[2.73116 s] survived
   - [#  81] SDL linkedList5: 
--------------------------------------------------------------------------------
  47:         curr_node = self.head
  48:         while curr_node is not None:
  49:             if curr_node.data == data:
  50:                 return curr_node
- 51:             curr_node = curr_node.next
+ 51:             pass
  52:         return None
  53:     
  54:     def delete(self, data):
  55:         if data is None:
--------------------------------------------------------------------------------
[13.49027 s] timeout
   - [#  82] SDL linkedList5: 
--------------------------------------------------------------------------------
  48:         while curr_node is not None:
  49:             if curr_node.data == data:
  50:                 return curr_node
  51:             curr_node = curr_node.next
- 52:         return None
+ 52:         pass
  53:     
  54:     def delete(self, data):
  55:         if data is None:
  56:             return
--------------------------------------------------------------------------------
[2.80305 s] survived
   - [#  83] SDL linkedList5: 
--------------------------------------------------------------------------------
  52:         return None
  53:     
  54:     def delete(self, data):
  55:         if data is None:
- 56:             return
+ 56:             pass
  57:         if self.head is None:
  58:             return
  59:         if self.head.data == data:
  60:             self.head = self.head.next
--------------------------------------------------------------------------------
[2.67744 s] survived
   - [#  84] SDL linkedList5: 
--------------------------------------------------------------------------------
  54:     def delete(self, data):
  55:         if data is None:
  56:             return
  57:         if self.head is None:
- 58:             return
+ 58:             pass
  59:         if self.head.data == data:
  60:             self.head = self.head.next
  61:             return
  62:         prev_node = self.head
--------------------------------------------------------------------------------
[7.16522 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_19

def test_case_19():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert var_1.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_2 = linked_list_1.__len__()
        assert var_2 == 0
        bool_0 = True
        node_1 = module_0.Node(bool_0)
        var_3 = node_1.__str__()
>       var_4 = linked_list_1.delete(var_2)

RANDOM/test_linkedList5_RANDOM.py:616: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f2723fdc8b0>, data = 0

>   ???
E   AttributeError: 'NoneType' object has no attribute 'data'

linkedList5:59: AttributeError
   - [#  85] SDL linkedList5: 
--------------------------------------------------------------------------------
  56:             return
  57:         if self.head is None:
  58:             return
  59:         if self.head.data == data:
- 60:             self.head = self.head.next
+ 60:             pass
  61:             return
  62:         prev_node = self.head
  63:         curr_node = self.head.next
  64:         while curr_node is not None:
--------------------------------------------------------------------------------
[7.22401 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_115

def test_case_115():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        bytes_1 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_1 = module_0.Node(bytes_1)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_1)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert var_1.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        bytes_2 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_2 = module_0.Node(bytes_2)
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_2 = linked_list_1.append(node_2)
        assert len(linked_list_1) == 1
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList5.Node'
        assert var_2.next is None
        assert f'{type(var_2.data).__module__}.{type(var_2.data).__qualname__}' == 'linkedList5.Node'
        var_3 = var_2.__str__()
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList5.Node'
        assert var_3.next is None
        assert var_3.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_2 = module_0.LinkedList()
        assert len(linked_list_2) == 0
        var_4 = linked_list_2.__len__()
        assert var_4 == 0
        var_5 = linked_list_1.delete(bytes_2)
        complex_0 = -1571.872432 - 1247.364j
        linked_list_3 = module_0.LinkedList()
        assert len(linked_list_3) == 0
        var_6 = linked_list_3.delete(complex_0)
        var_7 = linked_list_3.get_all_data()
        var_8 = var_7.append(var_7)
        node_3 = module_0.Node(var_8, var_8)
        var_9 = linked_list_0.delete(var_1)
>       assert len(linked_list_0) == 0
E       AssertionError

RANDOM/test_linkedList5_RANDOM.py:6580: AssertionError
   - [#  86] SDL linkedList5: 
--------------------------------------------------------------------------------
  57:         if self.head is None:
  58:             return
  59:         if self.head.data == data:
  60:             self.head = self.head.next
- 61:             return
+ 61:             pass
  62:         prev_node = self.head
  63:         curr_node = self.head.next
  64:         while curr_node is not None:
  65:             if curr_node.data == data:
--------------------------------------------------------------------------------
[7.26836 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_115

def test_case_115():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        bytes_1 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_1 = module_0.Node(bytes_1)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_1)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert var_1.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        bytes_2 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_2 = module_0.Node(bytes_2)
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_2 = linked_list_1.append(node_2)
        assert len(linked_list_1) == 1
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList5.Node'
        assert var_2.next is None
        assert f'{type(var_2.data).__module__}.{type(var_2.data).__qualname__}' == 'linkedList5.Node'
        var_3 = var_2.__str__()
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList5.Node'
        assert var_3.next is None
        assert var_3.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_2 = module_0.LinkedList()
        assert len(linked_list_2) == 0
        var_4 = linked_list_2.__len__()
        assert var_4 == 0
        var_5 = linked_list_1.delete(bytes_2)
        complex_0 = -1571.872432 - 1247.364j
        linked_list_3 = module_0.LinkedList()
        assert len(linked_list_3) == 0
        var_6 = linked_list_3.delete(complex_0)
        var_7 = linked_list_3.get_all_data()
        var_8 = var_7.append(var_7)
        node_3 = module_0.Node(var_8, var_8)
>       var_9 = linked_list_0.delete(var_1)

RANDOM/test_linkedList5_RANDOM.py:6579: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f2723da7490>
data = <linkedList5.Node object at 0x7f2723da7b50>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

linkedList5:63: AttributeError
   - [#  87] SDL linkedList5: 
--------------------------------------------------------------------------------
  58:             return
  59:         if self.head.data == data:
  60:             self.head = self.head.next
  61:             return
- 62:         prev_node = self.head
+ 62:         pass
  63:         curr_node = self.head.next
  64:         while curr_node is not None:
  65:             if curr_node.data == data:
  66:                 prev_node.next = curr_node.next
--------------------------------------------------------------------------------
[2.74858 s] survived
   - [#  88] SDL linkedList5: 
--------------------------------------------------------------------------------
  59:         if self.head.data == data:
  60:             self.head = self.head.next
  61:             return
  62:         prev_node = self.head
- 63:         curr_node = self.head.next
+ 63:         pass
  64:         while curr_node is not None:
  65:             if curr_node.data == data:
  66:                 prev_node.next = curr_node.next
  67:                 return
--------------------------------------------------------------------------------
[7.54380 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_7

def test_case_7():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert var_1.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_2 = linked_list_1.__len__()
        assert var_2 == 0
>       var_3 = linked_list_0.delete(bytes_0)

RANDOM/test_linkedList5_RANDOM.py:173: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f2726d97f10>
data = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'

>   ???
E   UnboundLocalError: local variable 'curr_node' referenced before assignment

linkedList5:64: UnboundLocalError
   - [#  89] SDL linkedList5: 
--------------------------------------------------------------------------------
  62:         prev_node = self.head
  63:         curr_node = self.head.next
  64:         while curr_node is not None:
  65:             if curr_node.data == data:
- 66:                 prev_node.next = curr_node.next
+ 66:                 pass
  67:                 return
  68:             prev_node = curr_node
  69:             curr_node = curr_node.next
  70:     
--------------------------------------------------------------------------------
[2.70848 s] survived
   - [#  90] SDL linkedList5: 
--------------------------------------------------------------------------------
  63:         curr_node = self.head.next
  64:         while curr_node is not None:
  65:             if curr_node.data == data:
  66:                 prev_node.next = curr_node.next
- 67:                 return
+ 67:                 pass
  68:             prev_node = curr_node
  69:             curr_node = curr_node.next
  70:     
  71:     def delete_alt(self, data):
--------------------------------------------------------------------------------
[2.73412 s] survived
   - [#  91] SDL linkedList5: 
--------------------------------------------------------------------------------
  64:         while curr_node is not None:
  65:             if curr_node.data == data:
  66:                 prev_node.next = curr_node.next
  67:                 return
- 68:             prev_node = curr_node
+ 68:             pass
  69:             curr_node = curr_node.next
  70:     
  71:     def delete_alt(self, data):
  72:         if data is None:
--------------------------------------------------------------------------------
[2.72695 s] survived
   - [#  92] SDL linkedList5: 
--------------------------------------------------------------------------------
  65:             if curr_node.data == data:
  66:                 prev_node.next = curr_node.next
  67:                 return
  68:             prev_node = curr_node
- 69:             curr_node = curr_node.next
+ 69:             pass
  70:     
  71:     def delete_alt(self, data):
  72:         if data is None:
  73:             return
--------------------------------------------------------------------------------
[2.73832 s] survived
   - [#  93] SDL linkedList5: 
--------------------------------------------------------------------------------
  69:             curr_node = curr_node.next
  70:     
  71:     def delete_alt(self, data):
  72:         if data is None:
- 73:             return
+ 73:             pass
  74:         if self.head is None:
  75:             return
  76:         curr_node = self.head
  77:         if curr_node.data == data:
--------------------------------------------------------------------------------
[2.75969 s] survived
   - [#  94] SDL linkedList5: 
--------------------------------------------------------------------------------
  71:     def delete_alt(self, data):
  72:         if data is None:
  73:             return
  74:         if self.head is None:
- 75:             return
+ 75:             pass
  76:         curr_node = self.head
  77:         if curr_node.data == data:
  78:             curr_node = curr_node.next
  79:             return
--------------------------------------------------------------------------------
[7.16842 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_17

def test_case_17():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert var_1.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_2 = linked_list_1.__len__()
        assert var_2 == 0
        bytes_1 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_1 = module_0.Node(bytes_1)
        linked_list_2 = module_0.LinkedList()
        assert len(linked_list_2) == 0
        var_3 = linked_list_2.append(node_1)
        assert len(linked_list_2) == 1
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList5.Node'
        assert var_3.next is None
        assert f'{type(var_3.data).__module__}.{type(var_3.data).__qualname__}' == 'linkedList5.Node'
        var_4 = var_3.__str__()
        assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'linkedList5.Node'
        assert var_4.next is None
        assert var_4.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_3 = module_0.LinkedList()
        assert len(linked_list_3) == 0
        var_5 = linked_list_3.__len__()
        assert var_5 == 0
        var_6 = linked_list_2.delete(bytes_1)
        bool_0 = True
        node_2 = module_0.Node(bool_0)
        var_7 = node_2.__str__()
>       var_8 = linked_list_1.delete_alt(bytes_0)

RANDOM/test_linkedList5_RANDOM.py:530: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f27268a21d0>
data = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'

>   ???
E   AttributeError: 'NoneType' object has no attribute 'data'

linkedList5:77: AttributeError
   - [#  95] SDL linkedList5: 
--------------------------------------------------------------------------------
  72:         if data is None:
  73:             return
  74:         if self.head is None:
  75:             return
- 76:         curr_node = self.head
+ 76:         pass
  77:         if curr_node.data == data:
  78:             curr_node = curr_node.next
  79:             return
  80:         while curr_node.next is not None:
--------------------------------------------------------------------------------
[7.29077 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_44

def test_case_44():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
>       var_1 = linked_list_0.delete_alt(var_0)

RANDOM/test_linkedList5_RANDOM.py:2188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f2724faa3b0>
data = <linkedList5.Node object at 0x7f2724fa82e0>

>   ???
E   UnboundLocalError: local variable 'curr_node' referenced before assignment

linkedList5:77: UnboundLocalError
   - [#  96] SDL linkedList5: 
--------------------------------------------------------------------------------
  74:         if self.head is None:
  75:             return
  76:         curr_node = self.head
  77:         if curr_node.data == data:
- 78:             curr_node = curr_node.next
+ 78:             pass
  79:             return
  80:         while curr_node.next is not None:
  81:             if curr_node.next.data == data:
  82:                 curr_node.next = curr_node.next.next
--------------------------------------------------------------------------------
[2.72663 s] survived
   - [#  97] SDL linkedList5: 
--------------------------------------------------------------------------------
  75:             return
  76:         curr_node = self.head
  77:         if curr_node.data == data:
  78:             curr_node = curr_node.next
- 79:             return
+ 79:             pass
  80:         while curr_node.next is not None:
  81:             if curr_node.next.data == data:
  82:                 curr_node.next = curr_node.next.next
  83:                 return
--------------------------------------------------------------------------------
[7.86093 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_613

def test_case_613():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        bytes_1 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_1 = module_0.Node(bytes_1)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_1)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = node_0.__str__()
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_2 = linked_list_1.insert_to_front(linked_list_1)
        assert len(linked_list_1) == 1
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList5.Node'
        assert var_2.next is None
        assert f'{type(var_2.data).__module__}.{type(var_2.data).__qualname__}' == 'linkedList5.LinkedList'
        assert len(var_2.data) == 1
>       var_3 = linked_list_0.delete_alt(node_1)

RANDOM/test_linkedList5_RANDOM.py:37230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f272401bca0>
data = <linkedList5.Node object at 0x7f272401af20>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

linkedList5:80: AttributeError
   - [#  98] SDL linkedList5: 
--------------------------------------------------------------------------------
  78:             curr_node = curr_node.next
  79:             return
  80:         while curr_node.next is not None:
  81:             if curr_node.next.data == data:
- 82:                 curr_node.next = curr_node.next.next
+ 82:                 pass
  83:                 return
  84:             curr_node = curr_node.next
  85:     
  86:     def print_list(self):
--------------------------------------------------------------------------------
[2.73812 s] survived
   - [#  99] SDL linkedList5: 
--------------------------------------------------------------------------------
  79:             return
  80:         while curr_node.next is not None:
  81:             if curr_node.next.data == data:
  82:                 curr_node.next = curr_node.next.next
- 83:                 return
+ 83:                 pass
  84:             curr_node = curr_node.next
  85:     
  86:     def print_list(self):
  87:         curr_node = self.head
--------------------------------------------------------------------------------
[2.77301 s] survived
   - [# 100] SDL linkedList5: 
--------------------------------------------------------------------------------
  80:         while curr_node.next is not None:
  81:             if curr_node.next.data == data:
  82:                 curr_node.next = curr_node.next.next
  83:                 return
- 84:             curr_node = curr_node.next
+ 84:             pass
  85:     
  86:     def print_list(self):
  87:         curr_node = self.head
  88:         while curr_node is not None:
--------------------------------------------------------------------------------
[2.70864 s] survived
   - [# 101] SDL linkedList5: 
--------------------------------------------------------------------------------
  83:                 return
  84:             curr_node = curr_node.next
  85:     
  86:     def print_list(self):
- 87:         curr_node = self.head
+ 87:         pass
  88:         while curr_node is not None:
  89:             print(curr_node.data)
  90:             curr_node = curr_node.next
  91:     
--------------------------------------------------------------------------------
[7.31916 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_65

def test_case_65():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        bytes_1 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_1 = module_0.Node(bytes_1)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_1)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = node_0.__str__()
        bytes_2 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_2 = module_0.Node(bytes_2)
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_2 = linked_list_1.append(node_2)
        assert len(linked_list_1) == 1
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList5.Node'
        assert var_2.next is None
        assert f'{type(var_2.data).__module__}.{type(var_2.data).__qualname__}' == 'linkedList5.Node'
        bytes_3 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_3 = module_0.Node(bytes_3)
        bytes_4 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_4 = module_0.Node(bytes_4)
        linked_list_2 = module_0.LinkedList()
        assert len(linked_list_2) == 0
        var_3 = linked_list_2.append(node_4)
        assert len(linked_list_2) == 1
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList5.Node'
        assert var_3.next is None
        assert f'{type(var_3.data).__module__}.{type(var_3.data).__qualname__}' == 'linkedList5.Node'
        var_4 = var_3.__str__()
        assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'linkedList5.Node'
        assert var_4.next is None
        assert var_4.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        bytes_5 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_5 = module_0.Node(bytes_5)
        linked_list_3 = module_0.LinkedList()
        assert len(linked_list_3) == 0
        var_5 = linked_list_3.append(node_5)
        assert len(linked_list_3) == 1
        assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'linkedList5.Node'
        assert var_5.next is None
        assert f'{type(var_5.data).__module__}.{type(var_5.data).__qualname__}' == 'linkedList5.Node'
        var_6 = var_5.__str__()
        assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'linkedList5.Node'
        assert var_6.next is None
        assert var_6.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        var_7 = linked_list_3.get_all_data()
        bytes_6 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_6 = module_0.Node(bytes_6)
        bytes_7 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_7 = module_0.Node(bytes_7)
        linked_list_4 = module_0.LinkedList()
        assert len(linked_list_4) == 0
        var_8 = linked_list_4.append(node_7)
        assert len(linked_list_4) == 1
        assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'linkedList5.Node'
        assert var_8.next is None
        assert f'{type(var_8.data).__module__}.{type(var_8.data).__qualname__}' == 'linkedList5.Node'
        var_9 = var_8.__str__()
        assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'linkedList5.Node'
        assert var_9.next is None
        assert var_9.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_5 = module_0.LinkedList()
        assert len(linked_list_5) == 0
        var_10 = linked_list_5.__len__()
        assert var_10 == 0
        bytes_8 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_8 = module_0.Node(bytes_8)
        linked_list_6 = module_0.LinkedList()
        assert len(linked_list_6) == 0
        var_11 = linked_list_6.append(node_8)
        assert len(linked_list_6) == 1
        assert f'{type(var_11).__module__}.{type(var_11).__qualname__}' == 'linkedList5.Node'
        assert var_11.next is None
        assert f'{type(var_11.data).__module__}.{type(var_11.data).__qualname__}' == 'linkedList5.Node'
        var_12 = var_11.__str__()
        assert f'{type(var_12).__module__}.{type(var_12).__qualname__}' == 'linkedList5.Node'
        assert var_12.next is None
        assert var_12.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        str_0 = 'JLcd4+\n\\'
        var_13 = linked_list_5.append(str_0)
        assert len(linked_list_5) == 1
        assert f'{type(var_13).__module__}.{type(var_13).__qualname__}' == 'linkedList5.Node'
        assert var_13.next is None
        assert var_13.data == 'JLcd4+\n\\'
        bytes_9 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_9 = module_0.Node(bytes_9)
        linked_list_7 = module_0.LinkedList()
        assert len(linked_list_7) == 0
        var_14 = linked_list_7.append(node_9)
        assert len(linked_list_7) == 1
        assert f'{type(var_14).__module__}.{type(var_14).__qualname__}' == 'linkedList5.Node'
        assert var_14.next is None
        assert f'{type(var_14.data).__module__}.{type(var_14.data).__qualname__}' == 'linkedList5.Node'
        var_15 = var_14.__str__()
        assert f'{type(var_15).__module__}.{type(var_15).__qualname__}' == 'linkedList5.Node'
        assert var_15.next is None
        assert var_15.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_8 = module_0.LinkedList()
        assert len(linked_list_8) == 0
        var_16 = linked_list_8.__len__()
        assert var_16 == 0
        var_17 = linked_list_7.delete(bytes_9)
        bytes_10 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_10 = module_0.Node(bytes_10)
        bytes_11 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_11 = module_0.Node(bytes_11)
        linked_list_9 = module_0.LinkedList()
        assert len(linked_list_9) == 0
        var_18 = linked_list_9.append(node_11)
        assert len(linked_list_9) == 1
        assert f'{type(var_18).__module__}.{type(var_18).__qualname__}' == 'linkedList5.Node'
        assert var_18.next is None
        assert f'{type(var_18.data).__module__}.{type(var_18.data).__qualname__}' == 'linkedList5.Node'
        var_19 = node_10.__str__()
        var_20 = var_19.find(bytes_10)
        complex_0 = -1571.872432 - 1247.364j
        linked_list_10 = module_0.LinkedList()
        assert len(linked_list_10) == 0
        var_21 = linked_list_10.delete(complex_0)
        var_22 = linked_list_10.get_all_data()
>       var_23 = linked_list_5.print_list()

RANDOM/test_linkedList5_RANDOM.py:3495: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f2723d197e0>

>   ???
E   UnboundLocalError: local variable 'curr_node' referenced before assignment

linkedList5:88: UnboundLocalError
   - [# 102] SDL linkedList5: 
--------------------------------------------------------------------------------
  85:     
  86:     def print_list(self):
  87:         curr_node = self.head
  88:         while curr_node is not None:
- 89:             print(curr_node.data)
+ 89:             pass
  90:             curr_node = curr_node.next
  91:     
  92:     def get_all_data(self):
  93:         data = []
--------------------------------------------------------------------------------
[2.69327 s] survived
   - [# 103] SDL linkedList5: 
--------------------------------------------------------------------------------
  86:     def print_list(self):
  87:         curr_node = self.head
  88:         while curr_node is not None:
  89:             print(curr_node.data)
- 90:             curr_node = curr_node.next
+ 90:             pass
  91:     
  92:     def get_all_data(self):
  93:         data = []
  94:         curr_node = self.head
--------------------------------------------------------------------------------
[13.49174 s] timeout
   - [# 104] SDL linkedList5: 
--------------------------------------------------------------------------------
  89:             print(curr_node.data)
  90:             curr_node = curr_node.next
  91:     
  92:     def get_all_data(self):
- 93:         data = []
+ 93:         pass
  94:         curr_node = self.head
  95:         while curr_node is not None:
  96:             data.append(curr_node.data)
  97:             curr_node = curr_node.next
--------------------------------------------------------------------------------
[7.37000 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_9

def test_case_9():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert var_1.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
>       var_2 = linked_list_0.get_all_data()

RANDOM/test_linkedList5_RANDOM.py:217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f2726898100>

>   ???
E   NameError: name 'data' is not defined

linkedList5:96: NameError
   - [# 105] SDL linkedList5: 
--------------------------------------------------------------------------------
  90:             curr_node = curr_node.next
  91:     
  92:     def get_all_data(self):
  93:         data = []
- 94:         curr_node = self.head
+ 94:         pass
  95:         while curr_node is not None:
  96:             data.append(curr_node.data)
  97:             curr_node = curr_node.next
  98:         return data
--------------------------------------------------------------------------------
[7.17157 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_9

def test_case_9():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert var_1.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
>       var_2 = linked_list_0.get_all_data()

RANDOM/test_linkedList5_RANDOM.py:217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f27268a5d20>

>   ???
E   UnboundLocalError: local variable 'curr_node' referenced before assignment

linkedList5:95: UnboundLocalError
   - [# 106] SDL linkedList5: 
--------------------------------------------------------------------------------
  92:     def get_all_data(self):
  93:         data = []
  94:         curr_node = self.head
  95:         while curr_node is not None:
- 96:             data.append(curr_node.data)
+ 96:             pass
  97:             curr_node = curr_node.next
  98:         return data
--------------------------------------------------------------------------------
[7.35819 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_209

def test_case_209():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        bytes_1 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_1 = module_0.Node(bytes_1)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_1)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert var_1.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        bytes_2 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_2 = module_0.Node(bytes_2)
        bytes_3 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_3 = module_0.Node(bytes_3)
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_2 = linked_list_1.append(node_3)
        assert len(linked_list_1) == 1
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList5.Node'
        assert var_2.next is None
        assert f'{type(var_2.data).__module__}.{type(var_2.data).__qualname__}' == 'linkedList5.Node'
        var_3 = var_2.__str__()
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList5.Node'
        assert var_3.next is None
        assert var_3.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        var_4 = linked_list_1.get_all_data()
        node_4 = module_0.Node(var_2, var_3)
        assert f'{type(node_4.next).__module__}.{type(node_4.next).__qualname__}' == 'linkedList5.Node'
        assert f'{type(node_4.data).__module__}.{type(node_4.data).__qualname__}' == 'linkedList5.Node'
        complex_0 = -1571.872432 - 1247.364j
        linked_list_2 = module_0.LinkedList()
        assert len(linked_list_2) == 0
        var_5 = linked_list_2.delete(complex_0)
        var_6 = linked_list_2.get_all_data()
        var_7 = var_6.append(var_6)
        node_5 = module_0.Node(var_7, var_7)
        linked_list_3 = module_0.LinkedList(var_7)
        assert len(linked_list_3) == 0
        bytes_4 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_6 = module_0.Node(bytes_4)
        linked_list_4 = module_0.LinkedList()
        assert len(linked_list_4) == 0
        var_8 = linked_list_4.append(node_6)
        assert len(linked_list_4) == 1
        assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'linkedList5.Node'
        assert var_8.next is None
        assert f'{type(var_8.data).__module__}.{type(var_8.data).__qualname__}' == 'linkedList5.Node'
        bool_0 = True
        node_7 = module_0.Node(bool_0)
        var_9 = node_7.__str__()
        node_8 = module_0.Node(var_9)
        var_10 = linked_list_4.find(linked_list_4)
        linked_list_5 = module_0.LinkedList()
        assert len(linked_list_5) == 0
        bytes_5 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_9 = module_0.Node(bytes_5)
        bytes_6 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_10 = module_0.Node(bytes_6)
        linked_list_6 = module_0.LinkedList()
        assert len(linked_list_6) == 0
        var_11 = linked_list_6.append(node_10)
        assert len(linked_list_6) == 1
        assert f'{type(var_11).__module__}.{type(var_11).__qualname__}' == 'linkedList5.Node'
        assert var_11.next is None
        assert f'{type(var_11.data).__module__}.{type(var_11.data).__qualname__}' == 'linkedList5.Node'
        var_12 = var_11.__str__()
        assert f'{type(var_12).__module__}.{type(var_12).__qualname__}' == 'linkedList5.Node'
        assert var_12.next is None
        assert var_12.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_7 = module_0.LinkedList()
        assert len(linked_list_7) == 0
        complex_1 = -1571.872432 - 1247.364j
        linked_list_8 = module_0.LinkedList()
        assert len(linked_list_8) == 0
        var_13 = linked_list_8.delete(complex_1)
        var_14 = var_4.__len__()
>       assert var_14 == 1
E       AssertionError

RANDOM/test_linkedList5_RANDOM.py:12348: AssertionError
   - [# 107] SDL linkedList5: 
--------------------------------------------------------------------------------
  93:         data = []
  94:         curr_node = self.head
  95:         while curr_node is not None:
  96:             data.append(curr_node.data)
- 97:             curr_node = curr_node.next
+ 97:             pass
  98:         return data
--------------------------------------------------------------------------------
[13.49439 s] timeout
   - [# 108] SDL linkedList5: 
--------------------------------------------------------------------------------
  94:         curr_node = self.head
  95:         while curr_node is not None:
  96:             data.append(curr_node.data)
  97:             curr_node = curr_node.next
- 98:         return data
+ 98:         pass
--------------------------------------------------------------------------------
[7.26877 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_79

def test_case_79():
        complex_0 = -1571.872432 - 1247.364j
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.delete(complex_0)
        var_1 = linked_list_0.get_all_data()
>       var_2 = var_1.append(var_1)
E       AttributeError: 'NoneType' object has no attribute 'append'

RANDOM/test_linkedList5_RANDOM.py:4430: AttributeError
   - [# 109] SVD linkedList5: 
--------------------------------------------------------------------------------
   1: class Node(object):
   2:     
   3:     def __init__(self, data, next=None):
-  4:         self.next = next
+  4:         next = next
   5:         self.data = data
   6:     
   7:     def __str__(self):
   8:         return self.data
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 110] SVD linkedList5: 
--------------------------------------------------------------------------------
   1: class Node(object):
   2:     
   3:     def __init__(self, data, next=None):
   4:         self.next = next
-  5:         self.data = data
+  5:         data = data
   6:     
   7:     def __str__(self):
   8:         return self.data
   9: 
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 111] SVD linkedList5: 
--------------------------------------------------------------------------------
   4:         self.next = next
   5:         self.data = data
   6:     
   7:     def __str__(self):
-  8:         return self.data
+  8:         return data
   9: 
  10: 
  11: class LinkedList(object):
  12:     
--------------------------------------------------------------------------------
[7.44797 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_2

def test_case_2():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
>       var_1 = var_0.__str__()

RANDOM/test_linkedList5_RANDOM.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.Node object at 0x7f272393b7f0>

>   ???
E   NameError: name 'data' is not defined

linkedList5:8: NameError
   - [# 112] SVD linkedList5: 
--------------------------------------------------------------------------------
  10: 
  11: class LinkedList(object):
  12:     
  13:     def __init__(self, head=None):
- 14:         self.head = head
+ 14:         head = head
  15:     
  16:     def __len__(self):
  17:         curr = self.head
  18:         counter = 0
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 113] SVD linkedList5: 
--------------------------------------------------------------------------------
  13:     def __init__(self, head=None):
  14:         self.head = head
  15:     
  16:     def __len__(self):
- 17:         curr = self.head
+ 17:         curr = head
  18:         counter = 0
  19:         while curr is not None:
  20:             counter += 1
  21:             curr = curr.next
--------------------------------------------------------------------------------
[7.27585 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_1

def test_case_1():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
>       assert len(linked_list_0) == 0

RANDOM/test_linkedList5_RANDOM.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f272393a320>

>   ???
E   NameError: name 'head' is not defined

linkedList5:17: NameError
   - [# 114] SVD linkedList5: 
--------------------------------------------------------------------------------
  23:     
  24:     def insert_to_front(self, data):
  25:         if data is None:
  26:             return None
- 27:         node = Node(data, self.head)
+ 27:         node = Node(data, head)
  28:         self.head = node
  29:         return node
  30:     
  31:     def append(self, data):
--------------------------------------------------------------------------------
[7.28173 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_10

def test_case_10():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert var_1.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        bytes_1 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_1 = module_0.Node(bytes_1)
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_2 = linked_list_1.append(node_1)
        assert len(linked_list_1) == 1
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList5.Node'
        assert var_2.next is None
        assert f'{type(var_2.data).__module__}.{type(var_2.data).__qualname__}' == 'linkedList5.Node'
        var_3 = var_2.__str__()
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList5.Node'
        assert var_3.next is None
        assert var_3.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_2 = module_0.LinkedList()
        assert len(linked_list_2) == 0
        var_4 = linked_list_2.__len__()
        assert var_4 == 0
        var_5 = linked_list_1.delete(bytes_1)
        bytes_2 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_2 = module_0.Node(bytes_2)
        linked_list_3 = module_0.LinkedList()
        assert len(linked_list_3) == 0
        var_6 = linked_list_3.append(node_2)
        assert len(linked_list_3) == 1
        assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'linkedList5.Node'
        assert var_6.next is None
        assert f'{type(var_6.data).__module__}.{type(var_6.data).__qualname__}' == 'linkedList5.Node'
        var_7 = var_6.__str__()
        assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'linkedList5.Node'
        assert var_7.next is None
        assert var_7.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        var_8 = linked_list_3.get_all_data()
>       var_9 = linked_list_2.insert_to_front(linked_list_2)

RANDOM/test_linkedList5_RANDOM.py:265: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f272393a290>
data = <linkedList5.LinkedList object at 0x7f272393a290>

>   ???
E   NameError: name 'head' is not defined

linkedList5:27: NameError
   - [# 115] SVD linkedList5: 
--------------------------------------------------------------------------------
  24:     def insert_to_front(self, data):
  25:         if data is None:
  26:             return None
  27:         node = Node(data, self.head)
- 28:         self.head = node
+ 28:         head = node
  29:         return node
  30:     
  31:     def append(self, data):
  32:         if data is None:
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 116] SVD linkedList5: 
--------------------------------------------------------------------------------
  31:     def append(self, data):
  32:         if data is None:
  33:             return None
  34:         node = Node(data)
- 35:         if self.head is None:
+ 35:         if head is None:
  36:             self.head = node
  37:             return node
  38:         curr_node = self.head
  39:         while curr_node.next is not None:
--------------------------------------------------------------------------------
[7.15523 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_1

def test_case_1():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
>       var_0 = linked_list_0.append(node_0)

RANDOM/test_linkedList5_RANDOM.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f2726885210>
data = <linkedList5.Node object at 0x7f27268855d0>

>   ???
E   NameError: name 'head' is not defined

linkedList5:35: NameError
   - [# 117] SVD linkedList5: 
--------------------------------------------------------------------------------
  32:         if data is None:
  33:             return None
  34:         node = Node(data)
  35:         if self.head is None:
- 36:             self.head = node
+ 36:             head = node
  37:             return node
  38:         curr_node = self.head
  39:         while curr_node.next is not None:
  40:             curr_node = curr_node.next
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 118] SVD linkedList5: 
--------------------------------------------------------------------------------
  34:         node = Node(data)
  35:         if self.head is None:
  36:             self.head = node
  37:             return node
- 38:         curr_node = self.head
+ 38:         curr_node = head
  39:         while curr_node.next is not None:
  40:             curr_node = curr_node.next
  41:         curr_node.next = node
  42:         return node
--------------------------------------------------------------------------------
[7.21009 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_43

def test_case_43():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert var_1.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        var_2 = linked_list_0.get_all_data()
        bytes_1 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_1 = module_0.Node(bytes_1)
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_3 = linked_list_1.append(node_1)
        assert len(linked_list_1) == 1
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList5.Node'
        assert var_3.next is None
        assert f'{type(var_3.data).__module__}.{type(var_3.data).__qualname__}' == 'linkedList5.Node'
        bool_0 = True
        node_2 = module_0.Node(bool_0)
        var_4 = node_2.__str__()
        node_3 = module_0.Node(var_4)
        bytes_2 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_4 = module_0.Node(bytes_2)
        linked_list_2 = module_0.LinkedList()
        assert len(linked_list_2) == 0
        var_5 = linked_list_2.append(node_4)
        assert len(linked_list_2) == 1
        assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'linkedList5.Node'
        assert var_5.next is None
        assert f'{type(var_5.data).__module__}.{type(var_5.data).__qualname__}' == 'linkedList5.Node'
        var_6 = var_5.__str__()
        assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'linkedList5.Node'
        assert var_6.next is None
        assert var_6.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_3 = module_0.LinkedList()
        assert len(linked_list_3) == 0
        var_7 = linked_list_3.__len__()
        assert var_7 == 0
        var_8 = linked_list_2.delete(bytes_2)
        bytes_3 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_5 = module_0.Node(bytes_3)
        linked_list_4 = module_0.LinkedList()
        assert len(linked_list_4) == 0
        var_9 = linked_list_4.append(node_5)
        assert len(linked_list_4) == 1
        assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'linkedList5.Node'
        assert var_9.next is None
        assert f'{type(var_9.data).__module__}.{type(var_9.data).__qualname__}' == 'linkedList5.Node'
        var_10 = var_9.__str__()
        assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'linkedList5.Node'
        assert var_10.next is None
        assert var_10.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_5 = module_0.LinkedList()
        assert len(linked_list_5) == 0
        var_11 = linked_list_5.__len__()
        assert var_11 == 0
        complex_0 = -1571.872432 - 1247.364j
        linked_list_6 = module_0.LinkedList()
        assert len(linked_list_6) == 0
        var_12 = linked_list_6.delete(complex_0)
        bool_1 = True
        node_6 = module_0.Node(bool_1)
        var_13 = node_6.__str__()
        bytes_4 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_7 = module_0.Node(bytes_4)
        bytes_5 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_8 = module_0.Node(bytes_5)
        linked_list_7 = module_0.LinkedList()
        assert len(linked_list_7) == 0
        var_14 = linked_list_7.append(node_8)
        assert len(linked_list_7) == 1
        assert f'{type(var_14).__module__}.{type(var_14).__qualname__}' == 'linkedList5.Node'
        assert var_14.next is None
        assert f'{type(var_14.data).__module__}.{type(var_14.data).__qualname__}' == 'linkedList5.Node'
        var_15 = node_7.__str__()
        bytes_6 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_9 = module_0.Node(bytes_6)
>       var_16 = linked_list_7.append(bytes_3)

RANDOM/test_linkedList5_RANDOM.py:2171: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f2726dca200>
data = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'

>   ???
E   NameError: name 'head' is not defined

linkedList5:38: NameError
   - [# 119] SVD linkedList5: 
--------------------------------------------------------------------------------
  43:     
  44:     def find(self, data):
  45:         if data is None:
  46:             return None
- 47:         curr_node = self.head
+ 47:         curr_node = head
  48:         while curr_node is not None:
  49:             if curr_node.data == data:
  50:                 return curr_node
  51:             curr_node = curr_node.next
--------------------------------------------------------------------------------
[7.27152 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_86

def test_case_86():
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.__len__()
        assert var_0 == 0
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_1 = linked_list_1.append(node_0)
        assert len(linked_list_1) == 1
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert f'{type(var_1.data).__module__}.{type(var_1.data).__qualname__}' == 'linkedList5.Node'
        var_2 = var_1.__str__()
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList5.Node'
        assert var_2.next is None
        assert var_2.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        str_0 = 'JLcd4+\n\\'
        var_3 = linked_list_0.append(str_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList5.Node'
        assert var_3.next is None
        assert var_3.data == 'JLcd4+\n\\'
        bytes_1 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_1 = module_0.Node(bytes_1)
        linked_list_2 = module_0.LinkedList()
        assert len(linked_list_2) == 0
        var_4 = linked_list_2.append(node_1)
        assert len(linked_list_2) == 1
        assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'linkedList5.Node'
        assert var_4.next is None
        assert f'{type(var_4.data).__module__}.{type(var_4.data).__qualname__}' == 'linkedList5.Node'
        var_5 = var_4.__str__()
        assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'linkedList5.Node'
        assert var_5.next is None
        assert var_5.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_3 = module_0.LinkedList()
        assert len(linked_list_3) == 0
        var_6 = linked_list_3.__len__()
        assert var_6 == 0
        bytes_2 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_2 = module_0.Node(bytes_2)
        linked_list_4 = module_0.LinkedList()
        assert len(linked_list_4) == 0
        var_7 = linked_list_4.append(node_2)
        assert len(linked_list_4) == 1
        assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'linkedList5.Node'
        assert var_7.next is None
        assert f'{type(var_7.data).__module__}.{type(var_7.data).__qualname__}' == 'linkedList5.Node'
        var_8 = var_7.__str__()
        assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'linkedList5.Node'
        assert var_8.next is None
        assert var_8.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        bytes_3 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_3 = module_0.Node(bytes_3)
        bytes_4 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_4 = module_0.Node(bytes_4)
        linked_list_5 = module_0.LinkedList()
        assert len(linked_list_5) == 0
        var_9 = linked_list_5.append(node_4)
        assert len(linked_list_5) == 1
        assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'linkedList5.Node'
        assert var_9.next is None
        assert f'{type(var_9.data).__module__}.{type(var_9.data).__qualname__}' == 'linkedList5.Node'
        var_10 = node_3.__str__()
        var_11 = var_10.find(bytes_3)
        linked_list_6 = module_0.LinkedList()
        assert len(linked_list_6) == 0
        var_12 = linked_list_6.__len__()
        assert var_12 == 0
        complex_0 = -1571.872432 - 1247.364j
        linked_list_7 = module_0.LinkedList()
        assert len(linked_list_7) == 0
        var_13 = linked_list_7.delete(complex_0)
        bytes_5 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_5 = module_0.Node(bytes_5)
        bytes_6 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_6 = module_0.Node(bytes_6)
        linked_list_8 = module_0.LinkedList()
        assert len(linked_list_8) == 0
        var_14 = linked_list_8.append(node_6)
        assert len(linked_list_8) == 1
        assert f'{type(var_14).__module__}.{type(var_14).__qualname__}' == 'linkedList5.Node'
        assert var_14.next is None
        assert f'{type(var_14.data).__module__}.{type(var_14.data).__qualname__}' == 'linkedList5.Node'
        var_15 = node_5.__str__()
        bytes_7 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_7 = module_0.Node(bytes_7)
        bytes_8 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_8 = module_0.Node(bytes_8)
        linked_list_9 = module_0.LinkedList()
        assert len(linked_list_9) == 0
        var_16 = linked_list_9.append(node_8)
        assert len(linked_list_9) == 1
        assert f'{type(var_16).__module__}.{type(var_16).__qualname__}' == 'linkedList5.Node'
        assert var_16.next is None
        assert f'{type(var_16.data).__module__}.{type(var_16.data).__qualname__}' == 'linkedList5.Node'
        var_17 = var_16.__str__()
        assert f'{type(var_17).__module__}.{type(var_17).__qualname__}' == 'linkedList5.Node'
        assert var_17.next is None
        assert var_17.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_10 = module_0.LinkedList()
        assert len(linked_list_10) == 0
        bytes_9 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_9 = module_0.Node(bytes_9)
        bytes_10 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_10 = module_0.Node(bytes_10)
        linked_list_11 = module_0.LinkedList()
        assert len(linked_list_11) == 0
        var_18 = linked_list_11.append(node_10)
        assert len(linked_list_11) == 1
        assert f'{type(var_18).__module__}.{type(var_18).__qualname__}' == 'linkedList5.Node'
        assert var_18.next is None
        assert f'{type(var_18.data).__module__}.{type(var_18.data).__qualname__}' == 'linkedList5.Node'
        var_19 = var_18.__str__()
        assert f'{type(var_19).__module__}.{type(var_19).__qualname__}' == 'linkedList5.Node'
        assert var_19.next is None
        assert var_19.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
>       var_20 = linked_list_10.find(linked_list_11)

RANDOM/test_linkedList5_RANDOM.py:4829: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f2726dcafe0>
data = <linkedList5.LinkedList object at 0x7f2726dc8a90>

>   ???
E   NameError: name 'head' is not defined

linkedList5:47: NameError
   - [# 120] SVD linkedList5: 
--------------------------------------------------------------------------------
  53:     
  54:     def delete(self, data):
  55:         if data is None:
  56:             return
- 57:         if self.head is None:
+ 57:         if head is None:
  58:             return
  59:         if self.head.data == data:
  60:             self.head = self.head.next
  61:             return
--------------------------------------------------------------------------------
[7.88298 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_7

def test_case_7():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert var_1.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_2 = linked_list_1.__len__()
        assert var_2 == 0
>       var_3 = linked_list_0.delete(bytes_0)

RANDOM/test_linkedList5_RANDOM.py:173: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f2726dc8e20>
data = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'

>   ???
E   NameError: name 'head' is not defined

linkedList5:57: NameError
   - [# 121] SVD linkedList5: 
--------------------------------------------------------------------------------
  55:         if data is None:
  56:             return
  57:         if self.head is None:
  58:             return
- 59:         if self.head.data == data:
+ 59:         if head.data == data:
  60:             self.head = self.head.next
  61:             return
  62:         prev_node = self.head
  63:         curr_node = self.head.next
--------------------------------------------------------------------------------
[7.36346 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_7

def test_case_7():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert var_1.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_2 = linked_list_1.__len__()
        assert var_2 == 0
>       var_3 = linked_list_0.delete(bytes_0)

RANDOM/test_linkedList5_RANDOM.py:173: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f2726dcb760>
data = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'

>   ???
E   NameError: name 'head' is not defined

linkedList5:59: NameError
   - [# 122] SVD linkedList5: 
--------------------------------------------------------------------------------
  56:             return
  57:         if self.head is None:
  58:             return
  59:         if self.head.data == data:
- 60:             self.head = self.head.next
+ 60:             head = self.head.next
  61:             return
  62:         prev_node = self.head
  63:         curr_node = self.head.next
  64:         while curr_node is not None:
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 123] SVD linkedList5: 
--------------------------------------------------------------------------------
  56:             return
  57:         if self.head is None:
  58:             return
  59:         if self.head.data == data:
- 60:             self.head = self.head.next
+ 60:             self.head = head.next
  61:             return
  62:         prev_node = self.head
  63:         curr_node = self.head.next
  64:         while curr_node is not None:
--------------------------------------------------------------------------------
[7.50236 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_115

def test_case_115():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        bytes_1 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_1 = module_0.Node(bytes_1)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_1)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert var_1.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        bytes_2 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_2 = module_0.Node(bytes_2)
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_2 = linked_list_1.append(node_2)
        assert len(linked_list_1) == 1
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList5.Node'
        assert var_2.next is None
        assert f'{type(var_2.data).__module__}.{type(var_2.data).__qualname__}' == 'linkedList5.Node'
        var_3 = var_2.__str__()
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList5.Node'
        assert var_3.next is None
        assert var_3.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_2 = module_0.LinkedList()
        assert len(linked_list_2) == 0
        var_4 = linked_list_2.__len__()
        assert var_4 == 0
        var_5 = linked_list_1.delete(bytes_2)
        complex_0 = -1571.872432 - 1247.364j
        linked_list_3 = module_0.LinkedList()
        assert len(linked_list_3) == 0
        var_6 = linked_list_3.delete(complex_0)
        var_7 = linked_list_3.get_all_data()
        var_8 = var_7.append(var_7)
        node_3 = module_0.Node(var_8, var_8)
>       var_9 = linked_list_0.delete(var_1)

RANDOM/test_linkedList5_RANDOM.py:6579: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f2726dc8f70>
data = <linkedList5.Node object at 0x7f2726dc9e40>

>   ???
E   NameError: name 'head' is not defined

linkedList5:60: NameError
   - [# 124] SVD linkedList5: 
--------------------------------------------------------------------------------
  58:             return
  59:         if self.head.data == data:
  60:             self.head = self.head.next
  61:             return
- 62:         prev_node = self.head
+ 62:         prev_node = head
  63:         curr_node = self.head.next
  64:         while curr_node is not None:
  65:             if curr_node.data == data:
  66:                 prev_node.next = curr_node.next
--------------------------------------------------------------------------------
[7.29408 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_7

def test_case_7():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert var_1.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_2 = linked_list_1.__len__()
        assert var_2 == 0
>       var_3 = linked_list_0.delete(bytes_0)

RANDOM/test_linkedList5_RANDOM.py:173: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f2726dc8d30>
data = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'

>   ???
E   NameError: name 'head' is not defined

linkedList5:62: NameError
   - [# 125] SVD linkedList5: 
--------------------------------------------------------------------------------
  59:         if self.head.data == data:
  60:             self.head = self.head.next
  61:             return
  62:         prev_node = self.head
- 63:         curr_node = self.head.next
+ 63:         curr_node = head.next
  64:         while curr_node is not None:
  65:             if curr_node.data == data:
  66:                 prev_node.next = curr_node.next
  67:                 return
--------------------------------------------------------------------------------
[7.32382 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_7

def test_case_7():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert var_1.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_2 = linked_list_1.__len__()
        assert var_2 == 0
>       var_3 = linked_list_0.delete(bytes_0)

RANDOM/test_linkedList5_RANDOM.py:173: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f2726dcacb0>
data = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'

>   ???
E   NameError: name 'head' is not defined

linkedList5:63: NameError
   - [# 126] SVD linkedList5: 
--------------------------------------------------------------------------------
  70:     
  71:     def delete_alt(self, data):
  72:         if data is None:
  73:             return
- 74:         if self.head is None:
+ 74:         if head is None:
  75:             return
  76:         curr_node = self.head
  77:         if curr_node.data == data:
  78:             curr_node = curr_node.next
--------------------------------------------------------------------------------
[7.36276 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_17

def test_case_17():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert var_1.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_2 = linked_list_1.__len__()
        assert var_2 == 0
        bytes_1 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_1 = module_0.Node(bytes_1)
        linked_list_2 = module_0.LinkedList()
        assert len(linked_list_2) == 0
        var_3 = linked_list_2.append(node_1)
        assert len(linked_list_2) == 1
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList5.Node'
        assert var_3.next is None
        assert f'{type(var_3.data).__module__}.{type(var_3.data).__qualname__}' == 'linkedList5.Node'
        var_4 = var_3.__str__()
        assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'linkedList5.Node'
        assert var_4.next is None
        assert var_4.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_3 = module_0.LinkedList()
        assert len(linked_list_3) == 0
        var_5 = linked_list_3.__len__()
        assert var_5 == 0
        var_6 = linked_list_2.delete(bytes_1)
        bool_0 = True
        node_2 = module_0.Node(bool_0)
        var_7 = node_2.__str__()
>       var_8 = linked_list_1.delete_alt(bytes_0)

RANDOM/test_linkedList5_RANDOM.py:530: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f2726dc93c0>
data = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'

>   ???
E   NameError: name 'head' is not defined

linkedList5:74: NameError
   - [# 127] SVD linkedList5: 
--------------------------------------------------------------------------------
  72:         if data is None:
  73:             return
  74:         if self.head is None:
  75:             return
- 76:         curr_node = self.head
+ 76:         curr_node = head
  77:         if curr_node.data == data:
  78:             curr_node = curr_node.next
  79:             return
  80:         while curr_node.next is not None:
--------------------------------------------------------------------------------
[7.19619 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_44

def test_case_44():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
>       var_1 = linked_list_0.delete_alt(var_0)

RANDOM/test_linkedList5_RANDOM.py:2188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f2726889060>
data = <linkedList5.Node object at 0x7f2726888e80>

>   ???
E   NameError: name 'head' is not defined

linkedList5:76: NameError
   - [# 128] SVD linkedList5: 
--------------------------------------------------------------------------------
  83:                 return
  84:             curr_node = curr_node.next
  85:     
  86:     def print_list(self):
- 87:         curr_node = self.head
+ 87:         curr_node = head
  88:         while curr_node is not None:
  89:             print(curr_node.data)
  90:             curr_node = curr_node.next
  91:     
--------------------------------------------------------------------------------
[7.41050 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_65

def test_case_65():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        bytes_1 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_1 = module_0.Node(bytes_1)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_1)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = node_0.__str__()
        bytes_2 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_2 = module_0.Node(bytes_2)
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_2 = linked_list_1.append(node_2)
        assert len(linked_list_1) == 1
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList5.Node'
        assert var_2.next is None
        assert f'{type(var_2.data).__module__}.{type(var_2.data).__qualname__}' == 'linkedList5.Node'
        bytes_3 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_3 = module_0.Node(bytes_3)
        bytes_4 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_4 = module_0.Node(bytes_4)
        linked_list_2 = module_0.LinkedList()
        assert len(linked_list_2) == 0
        var_3 = linked_list_2.append(node_4)
        assert len(linked_list_2) == 1
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList5.Node'
        assert var_3.next is None
        assert f'{type(var_3.data).__module__}.{type(var_3.data).__qualname__}' == 'linkedList5.Node'
        var_4 = var_3.__str__()
        assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'linkedList5.Node'
        assert var_4.next is None
        assert var_4.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        bytes_5 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_5 = module_0.Node(bytes_5)
        linked_list_3 = module_0.LinkedList()
        assert len(linked_list_3) == 0
        var_5 = linked_list_3.append(node_5)
        assert len(linked_list_3) == 1
        assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'linkedList5.Node'
        assert var_5.next is None
        assert f'{type(var_5.data).__module__}.{type(var_5.data).__qualname__}' == 'linkedList5.Node'
        var_6 = var_5.__str__()
        assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'linkedList5.Node'
        assert var_6.next is None
        assert var_6.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        var_7 = linked_list_3.get_all_data()
        bytes_6 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_6 = module_0.Node(bytes_6)
        bytes_7 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_7 = module_0.Node(bytes_7)
        linked_list_4 = module_0.LinkedList()
        assert len(linked_list_4) == 0
        var_8 = linked_list_4.append(node_7)
        assert len(linked_list_4) == 1
        assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'linkedList5.Node'
        assert var_8.next is None
        assert f'{type(var_8.data).__module__}.{type(var_8.data).__qualname__}' == 'linkedList5.Node'
        var_9 = var_8.__str__()
        assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'linkedList5.Node'
        assert var_9.next is None
        assert var_9.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_5 = module_0.LinkedList()
        assert len(linked_list_5) == 0
        var_10 = linked_list_5.__len__()
        assert var_10 == 0
        bytes_8 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_8 = module_0.Node(bytes_8)
        linked_list_6 = module_0.LinkedList()
        assert len(linked_list_6) == 0
        var_11 = linked_list_6.append(node_8)
        assert len(linked_list_6) == 1
        assert f'{type(var_11).__module__}.{type(var_11).__qualname__}' == 'linkedList5.Node'
        assert var_11.next is None
        assert f'{type(var_11.data).__module__}.{type(var_11.data).__qualname__}' == 'linkedList5.Node'
        var_12 = var_11.__str__()
        assert f'{type(var_12).__module__}.{type(var_12).__qualname__}' == 'linkedList5.Node'
        assert var_12.next is None
        assert var_12.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        str_0 = 'JLcd4+\n\\'
        var_13 = linked_list_5.append(str_0)
        assert len(linked_list_5) == 1
        assert f'{type(var_13).__module__}.{type(var_13).__qualname__}' == 'linkedList5.Node'
        assert var_13.next is None
        assert var_13.data == 'JLcd4+\n\\'
        bytes_9 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_9 = module_0.Node(bytes_9)
        linked_list_7 = module_0.LinkedList()
        assert len(linked_list_7) == 0
        var_14 = linked_list_7.append(node_9)
        assert len(linked_list_7) == 1
        assert f'{type(var_14).__module__}.{type(var_14).__qualname__}' == 'linkedList5.Node'
        assert var_14.next is None
        assert f'{type(var_14.data).__module__}.{type(var_14.data).__qualname__}' == 'linkedList5.Node'
        var_15 = var_14.__str__()
        assert f'{type(var_15).__module__}.{type(var_15).__qualname__}' == 'linkedList5.Node'
        assert var_15.next is None
        assert var_15.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_8 = module_0.LinkedList()
        assert len(linked_list_8) == 0
        var_16 = linked_list_8.__len__()
        assert var_16 == 0
        var_17 = linked_list_7.delete(bytes_9)
        bytes_10 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_10 = module_0.Node(bytes_10)
        bytes_11 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_11 = module_0.Node(bytes_11)
        linked_list_9 = module_0.LinkedList()
        assert len(linked_list_9) == 0
        var_18 = linked_list_9.append(node_11)
        assert len(linked_list_9) == 1
        assert f'{type(var_18).__module__}.{type(var_18).__qualname__}' == 'linkedList5.Node'
        assert var_18.next is None
        assert f'{type(var_18.data).__module__}.{type(var_18.data).__qualname__}' == 'linkedList5.Node'
        var_19 = node_10.__str__()
        var_20 = var_19.find(bytes_10)
        complex_0 = -1571.872432 - 1247.364j
        linked_list_10 = module_0.LinkedList()
        assert len(linked_list_10) == 0
        var_21 = linked_list_10.delete(complex_0)
        var_22 = linked_list_10.get_all_data()
>       var_23 = linked_list_5.print_list()

RANDOM/test_linkedList5_RANDOM.py:3495: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f2723d57280>

>   ???
E   NameError: name 'head' is not defined

linkedList5:87: NameError
   - [# 129] SVD linkedList5: 
--------------------------------------------------------------------------------
  90:             curr_node = curr_node.next
  91:     
  92:     def get_all_data(self):
  93:         data = []
- 94:         curr_node = self.head
+ 94:         curr_node = head
  95:         while curr_node is not None:
  96:             data.append(curr_node.data)
  97:             curr_node = curr_node.next
  98:         return data
--------------------------------------------------------------------------------
[7.17159 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_9

def test_case_9():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert var_1.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
>       var_2 = linked_list_0.get_all_data()

RANDOM/test_linkedList5_RANDOM.py:217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList5.LinkedList object at 0x7f2723758730>

>   ???
E   NameError: name 'head' is not defined

linkedList5:94: NameError
   - [# 130] ZIL linkedList5: 
--------------------------------------------------------------------------------
  16:     def __len__(self):
  17:         curr = self.head
  18:         counter = 0
  19:         while curr is not None:
- 20:             counter += 1
- 21:             curr = curr.next
+ 20:             break
+ 21:         
  22:         return counter
  23:     
  24:     def insert_to_front(self, data):
  25:         if data is None:
--------------------------------------------------------------------------------
[7.23106 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_1

def test_case_1():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_0)
>       assert len(linked_list_0) == 1
E       AssertionError

RANDOM/test_linkedList5_RANDOM.py:16: AssertionError
   - [# 131] ZIL linkedList5: 
--------------------------------------------------------------------------------
  36:             self.head = node
  37:             return node
  38:         curr_node = self.head
  39:         while curr_node.next is not None:
- 40:             curr_node = curr_node.next
+ 40:             break
  41:         curr_node.next = node
  42:         return node
  43:     
  44:     def find(self, data):
--------------------------------------------------------------------------------
[2.72294 s] survived
   - [# 132] ZIL linkedList5: 
--------------------------------------------------------------------------------
  45:         if data is None:
  46:             return None
  47:         curr_node = self.head
  48:         while curr_node is not None:
- 49:             if curr_node.data == data:
- 50:                 return curr_node
- 51:             curr_node = curr_node.next
+ 49:             break
+ 50:         
+ 51:         
  52:         return None
  53:     
  54:     def delete(self, data):
  55:         if data is None:
--------------------------------------------------------------------------------
[2.72795 s] survived
   - [# 133] ZIL linkedList5: 
--------------------------------------------------------------------------------
  61:             return
  62:         prev_node = self.head
  63:         curr_node = self.head.next
  64:         while curr_node is not None:
- 65:             if curr_node.data == data:
- 66:                 prev_node.next = curr_node.next
- 67:                 return
- 68:             prev_node = curr_node
- 69:             curr_node = curr_node.next
+ 65:             break
+ 66:     
+ 67:     
+ 68:     
+ 69:     
  70:     
  71:     def delete_alt(self, data):
  72:         if data is None:
  73:             return
--------------------------------------------------------------------------------
[2.72942 s] survived
   - [# 134] ZIL linkedList5: 
--------------------------------------------------------------------------------
  77:         if curr_node.data == data:
  78:             curr_node = curr_node.next
  79:             return
  80:         while curr_node.next is not None:
- 81:             if curr_node.next.data == data:
- 82:                 curr_node.next = curr_node.next.next
- 83:                 return
- 84:             curr_node = curr_node.next
+ 81:             break
+ 82:     
+ 83:     
+ 84:     
  85:     
  86:     def print_list(self):
  87:         curr_node = self.head
  88:         while curr_node is not None:
--------------------------------------------------------------------------------
[2.72792 s] survived
   - [# 135] ZIL linkedList5: 
--------------------------------------------------------------------------------
  85:     
  86:     def print_list(self):
  87:         curr_node = self.head
  88:         while curr_node is not None:
- 89:             print(curr_node.data)
- 90:             curr_node = curr_node.next
+ 89:             break
+ 90:     
  91:     
  92:     def get_all_data(self):
  93:         data = []
  94:         curr_node = self.head
--------------------------------------------------------------------------------
[2.80087 s] survived
   - [# 136] ZIL linkedList5: 
--------------------------------------------------------------------------------
  92:     def get_all_data(self):
  93:         data = []
  94:         curr_node = self.head
  95:         while curr_node is not None:
- 96:             data.append(curr_node.data)
- 97:             curr_node = curr_node.next
+ 96:             break
+ 97:         
  98:         return data
--------------------------------------------------------------------------------
[7.40735 s] killed by RANDOM/test_linkedList5_RANDOM.py::test_case_209

def test_case_209():
        bytes_0 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_0 = module_0.Node(bytes_0)
        bytes_1 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_1 = module_0.Node(bytes_1)
        linked_list_0 = module_0.LinkedList()
        assert len(linked_list_0) == 0
        var_0 = linked_list_0.append(node_1)
        assert len(linked_list_0) == 1
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList5.Node'
        assert var_0.next is None
        assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'linkedList5.Node'
        var_1 = var_0.__str__()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList5.Node'
        assert var_1.next is None
        assert var_1.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        bytes_2 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_2 = module_0.Node(bytes_2)
        bytes_3 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_3 = module_0.Node(bytes_3)
        linked_list_1 = module_0.LinkedList()
        assert len(linked_list_1) == 0
        var_2 = linked_list_1.append(node_3)
        assert len(linked_list_1) == 1
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList5.Node'
        assert var_2.next is None
        assert f'{type(var_2.data).__module__}.{type(var_2.data).__qualname__}' == 'linkedList5.Node'
        var_3 = var_2.__str__()
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList5.Node'
        assert var_3.next is None
        assert var_3.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        var_4 = linked_list_1.get_all_data()
        node_4 = module_0.Node(var_2, var_3)
        assert f'{type(node_4.next).__module__}.{type(node_4.next).__qualname__}' == 'linkedList5.Node'
        assert f'{type(node_4.data).__module__}.{type(node_4.data).__qualname__}' == 'linkedList5.Node'
        complex_0 = -1571.872432 - 1247.364j
        linked_list_2 = module_0.LinkedList()
        assert len(linked_list_2) == 0
        var_5 = linked_list_2.delete(complex_0)
        var_6 = linked_list_2.get_all_data()
        var_7 = var_6.append(var_6)
        node_5 = module_0.Node(var_7, var_7)
        linked_list_3 = module_0.LinkedList(var_7)
        assert len(linked_list_3) == 0
        bytes_4 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_6 = module_0.Node(bytes_4)
        linked_list_4 = module_0.LinkedList()
        assert len(linked_list_4) == 0
        var_8 = linked_list_4.append(node_6)
        assert len(linked_list_4) == 1
        assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'linkedList5.Node'
        assert var_8.next is None
        assert f'{type(var_8.data).__module__}.{type(var_8.data).__qualname__}' == 'linkedList5.Node'
        bool_0 = True
        node_7 = module_0.Node(bool_0)
        var_9 = node_7.__str__()
        node_8 = module_0.Node(var_9)
        var_10 = linked_list_4.find(linked_list_4)
        linked_list_5 = module_0.LinkedList()
        assert len(linked_list_5) == 0
        bytes_5 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_9 = module_0.Node(bytes_5)
        bytes_6 = b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        node_10 = module_0.Node(bytes_6)
        linked_list_6 = module_0.LinkedList()
        assert len(linked_list_6) == 0
        var_11 = linked_list_6.append(node_10)
        assert len(linked_list_6) == 1
        assert f'{type(var_11).__module__}.{type(var_11).__qualname__}' == 'linkedList5.Node'
        assert var_11.next is None
        assert f'{type(var_11.data).__module__}.{type(var_11.data).__qualname__}' == 'linkedList5.Node'
        var_12 = var_11.__str__()
        assert f'{type(var_12).__module__}.{type(var_12).__qualname__}' == 'linkedList5.Node'
        assert var_12.next is None
        assert var_12.data == b'5\xf8\xd2\xaca\xef\xdf\xea\xf5G'
        linked_list_7 = module_0.LinkedList()
        assert len(linked_list_7) == 0
        complex_1 = -1571.872432 - 1247.364j
        linked_list_8 = module_0.LinkedList()
        assert len(linked_list_8) == 0
        var_13 = linked_list_8.delete(complex_1)
        var_14 = var_4.__len__()
>       assert var_14 == 1
E       AssertionError

RANDOM/test_linkedList5_RANDOM.py:12348: AssertionError
[*] Mutation score [847.86986 s]: 71.2%
   - all: 136
   - killed: 79 (58.1%)
   - survived: 34 (25.0%)
   - incompetent: 18 (13.2%)
   - timeout: 5 (3.7%)
