# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import stack1 as module_0
import builtins as module_1


def test_case_0():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0


def test_case_1():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0


def test_case_2():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0


def test_case_3():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0


def test_case_4():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0


def test_case_5():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0


def test_case_6():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0


def test_case_7():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_1.push(stack_node_0)
    assert len(stack_1) == 1


def test_case_8():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(stack_4)
    assert len(stack_node_2.data) == 0


def test_case_9():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0


def test_case_10():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0


def test_case_11():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0


def test_case_12():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0


def test_case_13():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_3 = module_0.StackNode(stack_9)
    assert len(stack_node_3.data) == 0
    stack_node_4 = module_0.StackNode(stack_node_2)


def test_case_14():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_9.push(stack_3)
    assert len(stack_9) == 1


def test_case_15():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_3 = module_0.StackNode(stack_7)
    assert len(stack_node_3.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_3 = stack_12.__len__()
    assert var_3 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_4 = stack_14.__len__()
    assert var_4 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_5 = stack_16.__len__()
    assert var_5 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_6 = stack_17.__len__()
    assert var_6 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_5 = module_0.StackNode(var_6)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(var_1)
    assert stack_node_6.data == 0


def test_case_16():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    var_3 = stack_3.push(stack_2)
    assert len(stack_3) == 1


def test_case_17():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0


def test_case_18():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(stack_node_0)


def test_case_19():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_4 = module_0.StackNode(stack_9)
    assert len(stack_node_4.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_4 = stack_13.__len__()
    assert var_4 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_5 = stack_4.push(var_1)
    assert len(stack_4) == 1


def test_case_20():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(stack_4)
    assert len(stack_node_2.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(stack_7)
    assert len(stack_node_3.data) == 0


def test_case_21():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0


def test_case_22():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_5 = stack_15.__len__()
    assert var_5 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_6 = module_0.StackNode(stack_15)
    assert len(stack_node_6.data) == 0
    var_6 = stack_17.__len__()
    assert var_6 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_7 = stack_20.__len__()
    assert var_7 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_7 = module_0.StackNode(var_7)
    assert stack_node_7.data == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    var_8 = stack_22.__len__()
    assert var_8 == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0


def test_case_23():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_2 = module_0.StackNode(var_4)
    assert stack_node_2.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_3 = module_0.StackNode(var_5)
    assert stack_node_3.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_6 = stack_15.__len__()
    assert var_6 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_4 = module_0.StackNode(var_6)
    assert stack_node_4.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_5 = module_0.StackNode(stack_15)
    assert len(stack_node_5.data) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_7 = stack_19.__len__()
    assert var_7 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_6 = module_0.StackNode(var_7)
    assert stack_node_6.data == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_7 = module_0.StackNode(stack_19)
    assert len(stack_node_7.data) == 0
    var_8 = stack_21.__len__()
    assert var_8 == 0
    var_9 = stack_14.__len__()
    assert var_9 == 0


def test_case_24():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0


def test_case_25():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_5 = module_0.StackNode(stack_10)
    assert len(stack_node_5.data) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0


def test_case_26():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_4 = module_0.StackNode(var_6)
    assert stack_node_4.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_5 = module_0.StackNode(stack_13)
    assert len(stack_node_5.data) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0


def test_case_27():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0


def test_case_28():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0


def test_case_29():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_4 = stack_13.__len__()
    assert var_4 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_4 = module_0.StackNode(stack_13)
    assert len(stack_node_4.data) == 0
    var_5 = stack_15.__len__()
    assert var_5 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_6 = stack_17.__len__()
    assert var_6 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_5 = module_0.StackNode(var_6)
    assert stack_node_5.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_6 = module_0.StackNode(stack_17)
    assert len(stack_node_6.data) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_7 = stack_21.__len__()
    assert var_7 == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    var_8 = stack_22.__len__()
    assert var_8 == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_node_7 = module_0.StackNode(var_8)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0


def test_case_30():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0


def test_case_31():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_2 = module_0.StackNode(stack_5)
    assert len(stack_node_2.data) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_3 = module_0.StackNode(var_5)
    assert stack_node_3.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_4 = module_0.StackNode(stack_11)
    assert len(stack_node_4.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0


def test_case_32():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_2 = module_0.StackNode(stack_5)
    assert len(stack_node_2.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_2 = stack_9.__len__()
    assert var_2 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_4 = module_0.StackNode(stack_9)
    assert len(stack_node_4.data) == 0
    var_3 = stack_11.__len__()
    assert var_3 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_4 = stack_13.__len__()
    assert var_4 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_5 = stack_14.__len__()
    assert var_5 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_6 = module_0.StackNode(stack_13)
    assert len(stack_node_6.data) == 0


def test_case_33():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_5 = stack_16.__len__()
    assert var_5 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_6 = stack_17.__len__()
    assert var_6 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_5 = module_0.StackNode(var_6)
    assert stack_node_5.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_7 = stack_20.__len__()
    assert var_7 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_6 = module_0.StackNode(var_7)
    assert stack_node_6.data == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_node_7 = module_0.StackNode(stack_20)
    assert len(stack_node_7.data) == 0
    var_8 = stack_22.__len__()
    assert var_8 == 0
    var_9 = stack_10.__len__()
    assert var_9 == 0


def test_case_34():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(stack_4)
    assert len(stack_node_2.data) == 0
    var_3 = stack_6.push(stack_3)
    assert len(stack_6) == 1


def test_case_35():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(stack_4)
    assert len(stack_node_2.data) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0


def test_case_36():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0


def test_case_37():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_3 = stack_11.__len__()
    assert var_3 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_4 = stack_13.__len__()
    assert var_4 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_5 = stack_15.__len__()
    assert var_5 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_6 = module_0.StackNode(stack_15)
    assert len(stack_node_6.data) == 0
    var_6 = stack_17.__len__()
    assert var_6 == 0
    stack_node_7 = module_0.StackNode(stack_17)
    assert len(stack_node_7.data) == 0


def test_case_38():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0


def test_case_39():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)


def test_case_40():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_4 = module_0.StackNode(stack_6)
    assert len(stack_node_4.data) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0


def test_case_41():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0


def test_case_42():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_4 = stack_13.__len__()
    assert var_4 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_5 = stack_15.__len__()
    assert var_5 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_6 = stack_17.__len__()
    assert var_6 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_7 = stack_19.__len__()
    assert var_7 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_7 = module_0.StackNode(var_7)
    assert stack_node_7.data == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_8 = module_0.StackNode(stack_node_5)


def test_case_43():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_2 = stack_10.__len__()
    assert var_2 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_3 = stack_14.__len__()
    assert var_3 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_5 = module_0.StackNode(stack_14)
    assert len(stack_node_5.data) == 0
    var_4 = stack_16.__len__()
    assert var_4 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_5 = stack_18.__len__()
    assert var_5 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_6 = stack_20.__len__()
    assert var_6 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    var_7 = stack_22.__len__()
    assert var_7 == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_8 = stack_18.push(stack_2)
    assert len(stack_18) == 1


def test_case_44():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(stack_7)
    assert len(stack_node_4.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_3 = stack_11.__len__()
    assert var_3 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_4 = stack_14.__len__()
    assert var_4 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_5 = stack_19.__len__()
    assert var_5 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_8 = module_0.StackNode(stack_19)
    assert len(stack_node_8.data) == 0
    var_6 = stack_21.__len__()
    assert var_6 == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_7 = stack_23.__len__()
    assert var_7 == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    var_8 = stack_25.__len__()
    assert var_8 == 0
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0
    stack_node_9 = module_0.StackNode(var_8)
    assert stack_node_9.data == 0
    stack_27 = module_0.Stack()
    assert len(stack_27) == 0
    var_9 = stack_27.__len__()
    assert var_9 == 0
    stack_28 = module_0.Stack()
    assert len(stack_28) == 0
    stack_29 = module_0.Stack()
    assert len(stack_29) == 0
    var_10 = stack_29.__len__()
    assert var_10 == 0
    stack_30 = module_0.Stack()
    assert len(stack_30) == 0
    stack_node_10 = module_0.StackNode(var_10)
    assert stack_node_10.data == 0
    stack_31 = module_0.Stack()
    assert len(stack_31) == 0


def test_case_45():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_2 = module_0.StackNode(stack_5)
    assert len(stack_node_2.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_2 = stack_9.__len__()
    assert var_2 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_3 = stack_11.__len__()
    assert var_3 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_4 = stack_13.__len__()
    assert var_4 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_5 = stack_17.__len__()
    assert var_5 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_7 = module_0.StackNode(stack_17)
    assert len(stack_node_7.data) == 0
    var_6 = stack_19.__len__()
    assert var_6 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_7 = stack_21.__len__()
    assert var_7 == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_8 = module_0.StackNode(var_7)
    assert stack_node_8.data == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    var_8 = stack_24.__len__()
    assert var_8 == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    stack_node_9 = module_0.StackNode(var_8)
    assert stack_node_9.data == 0
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0
    var_9 = stack_26.__len__()
    assert var_9 == 0
    stack_27 = module_0.Stack()
    assert len(stack_27) == 0
    stack_28 = module_0.Stack()
    assert len(stack_28) == 0


def test_case_46():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)


def test_case_47():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0


def test_case_48():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_1 = stack_6.__len__()
    assert var_1 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.__len__()
    assert var_2 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_3 = stack_11.__len__()
    assert var_3 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_4 = stack_13.__len__()
    assert var_4 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_5 = stack_17.__len__()
    assert var_5 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_6 = stack_20.__len__()
    assert var_6 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_node_7 = module_0.StackNode(stack_20)
    assert len(stack_node_7.data) == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    var_7 = stack_24.__len__()
    assert var_7 == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    stack_node_8 = module_0.StackNode(var_7)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0
    var_8 = stack_26.__len__()
    assert var_8 == 0
    stack_27 = module_0.Stack()
    assert len(stack_27) == 0
    stack_node_11 = module_0.StackNode(var_8)
    assert stack_node_11.data == 0
    stack_28 = module_0.Stack()
    assert len(stack_28) == 0
    var_9 = stack_28.__len__()
    assert var_9 == 0
    stack_29 = module_0.Stack()
    assert len(stack_29) == 0
    stack_node_12 = module_0.StackNode(var_9)
    assert stack_node_12.data == 0
    stack_30 = module_0.Stack()
    assert len(stack_30) == 0
    stack_31 = module_0.Stack()
    assert len(stack_31) == 0
    stack_node_13 = module_0.StackNode(stack_28)
    assert len(stack_node_13.data) == 0
    var_10 = stack_30.__len__()
    assert var_10 == 0
    stack_node_14 = module_0.StackNode(stack_20)
    assert len(stack_node_14.data) == 0


def test_case_49():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.__len__()
    assert var_2 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_5 = stack_15.__len__()
    assert var_5 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_6 = stack_20.__len__()
    assert var_6 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_node_8 = module_0.StackNode(stack_20)
    assert len(stack_node_8.data) == 0
    var_7 = stack_22.__len__()
    assert var_7 == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    var_8 = stack_24.__len__()
    assert var_8 == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    stack_node_9 = module_0.StackNode(var_8)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_2)
    assert len(stack_node_10.data) == 0


def test_case_50():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0


def test_case_51():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_4 = stack_14.__len__()
    assert var_4 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_5 = stack_15.__len__()
    assert var_5 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_6 = stack_17.__len__()
    assert var_6 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    var_7 = stack_5.__len__()
    assert var_7 == 0


def test_case_52():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    var_2 = stack_4.push(stack_4)
    assert len(stack_4) == 1


def test_case_53():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_2 = module_0.StackNode(var_4)
    assert stack_node_2.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_3 = module_0.StackNode(stack_10)
    assert len(stack_node_3.data) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_6 = stack_15.__len__()
    assert var_6 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_4 = module_0.StackNode(var_6)
    assert stack_node_4.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_7 = stack_20.__len__()
    assert var_7 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_5 = module_0.StackNode(var_7)
    assert stack_node_5.data == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_8 = stack_23.__len__()
    assert var_8 == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_node_6 = module_0.StackNode(var_8)
    assert stack_node_6.data == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0
    stack_node_7 = module_0.StackNode(stack_23)
    assert len(stack_node_7.data) == 0
    var_9 = stack_23.__len__()
    assert var_9 == 0


def test_case_54():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(stack_7)
    assert len(stack_node_4.data) == 0
    var_3 = stack_5.push(stack_node_2)
    assert len(stack_5) == 1


def test_case_55():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(stack_5)
    assert len(stack_node_3.data) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0


def test_case_56():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_7 = stack_16.__len__()
    assert var_7 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_8 = stack_3.__len__()
    assert var_8 == 0


def test_case_57():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_5 = stack_17.__len__()
    assert var_5 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_6 = stack_18.__len__()
    assert var_6 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_1)
    assert len(stack_node_9.data) == 0


def test_case_58():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_3 = module_0.StackNode(stack_8)
    assert len(stack_node_3.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_5 = module_0.StackNode(stack_8)
    assert len(stack_node_5.data) == 0


def test_case_59():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0


def test_case_60():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)


def test_case_61():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0


def test_case_62():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(stack_3)
    assert len(stack_node_3.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_5 = stack_17.__len__()
    assert var_5 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_6 = stack_19.__len__()
    assert var_6 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_node_12 = module_0.StackNode(stack_19)
    assert len(stack_node_12.data) == 0
    bool_0 = False
    stack_node_13 = module_0.StackNode(bool_0)
    stack_node_14 = module_0.StackNode(stack_2)
    assert len(stack_node_14.data) == 0


def test_case_63():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.__len__()
    assert var_2 == 0
    stack_node_4 = module_0.StackNode(stack_node_1)


def test_case_64():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_1.push(stack_node_2)
    assert len(stack_1) == 1


def test_case_65():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_10)
    assert len(stack_node_9.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0


def test_case_66():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_4.push(stack_node_1)
    assert len(stack_4) == 1


def test_case_67():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    int_0 = -3532
    var_2 = stack_0.push(int_0)
    assert len(stack_0) == 1
    assert len(stack_node_1.data) == 1


def test_case_68():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(stack_4)
    assert len(stack_node_2.data) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_4 = module_0.StackNode(stack_8)
    assert len(stack_node_4.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_5 = stack_15.__len__()
    assert var_5 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_6 = stack_17.__len__()
    assert var_6 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_7 = stack_20.__len__()
    assert var_7 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_11 = module_0.StackNode(var_7)
    assert stack_node_11.data == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    var_8 = stack_25.__len__()
    assert var_8 == 0
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0
    stack_node_12 = module_0.StackNode(var_8)
    assert stack_node_12.data == 0
    stack_27 = module_0.Stack()
    assert len(stack_27) == 0
    stack_node_13 = module_0.StackNode(stack_25)
    assert len(stack_node_13.data) == 0
    var_9 = stack_2.push(stack_18)
    assert len(stack_2) == 1


def test_case_69():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(stack_5)
    assert len(stack_node_3.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_2 = stack_9.__len__()
    assert var_2 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_3 = stack_11.__len__()
    assert var_3 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_4 = stack_13.__len__()
    assert var_4 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_5 = stack_16.__len__()
    assert var_5 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_7 = module_0.StackNode(stack_16)
    assert len(stack_node_7.data) == 0
    var_6 = stack_18.__len__()
    assert var_6 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0


def test_case_70():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.push(stack_node_3)
    assert len(stack_6) == 1


def test_case_71():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0


def test_case_72():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_9 = module_0.StackNode(var_3)
    assert stack_node_9.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_10 = module_0.StackNode(stack_6)
    assert len(stack_node_10.data) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_11 = module_0.StackNode(var_5)
    assert stack_node_11.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_7 = stack_15.__len__()
    assert var_7 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_12 = module_0.StackNode(var_7)
    assert stack_node_12.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_13 = module_0.StackNode(stack_15)
    assert len(stack_node_13.data) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_8 = stack_18.__len__()
    assert var_8 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_14 = module_0.StackNode(var_8)
    assert stack_node_14.data == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_9 = stack_20.__len__()
    assert var_9 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_15 = module_0.StackNode(var_9)
    assert stack_node_15.data == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_10 = stack_23.__len__()
    assert var_10 == 0
    var_11 = stack_11.__len__()
    assert var_11 == 0


def test_case_73():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(stack_6)
    assert len(stack_node_7.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_4 = stack_13.__len__()
    assert var_4 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_5 = stack_15.__len__()
    assert var_5 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_10 = module_0.StackNode(var_5)
    assert stack_node_10.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    bool_0 = False
    stack_node_11 = module_0.StackNode(bool_0)
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0


def test_case_74():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_node_7 = module_0.StackNode(stack_node_0)


def test_case_75():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_8 = module_0.StackNode(stack_10)
    assert len(stack_node_8.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_5 = stack_15.__len__()
    assert var_5 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_6 = stack_17.__len__()
    assert var_6 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_7 = stack_19.__len__()
    assert var_7 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_10 = module_0.StackNode(var_7)
    assert stack_node_10.data == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    var_8 = stack_24.__len__()
    assert var_8 == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    var_9 = stack_25.__len__()
    assert var_9 == 0
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0
    stack_node_11 = module_0.StackNode(var_9)
    assert stack_node_11.data == 0
    stack_27 = module_0.Stack()
    assert len(stack_27) == 0
    stack_28 = module_0.Stack()
    assert len(stack_28) == 0
    var_10 = stack_1.__len__()
    assert var_10 == 0


def test_case_76():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_2 = stack_9.__len__()
    assert var_2 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_3 = stack_11.__len__()
    assert var_3 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_4 = stack_13.__len__()
    assert var_4 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_13)
    assert len(stack_node_7.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_5 = stack_15.__len__()
    assert var_5 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0


def test_case_77():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_7 = module_0.StackNode(stack_11)
    assert len(stack_node_7.data) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_6 = stack_15.__len__()
    assert var_6 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_7 = stack_17.__len__()
    assert var_7 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_9 = module_0.StackNode(var_7)
    assert stack_node_9.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_10 = module_0.StackNode(stack_17)
    assert len(stack_node_10.data) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_8 = stack_20.__len__()
    assert var_8 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_11 = module_0.StackNode(var_8)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    var_9 = stack_22.__len__()
    assert var_9 == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_node_13 = module_0.StackNode(var_9)
    assert stack_node_13.data == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    stack_node_14 = module_0.StackNode(stack_22)
    assert len(stack_node_14.data) == 0
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0


def test_case_78():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0


def test_case_79():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0


def test_case_80():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.__len__()
    assert var_2 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_8)
    assert len(stack_node_5.data) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_7 = module_0.StackNode(stack_10)
    assert len(stack_node_7.data) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_7 = stack_15.__len__()
    assert var_7 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_8 = module_0.StackNode(var_7)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    bool_0 = False
    stack_node_10 = module_0.StackNode(bool_0)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_8 = stack_17.__len__()
    assert var_8 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_11 = module_0.StackNode(var_8)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_node_11)
    bool_1 = False
    stack_node_14 = module_0.StackNode(bool_1)


def test_case_81():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)


def test_case_82():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_2)
    assert len(stack_node_6.data) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    bool_0 = False
    stack_node_8 = module_0.StackNode(bool_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_10 = module_0.StackNode(stack_9)
    assert len(stack_node_10.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_11 = module_0.StackNode(var_6)
    assert stack_node_11.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    complex_0 = -363.452 + 147.6847j
    stack_node_12 = module_0.StackNode(complex_0)


def test_case_83():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0


def test_case_84():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(stack_4)
    assert len(stack_node_3.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0


def test_case_85():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_node_2)


def test_case_86():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0


def test_case_87():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_10)
    assert len(stack_node_9.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_10 = module_0.StackNode(var_5)
    assert stack_node_10.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_11 = module_0.StackNode(stack_12)
    assert len(stack_node_11.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_6 = stack_16.__len__()
    assert var_6 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_12 = module_0.StackNode(var_6)
    assert stack_node_12.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0


def test_case_88():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True


def test_case_89():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_8)
    assert len(stack_node_10.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_11 = module_0.StackNode(var_6)
    assert stack_node_11.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_12 = module_0.StackNode(stack_10)
    assert len(stack_node_12.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_13 = module_0.StackNode(var_7)
    assert stack_node_13.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0


def test_case_90():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(stack_4)
    assert len(stack_node_2.data) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_8 = module_0.StackNode(stack_14)
    assert len(stack_node_8.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_6 = stack_16.__len__()
    assert var_6 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_10 = module_0.StackNode(stack_16)
    assert len(stack_node_10.data) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_7 = stack_20.__len__()
    assert var_7 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_11 = module_0.StackNode(var_7)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_node_11)
    stack_node_14 = module_0.StackNode(stack_20)
    assert len(stack_node_14.data) == 0
    var_8 = stack_21.__len__()
    assert var_8 == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0


def test_case_91():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_6 = module_0.StackNode(stack_10)
    assert len(stack_node_6.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_6 = stack_15.__len__()
    assert var_6 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_7 = module_0.check_parenthesis(dict_0)
    assert var_7 is True
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_8 = stack_20.__len__()
    assert var_8 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_9 = module_0.StackNode(var_8)
    assert stack_node_9.data == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_node_10 = module_0.StackNode(var_3)
    assert stack_node_10.data == 0


def test_case_92():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0


def test_case_93():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(stack_3)
    assert len(stack_node_3.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0


def test_case_94():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1


def test_case_95():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_7 = module_0.StackNode(stack_9)
    assert len(stack_node_7.data) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    bool_0 = False
    stack_node_8 = module_0.StackNode(bool_0)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_9 = module_0.StackNode(var_8)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_node_12 = module_0.StackNode(stack_14)
    assert len(stack_node_12.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_9 = stack_16.__len__()
    assert var_9 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_13 = module_0.StackNode(var_9)
    assert stack_node_13.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    none_type_0 = None
    stack_node_14 = module_0.StackNode(none_type_0)
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0


def test_case_96():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.__len__()
    assert var_2 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_5 = stack_17.__len__()
    assert var_5 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_17)
    assert len(stack_node_7.data) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0


def test_case_97():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)


def test_case_98():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_1 = module_0.check_parenthesis(dict_1)
    assert var_1 is True
    stack_node_1 = module_0.StackNode(float_1)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_2 = stack_0.__len__()
    assert var_2 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_0)
    assert len(stack_node_5.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_10 = module_0.StackNode(stack_4)
    assert len(stack_node_10.data) == 0
    var_5 = stack_4.__len__()
    assert var_5 == 0


def test_case_99():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0


def test_case_100():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_3)
    assert len(stack_node_6.data) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    var_3 = stack_3.push(stack_node_5)
    assert len(stack_3) == 1
    assert len(stack_node_6.data) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_9 = module_0.StackNode(stack_10)
    assert len(stack_node_9.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_10 = module_0.StackNode(var_7)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_13)
    assert len(stack_node_13.data) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_9 = stack_15.__len__()
    assert var_9 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_14 = module_0.StackNode(var_9)
    assert stack_node_14.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_15 = module_0.StackNode(stack_15)
    assert len(stack_node_15.data) == 0
    var_10 = stack_17.__len__()
    assert var_10 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_11 = stack_19.__len__()
    assert var_11 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_16 = module_0.StackNode(var_11)
    assert stack_node_16.data == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_17 = module_0.StackNode(var_1)
    assert stack_node_17.data == 0


def test_case_101():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_6 = module_0.StackNode(stack_8)
    assert len(stack_node_6.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_5 = stack_16.__len__()
    assert var_5 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    stack_node_8 = module_0.StackNode(float_0)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_7 = stack_17.__len__()
    assert var_7 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_9 = module_0.StackNode(var_7)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_node_12 = module_0.StackNode(stack_17)
    assert len(stack_node_12.data) == 0
    var_8 = stack_18.__len__()
    assert var_8 == 0
    var_9 = stack_17.push(stack_node_11)
    assert len(stack_17) == 1
    assert len(stack_node_12.data) == 1
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_10 = stack_19.__len__()
    assert var_10 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_13 = module_0.StackNode(var_10)
    assert stack_node_13.data == 0
    stack_node_14 = module_0.StackNode(stack_node_13)
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_11 = stack_21.__len__()
    assert var_11 == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_15 = module_0.StackNode(var_11)
    assert stack_node_15.data == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_node_16 = module_0.StackNode(stack_22)
    assert len(stack_node_16.data) == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0


def test_case_102():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    var_1 = stack_2.push(var_0)
    assert len(stack_2) == 1


def test_case_103():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    stack_node_1 = module_0.StackNode(float_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_4)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(stack_5)
    assert len(stack_node_3.data) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(var_6)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_9)
    assert len(stack_node_7.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_12.__len__()
    assert var_7 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_8 = module_0.StackNode(var_7)
    assert stack_node_8.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_9 = module_0.StackNode(stack_13)
    assert len(stack_node_9.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_8 = stack_15.__len__()
    assert var_8 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_10 = module_0.StackNode(var_8)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_9 = stack_17.__len__()
    assert var_9 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_10 = stack_18.__len__()
    assert var_10 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_12 = module_0.StackNode(var_10)
    assert stack_node_12.data == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0


def test_case_104():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_10)
    assert len(stack_node_5.data) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_7 = module_0.StackNode(stack_12)
    assert len(stack_node_7.data) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0


def test_case_105():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_4)
    assert len(stack_node_6.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_1.push(stack_node_1)
    assert len(stack_1) == 1
    assert len(stack_node_2.data) == 1


def test_case_106():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_2 = module_0.StackNode(float_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_7 = module_0.StackNode(stack_9)
    assert len(stack_node_7.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_9 = module_0.StackNode(stack_12)
    assert len(stack_node_9.data) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_8 = stack_16.__len__()
    assert var_8 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_10 = module_0.StackNode(var_8)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_16)
    assert len(stack_node_13.data) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_14 = module_0.StackNode(stack_node_5)


def test_case_107():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_11)
    assert len(stack_node_7.data) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_9 = module_0.StackNode(stack_14)
    assert len(stack_node_9.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0


def test_case_108():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_4)
    assert len(stack_node_7.data) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    var_4 = stack_4.push(stack_node_6)
    assert len(stack_4) == 1
    assert len(stack_node_7.data) == 1
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_6)
    assert len(stack_node_11.data) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_7 = stack_8.__len__()
    assert var_7 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_12 = module_0.StackNode(var_7)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_node_12)
    stack_node_15 = module_0.StackNode(stack_8)
    assert len(stack_node_15.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_8 = stack_10.__len__()
    assert var_8 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_16 = module_0.StackNode(var_8)
    assert stack_node_16.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_17 = module_0.StackNode(stack_node_8)


def test_case_109():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(stack_2)
    assert len(stack_node_3.data) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    stack_node_5 = module_0.StackNode(float_1)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    tuple_0 = (var_0, var_2, var_4)
    var_7 = module_0.check_parenthesis(tuple_0)
    assert var_7 is True


def test_case_110():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0


def test_case_111():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_3)
    assert len(stack_node_6.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_8 = module_0.StackNode(stack_5)
    assert len(stack_node_8.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_0 = None
    stack_node_9 = module_0.StackNode(none_type_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_10 = module_0.StackNode(var_5)
    assert stack_node_10.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_11 = module_0.StackNode(var_7)
    assert stack_node_11.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0


def test_case_112():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0


def test_case_113():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    list_0 = [stack_node_2, var_2, var_0]
    var_3 = stack_1.push(list_0)
    assert len(stack_1) == 1


def test_case_114():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_2 = module_0.check_parenthesis(dict_1)
    assert var_2 is True
    stack_node_1 = module_0.StackNode(float_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0


def test_case_115():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_5)
    assert len(stack_node_4.data) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_11 = module_0.StackNode(stack_14)
    assert len(stack_node_11.data) == 0
    var_7 = stack_16.__len__()
    assert var_7 == 0
    var_8 = stack_5.push(var_2)
    assert len(stack_5) == 1
    assert len(stack_node_4.data) == 1


def test_case_116():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_5 = module_0.StackNode(var_6)
    assert stack_node_5.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_8 = stack_15.__len__()
    assert var_8 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_9 = stack_4.__len__()
    assert var_9 == 0


def test_case_117():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_8 = module_0.StackNode(stack_5)
    assert len(stack_node_8.data) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_node_12 = module_0.StackNode(stack_9)
    assert len(stack_node_12.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_7 = module_0.check_parenthesis(dict_0)
    assert var_7 is True
    stack_node_13 = module_0.StackNode(stack_node_2)


def test_case_118():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_5 = stack_14.__len__()
    assert var_5 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_6 = stack_16.__len__()
    assert var_6 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_17)
    assert len(stack_node_11.data) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0


def test_case_119():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(stack_3)
    assert len(stack_node_3.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_6)
    assert len(stack_node_7.data) == 0
    var_3 = stack_1.push(none_type_0)
    assert len(stack_1) == 1


def test_case_120():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(stack_7)
    assert len(stack_node_8.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_11 = module_0.StackNode(stack_14)
    assert len(stack_node_11.data) == 0
    var_7 = stack_16.__len__()
    assert var_7 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_8 = stack_18.__len__()
    assert var_8 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_12 = module_0.StackNode(var_8)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_node_12)
    stack_node_15 = module_0.StackNode(stack_18)
    assert len(stack_node_15.data) == 0
    var_9 = stack_19.__len__()
    assert var_9 == 0
    var_10 = stack_18.push(stack_node_14)
    assert len(stack_18) == 1
    assert len(stack_node_15.data) == 1
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0


def test_case_121():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(stack_3)
    assert len(stack_node_3.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_3 = stack_11.__len__()
    assert var_3 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_4 = stack_16.__len__()
    assert var_4 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_5 = stack_20.__len__()
    assert var_5 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_9 = module_0.StackNode(stack_21)
    assert len(stack_node_9.data) == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_6 = stack_23.__len__()
    assert var_6 == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_23)
    assert len(stack_node_13.data) == 0
    var_7 = stack_24.__len__()
    assert var_7 == 0
    var_8 = stack_23.push(stack_node_12)
    assert len(stack_23) == 1
    assert len(stack_node_13.data) == 1
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    var_9 = stack_25.__len__()
    assert var_9 == 0
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0
    stack_node_14 = module_0.StackNode(var_9)
    assert stack_node_14.data == 0
    stack_node_15 = module_0.StackNode(stack_node_14)
    stack_node_16 = module_0.StackNode(stack_node_14)
    stack_node_17 = module_0.StackNode(stack_25)
    assert len(stack_node_17.data) == 0
    var_10 = stack_26.__len__()
    assert var_10 == 0
    stack_27 = module_0.Stack()
    assert len(stack_27) == 0
    var_11 = stack_27.__len__()
    assert var_11 == 0
    stack_28 = module_0.Stack()
    assert len(stack_28) == 0
    stack_node_18 = module_0.StackNode(var_11)
    assert stack_node_18.data == 0
    stack_29 = module_0.Stack()
    assert len(stack_29) == 0
    stack_30 = module_0.Stack()
    assert len(stack_30) == 0
    stack_node_19 = module_0.StackNode(stack_27)
    assert len(stack_node_19.data) == 0
    var_12 = stack_29.__len__()
    assert var_12 == 0
    stack_node_20 = module_0.StackNode(var_5)
    assert stack_node_20.data == 0


def test_case_122():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_0 = module_0.StackNode(var_2)
    assert stack_node_0.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(stack_3)
    assert len(stack_node_1.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_4 = module_0.StackNode(stack_10)
    assert len(stack_node_4.data) == 0
    stack_node_5 = module_0.StackNode(stack_7)
    assert len(stack_node_5.data) == 0


def test_case_123():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_8)
    assert len(stack_node_6.data) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0


def test_case_124():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_2 = module_0.StackNode(stack_5)
    assert len(stack_node_2.data) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_9)
    assert len(stack_node_6.data) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_7 = module_0.StackNode(var_7)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_8 = stack_15.__len__()
    assert var_8 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_10 = module_0.StackNode(var_8)
    assert stack_node_10.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    bool_0 = False
    stack_node_11 = module_0.StackNode(bool_0)
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_9 = stack_20.__len__()
    assert var_9 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_12 = module_0.StackNode(var_9)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_node_12)
    stack_node_15 = module_0.StackNode(stack_20)
    assert len(stack_node_15.data) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0


def test_case_125():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_7 = module_0.StackNode(stack_10)
    assert len(stack_node_7.data) == 0
    stack_node_8 = module_0.StackNode(stack_node_4)


def test_case_126():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_9)
    assert len(stack_node_9.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_12)
    assert len(stack_node_13.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_14 = module_0.StackNode(var_7)
    assert stack_node_14.data == 0
    stack_node_15 = module_0.StackNode(stack_node_14)
    stack_node_16 = module_0.StackNode(stack_node_14)
    stack_node_17 = module_0.StackNode(stack_14)
    assert len(stack_node_17.data) == 0
    var_8 = stack_15.__len__()
    assert var_8 == 0
    var_9 = stack_14.push(stack_node_16)
    assert len(stack_14) == 1
    assert len(stack_node_17.data) == 1
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0


def test_case_127():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_6 = module_0.StackNode(stack_11)
    assert len(stack_node_6.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_13)
    assert len(stack_node_10.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_6 = stack_16.__len__()
    assert var_6 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_11 = module_0.StackNode(var_6)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_node_11)
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_7 = stack_18.__len__()
    assert var_7 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_8 = stack_19.__len__()
    assert var_8 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_14 = module_0.StackNode(var_8)
    assert stack_node_14.data == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    var_9 = stack_1.__len__()
    assert var_9 == 0


def test_case_128():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_7 = module_0.StackNode(stack_7)
    assert len(stack_node_7.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    bool_0 = False
    stack_node_9 = module_0.StackNode(bool_0)
    var_7 = stack_12.__len__()
    assert var_7 == 0


def test_case_129():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_2)
    assert len(stack_node_3.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_6)
    assert len(stack_node_7.data) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_9 = module_0.StackNode(stack_8)
    assert len(stack_node_9.data) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_11 = module_0.StackNode(stack_12)
    assert len(stack_node_11.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_7 = stack_15.__len__()
    assert var_7 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_12 = module_0.StackNode(var_7)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_node_12)
    stack_node_15 = module_0.StackNode(stack_15)
    assert len(stack_node_15.data) == 0
    var_8 = stack_16.__len__()
    assert var_8 == 0
    var_9 = stack_15.push(stack_node_14)
    assert len(stack_15) == 1
    assert len(stack_node_15.data) == 1
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_10 = stack_18.__len__()
    assert var_10 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_16 = module_0.StackNode(var_10)
    assert stack_node_16.data == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_11 = stack_20.__len__()
    assert var_11 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_17 = module_0.StackNode(var_0)
    assert stack_node_17.data == 0


def test_case_130():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(stack_5)
    assert len(stack_node_2.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_8)
    assert len(stack_node_6.data) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    var_5 = stack_8.push(stack_node_5)
    assert len(stack_8) == 1
    assert len(stack_node_6.data) == 1
    bool_0 = False
    stack_node_7 = module_0.StackNode(bool_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_8 = module_0.StackNode(var_7)
    assert stack_node_8.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_9 = module_0.StackNode(stack_11)
    assert len(stack_node_9.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_8 = stack_15.__len__()
    assert var_8 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_10 = module_0.StackNode(var_8)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_15)
    assert len(stack_node_13.data) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_9 = stack_18.__len__()
    assert var_9 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_14 = module_0.StackNode(var_9)
    assert stack_node_14.data == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_15 = module_0.StackNode(stack_19)
    assert len(stack_node_15.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_10 = module_0.check_parenthesis(dict_0)
    assert var_10 is True
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_11 = stack_21.__len__()
    assert var_11 == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_16 = module_0.StackNode(var_11)
    assert stack_node_16.data == 0
    stack_node_17 = module_0.StackNode(var_9)
    assert stack_node_17.data == 0


def test_case_131():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_1.__len__()
    assert var_3 == 0


def test_case_132():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0


def test_case_133():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    var_3 = stack_4.push(stack_node_3)
    assert len(stack_4) == 1
    assert len(stack_node_4.data) == 1
    stack_node_5 = module_0.StackNode(var_3)


def test_case_134():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)


def test_case_135():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    var_4 = stack_3.__len__()
    assert var_4 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_3 = module_0.StackNode(complex_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(stack_5)
    assert len(stack_node_5.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_7 = module_0.StackNode(stack_8)
    assert len(stack_node_7.data) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data is True


def test_case_136():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0


def test_case_137():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(stack_7)
    assert len(stack_node_3.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_9)
    assert len(stack_node_7.data) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_node_12 = module_0.StackNode(stack_12)
    assert len(stack_node_12.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_7 = stack_15.__len__()
    assert var_7 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_13 = module_0.StackNode(var_7)
    assert stack_node_13.data == 0
    stack_node_14 = module_0.StackNode(stack_node_13)
    stack_node_15 = module_0.StackNode(stack_node_13)
    bool_0 = False
    stack_node_16 = module_0.StackNode(bool_0)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_8 = stack_17.__len__()
    assert var_8 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_17 = module_0.StackNode(var_8)
    assert stack_node_17.data == 0
    stack_node_18 = module_0.StackNode(stack_node_17)
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_9 = stack_19.__len__()
    assert var_9 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_19 = module_0.StackNode(var_9)
    assert stack_node_19.data == 0
    stack_node_20 = module_0.StackNode(stack_node_19)
    stack_node_21 = module_0.StackNode(stack_20)
    assert len(stack_node_21.data) == 0
    var_10 = stack_0.push(stack_19)
    assert len(stack_0) == 1
    assert len(stack_node_1.data) == 1


def test_case_138():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_node_6 = module_0.StackNode(stack_2)
    assert len(stack_node_6.data) == 0


def test_case_139():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_4 = module_0.StackNode(stack_7)
    assert len(stack_node_4.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_12)
    assert len(stack_node_11.data) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_12 = module_0.StackNode(var_6)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_node_12)
    stack_node_15 = module_0.StackNode(stack_14)
    assert len(stack_node_15.data) == 0
    var_7 = stack_15.__len__()
    assert var_7 == 0
    var_8 = stack_14.push(stack_node_14)
    assert len(stack_14) == 1
    assert len(stack_node_15.data) == 1
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_9 = stack_14.peek()
    assert f"{type(var_9).__module__}.{type(var_9).__qualname__}" == "stack1.StackNode"
    assert (
        f"{type(var_9.data).__module__}.{type(var_9.data).__qualname__}"
        == "stack1.StackNode"
    )
    assert var_9.next is None


def test_case_140():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(stack_5)
    assert len(stack_node_4.data) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    var_5 = stack_7.push(float_0)
    assert len(stack_7) == 1


def test_case_141():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_4)
    assert len(stack_node_6.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0


def test_case_142():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(var_4)
    assert stack_node_2.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    var_6 = stack_7.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_7 = stack_9.__len__()
    assert var_7 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_3 = module_0.StackNode(var_7)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_10)
    assert len(stack_node_5.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0


def test_case_143():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(stack_5)
    assert len(stack_node_3.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_2 = stack_9.__len__()
    assert var_2 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_9)
    assert len(stack_node_7.data) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_10 = module_0.StackNode(stack_14)
    assert len(stack_node_10.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_6 = stack_16.__len__()
    assert var_6 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_11 = module_0.StackNode(var_6)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_node_11)
    stack_node_14 = module_0.StackNode(stack_16)
    assert len(stack_node_14.data) == 0
    var_7 = stack_17.__len__()
    assert var_7 == 0
    var_8 = stack_16.push(stack_node_13)
    assert len(stack_16) == 1
    assert len(stack_node_14.data) == 1
    var_9 = stack_16.__len__()
    assert var_9 == 1


def test_case_144():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_5 = module_0.StackNode(complex_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(stack_0)
    assert len(stack_node_6.data) == 0


def test_case_145():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_8 = module_0.StackNode(var_7)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_13)
    assert len(stack_node_11.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0


def test_case_146():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_0)
    assert len(stack_node_4.data) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    var_3 = stack_0.push(stack_node_3)
    assert len(stack_0) == 1
    assert len(stack_node_4.data) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_4 = stack_2.__len__()
    assert var_4 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_2)
    assert len(stack_node_8.data) == 0
    var_5 = stack_3.__len__()
    assert var_5 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_6 = stack_4.__len__()
    assert var_6 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_5)
    assert len(stack_node_11.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_7 = stack_6.__len__()
    assert var_7 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_12 = module_0.StackNode(var_7)
    assert stack_node_12.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_13 = module_0.StackNode(stack_6)
    assert len(stack_node_13.data) == 0
    var_8 = stack_8.__len__()
    assert var_8 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_9 = stack_10.__len__()
    assert var_9 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_14 = module_0.StackNode(var_9)
    assert stack_node_14.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_10 = stack_16.__len__()
    assert var_10 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_15 = module_0.StackNode(var_10)
    assert stack_node_15.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_11 = stack_18.__len__()
    assert var_11 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_12 = stack_20.__len__()
    assert var_12 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_16 = module_0.StackNode(var_12)
    assert stack_node_16.data == 0
    stack_node_17 = module_0.StackNode(stack_node_16)
    stack_node_18 = module_0.StackNode(stack_node_16)
    complex_0 = -3711.3 - 806.2j
    stack_node_19 = module_0.StackNode(complex_0)
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0


def test_case_147():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_5 = module_0.StackNode(float_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_8 = module_0.StackNode(stack_9)
    assert len(stack_node_8.data) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_9 = module_0.StackNode(var_8)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_14)
    assert len(stack_node_11.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_9 = stack_15.__len__()
    assert var_9 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_12 = module_0.StackNode(var_9)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_node_12)
    var_10 = stack_16.push(float_0)
    assert len(stack_16) == 1


def test_case_148():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_5)
    assert len(stack_node_4.data) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    var_3 = stack_5.push(stack_node_3)
    assert len(stack_5) == 1
    assert len(stack_node_4.data) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_7)
    assert len(stack_node_8.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_7 = stack_15.__len__()
    assert var_7 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_12 = module_0.StackNode(var_7)
    assert stack_node_12.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_8 = stack_17.__len__()
    assert var_8 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    none_type_0 = None
    stack_node_13 = module_0.StackNode(none_type_0)
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0


def test_case_149():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_8)
    assert len(stack_node_6.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_8 = module_0.StackNode(stack_10)
    assert len(stack_node_8.data) == 0
    var_5 = stack_4.__len__()
    assert var_5 == 0


def test_case_150():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)


def test_case_151():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_0)
    assert len(stack_node_4.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_7 = module_0.StackNode(stack_4)
    assert len(stack_node_7.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_5 = stack_15.__len__()
    assert var_5 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_6 = stack_17.__len__()
    assert var_6 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_7 = stack_19.__len__()
    assert var_7 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_10 = module_0.StackNode(var_7)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_19)
    assert len(stack_node_13.data) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_8 = stack_21.__len__()
    assert var_8 == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_14 = module_0.StackNode(var_8)
    assert stack_node_14.data == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0


def test_case_152():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_0 = module_0.StackNode(var_2)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_2)
    assert len(stack_node_3.data) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    var_4 = stack_2.push(stack_node_2)
    assert len(stack_2) == 1
    assert len(stack_node_3.data) == 1
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_5 = stack_4.__len__()
    assert var_5 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    stack_node_5 = module_0.StackNode(float_1)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_7 = stack_9.__len__()
    assert var_7 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_6 = module_0.StackNode(var_7)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_8 = stack_11.__len__()
    assert var_8 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_8 = module_0.StackNode(var_8)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_11)
    assert len(stack_node_11.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_9 = stack_14.__len__()
    assert var_9 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_12 = module_0.StackNode(var_9)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_15)
    assert len(stack_node_14.data) == 0
    var_10 = stack_11.push(var_5)
    assert len(stack_11) == 1
    assert len(stack_node_11.data) == 1


def test_case_153():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_2)
    assert len(stack_node_6.data) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_7 = module_0.StackNode(complex_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_11 = module_0.StackNode(var_4)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_node_11)
    stack_node_14 = module_0.StackNode(stack_6)
    assert len(stack_node_14.data) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    var_6 = stack_6.push(stack_node_13)
    assert len(stack_6) == 1
    assert len(stack_node_14.data) == 1
    var_7 = stack_6.pop()
    assert len(stack_6) == 0
    assert len(stack_node_14.data) == 0
    assert f"{type(var_7).__module__}.{type(var_7).__qualname__}" == "stack1.StackNode"
    assert (
        f"{type(var_7.data).__module__}.{type(var_7.data).__qualname__}"
        == "stack1.StackNode"
    )
    assert var_7.next is None


def test_case_154():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_5.push(stack_4)
    assert len(stack_5) == 1


def test_case_155():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_4)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    stack_node_5 = module_0.StackNode(stack_node_4)


def test_case_156():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    complex_0 = -3711.3 - 806.2j
    stack_node_3 = module_0.StackNode(complex_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_3 = stack_11.__len__()
    assert var_3 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_4 = stack_13.__len__()
    assert var_4 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_5 = stack_15.__len__()
    assert var_5 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_7 = module_0.StackNode(stack_16)
    assert len(stack_node_7.data) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_6 = stack_18.__len__()
    assert var_6 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_18)
    assert len(stack_node_11.data) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_7 = stack_20.__len__()
    assert var_7 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_12 = module_0.StackNode(var_7)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_21)
    assert len(stack_node_14.data) == 0
    var_8 = stack_7.__len__()
    assert var_8 == 0


def test_case_157():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_2 = module_0.StackNode(complex_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(stack_5)
    assert len(stack_node_4.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_6 = module_0.StackNode(float_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_13)
    assert len(stack_node_10.data) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_8 = stack_15.__len__()
    assert var_8 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_11 = module_0.StackNode(var_8)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_node_11)
    stack_node_14 = module_0.StackNode(stack_15)
    assert len(stack_node_14.data) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_9 = stack_17.__len__()
    assert var_9 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_15 = module_0.StackNode(var_9)
    assert stack_node_15.data == 0
    stack_node_16 = module_0.StackNode(stack_node_15)
    stack_node_17 = module_0.StackNode(stack_node_15)
    stack_node_18 = module_0.StackNode(stack_17)
    assert len(stack_node_18.data) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_10 = stack_4.push(var_4)
    assert len(stack_4) == 1


def test_case_158():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    complex_0 = -3711.3 - 806.2j
    stack_node_6 = module_0.StackNode(complex_0)
    bool_0 = False
    stack_node_7 = module_0.StackNode(bool_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_8 = module_0.StackNode(var_2)
    assert stack_node_8.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_9 = module_0.StackNode(stack_5)
    assert len(stack_node_9.data) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0


def test_case_159():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_2 = module_0.StackNode(complex_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_5 = module_0.StackNode(var_6)
    assert stack_node_5.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_6 = module_0.StackNode(stack_13)
    assert len(stack_node_6.data) == 0
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_7 = stack_17.__len__()
    assert var_7 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_8 = module_0.StackNode(var_7)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    var_8 = stack_13.push(var_1)
    assert len(stack_13) == 1
    assert len(stack_node_6.data) == 1


def test_case_160():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_4)
    assert len(stack_node_8.data) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_10 = module_0.StackNode(stack_6)
    assert len(stack_node_10.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_11 = module_0.StackNode(var_5)
    assert stack_node_11.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_12 = module_0.StackNode(stack_11)
    assert len(stack_node_12.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_13 = module_0.StackNode(var_6)
    assert stack_node_13.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_7 = stack_15.__len__()
    assert var_7 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_14 = module_0.StackNode(var_7)
    assert stack_node_14.data == 0
    stack_node_15 = module_0.StackNode(stack_node_14)
    stack_node_16 = module_0.StackNode(stack_16)
    assert len(stack_node_16.data) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_8 = stack_17.__len__()
    assert var_8 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_17 = module_0.StackNode(var_8)
    assert stack_node_17.data == 0
    stack_node_18 = module_0.StackNode(stack_node_17)
    stack_node_19 = module_0.StackNode(stack_node_17)
    stack_node_20 = module_0.StackNode(stack_17)
    assert len(stack_node_20.data) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0


def test_case_161():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_5 = module_0.StackNode(stack_7)
    assert len(stack_node_5.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_7 = module_0.StackNode(stack_11)
    assert len(stack_node_7.data) == 0
    stack_node_8 = module_0.StackNode(stack_1)
    assert len(stack_node_8.data) == 0


def test_case_162():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_6 = module_0.StackNode(stack_8)
    assert len(stack_node_6.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0


def test_case_163():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_5)
    assert len(stack_node_8.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0


def test_case_164():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_9 = module_0.StackNode(float_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_0 = None
    stack_node_10 = module_0.StackNode(none_type_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_11 = module_0.StackNode(var_5)
    assert stack_node_11.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_12 = module_0.StackNode(stack_12)
    assert len(stack_node_12.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_13 = module_0.StackNode(var_6)
    assert stack_node_13.data == 0
    stack_node_14 = module_0.StackNode(stack_node_13)
    stack_node_15 = module_0.StackNode(stack_node_13)
    stack_node_16 = module_0.StackNode(stack_14)
    assert len(stack_node_16.data) == 0
    var_7 = stack_9.__len__()
    assert var_7 == 0


def test_case_165():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_8)
    assert len(stack_node_9.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_10 = module_0.StackNode(var_4)
    assert stack_node_10.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_11 = module_0.StackNode(stack_10)
    assert len(stack_node_11.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0


def test_case_166():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    var_3 = stack_2.push(float_0)
    assert len(stack_2) == 1


def test_case_167():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    complex_0 = -3711.3 - 806.2j
    stack_node_3 = module_0.StackNode(complex_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_5)
    assert len(stack_node_6.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_8 = module_0.StackNode(stack_6)
    assert len(stack_node_8.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_8 = stack_16.__len__()
    assert var_8 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_11 = module_0.StackNode(var_8)
    assert stack_node_11.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_9 = stack_5.push(var_4)
    assert len(stack_5) == 1
    assert len(stack_node_6.data) == 1


def test_case_168():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_5 = module_0.StackNode(var_7)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_12)
    assert len(stack_node_7.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_8 = module_0.StackNode(var_8)
    assert stack_node_8.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_9 = stack_16.__len__()
    assert var_9 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_9 = module_0.StackNode(var_9)
    assert stack_node_9.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_10 = stack_18.__len__()
    assert var_10 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_11 = stack_20.__len__()
    assert var_11 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_10 = module_0.StackNode(var_11)
    assert stack_node_10.data == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_11 = module_0.StackNode(stack_20)
    assert len(stack_node_11.data) == 0
    stack_node_12 = module_0.StackNode(stack_18)
    assert len(stack_node_12.data) == 0


def test_case_169():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_2)
    assert len(stack_node_6.data) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    bool_0 = False
    stack_node_7 = module_0.StackNode(bool_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_6)
    assert len(stack_node_11.data) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    var_6 = stack_6.push(stack_node_10)
    assert len(stack_6) == 1
    assert len(stack_node_11.data) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_7 = stack_8.__len__()
    assert var_7 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_12 = module_0.StackNode(var_7)
    assert stack_node_12.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_13 = module_0.StackNode(stack_node_2)


def test_case_170():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_9 = module_0.StackNode(stack_5)
    assert len(stack_node_9.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_10 = module_0.StackNode(var_4)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_8)
    assert len(stack_node_13.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_14 = module_0.StackNode(var_5)
    assert stack_node_14.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_15 = module_0.StackNode(stack_11)
    assert len(stack_node_15.data) == 0
    bool_0 = False
    stack_node_16 = module_0.StackNode(bool_0)
    complex_0 = -3711.3 - 806.2j
    stack_node_17 = module_0.StackNode(complex_0)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_18 = module_0.StackNode(var_6)
    assert stack_node_18.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_19 = module_0.StackNode(stack_13)
    assert len(stack_node_19.data) == 0
    var_7 = stack_6.__len__()
    assert var_7 == 0


def test_case_171():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_5)
    assert len(stack_node_7.data) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    var_5 = stack_4.__len__()
    assert var_5 == 0


def test_case_172():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_6)
    assert len(stack_node_8.data) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    var_5 = stack_6.push(stack_node_7)
    assert len(stack_6) == 1
    assert len(stack_node_8.data) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_node_12 = module_0.StackNode(stack_8)
    assert len(stack_node_12.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_13 = module_0.StackNode(var_7)
    assert stack_node_13.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_14 = module_0.StackNode(stack_10)
    assert len(stack_node_14.data) == 0
    var_8 = stack_12.__len__()
    assert var_8 == 0
    none_type_0 = None
    stack_node_15 = module_0.StackNode(none_type_0)
    stack_node_16 = module_0.StackNode(stack_2)
    assert len(stack_node_16.data) == 0


def test_case_173():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    var_3 = stack_3.push(stack_node_4)
    assert len(stack_3) == 1
    assert len(stack_node_5.data) == 1
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_5)
    assert len(stack_node_10.data) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_11 = module_0.StackNode(complex_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_7 = stack_8.__len__()
    assert var_7 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_12 = module_0.StackNode(var_7)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_node_12)
    stack_node_15 = module_0.StackNode(stack_8)
    assert len(stack_node_15.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_8 = module_0.check_parenthesis(dict_0)
    assert var_8 is True
    var_9 = stack_8.__len__()
    assert var_9 == 0


def test_case_174():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    var_3 = stack_1.push(stack_node_3)
    assert len(stack_1) == 1
    assert len(stack_node_4.data) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_7 = module_0.check_parenthesis(dict_0)
    assert var_7 is True
    stack_node_10 = module_0.StackNode(float_0)
    var_8 = stack_2.__len__()
    assert var_8 == 0


def test_case_175():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0


def test_case_176():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(stack_5)
    assert len(stack_node_6.data) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_9)
    assert len(stack_node_10.data) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_11 = module_0.StackNode(complex_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_8 = stack_12.__len__()
    assert var_8 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_12 = module_0.StackNode(var_8)
    assert stack_node_12.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_13 = module_0.StackNode(stack_12)
    assert len(stack_node_13.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_9 = stack_16.__len__()
    assert var_9 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_14 = module_0.StackNode(var_9)
    assert stack_node_14.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_10 = module_0.check_parenthesis(dict_1)
    assert var_10 is True
    var_11 = stack_17.__len__()
    assert var_11 == 0
    var_12 = stack_8.push(var_8)
    assert len(stack_8) == 1


def test_case_177():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_2 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0


def test_case_178():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0


def test_case_179():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_10)
    assert len(stack_node_8.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_node_12 = module_0.StackNode(stack_12)
    assert len(stack_node_12.data) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    bool_0 = False
    stack_node_13 = module_0.StackNode(bool_0)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_14 = module_0.StackNode(var_7)
    assert stack_node_14.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_15 = module_0.StackNode(stack_14)
    assert len(stack_node_15.data) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_8 = stack_15.__len__()
    assert var_8 == 0


def test_case_180():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_1 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_1 = stack_6.__len__()
    assert var_1 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_4 = module_0.StackNode(stack_6)
    assert len(stack_node_4.data) == 0
    var_2 = stack_8.__len__()
    assert var_2 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_10)
    assert len(stack_node_8.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_4 = stack_13.__len__()
    assert var_4 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_5 = stack_15.__len__()
    assert var_5 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_6 = stack_17.__len__()
    assert var_6 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_7 = stack_18.__len__()
    assert var_7 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_11 = module_0.StackNode(var_7)
    assert stack_node_11.data == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_8 = stack_6.push(var_7)
    assert len(stack_6) == 1
    assert len(stack_node_4.data) == 1


def test_case_181():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0


def test_case_182():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_2 = module_0.StackNode(float_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    var_5 = stack_7.__len__()
    assert var_5 == 0
    var_6 = stack_3.push(var_0)
    assert len(stack_3) == 1


def test_case_183():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0


def test_case_184():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    complex_0 = -3711.3 - 806.2j
    stack_node_5 = module_0.StackNode(complex_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0


def test_case_185():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_1 = module_0.StackNode(float_0)
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_4 = module_0.StackNode(stack_7)
    assert len(stack_node_4.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_13)
    assert len(stack_node_11.data) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    var_8 = stack_13.push(stack_node_10)
    assert len(stack_13) == 1
    assert len(stack_node_11.data) == 1
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_9 = stack_15.__len__()
    assert var_9 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_12 = module_0.StackNode(var_9)
    assert stack_node_12.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_13 = module_0.StackNode(stack_16)
    assert len(stack_node_13.data) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_10 = stack_18.__len__()
    assert var_10 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_14 = module_0.StackNode(var_10)
    assert stack_node_14.data == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_15 = module_0.StackNode(var_10)
    assert stack_node_15.data == 0


def test_case_186():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(stack_4)
    assert len(stack_node_3.data) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_8)
    assert len(stack_node_7.data) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    bool_0 = False
    stack_node_8 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_node_9 = module_0.StackNode(float_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_10 = module_0.StackNode(var_7)
    assert stack_node_10.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_8 = stack_15.__len__()
    assert var_8 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0


def test_case_187():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_8)
    assert len(stack_node_7.data) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    var_6 = stack_8.push(stack_node_6)
    assert len(stack_8) == 1
    assert len(stack_node_7.data) == 1
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_9 = module_0.StackNode(var_7)
    assert stack_node_9.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_10 = module_0.StackNode(var_8)
    assert stack_node_10.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_9 = module_0.check_parenthesis(dict_0)
    assert var_9 is True
    var_10 = stack_15.__len__()
    assert var_10 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_11 = stack_17.__len__()
    assert var_11 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_11 = module_0.StackNode(var_11)
    assert stack_node_11.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_12 = module_0.StackNode(stack_17)
    assert len(stack_node_12.data) == 0
    stack_node_13 = module_0.StackNode(dict_0)


def test_case_188():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0


def test_case_189():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0


def test_case_190():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(var_5)
    assert stack_node_3.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_5 = module_0.StackNode(var_6)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_11)
    assert len(stack_node_7.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_12.__len__()
    assert var_7 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_8 = module_0.StackNode(var_7)
    assert stack_node_8.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_9 = module_0.StackNode(stack_12)
    assert len(stack_node_9.data) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0


def test_case_191():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)


def test_case_192():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_3)
    assert len(stack_node_6.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_6)
    assert len(stack_node_10.data) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_node_11 = module_0.StackNode(var_4)
    assert stack_node_11.data == 0


def test_case_193():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_2 = module_0.StackNode(var_0)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_5 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_8 = module_0.StackNode(var_1)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_3)
    assert len(stack_node_11.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_node_12 = module_0.StackNode(var_1)
    assert stack_node_12.data == 0


def test_case_194():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    bool_1 = False
    stack_node_2 = module_0.StackNode(bool_1)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_3 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_6)
    assert len(stack_node_10.data) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_1 = None
    stack_node_11 = module_0.StackNode(none_type_1)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_12 = module_0.StackNode(var_5)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_node_12)
    stack_node_15 = module_0.StackNode(stack_9)
    assert len(stack_node_15.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_16 = module_0.StackNode(var_6)
    assert stack_node_16.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    var_8 = stack_13.__len__()
    assert var_8 == 0
    var_9 = stack_6.__len__()
    assert var_9 == 0


def test_case_195():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_node_7 = module_0.StackNode(float_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_11 = module_0.StackNode(var_7)
    assert stack_node_11.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_12 = module_0.StackNode(var_6)
    assert stack_node_12.data == 0


def test_case_196():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    var_4 = stack_7.push(var_1)
    assert len(stack_7) == 1


def test_case_197():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_4 = module_0.StackNode(float_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_6 = module_0.StackNode(stack_6)
    assert len(stack_node_6.data) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_7 = module_0.StackNode(complex_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    bool_1 = False
    stack_node_8 = module_0.StackNode(bool_1)
    stack_node_9 = module_0.StackNode(bool_1)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_10 = module_0.StackNode(var_5)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    none_type_1 = None
    stack_node_13 = module_0.StackNode(none_type_1)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_node_14 = module_0.StackNode(stack_node_12)


def test_case_198():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_2 = module_0.StackNode(float_0)
    complex_0 = -3711.3 - 806.2j
    stack_node_3 = module_0.StackNode(complex_0)
    bool_1 = False
    stack_node_4 = module_0.StackNode(bool_1)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_1 = module_0.check_parenthesis(dict_1)
    assert var_1 is True
    stack_node_5 = module_0.StackNode(float_1)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_node_6 = module_0.StackNode(float_0)


def test_case_199():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_5)
    assert len(stack_node_5.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    bool_0 = False
    stack_node_7 = module_0.StackNode(bool_0)
    stack_node_8 = module_0.StackNode(bool_0)
    bool_1 = False
    stack_node_9 = module_0.StackNode(bool_1)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    stack_node_10 = module_0.StackNode(float_1)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_7 = module_0.check_parenthesis(dict_2)
    assert var_7 is True
    stack_node_11 = module_0.StackNode(float_2)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_12 = module_0.StackNode(var_8)
    assert stack_node_12.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_13 = module_0.StackNode(stack_15)
    assert len(stack_node_13.data) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_9 = stack_17.__len__()
    assert var_9 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_14 = module_0.StackNode(var_9)
    assert stack_node_14.data == 0
    stack_node_15 = module_0.StackNode(stack_node_14)
    stack_node_16 = module_0.StackNode(stack_node_14)
    stack_node_17 = module_0.StackNode(stack_17)
    assert len(stack_node_17.data) == 0
    var_10 = stack_18.__len__()
    assert var_10 == 0
    var_11 = stack_17.push(stack_node_16)
    assert len(stack_17) == 1
    assert len(stack_node_17.data) == 1
    var_12 = stack_14.push(stack_18)
    assert len(stack_14) == 1


def test_case_200():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_1 = stack_6.__len__()
    assert var_1 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.__len__()
    assert var_2 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_10)
    assert len(stack_node_5.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_13)
    assert len(stack_node_8.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0


def test_case_201():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_5 = module_0.StackNode(float_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    bool_1 = False
    stack_node_7 = module_0.StackNode(bool_1)
    stack_node_8 = module_0.StackNode(bool_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_9 = module_0.StackNode(var_2)
    assert stack_node_9.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_10 = module_0.StackNode(var_5)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_12 = module_0.StackNode(var_6)
    assert stack_node_12.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    none_type_1 = None
    stack_node_13 = module_0.StackNode(none_type_1)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_8 = stack_16.__len__()
    assert var_8 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_14 = module_0.StackNode(var_8)
    assert stack_node_14.data == 0
    stack_node_15 = module_0.StackNode(stack_node_14)
    stack_node_16 = module_0.StackNode(stack_node_14)
    var_9 = stack_7.push(bool_1)
    assert len(stack_7) == 1


def test_case_202():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_6 = module_0.StackNode(stack_8)
    assert len(stack_node_6.data) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_8 = module_0.StackNode(stack_12)
    assert len(stack_node_8.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0


def test_case_203():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0


def test_case_204():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_6)
    assert len(stack_node_6.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_10 = module_0.StackNode(stack_11)
    assert len(stack_node_10.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_11 = module_0.StackNode(var_7)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_node_11)
    stack_node_14 = module_0.StackNode(stack_13)
    assert len(stack_node_14.data) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    var_9 = stack_13.push(stack_node_13)
    assert len(stack_13) == 1
    assert len(stack_node_14.data) == 1
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_10 = module_0.check_parenthesis(dict_1)
    assert var_10 is True
    none_type_1 = None
    stack_node_15 = module_0.StackNode(none_type_1)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_11 = stack_15.__len__()
    assert var_11 == 0
    stack_node_16 = module_0.StackNode(var_9)


def test_case_205():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(var_1)
    assert stack_node_10.data == 0


def test_case_206():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0


def test_case_207():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_0.__len__()
    assert var_2 == 0


def test_case_208():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_4 = module_0.StackNode(float_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_2 = module_0.check_parenthesis(dict_1)
    assert var_2 is True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_3)
    assert len(stack_node_8.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0


def test_case_209():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_7)
    assert len(stack_node_8.data) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    var_4 = stack_7.push(stack_node_7)
    assert len(stack_7) == 1
    assert len(stack_node_8.data) == 1
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_10 = module_0.StackNode(stack_9)
    assert len(stack_node_10.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_12.__len__()
    assert var_7 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_11 = module_0.StackNode(var_7)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_node_11)
    stack_node_14 = module_0.StackNode(stack_12)
    assert len(stack_node_14.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_15 = module_0.StackNode(var_8)
    assert stack_node_15.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    none_type_0 = None
    stack_node_16 = module_0.StackNode(none_type_0)


def test_case_210():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_3)
    assert len(stack_node_6.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_4)
    assert len(stack_node_10.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0


def test_case_211():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0


def test_case_212():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_2 = module_0.StackNode(stack_5)
    assert len(stack_node_2.data) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_3 = module_0.StackNode(complex_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_node_5 = module_0.StackNode(stack_node_3)


def test_case_213():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    stack_node_7 = module_0.StackNode(bool_0)
    dict_0 = {}
    var_4 = stack_0.push(dict_0)
    assert len(stack_0) == 1


def test_case_214():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_6)
    assert len(stack_node_5.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_9 = module_0.StackNode(float_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_10 = module_0.StackNode(var_5)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_11)
    assert len(stack_node_13.data) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    var_7 = stack_11.push(stack_node_12)
    assert len(stack_11) == 1
    assert len(stack_node_13.data) == 1
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_4.__len__()
    assert var_8 == 0


def test_case_215():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0


def test_case_216():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_3)
    assert len(stack_node_3.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_6.push(stack_node_5)
    assert len(stack_6) == 1


def test_case_217():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0


def test_case_218():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_0 = stack_2.__len__()
    assert var_0 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0


def test_case_219():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_0)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_1)
    assert stack_node_5.data == 0
    bool_1 = False
    stack_node_6 = module_0.StackNode(bool_1)
    stack_node_7 = module_0.StackNode(bool_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_8 = module_0.StackNode(var_2)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_5)
    assert len(stack_node_11.data) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_12 = module_0.StackNode(float_0)
    complex_0 = -3711.3 - 806.2j
    stack_node_13 = module_0.StackNode(complex_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_14 = module_0.StackNode(var_5)
    assert stack_node_14.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_15 = module_0.StackNode(stack_7)
    assert len(stack_node_15.data) == 0
    stack_node_16 = module_0.StackNode(bool_1)


def test_case_220():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_4 = module_0.StackNode(float_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_4)
    assert len(stack_node_8.data) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    var_5 = stack_4.push(stack_node_7)
    assert len(stack_4) == 1
    assert len(stack_node_8.data) == 1
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_6 = stack_6.__len__()
    assert var_6 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_10 = module_0.StackNode(var_7)
    assert stack_node_10.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0


def test_case_221():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_5 = module_0.StackNode(stack_9)
    assert len(stack_node_5.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_7 = stack_17.__len__()
    assert var_7 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_7 = module_0.StackNode(var_7)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_17)
    assert len(stack_node_10.data) == 0
    var_8 = stack_18.__len__()
    assert var_8 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_9 = module_0.check_parenthesis(dict_1)
    assert var_9 is True
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_10 = stack_19.__len__()
    assert var_10 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_11 = module_0.StackNode(var_10)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_node_11)
    stack_node_14 = module_0.StackNode(stack_19)
    assert len(stack_node_14.data) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    none_type_1 = None
    stack_node_15 = module_0.StackNode(none_type_1)
    stack_node_16 = module_0.StackNode(stack_22)
    assert len(stack_node_16.data) == 0
    var_11 = stack_22.__len__()
    assert var_11 == 0
    stack_node_17 = module_0.StackNode(stack_10)
    assert len(stack_node_17.data) == 0


def test_case_222():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_2.push(stack_4)
    assert len(stack_2) == 1


def test_case_223():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0


def test_case_224():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_7)
    assert len(stack_node_7.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_9 = module_0.StackNode(stack_9)
    assert len(stack_node_9.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0


def test_case_225():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_node_1 = module_0.StackNode(none_type_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_0)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(stack_5)
    assert len(stack_node_5.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    bool_0 = False
    stack_node_7 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_8 = module_0.StackNode(float_0)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    stack_node_9 = module_0.StackNode(float_1)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0


def test_case_226():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_6.__len__()
    assert var_4 == 0
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    stack_node_7 = module_0.StackNode(var_1)
    assert stack_node_7.data == 0


def test_case_227():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_node_6 = module_0.StackNode(bool_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_8)
    assert len(stack_node_11.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_12 = module_0.StackNode(var_4)
    assert stack_node_12.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_5 = stack_14.__len__()
    assert var_5 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    none_type_0 = None
    stack_node_13 = module_0.StackNode(none_type_0)
    stack_node_14 = module_0.StackNode(stack_15)
    assert len(stack_node_14.data) == 0
    var_6 = stack_15.__len__()
    assert var_6 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_7 = stack_16.__len__()
    assert var_7 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    none_type_1 = None
    stack_node_15 = module_0.StackNode(none_type_1)
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0


def test_case_228():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_0.__len__()
    assert var_3 == 0


def test_case_229():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_2.push(stack_4)
    assert len(stack_2) == 1
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0


def test_case_230():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1


def test_case_231():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_2 = module_0.StackNode(var_0)
    assert stack_node_2.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_4)
    assert len(stack_node_6.data) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    var_3 = stack_4.push(stack_node_5)
    assert len(stack_4) == 1
    assert len(stack_node_6.data) == 1
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    var_7 = stack_9.__len__()
    assert var_7 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_8 = module_0.check_parenthesis(dict_1)
    assert var_8 is True
    stack_node_9 = module_0.StackNode(float_1)
    var_9 = stack_2.__len__()
    assert var_9 == 0


def test_case_232():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_6.__len__()
    assert var_4 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_2 = module_0.StackNode(var_6)
    assert stack_node_2.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_7 = module_0.check_parenthesis(dict_2)
    assert var_7 is True
    var_8 = stack_8.__len__()
    assert var_8 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_9 = stack_10.__len__()
    assert var_9 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_3 = module_0.StackNode(var_9)
    assert stack_node_3.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_4 = module_0.StackNode(stack_10)
    assert len(stack_node_4.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_10 = stack_14.__len__()
    assert var_10 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_5 = module_0.StackNode(var_10)
    assert stack_node_5.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_11 = stack_17.__len__()
    assert var_11 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_12 = stack_18.__len__()
    assert var_12 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_6 = module_0.StackNode(var_12)
    assert stack_node_6.data == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_7 = module_0.StackNode(stack_19)
    assert len(stack_node_7.data) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0


def test_case_233():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1


def test_case_234():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(stack_4)
    assert len(stack_node_3.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    stack_node_7 = module_0.StackNode(float_0)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_7 = stack_16.__len__()
    assert var_7 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_8 = module_0.StackNode(var_7)
    assert stack_node_8.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_8 = module_0.check_parenthesis(dict_1)
    assert var_8 is True
    var_9 = stack_17.__len__()
    assert var_9 == 0
    none_type_0 = None
    stack_node_9 = module_0.StackNode(none_type_0)
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_10 = stack_19.__len__()
    assert var_10 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_10 = module_0.StackNode(var_10)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    none_type_1 = None
    stack_node_12 = module_0.StackNode(none_type_1)
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_11 = stack_21.__len__()
    assert var_11 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_13 = module_0.StackNode(complex_0)
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0


def test_case_235():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_5 = stack_4.__len__()
    assert var_5 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(stack_8)
    assert len(stack_node_8.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_1 = None
    stack_node_9 = module_0.StackNode(none_type_1)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_2 = None
    stack_node_10 = module_0.StackNode(none_type_2)
    stack_node_11 = module_0.StackNode(stack_12)
    assert len(stack_node_11.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_12 = module_0.StackNode(var_7)
    assert stack_node_12.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_13 = module_0.StackNode(stack_13)
    assert len(stack_node_13.data) == 0
    stack_node_14 = module_0.StackNode(stack_10)
    assert len(stack_node_14.data) == 0


def test_case_236():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_2 = module_0.check_parenthesis(dict_1)
    assert var_2 is True
    stack_node_2 = module_0.StackNode(float_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0


def test_case_237():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_2 = module_0.StackNode(complex_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_3 = module_0.StackNode(float_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    none_type_1 = None
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.push(none_type_1)
    assert len(stack_2) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_12.__len__()
    assert var_7 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_7 = module_0.StackNode(var_7)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(none_type_1)


def test_case_238():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_node_6 = module_0.StackNode(stack_4)
    assert len(stack_node_6.data) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0


def test_case_239():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(stack_3)
    assert len(stack_node_1.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(stack_7)
    assert len(stack_node_3.data) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_6 = module_0.StackNode(float_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_3.push(stack_node_1)
    assert len(stack_3) == 1
    assert len(stack_node_1.data) == 1


def test_case_240():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    complex_0 = -3711.3 - 806.2j
    stack_node_6 = module_0.StackNode(complex_0)
    stack_node_7 = module_0.StackNode(stack_node_6)


def test_case_241():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_1)
    assert len(stack_node_7.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_8 = module_0.StackNode(var_2)
    assert stack_node_8.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_12.__len__()
    assert var_7 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_11 = module_0.StackNode(var_7)
    assert stack_node_11.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_12 = module_0.StackNode(stack_12)
    assert len(stack_node_12.data) == 0
    complex_1 = -3711.3 - 806.2j
    stack_node_13 = module_0.StackNode(complex_1)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_8 = stack_16.__len__()
    assert var_8 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_9 = stack_17.__len__()
    assert var_9 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_14 = module_0.StackNode(var_9)
    assert stack_node_14.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_15 = module_0.StackNode(stack_17)
    assert len(stack_node_15.data) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_10 = stack_20.__len__()
    assert var_10 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    list_0 = [stack_8, stack_node_9, stack_12, var_2]
    stack_node_16 = module_0.StackNode(list_0)


def test_case_242():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_7 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_1 = None
    stack_node_9 = module_0.StackNode(none_type_1)
    stack_node_10 = module_0.StackNode(stack_9)
    assert len(stack_node_10.data) == 0
    var_4 = stack_9.push(none_type_0)
    assert len(stack_9) == 1
    assert len(stack_node_10.data) == 1
    bool_0 = False
    stack_node_11 = module_0.StackNode(bool_0)
    bool_1 = False
    stack_node_12 = module_0.StackNode(bool_1)
    stack_node_13 = module_0.StackNode(bool_1)
    none_type_2 = None
    stack_node_14 = module_0.StackNode(none_type_2)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    var_7 = stack_10.__len__()
    assert var_7 == 0
    var_8 = stack_2.push(var_6)
    assert len(stack_2) == 1
    assert len(stack_node_5.data) == 1


def test_case_243():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    complex_0 = -3711.3 - 806.2j
    stack_node_4 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_node_7 = module_0.StackNode(stack_2)
    assert len(stack_node_7.data) == 0
    var_3 = stack_2.push(none_type_0)
    assert len(stack_2) == 1
    assert len(stack_node_7.data) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_9 = module_0.StackNode(stack_3)
    assert len(stack_node_9.data) == 0
    stack_node_10 = module_0.StackNode(var_4)
    assert stack_node_10.data == 0


def test_case_244():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_0.__len__()
    assert var_2 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_3 = stack_1.__len__()
    assert var_3 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(stack_3)
    assert len(stack_node_4.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_7)
    assert len(stack_node_8.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_11.push(stack_13)
    assert len(stack_11) == 1
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    none_type_1 = None
    stack_node_10 = module_0.StackNode(none_type_1)
    stack_node_11 = module_0.StackNode(stack_14)
    assert len(stack_node_11.data) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    var_9 = stack_9.push(stack_node_8)
    assert len(stack_9) == 1


def test_case_245():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_5)
    assert len(stack_node_5.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.__len__()
    assert var_2 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_3 = stack_11.__len__()
    assert var_3 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    stack_node_8 = module_0.StackNode(stack_14)
    assert len(stack_node_8.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_4 = stack_15.__len__()
    assert var_4 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_5 = stack_17.__len__()
    assert var_5 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_12 = module_0.StackNode(var_5)
    assert stack_node_12.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_13 = module_0.StackNode(stack_17)
    assert len(stack_node_13.data) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_6 = stack_21.__len__()
    assert var_6 == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_14 = module_0.StackNode(var_6)
    assert stack_node_14.data == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    var_7 = stack_23.push(stack_25)
    assert len(stack_23) == 1
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0


def test_case_246():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_4 = module_0.StackNode(float_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_node_6 = module_0.StackNode(stack_9)
    assert len(stack_node_6.data) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    none_type_1 = None
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.push(none_type_1)
    assert len(stack_10) == 1
    bool_1 = False
    stack_node_7 = module_0.StackNode(bool_1)
    stack_node_8 = module_0.StackNode(bool_1)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_9 = module_0.StackNode(var_7)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_12)
    assert len(stack_node_11.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_12 = module_0.StackNode(var_8)
    assert stack_node_12.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0


def test_case_247():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_5)
    assert len(stack_node_4.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    bytes_0 = b"\x08\x187\x94\x02\xc0s\x06\xd164e\x81\xb1"
    var_5 = module_0.check_parenthesis(bytes_0)
    assert var_5 is True


def test_case_248():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_4)
    assert len(stack_node_6.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_6)
    assert len(stack_node_10.data) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_11 = module_0.StackNode(var_6)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_13 = module_0.StackNode(var_7)
    assert stack_node_13.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_8 = stack_16.__len__()
    assert var_8 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_14 = module_0.StackNode(var_8)
    assert stack_node_14.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_15 = module_0.StackNode(stack_16)
    assert len(stack_node_15.data) == 0
    var_9 = stack_18.__len__()
    assert var_9 == 0
    var_10 = stack_10.push(var_3)
    assert len(stack_10) == 1


def test_case_249():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_7 = module_0.StackNode(stack_4)
    assert len(stack_node_7.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_8)
    assert len(stack_node_11.data) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    var_6 = stack_8.push(stack_node_10)
    assert len(stack_8) == 1
    assert len(stack_node_11.data) == 1
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_12 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_13 = module_0.StackNode(none_type_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_1 = None
    stack_node_14 = module_0.StackNode(none_type_1)
    stack_node_15 = module_0.StackNode(stack_11)
    assert len(stack_node_15.data) == 0
    var_7 = stack_11.push(none_type_0)
    assert len(stack_11) == 1
    assert len(stack_node_15.data) == 1
    none_type_2 = None
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_8 = stack_12.push(none_type_2)
    assert len(stack_12) == 1
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_9 = stack_13.__len__()
    assert var_9 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_16 = module_0.StackNode(var_9)
    assert stack_node_16.data == 0
    stack_node_17 = module_0.StackNode(stack_node_16)
    stack_node_18 = module_0.StackNode(stack_node_16)
    stack_node_19 = module_0.StackNode(stack_13)
    assert len(stack_node_19.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_10 = stack_15.__len__()
    assert var_10 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_20 = module_0.StackNode(var_10)
    assert stack_node_20.data == 0
    stack_node_21 = module_0.StackNode(stack_12)
    assert len(stack_node_21.data) == 1


def test_case_250():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_node_6 = module_0.StackNode(float_0)


def test_case_251():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_7)
    assert len(stack_node_9.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_10 = module_0.StackNode(var_4)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_10)
    assert len(stack_node_13.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_14 = module_0.StackNode(var_5)
    assert stack_node_14.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0


def test_case_252():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)


def test_case_253():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_9)
    assert len(stack_node_7.data) == 0
    bool_0 = False
    stack_node_8 = module_0.StackNode(bool_0)
    stack_node_9 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.push(none_type_0)
    assert len(stack_11) == 1
    stack_node_10 = module_0.StackNode(var_5)
    complex_0 = -3711.3 - 806.2j
    stack_node_11 = module_0.StackNode(complex_0)
    none_type_1 = None
    stack_node_12 = module_0.StackNode(none_type_1)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_2 = None
    stack_node_13 = module_0.StackNode(none_type_2)
    stack_node_14 = module_0.StackNode(stack_12)
    assert len(stack_node_14.data) == 0
    var_6 = stack_12.push(none_type_1)
    assert len(stack_12) == 1
    assert len(stack_node_14.data) == 1
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_15 = module_0.StackNode(var_7)
    assert stack_node_15.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_8 = module_0.check_parenthesis(dict_1)
    assert var_8 is True
    var_9 = stack_14.__len__()
    assert var_9 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_10 = stack_16.__len__()
    assert var_10 == 0
    var_11 = stack_1.push(var_7)
    assert len(stack_1) == 1


def test_case_254():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_5 = module_0.StackNode(var_1)
    assert stack_node_5.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_6 = module_0.StackNode(stack_3)
    assert len(stack_node_6.data) == 0
    bool_1 = False
    stack_node_7 = module_0.StackNode(bool_1)
    stack_node_8 = module_0.StackNode(bool_1)
    stack_node_9 = module_0.StackNode(var_1)
    assert stack_node_9.data == 0


def test_case_255():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_5 = module_0.StackNode(complex_0)
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_2 = None
    stack_node_7 = module_0.StackNode(none_type_2)
    stack_node_8 = module_0.StackNode(stack_4)
    assert len(stack_node_8.data) == 0
    var_2 = stack_4.push(none_type_1)
    assert len(stack_4) == 1
    assert len(stack_node_8.data) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_9 = module_0.StackNode(var_3)
    assert stack_node_9.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_3 = None
    stack_node_10 = module_0.StackNode(none_type_3)
    stack_node_11 = module_0.StackNode(stack_7)
    assert len(stack_node_11.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_12 = module_0.StackNode(var_4)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_node_12)
    stack_node_15 = module_0.StackNode(stack_8)
    assert len(stack_node_15.data) == 0
    stack_node_16 = module_0.StackNode(var_0)
    assert stack_node_16.data == 0


def test_case_256():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_5)
    assert len(stack_node_3.data) == 0
    none_type_2 = None
    stack_node_4 = module_0.StackNode(none_type_2)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_1 = stack_6.__len__()
    assert var_1 == 0
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0


def test_case_257():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_12.__len__()
    assert var_7 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_8 = module_0.StackNode(var_7)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_12)
    assert len(stack_node_11.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_12 = module_0.StackNode(var_8)
    assert stack_node_12.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_9 = stack_18.__len__()
    assert var_9 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_13 = module_0.StackNode(var_9)
    assert stack_node_13.data == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_10 = stack_21.__len__()
    assert var_10 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_11 = module_0.check_parenthesis(dict_1)
    assert var_11 is True
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    var_12 = stack_22.__len__()
    assert var_12 == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_node_14 = module_0.StackNode(var_12)
    assert stack_node_14.data == 0
    stack_node_15 = module_0.StackNode(stack_node_14)
    stack_node_16 = module_0.StackNode(stack_node_14)
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    var_13 = stack_24.__len__()
    assert var_13 == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0
    var_14 = stack_3.push(dict_1)
    assert len(stack_3) == 1


def test_case_258():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_0.push(stack_0)
    assert len(stack_0) == 1


def test_case_259():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_4)
    assert len(stack_node_8.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_9 = module_0.StackNode(var_3)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_node_12 = module_0.StackNode(stack_7)
    assert len(stack_node_12.data) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    var_5 = stack_7.push(stack_node_11)
    assert len(stack_7) == 1
    assert len(stack_node_12.data) == 1
    none_type_0 = None
    stack_node_13 = module_0.StackNode(none_type_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_node_14 = module_0.StackNode(stack_node_0)


def test_case_260():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_1.__len__()
    assert var_3 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_4 = stack_2.__len__()
    assert var_4 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_4)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_5 = stack_4.__len__()
    assert var_5 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_node_6 = module_0.StackNode(stack_9)
    assert len(stack_node_6.data) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_7 = module_0.StackNode(var_7)
    assert stack_node_7.data == 0


def test_case_261():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0


def test_case_262():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_node_5 = module_0.StackNode(bool_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_6 = module_0.StackNode(var_1)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_9 = module_0.StackNode(var_2)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    none_type_0 = None
    stack_node_11 = module_0.StackNode(none_type_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_12 = module_0.StackNode(var_3)
    assert stack_node_12.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_13 = module_0.StackNode(stack_6)
    assert len(stack_node_13.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_14 = module_0.StackNode(var_4)
    assert stack_node_14.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_15 = module_0.StackNode(complex_0)
    none_type_1 = None
    stack_node_16 = module_0.StackNode(none_type_1)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    none_type_2 = None
    stack_node_17 = module_0.StackNode(none_type_2)
    stack_node_18 = module_0.StackNode(stack_14)
    assert len(stack_node_18.data) == 0
    var_6 = stack_14.push(none_type_1)
    assert len(stack_14) == 1
    assert len(stack_node_18.data) == 1
    var_7 = stack_8.__len__()
    assert var_7 == 0


def test_case_263():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_4 = module_0.StackNode(complex_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.__len__()
    assert var_2 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_3 = stack_11.__len__()
    assert var_3 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0


def test_case_264():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_0.__len__()
    assert var_2 == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    bool_1 = False
    stack_node_3 = module_0.StackNode(bool_1)
    complex_0 = -3711.3 - 806.2j
    stack_node_4 = module_0.StackNode(complex_0)
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_2 = None
    stack_node_6 = module_0.StackNode(none_type_2)
    stack_node_7 = module_0.StackNode(stack_1)
    assert len(stack_node_7.data) == 0
    var_3 = stack_1.push(none_type_1)
    assert len(stack_1) == 1
    assert len(stack_node_7.data) == 1
    bool_2 = False
    stack_node_8 = module_0.StackNode(bool_2)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_9 = module_0.StackNode(float_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0


def test_case_265():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_4 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_node_7 = module_0.StackNode(stack_2)
    assert len(stack_node_7.data) == 0
    var_1 = stack_2.push(none_type_0)
    assert len(stack_2) == 1
    assert len(stack_node_7.data) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_8 = module_0.StackNode(var_2)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_3)
    assert len(stack_node_11.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    bool_0 = False
    stack_node_12 = module_0.StackNode(bool_0)
    stack_node_13 = module_0.StackNode(bool_0)
    none_type_2 = None
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.push(none_type_2)
    assert len(stack_6) == 1
    stack_node_14 = module_0.StackNode(var_3)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_15 = module_0.StackNode(var_4)
    assert stack_node_15.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_16 = module_0.StackNode(var_7)
    assert stack_node_16.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    none_type_3 = None
    stack_node_17 = module_0.StackNode(none_type_3)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_9 = stack_15.__len__()
    assert var_9 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_18 = module_0.StackNode(var_9)
    assert stack_node_18.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_10 = stack_18.__len__()
    assert var_10 == 0
    none_type_4 = None
    stack_node_19 = module_0.StackNode(none_type_4)
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_11 = stack_19.__len__()
    assert var_11 == 0
    stack_node_20 = module_0.StackNode(stack_node_5)


def test_case_266():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(stack_4)
    assert len(stack_node_2.data) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_5)
    assert len(stack_node_6.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    bool_0 = False
    stack_node_8 = module_0.StackNode(bool_0)
    stack_node_9 = module_0.StackNode(bool_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_10 = module_0.StackNode(var_4)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    none_type_1 = None
    stack_node_12 = module_0.StackNode(none_type_1)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0


def test_case_267():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    var_3 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0


def test_case_268():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(stack_4)
    assert len(stack_node_2.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_4 = module_0.StackNode(stack_6)
    assert len(stack_node_4.data) == 0
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0


def test_case_269():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    none_type_0 = None
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.push(none_type_0)
    assert len(stack_2) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_node_6 = module_0.StackNode(stack_5)
    assert len(stack_node_6.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_7 = module_0.StackNode(complex_0)
    none_type_2 = None
    stack_node_8 = module_0.StackNode(none_type_2)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_3 = None
    stack_node_9 = module_0.StackNode(none_type_3)
    stack_node_10 = module_0.StackNode(stack_6)
    assert len(stack_node_10.data) == 0
    var_5 = stack_6.push(none_type_2)
    assert len(stack_6) == 1
    assert len(stack_node_10.data) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_7 = stack_9.__len__()
    assert var_7 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_11 = module_0.StackNode(var_7)
    assert stack_node_11.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_8 = module_0.check_parenthesis(dict_0)
    assert var_8 is True
    var_9 = stack_10.__len__()
    assert var_9 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_10 = stack_12.__len__()
    assert var_10 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_12 = module_0.StackNode(var_10)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_13)
    assert len(stack_node_14.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    none_type_4 = None
    stack_node_15 = module_0.StackNode(none_type_4)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_11 = stack_15.__len__()
    assert var_11 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_16 = module_0.StackNode(var_11)
    assert stack_node_16.data == 0
    stack_node_17 = module_0.StackNode(stack_node_16)
    stack_node_18 = module_0.StackNode(stack_node_16)
    stack_node_19 = module_0.StackNode(stack_15)
    assert len(stack_node_19.data) == 0
    var_12 = stack_16.__len__()
    assert var_12 == 0
    var_13 = stack_6.__len__()
    assert var_13 == 1


def test_case_270():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_5 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    stack_node_8 = module_0.StackNode(stack_7)
    assert len(stack_node_8.data) == 0
    var_3 = stack_7.push(none_type_0)
    assert len(stack_7) == 1
    assert len(stack_node_8.data) == 1
    var_4 = stack_1.__len__()
    assert var_4 == 0


def test_case_271():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_2 = module_0.StackNode(float_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(stack_5)
    assert len(stack_node_4.data) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    none_type_1 = None
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.push(none_type_1)
    assert len(stack_9) == 1
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_node_6 = module_0.StackNode(bool_0)
    none_type_2 = None
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.push(none_type_2)
    assert len(stack_10) == 1
    stack_node_7 = module_0.StackNode(var_5)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_9 = module_0.StackNode(stack_12)
    assert len(stack_node_9.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_10 = module_0.StackNode(complex_0)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_11 = module_0.StackNode(var_7)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    var_8 = stack_9.peek()


def test_case_272():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_0.__len__()
    assert var_2 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_1 = module_0.StackNode(complex_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    var_3 = stack_1.__len__()
    assert var_3 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_4 = stack_2.__len__()
    assert var_4 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_5 = stack_4.__len__()
    assert var_5 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0


def test_case_273():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_0)
    assert len(stack_node_4.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_3)
    assert len(stack_0) == 1
    assert len(stack_node_4.data) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0


def test_case_274():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_7 = stack_15.__len__()
    assert var_7 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_7 = module_0.StackNode(var_7)
    assert stack_node_7.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_8 = module_0.StackNode(stack_15)
    assert len(stack_node_8.data) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_8 = stack_19.__len__()
    assert var_8 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_9 = module_0.StackNode(var_8)
    assert stack_node_9.data == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_10 = module_0.StackNode(stack_19)
    assert len(stack_node_10.data) == 0
    var_9 = stack_21.__len__()
    assert var_9 == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_10 = stack_23.__len__()
    assert var_10 == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_node_11 = module_0.StackNode(var_10)
    assert stack_node_11.data == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0
    stack_27 = module_0.Stack()
    assert len(stack_27) == 0
    stack_28 = module_0.Stack()
    assert len(stack_28) == 0


def test_case_275():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(stack_4)
    assert len(stack_node_3.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.__len__()
    assert var_2 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_5 = module_0.StackNode(stack_8)
    assert len(stack_node_5.data) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    stack_node_7 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.push(none_type_1)
    assert len(stack_12) == 1
    stack_node_8 = module_0.StackNode(var_4)
    var_5 = stack_5.push(stack_6)
    assert len(stack_5) == 1


def test_case_276():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    none_type_2 = None
    stack_node_8 = module_0.StackNode(none_type_2)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_8 = stack_15.__len__()
    assert var_8 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_9 = module_0.StackNode(complex_0)
    stack_node_10 = module_0.StackNode(stack_0)
    assert len(stack_node_10.data) == 0


def test_case_277():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_2 = module_0.StackNode(stack_5)
    assert len(stack_node_2.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_4 = module_0.StackNode(stack_10)
    assert len(stack_node_4.data) == 0
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_6 = module_0.StackNode(float_0)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_6 = stack_15.__len__()
    assert var_6 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    var_7 = stack_0.push(stack_12)
    assert len(stack_0) == 1


def test_case_278():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_2 = module_0.StackNode(var_4)
    assert stack_node_2.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_3 = module_0.StackNode(stack_12)
    assert len(stack_node_3.data) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_5 = stack_15.__len__()
    assert var_5 == 0
    stack_node_5 = module_0.StackNode(stack_1)
    assert len(stack_node_5.data) == 0


def test_case_279():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0


def test_case_280():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(stack_5)
    assert len(stack_node_3.data) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0


def test_case_281():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_4 = module_0.StackNode(float_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_6 = module_0.StackNode(stack_7)
    assert len(stack_node_6.data) == 0
    bool_1 = False
    stack_node_7 = module_0.StackNode(bool_1)
    var_5 = stack_3.__len__()
    assert var_5 == 0


def test_case_282():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(stack_6)
    assert len(stack_node_6.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_10.push(stack_12)
    assert len(stack_10) == 1
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_9 = module_0.StackNode(stack_13)
    assert len(stack_node_9.data) == 0
    var_6 = stack_15.__len__()
    assert var_6 == 0
    var_7 = stack_16.__len__()
    assert var_7 == 0


def test_case_283():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0


def test_case_284():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_node_3 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.push(none_type_1)
    assert len(stack_3) == 1
    stack_node_4 = module_0.StackNode(var_2)
    bool_1 = False
    stack_node_5 = module_0.StackNode(bool_1)
    stack_node_6 = module_0.StackNode(bool_1)
    var_3 = stack_3.__len__()
    assert var_3 == 1


def test_case_285():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.push(none_type_0)
    assert len(stack_1) == 1
    stack_node_2 = module_0.StackNode(var_0)
    none_type_1 = None
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.push(none_type_1)
    assert len(stack_2) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_2 = None
    stack_node_4 = module_0.StackNode(none_type_2)
    stack_node_5 = module_0.StackNode(stack_5)
    assert len(stack_node_5.data) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_8 = module_0.StackNode(stack_9)
    assert len(stack_node_8.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_node_12 = module_0.StackNode(stack_13)
    assert len(stack_node_12.data) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    none_type_3 = None
    stack_node_13 = module_0.StackNode(none_type_3)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_8 = module_0.check_parenthesis(dict_0)
    assert var_8 is True
    stack_node_14 = module_0.StackNode(var_0)


def test_case_286():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0


def test_case_287():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0


def test_case_288():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(stack_4)
    assert len(stack_node_2.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_5 = stack_12.push(stack_14)
    assert len(stack_12) == 1
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_6 = stack_15.__len__()
    assert var_6 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_7 = stack_17.__len__()
    assert var_7 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_5 = module_0.StackNode(var_7)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_17)
    assert len(stack_node_8.data) == 0
    var_8 = stack_9.__len__()
    assert var_8 == 0


def test_case_289():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.__len__()
    assert var_2 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_2 = module_0.StackNode(stack_8)
    assert len(stack_node_2.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_3 = stack_12.__len__()
    assert var_3 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_4 = stack_13.__len__()
    assert var_4 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_5 = stack_17.__len__()
    assert var_5 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_6 = stack_19.push(stack_21)
    assert len(stack_19) == 1
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_7 = stack_23.__len__()
    assert var_7 == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_node_5 = module_0.StackNode(var_7)
    assert stack_node_5.data == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    var_8 = stack_25.__len__()
    assert var_8 == 0
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0
    stack_27 = module_0.Stack()
    assert len(stack_27) == 0
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_node_7 = module_0.StackNode(stack_27)
    assert len(stack_node_7.data) == 0
    var_9 = stack_27.__len__()
    assert var_9 == 0
    none_type_1 = None
    stack_node_8 = module_0.StackNode(none_type_1)
    stack_28 = module_0.Stack()
    assert len(stack_28) == 0
    var_10 = stack_28.__len__()
    assert var_10 == 0
    stack_29 = module_0.Stack()
    assert len(stack_29) == 0
    var_11 = stack_29.__len__()
    assert var_11 == 0
    stack_30 = module_0.Stack()
    assert len(stack_30) == 0
    stack_node_9 = module_0.StackNode(var_11)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_node_12 = module_0.StackNode(stack_29)
    assert len(stack_node_12.data) == 0
    var_12 = stack_30.__len__()
    assert var_12 == 0
    stack_31 = module_0.Stack()
    assert len(stack_31) == 0
    var_13 = stack_31.__len__()
    assert var_13 == 0
    stack_32 = module_0.Stack()
    assert len(stack_32) == 0
    stack_node_13 = module_0.StackNode(var_13)
    assert stack_node_13.data == 0
    stack_33 = module_0.Stack()
    assert len(stack_33) == 0
    stack_34 = module_0.Stack()
    assert len(stack_34) == 0


def test_case_290():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_2 = module_0.StackNode(complex_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_2 = stack_7.push(stack_9)
    assert len(stack_7) == 1
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_node_5 = module_0.StackNode(stack_10)
    assert len(stack_node_5.data) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_12)
    assert len(stack_node_8.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    none_type_1 = None
    stack_node_9 = module_0.StackNode(none_type_1)
    var_7 = stack_0.push(none_type_1)
    assert len(stack_0) == 1
    assert len(stack_node_1.data) == 1


def test_case_291():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_4)
    assert len(stack_node_8.data) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_node_12 = module_0.StackNode(stack_6)
    assert len(stack_node_12.data) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    var_6 = stack_6.push(stack_node_11)
    assert len(stack_6) == 1
    assert len(stack_node_12.data) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_7 = stack_8.__len__()
    assert var_7 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_13 = module_0.StackNode(var_7)
    assert stack_node_13.data == 0
    stack_node_14 = module_0.StackNode(stack_node_13)
    stack_node_15 = module_0.StackNode(stack_node_0)


def test_case_292():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_0.__len__()
    assert var_2 == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_3 = stack_1.__len__()
    assert var_3 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_4 = stack_2.__len__()
    assert var_4 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    bool_1 = False
    stack_node_3 = module_0.StackNode(bool_1)
    stack_node_4 = module_0.StackNode(bool_1)
    none_type_2 = None
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_5 = stack_5.push(none_type_2)
    assert len(stack_5) == 1
    stack_node_5 = module_0.StackNode(var_5)
    var_6 = stack_5.push(stack_5)
    assert len(stack_5) == 2


def test_case_293():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_6 = module_0.StackNode(float_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_9.push(stack_11)
    assert len(stack_9) == 1
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0


def test_case_294():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_3 = module_0.StackNode(float_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_5)
    assert len(stack_node_7.data) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    none_type_1 = None
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.push(none_type_1)
    assert len(stack_7) == 1
    stack_node_8 = module_0.StackNode(stack_0)
    assert len(stack_node_8.data) == 0


def test_case_295():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0


def test_case_296():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_2 = module_0.StackNode(complex_0)
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_2 = None
    stack_node_4 = module_0.StackNode(none_type_2)
    stack_node_5 = module_0.StackNode(stack_1)
    assert len(stack_node_5.data) == 0
    var_0 = stack_1.push(none_type_1)
    assert len(stack_1) == 1
    assert len(stack_node_5.data) == 1
    none_type_3 = None
    stack_node_6 = module_0.StackNode(none_type_3)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_4)
    assert len(stack_node_9.data) == 0
    none_type_4 = None
    stack_node_10 = module_0.StackNode(none_type_4)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0


def test_case_297():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_1 = stack_6.__len__()
    assert var_1 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.__len__()
    assert var_2 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_2.push(none_type_0)
    assert len(stack_2) == 1


def test_case_298():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_4)
    assert len(stack_node_7.data) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    var_4 = stack_4.push(stack_node_6)
    assert len(stack_4) == 1
    assert len(stack_node_7.data) == 1
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_9 = module_0.StackNode(stack_7)
    assert len(stack_node_9.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_9.__len__()
    assert var_7 == 0


def test_case_299():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_3.__len__()
    assert var_3 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_4 = module_0.StackNode(float_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_6.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_6 = module_0.StackNode(var_7)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_10)
    assert len(stack_node_9.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_10 = module_0.StackNode(var_8)
    assert stack_node_10.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_9 = stack_15.push(stack_17)
    assert len(stack_15) == 1
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_10 = stack_18.__len__()
    assert var_10 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_11 = module_0.StackNode(var_10)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_node_11)
    stack_node_14 = module_0.StackNode(stack_18)
    assert len(stack_node_14.data) == 0
    var_11 = stack_19.__len__()
    assert var_11 == 0
    var_12 = stack_18.push(stack_node_13)
    assert len(stack_18) == 1
    assert len(stack_node_14.data) == 1
    stack_node_15 = module_0.StackNode(stack_4)
    assert len(stack_node_15.data) == 0


def test_case_300():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_2 = module_0.StackNode(float_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_5 = module_0.StackNode(stack_7)
    assert len(stack_node_5.data) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_6 = module_0.StackNode(stack_8)
    assert len(stack_node_6.data) == 0


def test_case_301():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_4 = module_0.StackNode(stack_8)
    assert len(stack_node_4.data) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_12)
    assert len(stack_node_8.data) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    var_7 = stack_12.push(stack_node_7)
    assert len(stack_12) == 1
    assert len(stack_node_8.data) == 1
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_9 = module_0.StackNode(var_8)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_node_12 = module_0.StackNode(stack_14)
    assert len(stack_node_12.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_9 = stack_16.__len__()
    assert var_9 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_13 = module_0.StackNode(var_9)
    assert stack_node_13.data == 0
    stack_node_14 = module_0.StackNode(stack_node_13)
    stack_node_15 = module_0.StackNode(stack_node_13)
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    none_type_0 = None
    stack_node_16 = module_0.StackNode(none_type_0)
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_10 = stack_19.__len__()
    assert var_10 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_17 = module_0.StackNode(var_10)
    assert stack_node_17.data == 0
    var_11 = stack_17.push(var_6)
    assert len(stack_17) == 1


def test_case_302():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_2 = module_0.StackNode(var_0)
    assert stack_node_2.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_4)
    assert len(stack_node_7.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_8 = module_0.StackNode(var_2)
    assert stack_node_8.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_9 = module_0.StackNode(stack_7)
    assert len(stack_node_9.data) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_node_10 = module_0.StackNode(stack_node_1)


def test_case_303():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_2 = module_0.check_parenthesis(dict_1)
    assert var_2 is True
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_node_5 = module_0.StackNode(stack_7)
    assert len(stack_node_5.data) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_2 = None
    stack_node_7 = module_0.StackNode(none_type_2)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_9 = module_0.check_parenthesis(dict_2)
    assert var_9 is True
    var_10 = stack_13.__len__()
    assert var_10 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_11 = stack_14.__len__()
    assert var_11 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_8 = module_0.StackNode(var_11)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_12 = stack_16.__len__()
    assert var_12 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_11 = module_0.StackNode(var_12)
    assert stack_node_11.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_13 = stack_18.__len__()
    assert var_13 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_12 = module_0.StackNode(var_13)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_19)
    assert len(stack_node_14.data) == 0
    var_14 = stack_2.push(var_11)
    assert len(stack_2) == 1


def test_case_304():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_5)
    assert len(stack_node_9.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_0 = None
    stack_node_10 = module_0.StackNode(none_type_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_11 = module_0.StackNode(var_5)
    assert stack_node_11.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_12 = module_0.StackNode(var_7)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_14)
    assert len(stack_node_14.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_8 = stack_15.__len__()
    assert var_8 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_15 = module_0.StackNode(var_8)
    assert stack_node_15.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_16 = module_0.StackNode(stack_15)
    assert len(stack_node_16.data) == 0
    var_9 = stack_17.__len__()
    assert var_9 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    none_type_1 = None
    stack_node_17 = module_0.StackNode(none_type_1)
    stack_node_18 = module_0.StackNode(stack_19)
    assert len(stack_node_18.data) == 0
    var_10 = stack_4.push(stack_node_12)
    assert len(stack_4) == 1


def test_case_305():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_2 = None
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.push(none_type_2)
    assert len(stack_4) == 1
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_5 = module_0.StackNode(float_1)
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    var_5 = stack_4.push(var_1)
    assert len(stack_4) == 2


def test_case_306():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_node_5 = module_0.StackNode(stack_9)
    assert len(stack_node_5.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_0.push(stack_node_4)
    assert len(stack_0) == 1
    assert len(stack_node_1.data) == 1


def test_case_307():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    var_4 = stack_2.push(stack_node_3)
    assert len(stack_2) == 1


def test_case_308():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_2 = module_0.StackNode(stack_7)
    assert len(stack_node_2.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_6 = stack_14.push(stack_16)
    assert len(stack_14) == 1
    stack_node_5 = module_0.StackNode(stack_15)
    assert len(stack_node_5.data) == 0


def test_case_309():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(stack_5)
    assert len(stack_node_3.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_7)
    assert len(stack_node_7.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_9)
    assert len(stack_node_11.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_0 = None
    stack_node_12 = module_0.StackNode(none_type_0)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_4 = stack_13.__len__()
    assert var_4 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_13 = module_0.StackNode(var_4)
    assert stack_node_13.data == 0
    stack_node_14 = module_0.StackNode(stack_node_13)
    stack_node_15 = module_0.StackNode(stack_node_13)
    stack_node_16 = module_0.StackNode(stack_13)
    assert len(stack_node_16.data) == 0
    var_5 = stack_14.__len__()
    assert var_5 == 0
    var_6 = stack_13.push(stack_node_15)
    assert len(stack_13) == 1
    assert len(stack_node_16.data) == 1
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_7 = stack_15.__len__()
    assert var_7 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_17 = module_0.StackNode(var_7)
    assert stack_node_17.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0


def test_case_310():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_4)
    assert len(stack_node_3.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_1.__len__()
    assert var_3 == 0


def test_case_311():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(stack_4)
    assert len(stack_node_2.data) == 0
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_node_4 = module_0.StackNode(bool_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.__len__()
    assert var_2 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    var_3 = stack_8.push(stack_0)
    assert len(stack_8) == 1


def test_case_312():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    bool_1 = False
    stack_node_3 = module_0.StackNode(bool_1)
    complex_0 = -3711.3 - 806.2j
    stack_node_4 = module_0.StackNode(complex_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_11)
    assert len(stack_node_8.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0


def test_case_313():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_3)
    assert len(stack_node_7.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_8 = module_0.StackNode(stack_1)
    assert len(stack_node_8.data) == 0


def test_case_314():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(var_1)
    assert stack_node_7.data == 0


def test_case_315():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(stack_2)
    assert len(stack_node_3.data) == 0
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_node_5 = module_0.StackNode(bool_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_4)
    assert len(stack_node_9.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_10 = module_0.StackNode(complex_0)
    var_3 = stack_2.__len__()
    assert var_3 == 0


def test_case_316():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0


def test_case_317():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_3 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_node_6 = module_0.StackNode(stack_4)
    assert len(stack_node_6.data) == 0
    var_1 = stack_4.push(none_type_0)
    assert len(stack_4) == 1
    assert len(stack_node_6.data) == 1
    none_type_2 = None
    stack_node_7 = module_0.StackNode(none_type_2)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    bool_0 = False
    stack_node_10 = module_0.StackNode(bool_0)
    stack_node_11 = module_0.StackNode(bool_0)
    none_type_3 = None
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.push(none_type_3)
    assert len(stack_8) == 1
    stack_node_12 = module_0.StackNode(var_6)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_7 = stack_9.__len__()
    assert var_7 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_13 = module_0.StackNode(var_7)
    assert stack_node_13.data == 0
    stack_node_14 = module_0.StackNode(stack_node_13)
    stack_node_15 = module_0.StackNode(stack_node_13)
    stack_node_16 = module_0.StackNode(stack_9)
    assert len(stack_node_16.data) == 0
    var_8 = stack_2.__len__()
    assert var_8 == 0


def test_case_318():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)
    bool_1 = False
    stack_node_3 = module_0.StackNode(bool_1)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_4 = module_0.StackNode(float_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_4.push(stack_6)
    assert len(stack_4) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_7 = module_0.StackNode(stack_7)
    assert len(stack_node_7.data) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0


def test_case_319():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    none_type_0 = None
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.push(none_type_0)
    assert len(stack_3) == 1
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_4.__len__()
    assert var_4 == 0
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    stack_node_4 = module_0.StackNode(float_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_6 = stack_6.__len__()
    assert var_6 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_6)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_6)
    assert len(stack_node_8.data) == 0
    var_7 = stack_7.__len__()
    assert var_7 == 0
    var_8 = stack_6.push(stack_node_7)
    assert len(stack_6) == 1
    assert len(stack_node_8.data) == 1
    stack_node_9 = module_0.StackNode(stack_node_3)


def test_case_320():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_2)
    assert len(stack_node_6.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    stack_node_8 = module_0.StackNode(stack_4)
    assert len(stack_node_8.data) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_1 = None
    stack_node_9 = module_0.StackNode(none_type_1)
    stack_node_10 = module_0.StackNode(stack_6)
    assert len(stack_node_10.data) == 0
    bool_0 = False
    stack_node_11 = module_0.StackNode(bool_0)
    stack_node_12 = module_0.StackNode(bool_0)
    none_type_2 = None
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.push(none_type_2)
    assert len(stack_7) == 1
    stack_node_13 = module_0.StackNode(var_4)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_14 = module_0.StackNode(var_5)
    assert stack_node_14.data == 0
    stack_node_15 = module_0.StackNode(stack_node_14)
    bool_1 = False
    stack_node_16 = module_0.StackNode(bool_1)
    stack_node_17 = module_0.StackNode(bool_1)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0


def test_case_321():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    bool_0 = False
    stack_node_7 = module_0.StackNode(bool_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_2 = None
    stack_node_8 = module_0.StackNode(none_type_2)
    stack_node_9 = module_0.StackNode(stack_8)
    assert len(stack_node_9.data) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    complex_1 = -3711.3 - 806.2j
    stack_node_10 = module_0.StackNode(complex_1)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0


def test_case_322():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0


def test_case_323():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(stack_10)
    assert len(stack_node_3.data) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    var_5 = stack_8.push(stack_2)
    assert len(stack_8) == 1


def test_case_324():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_node_3 = module_0.StackNode(bool_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    bool_1 = False
    stack_node_5 = module_0.StackNode(bool_1)
    stack_node_6 = module_0.StackNode(bool_1)
    none_type_1 = None
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.push(none_type_1)
    assert len(stack_10) == 1
    stack_node_7 = module_0.StackNode(var_5)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_11)
    assert len(stack_node_11.data) == 0
    bool_2 = False
    stack_node_12 = module_0.StackNode(bool_2)
    stack_node_13 = module_0.StackNode(bool_2)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_14 = module_0.StackNode(var_7)
    assert stack_node_14.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    none_type_2 = None
    stack_node_15 = module_0.StackNode(none_type_2)
    stack_node_16 = module_0.StackNode(var_7)
    assert stack_node_16.data == 0


def test_case_325():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_node_7 = module_0.StackNode(stack_6)
    assert len(stack_node_7.data) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_1 = None
    stack_node_8 = module_0.StackNode(none_type_1)
    stack_node_9 = module_0.StackNode(stack_7)
    assert len(stack_node_9.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_10 = module_0.StackNode(var_5)
    assert stack_node_10.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_11 = module_0.StackNode(var_6)
    assert stack_node_11.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0


def test_case_326():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0


def test_case_327():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_node_4 = module_0.StackNode(bool_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_0.__len__()
    assert var_3 == 0


def test_case_328():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_node_4 = module_0.StackNode(bool_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_1)
    assert len(stack_node_6.data) == 0


def test_case_329():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    none_type_0 = None
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.push(none_type_0)
    assert len(stack_1) == 1
    bool_1 = False
    stack_node_2 = module_0.StackNode(bool_1)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_3 = module_0.StackNode(float_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_3)
    assert len(stack_node_7.data) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_9 = module_0.StackNode(stack_5)
    assert len(stack_node_9.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_11 = module_0.StackNode(var_8)
    assert stack_node_11.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_12 = module_0.StackNode(stack_14)
    assert len(stack_node_12.data) == 0
    var_9 = stack_16.__len__()
    assert var_9 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_10 = module_0.check_parenthesis(dict_1)
    assert var_10 is True
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_11 = stack_18.__len__()
    assert var_11 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_13 = module_0.StackNode(var_11)
    assert stack_node_13.data == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_14 = module_0.StackNode(stack_18)
    assert len(stack_node_14.data) == 0
    stack_node_15 = module_0.StackNode(stack_20)
    assert len(stack_node_15.data) == 0
    var_12 = stack_12.push(var_5)
    assert len(stack_12) == 1


def test_case_330():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_2 = module_0.StackNode(stack_8)
    assert len(stack_node_2.data) == 0


def test_case_331():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(stack_node_1)


def test_case_332():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    var_6 = stack_10.__len__()
    assert var_6 == 0
    var_7 = stack_2.push(var_1)
    assert len(stack_2) == 1


def test_case_333():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_0)
    assert stack_node_4.data == 0


def test_case_334():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(stack_2)
    assert len(stack_node_0.data) == 0


def test_case_335():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_node_4 = module_0.StackNode(stack_node_3)


def test_case_336():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_2 = module_0.StackNode(stack_5)
    assert len(stack_node_2.data) == 0
    stack_node_3 = module_0.StackNode(stack_7)
    assert len(stack_node_3.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0


def test_case_337():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_5)
    assert len(stack_node_4.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_6 = module_0.StackNode(stack_6)
    assert len(stack_node_6.data) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0


def test_case_338():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data is True


def test_case_339():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    complex_0 = -3711.3 - 806.2j
    stack_node_2 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    var_1 = stack_4.push(none_type_0)
    assert len(stack_4) == 1
    assert len(stack_node_5.data) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_2 = None
    stack_node_6 = module_0.StackNode(none_type_2)
    stack_node_7 = module_0.StackNode(stack_5)
    assert len(stack_node_7.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_8 = module_0.StackNode(var_2)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_node_10)


def test_case_340():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(stack_2)
    assert len(stack_node_0.data) == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.push(none_type_0)
    assert len(stack_3) == 1
    stack_node_3 = module_0.StackNode(var_2)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_9)
    assert len(stack_node_8.data) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    var_7 = stack_9.push(stack_node_7)
    assert len(stack_9) == 1
    assert len(stack_node_8.data) == 1
    bool_1 = False
    stack_node_9 = module_0.StackNode(bool_1)
    stack_node_10 = module_0.StackNode(bool_1)
    complex_0 = -3711.3 - 806.2j
    stack_node_11 = module_0.StackNode(complex_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_8 = stack_11.__len__()
    assert var_8 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_12 = module_0.StackNode(var_8)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_node_12)
    stack_node_15 = module_0.StackNode(stack_11)
    assert len(stack_node_15.data) == 0
    var_9 = stack_12.__len__()
    assert var_9 == 0
    complex_1 = -3711.3 - 806.2j
    stack_node_16 = module_0.StackNode(complex_1)
    none_type_1 = None
    stack_node_17 = module_0.StackNode(none_type_1)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    none_type_2 = None
    stack_node_18 = module_0.StackNode(none_type_2)
    stack_node_19 = module_0.StackNode(stack_13)
    assert len(stack_node_19.data) == 0
    var_10 = stack_13.push(none_type_1)
    assert len(stack_13) == 1
    assert len(stack_node_19.data) == 1
    var_11 = stack_0.push(stack_node_12)
    assert len(stack_0) == 1


def test_case_341():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    bool_0 = False
    stack_node_8 = module_0.StackNode(bool_0)
    stack_node_9 = module_0.StackNode(bool_0)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0


def test_case_342():
    dict_0 = {}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True


def test_case_343():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_6)
    assert len(stack_node_7.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    stack_node_9 = module_0.StackNode(stack_7)
    assert len(stack_node_9.data) == 0
    none_type_1 = None
    stack_node_10 = module_0.StackNode(none_type_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    bool_1 = False
    stack_node_11 = module_0.StackNode(bool_1)
    stack_node_12 = module_0.StackNode(bool_1)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    bool_2 = False
    stack_node_14 = module_0.StackNode(bool_2)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_node_15 = module_0.StackNode(float_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0


def test_case_344():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_3)
    assert len(stack_node_6.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_0 = None
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.push(none_type_0)
    assert len(stack_9) == 1
    stack_node_8 = module_0.StackNode(stack_4)
    assert len(stack_node_8.data) == 0


def test_case_345():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)
    dict_0 = {}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_6 = stack_6.__len__()
    assert var_6 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_7 = stack_9.__len__()
    assert var_7 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_8 = stack_10.__len__()
    assert var_8 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_7 = module_0.StackNode(var_8)
    assert stack_node_7.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_8 = module_0.StackNode(stack_10)
    assert len(stack_node_8.data) == 0
    stack_node_9 = module_0.StackNode(stack_13)
    assert len(stack_node_9.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_9 = stack_14.__len__()
    assert var_9 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_10 = stack_19.__len__()
    assert var_10 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_10 = module_0.StackNode(var_10)
    assert stack_node_10.data == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_11 = stack_21.__len__()
    assert var_11 == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_11 = module_0.StackNode(stack_4)
    assert len(stack_node_11.data) == 0


def test_case_346():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    none_type_0 = None
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.push(none_type_0)
    assert len(stack_4) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(stack_5)
    assert len(stack_node_2.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0


def test_case_347():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_6 = module_0.StackNode(stack_7)
    assert len(stack_node_6.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    bool_0 = False
    stack_node_9 = module_0.StackNode(bool_0)
    stack_node_10 = module_0.StackNode(bool_0)
    bool_1 = False
    stack_node_11 = module_0.StackNode(bool_1)
    stack_node_12 = module_0.StackNode(bool_1)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    bool_2 = False
    stack_node_13 = module_0.StackNode(bool_2)
    stack_node_14 = module_0.StackNode(bool_2)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    stack_node_15 = module_0.StackNode(stack_node_14)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_8 = stack_15.__len__()
    assert var_8 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_9 = module_0.check_parenthesis(dict_0)
    assert var_9 is True
    stack_node_16 = module_0.StackNode(stack_17)
    assert len(stack_node_16.data) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_10 = stack_18.__len__()
    assert var_10 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_17 = module_0.StackNode(var_10)
    assert stack_node_17.data == 0
    stack_node_18 = module_0.StackNode(stack_node_17)
    stack_node_19 = module_0.StackNode(stack_19)
    assert len(stack_node_19.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_20 = module_0.StackNode(complex_0)
    stack_node_21 = module_0.StackNode(stack_18)
    assert len(stack_node_21.data) == 0


def test_case_348():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_2.push(stack_4)
    assert len(stack_2) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_2 = module_0.StackNode(stack_7)
    assert len(stack_node_2.data) == 0
    var_4 = stack_3.push(float_0)
    assert len(stack_3) == 1


def test_case_349():
    dict_0 = {}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_2)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_6)
    assert len(stack_node_9.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_10 = module_0.StackNode(var_5)
    assert stack_node_10.data == 0
    none_type_1 = None
    stack_node_11 = module_0.StackNode(none_type_1)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0


def test_case_350():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_2 = None
    stack_node_5 = module_0.StackNode(none_type_2)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_5)
    assert len(stack_node_9.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_10 = module_0.StackNode(var_2)
    assert stack_node_10.data == 0
    bool_0 = False
    stack_node_11 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_12 = module_0.StackNode(float_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_13 = module_0.StackNode(var_4)
    assert stack_node_13.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_14 = module_0.StackNode(stack_10)
    assert len(stack_node_14.data) == 0
    stack_node_15 = module_0.StackNode(stack_13)
    assert len(stack_node_15.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_5 = stack_14.__len__()
    assert var_5 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_16 = module_0.StackNode(var_5)
    assert stack_node_16.data == 0
    stack_node_17 = module_0.StackNode(stack_node_16)
    stack_node_18 = module_0.StackNode(stack_node_16)
    stack_node_19 = module_0.StackNode(stack_14)
    assert len(stack_node_19.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_6 = stack_16.__len__()
    assert var_6 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_20 = module_0.StackNode(var_6)
    assert stack_node_20.data == 0
    stack_node_21 = module_0.StackNode(stack_node_20)
    stack_node_22 = module_0.StackNode(stack_node_20)
    stack_node_23 = module_0.StackNode(stack_16)
    assert len(stack_node_23.data) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0


def test_case_351():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1


def test_case_352():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    dict_0 = {}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_9)
    assert len(stack_node_8.data) == 0
    none_type_1 = None
    stack_node_9 = module_0.StackNode(none_type_1)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_8 = stack_12.__len__()
    assert var_8 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_10 = module_0.StackNode(var_8)
    assert stack_node_10.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_9 = stack_14.__len__()
    assert var_9 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_10 = stack_16.__len__()
    assert var_10 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_11 = module_0.StackNode(var_10)
    assert stack_node_11.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_12 = module_0.StackNode(stack_16)
    assert len(stack_node_12.data) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    none_type_2 = None
    stack_node_13 = module_0.StackNode(none_type_2)
    stack_node_14 = module_0.StackNode(var_7)
    assert stack_node_14.data == 0


def test_case_353():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_1)
    assert len(stack_node_7.data) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    var_3 = stack_1.push(stack_node_6)
    assert len(stack_1) == 1
    assert len(stack_node_7.data) == 1
    bool_0 = False
    stack_node_8 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_9 = module_0.StackNode(float_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_5 = stack_0.__len__()
    assert var_5 == 1


def test_case_354():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    dict_0 = {}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_5 = module_0.StackNode(var_7)
    assert stack_node_5.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_6 = module_0.StackNode(stack_10)
    assert len(stack_node_6.data) == 0
    stack_node_7 = module_0.StackNode(stack_13)
    assert len(stack_node_7.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_8 = module_0.StackNode(var_8)
    assert stack_node_8.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_9 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_10 = module_0.StackNode(none_type_0)
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    none_type_1 = None
    stack_node_11 = module_0.StackNode(none_type_1)
    stack_node_12 = module_0.StackNode(stack_19)
    assert len(stack_node_12.data) == 0
    var_9 = stack_19.push(none_type_0)
    assert len(stack_19) == 1
    assert len(stack_node_12.data) == 1
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0


def test_case_355():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_5.__len__()
    assert var_4 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    stack_node_4 = module_0.StackNode(float_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_6 = stack_6.__len__()
    assert var_6 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_6)
    assert stack_node_5.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(stack_6)
    assert len(stack_node_6.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0


def test_case_356():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    none_type_0 = None
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.push(none_type_0)
    assert len(stack_2) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    stack_node_4 = module_0.StackNode(stack_5)
    assert len(stack_node_4.data) == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_6 = stack_6.__len__()
    assert var_6 == 0
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_7 = module_0.check_parenthesis(dict_2)
    assert var_7 is True
    var_8 = stack_6.__len__()
    assert var_8 == 0
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    stack_node_7 = module_0.StackNode(bool_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_9 = stack_7.__len__()
    assert var_9 == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_10 = stack_8.__len__()
    assert var_10 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_9 = module_0.StackNode(var_10)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(bool_0)


def test_case_357():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    bool_1 = False
    stack_node_0 = module_0.StackNode(bool_1)
    stack_node_1 = module_0.StackNode(bool_1)
    none_type_0 = None
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.push(none_type_0)
    assert len(stack_1) == 1
    stack_node_2 = module_0.StackNode(var_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    bool_2 = False
    stack_node_5 = module_0.StackNode(bool_2)
    stack_node_6 = module_0.StackNode(bool_2)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    stack_node_9 = module_0.StackNode(stack_11)
    assert len(stack_node_9.data) == 0
    stack_node_10 = module_0.StackNode(stack_0)
    assert len(stack_node_10.data) == 1


def test_case_358():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_0.__len__()
    assert var_2 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_3 = stack_1.__len__()
    assert var_3 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_2 = module_0.StackNode(var_4)
    assert stack_node_2.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_node_4 = module_0.StackNode(stack_11)
    assert len(stack_node_4.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_5 = module_0.StackNode(var_6)
    assert stack_node_5.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_6 = module_0.StackNode(stack_12)
    assert len(stack_node_6.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_7 = stack_15.__len__()
    assert var_7 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_7 = module_0.StackNode(var_7)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_8 = stack_17.__len__()
    assert var_8 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_9 = module_0.StackNode(var_8)
    assert stack_node_9.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_9 = stack_19.push(stack_21)
    assert len(stack_19) == 1
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0


def test_case_359():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_1 = module_0.StackNode(stack_3)
    assert len(stack_node_1.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_2 = module_0.StackNode(complex_0)
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0


def test_case_360():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    bool_1 = False
    stack_node_6 = module_0.StackNode(bool_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    bool_2 = True
    stack_node_8 = module_0.StackNode(bool_2)


def test_case_361():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_7 = module_0.StackNode(stack_11)
    assert len(stack_node_7.data) == 0
    bool_0 = False
    stack_node_8 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_node_9 = module_0.StackNode(float_0)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_6 = stack_15.__len__()
    assert var_6 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_7 = stack_20.__len__()
    assert var_7 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_11 = module_0.StackNode(var_7)
    assert stack_node_11.data == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_8 = stack_23.__len__()
    assert var_8 == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    var_9 = stack_24.__len__()
    assert var_9 == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    stack_node_12 = module_0.StackNode(var_9)
    assert stack_node_12.data == 0
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0
    stack_27 = module_0.Stack()
    assert len(stack_27) == 0
    stack_node_13 = module_0.StackNode(stack_24)
    assert len(stack_node_13.data) == 0
    stack_node_14 = module_0.StackNode(var_2)
    assert stack_node_14.data == 0


def test_case_362():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_node_3 = module_0.StackNode(bool_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    complex_0 = -3711.3 - 806.2j
    stack_node_5 = module_0.StackNode(complex_0)
    none_type_2 = None
    stack_node_6 = module_0.StackNode(none_type_2)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_3 = None
    stack_node_7 = module_0.StackNode(none_type_3)
    stack_node_8 = module_0.StackNode(stack_3)
    assert len(stack_node_8.data) == 0
    var_2 = stack_3.push(none_type_2)
    assert len(stack_3) == 1
    assert len(stack_node_8.data) == 1
    complex_1 = -3711.3 - 806.2j
    stack_node_9 = module_0.StackNode(complex_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_10 = module_0.StackNode(var_3)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_4)
    assert len(stack_node_13.data) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    var_5 = stack_4.push(stack_node_12)
    assert len(stack_4) == 1
    assert len(stack_node_13.data) == 1
    bool_1 = True
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_6 = stack_6.push(bool_1)
    assert len(stack_6) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_7 = stack_8.__len__()
    assert var_7 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_14 = module_0.StackNode(var_7)
    assert stack_node_14.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_15 = module_0.StackNode(stack_8)
    assert len(stack_node_15.data) == 0
    stack_node_16 = module_0.StackNode(stack_node_15)


def test_case_363():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_node_3 = module_0.StackNode(stack_node_2)


def test_case_364():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.push(none_type_0)
    assert len(stack_2) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_8.push(stack_10)
    assert len(stack_8) == 1
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_node_7 = module_0.StackNode(float_0)
    complex_0 = -3711.3 - 806.2j
    stack_node_8 = module_0.StackNode(complex_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0


def test_case_365():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_8 = module_0.StackNode(bool_0)
    stack_node_9 = module_0.StackNode(bool_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    bool_1 = False
    stack_node_11 = module_0.StackNode(bool_1)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_node_12 = module_0.StackNode(float_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0


def test_case_366():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    complex_0 = -3711.3 - 806.2j
    stack_node_3 = module_0.StackNode(complex_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_6)
    assert len(stack_node_9.data) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_8 = stack_8.__len__()
    assert var_8 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_10 = module_0.StackNode(var_8)
    assert stack_node_10.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_9 = stack_11.__len__()
    assert var_9 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_10 = module_0.check_parenthesis(dict_2)
    assert var_10 is True
    stack_node_11 = module_0.StackNode(stack_13)
    assert len(stack_node_11.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0


def test_case_367():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_4)
    assert len(stack_node_8.data) == 0
    none_type_1 = None
    stack_node_9 = module_0.StackNode(none_type_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_10 = module_0.StackNode(var_5)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_6)
    assert len(stack_node_13.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_14 = module_0.StackNode(var_5)
    assert stack_node_14.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_2 = None
    stack_node_15 = module_0.StackNode(none_type_2)
    stack_node_16 = module_0.StackNode(stack_9)
    assert len(stack_node_16.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_17 = module_0.StackNode(var_6)
    assert stack_node_17.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_8 = stack_15.__len__()
    assert var_8 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_18 = module_0.StackNode(var_8)
    assert stack_node_18.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_19 = module_0.StackNode(stack_16)
    assert len(stack_node_19.data) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_9 = stack_18.push(float_0)
    assert len(stack_18) == 1


def test_case_368():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_3.push(stack_5)
    assert len(stack_3) == 1
    bool_1 = False
    stack_node_3 = module_0.StackNode(bool_1)
    stack_node_4 = module_0.StackNode(bool_1)
    none_type_0 = None
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.push(none_type_0)
    assert len(stack_6) == 1
    stack_node_5 = module_0.StackNode(var_3)
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(stack_7)
    assert len(stack_node_8.data) == 0
    stack_node_9 = module_0.StackNode(stack_10)
    assert len(stack_node_9.data) == 0
    none_type_1 = None
    stack_node_10 = module_0.StackNode(none_type_1)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_11 = module_0.StackNode(var_5)
    assert stack_node_11.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_12 = module_0.StackNode(stack_11)
    assert len(stack_node_12.data) == 0
    none_type_2 = None
    stack_node_13 = module_0.StackNode(none_type_2)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_6 = stack_15.__len__()
    assert var_6 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    var_8 = stack_15.__len__()
    assert var_8 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_9 = stack_17.__len__()
    assert var_9 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_14 = module_0.StackNode(var_9)
    assert stack_node_14.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_10 = stack_19.__len__()
    assert var_10 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    str_0 = "^@lD&QD\t<-tV'_`"
    tuple_0 = (var_6, str_0)
    var_11 = stack_7.push(tuple_0)
    assert len(stack_7) == 1
    assert len(stack_node_8.data) == 1


def test_case_369():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(stack_2)
    assert len(stack_node_0.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_8)
    assert len(stack_node_5.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_0.__len__()
    assert var_4 == 0


def test_case_370():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(stack_4)
    assert len(stack_node_6.data) == 0
    stack_node_7 = module_0.StackNode(stack_6)
    assert len(stack_node_7.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_8 = module_0.StackNode(stack_10)
    assert len(stack_node_8.data) == 0
    stack_node_9 = module_0.StackNode(stack_8)
    assert len(stack_node_9.data) == 0


def test_case_371():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_0)
    assert len(stack_node_4.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_5 = module_0.StackNode(var_1)
    assert stack_node_5.data == 0
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    stack_node_7 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.push(none_type_0)
    assert len(stack_3) == 1
    stack_node_8 = module_0.StackNode(var_2)
    stack_node_9 = module_0.StackNode(stack_node_8)
    bool_1 = True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.push(bool_1)
    assert len(stack_4) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_1 = None
    stack_node_10 = module_0.StackNode(none_type_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_11 = module_0.StackNode(var_4)
    assert stack_node_11.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_12 = module_0.StackNode(stack_6)
    assert len(stack_node_12.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_13 = module_0.StackNode(var_5)
    assert stack_node_13.data == 0
    stack_node_14 = module_0.StackNode(stack_node_13)
    stack_node_15 = module_0.StackNode(stack_node_13)
    bool_2 = False
    stack_node_16 = module_0.StackNode(bool_2)
    var_6 = stack_6.push(stack_node_12)
    assert len(stack_6) == 1
    assert len(stack_node_12.data) == 1


def test_case_372():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_0)
    assert stack_node_4.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(stack_node_3)


def test_case_373():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_node_5 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.push(none_type_0)
    assert len(stack_3) == 1
    stack_node_6 = module_0.StackNode(var_1)
    stack_node_7 = module_0.StackNode(stack_node_6)
    var_2 = stack_3.peek()


def test_case_374():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_node_5 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.push(none_type_0)
    assert len(stack_2) == 1
    stack_node_6 = module_0.StackNode(var_2)
    stack_node_7 = module_0.StackNode(stack_node_6)
    none_type_1 = None
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.push(none_type_1)
    assert len(stack_3) == 1
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_7 = module_0.check_parenthesis(dict_0)
    assert var_7 is True
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_10 = module_0.StackNode(var_8)
    assert stack_node_10.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    none_type_2 = None
    stack_node_11 = module_0.StackNode(none_type_2)
    var_9 = stack_12.__len__()
    assert var_9 == 0


def test_case_375():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_node_3 = module_0.StackNode(bool_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    stack_node_6 = module_0.StackNode(stack_6)
    assert len(stack_node_6.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(stack_9)
    assert len(stack_node_8.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_node_9 = module_0.StackNode(stack_7)
    assert len(stack_node_9.data) == 0


def test_case_376():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_node_4 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.push(none_type_0)
    assert len(stack_4) == 1
    stack_node_5 = module_0.StackNode(var_1)
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_9 = module_0.StackNode(stack_8)
    assert len(stack_node_9.data) == 0
    bool_1 = False
    stack_node_10 = module_0.StackNode(bool_1)
    stack_node_11 = module_0.StackNode(bool_1)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    bool_2 = False
    stack_node_13 = module_0.StackNode(bool_2)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_14 = module_0.StackNode(var_5)
    assert stack_node_14.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_7 = stack_19.__len__()
    assert var_7 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_15 = module_0.StackNode(var_7)
    assert stack_node_15.data == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_16 = module_0.StackNode(stack_19)
    assert len(stack_node_16.data) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    var_8 = stack_22.__len__()
    assert var_8 == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_node_17 = module_0.StackNode(var_8)
    assert stack_node_17.data == 0
    stack_node_18 = module_0.StackNode(stack_node_17)
    stack_node_19 = module_0.StackNode(stack_node_17)
    stack_node_20 = module_0.StackNode(stack_22)
    assert len(stack_node_20.data) == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_node_21 = module_0.StackNode(var_8)
    assert stack_node_21.data == 0
    var_9 = stack_1.__len__()
    assert var_9 == 0


def test_case_377():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0


def test_case_378():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    bool_1 = True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.push(bool_1)
    assert len(stack_1) == 1
    complex_0 = -3711.3 - 806.2j
    stack_node_2 = module_0.StackNode(complex_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_1.peek()
    assert var_3 is True


def test_case_379():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(stack_5)
    assert len(stack_node_3.data) == 0
    stack_node_4 = module_0.StackNode(stack_8)
    assert len(stack_node_4.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_6 = module_0.StackNode(stack_9)
    assert len(stack_node_6.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_4 = stack_14.__len__()
    assert var_4 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_5 = stack_19.__len__()
    assert var_5 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_node_12 = module_0.StackNode(stack_19)
    assert len(stack_node_12.data) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    bool_1 = False
    stack_node_13 = module_0.StackNode(bool_1)
    stack_node_14 = module_0.StackNode(bool_1)
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    var_6 = stack_22.__len__()
    assert var_6 == 0
    stack_node_15 = module_0.StackNode(stack_node_14)
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_7 = stack_23.__len__()
    assert var_7 == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_8 = module_0.check_parenthesis(dict_0)
    assert var_8 is True
    stack_node_16 = module_0.StackNode(stack_25)
    assert len(stack_node_16.data) == 0
    var_9 = stack_7.__len__()
    assert var_9 == 0


def test_case_380():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_2 = module_0.StackNode(var_0)
    assert stack_node_2.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(stack_5)
    assert len(stack_node_5.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0


def test_case_381():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0


def test_case_382():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_node_4 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.push(none_type_0)
    assert len(stack_5) == 1
    stack_node_5 = module_0.StackNode(var_2)
    stack_node_6 = module_0.StackNode(stack_node_5)
    bool_1 = True
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.push(bool_1)
    assert len(stack_6) == 1
    dict_0 = {}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_5 = stack_4.__len__()
    assert var_5 == 0


def test_case_383():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    stack_node_6 = module_0.StackNode(stack_5)
    assert len(stack_node_6.data) == 0
    bool_0 = False
    stack_node_7 = module_0.StackNode(bool_0)
    stack_node_8 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.push(none_type_0)
    assert len(stack_6) == 1
    stack_node_9 = module_0.StackNode(var_4)
    bool_1 = True
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.push(bool_1)
    assert len(stack_7) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_10.push(stack_12)
    assert len(stack_10) == 1
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    none_type_1 = None
    stack_node_11 = module_0.StackNode(none_type_1)
    stack_node_12 = module_0.StackNode(stack_15)
    assert len(stack_node_12.data) == 0
    bool_2 = False
    stack_node_13 = module_0.StackNode(bool_2)
    stack_node_14 = module_0.StackNode(bool_2)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_9 = stack_16.__len__()
    assert var_9 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_10 = module_0.check_parenthesis(dict_0)
    assert var_10 is True
    stack_node_15 = module_0.StackNode(float_0)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_11 = stack_17.__len__()
    assert var_11 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_16 = module_0.StackNode(var_11)
    assert stack_node_16.data == 0
    stack_node_17 = module_0.StackNode(stack_node_16)
    stack_node_18 = module_0.StackNode(var_3)
    assert stack_node_18.data == 0


def test_case_384():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_0)
    assert len(stack_node_4.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_7 = module_0.StackNode(stack_4)
    assert len(stack_node_7.data) == 0
    bool_1 = False
    stack_node_8 = module_0.StackNode(bool_1)
    stack_node_9 = module_0.StackNode(bool_1)
    var_3 = stack_0.push(var_1)
    assert len(stack_0) == 1
    assert len(stack_node_4.data) == 1


def test_case_385():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_10 = module_0.StackNode(stack_11)
    assert len(stack_node_10.data) == 0
    stack_node_11 = module_0.StackNode(stack_1)
    assert len(stack_node_11.data) == 0


def test_case_386():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_2.push(stack_4)
    assert len(stack_2) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_node_1 = module_0.StackNode(var_1)


def test_case_387():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    none_type_2 = None
    stack_node_5 = module_0.StackNode(none_type_2)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    bool_1 = False
    stack_node_7 = module_0.StackNode(bool_1)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_8 = module_0.StackNode(float_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_3 = None
    stack_node_9 = module_0.StackNode(none_type_3)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_10 = module_0.StackNode(float_1)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_11 = module_0.StackNode(var_5)
    assert stack_node_11.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_12 = module_0.StackNode(stack_9)
    assert len(stack_node_12.data) == 0
    stack_node_13 = module_0.StackNode(stack_11)
    assert len(stack_node_13.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_14 = module_0.StackNode(var_6)
    assert stack_node_14.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_7 = stack_4.push(var_0)
    assert len(stack_4) == 1


def test_case_388():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    stack_node_3 = module_0.StackNode(stack_3)
    assert len(stack_node_3.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_7 = module_0.StackNode(float_0)
    bool_1 = False
    stack_node_8 = module_0.StackNode(bool_1)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    stack_node_9 = module_0.StackNode(float_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_10 = module_0.StackNode(complex_0)
    var_4 = stack_5.push(stack_node_0)
    assert len(stack_5) == 1


def test_case_389():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.push(none_type_0)
    assert len(stack_1) == 1
    assert len(stack_node_3.data) == 1
    none_type_2 = None
    stack_node_4 = module_0.StackNode(none_type_2)
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_node_6 = module_0.StackNode(bool_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_5 = stack_4.__len__()
    assert var_5 == 0
    stack_node_9 = module_0.StackNode(stack_node_0)


def test_case_390():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_3)
    assert len(stack_node_4.data) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    var_3 = stack_3.push(stack_node_3)
    assert len(stack_3) == 1
    assert len(stack_node_4.data) == 1
    var_4 = stack_3.__len__()
    assert var_4 == 1


def test_case_391():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(stack_2)
    assert len(stack_node_0.data) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_2 = module_0.check_parenthesis(dict_1)
    assert var_2 is True
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_3 = module_0.check_parenthesis(dict_2)
    assert var_3 is True
    stack_node_1 = module_0.StackNode(float_2)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_4)
    assert stack_node_2.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(stack_3)
    assert len(stack_node_3.data) == 0
    stack_node_4 = module_0.StackNode(stack_6)
    assert len(stack_node_4.data) == 0
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_node_6 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.push(none_type_0)
    assert len(stack_7) == 1
    stack_node_7 = module_0.StackNode(var_5)
    bool_1 = False
    stack_node_8 = module_0.StackNode(bool_1)
    stack_node_9 = module_0.StackNode(bool_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_8)
    assert len(stack_node_13.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_14 = module_0.StackNode(none_type_0)


def test_case_392():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0


def test_case_393():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_node_5 = module_0.StackNode(stack_8)
    assert len(stack_node_5.data) == 0
    var_2 = stack_8.__len__()
    assert var_2 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_7 = module_0.StackNode(stack_9)
    assert len(stack_node_7.data) == 0
    stack_node_8 = module_0.StackNode(stack_11)
    assert len(stack_node_8.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_9 = module_0.StackNode(complex_0)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_4 = stack_13.__len__()
    assert var_4 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_10 = module_0.StackNode(var_4)
    assert stack_node_10.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_5 = stack_16.__len__()
    assert var_5 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_11 = module_0.StackNode(var_5)
    assert stack_node_11.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    none_type_1 = None
    stack_node_12 = module_0.StackNode(none_type_1)
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_6 = stack_21.__len__()
    assert var_6 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_7 = module_0.check_parenthesis(dict_0)
    assert var_7 is True
    var_8 = stack_21.__len__()
    assert var_8 == 0
    var_9 = stack_3.__len__()
    assert var_9 == 0


def test_case_394():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_5)
    assert len(stack_node_4.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_8.push(stack_node_1)
    assert len(stack_8) == 1


def test_case_395():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    var_3 = stack_0.__len__()
    assert var_3 == 1


def test_case_396():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_1)
    assert len(stack_node_5.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(stack_3)
    assert len(stack_node_7.data) == 0
    stack_node_8 = module_0.StackNode(stack_6)
    assert len(stack_node_8.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_11 = module_0.StackNode(var_5)
    assert stack_node_11.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_12 = module_0.StackNode(var_6)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_node_12)
    stack_node_15 = module_0.StackNode(stack_12)
    assert len(stack_node_15.data) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    var_8 = stack_12.push(stack_node_14)
    assert len(stack_12) == 1
    assert len(stack_node_15.data) == 1
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_9 = stack_14.__len__()
    assert var_9 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_16 = module_0.StackNode(stack_3)
    assert len(stack_node_16.data) == 0


def test_case_397():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_8 = module_0.StackNode(var_7)
    assert stack_node_8.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_8 = stack_15.push(stack_17)
    assert len(stack_15) == 1
    bool_0 = False
    stack_node_9 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_9 = module_0.check_parenthesis(dict_0)
    assert var_9 is True
    stack_node_10 = module_0.StackNode(float_0)
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    bool_1 = False
    stack_node_11 = module_0.StackNode(bool_1)
    stack_node_12 = module_0.StackNode(bool_1)
    none_type_0 = None
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_10 = stack_19.push(none_type_0)
    assert len(stack_19) == 1
    stack_node_13 = module_0.StackNode(var_10)
    var_11 = stack_10.__len__()
    assert var_11 == 0


def test_case_398():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    var_4 = stack_0.push(stack_6)
    assert len(stack_0) == 1


def test_case_399():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    var_3 = stack_1.__len__()
    assert var_3 == 0


def test_case_400():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_node_3 = module_0.StackNode(bool_0)
    bool_1 = True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.push(bool_1)
    assert len(stack_3) == 1
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_6 = module_0.StackNode(stack_6)
    assert len(stack_node_6.data) == 0
    stack_node_7 = module_0.StackNode(stack_8)
    assert len(stack_node_7.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_11)
    assert len(stack_node_10.data) == 0
    bool_2 = False
    stack_node_11 = module_0.StackNode(bool_2)
    stack_node_12 = module_0.StackNode(bool_2)
    none_type_0 = None
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.push(none_type_0)
    assert len(stack_12) == 1
    stack_node_13 = module_0.StackNode(var_5)
    stack_node_14 = module_0.StackNode(stack_node_13)
    var_6 = stack_3.peek()
    assert var_6 is True


def test_case_401():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_4)
    assert len(stack_node_6.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_10 = module_0.StackNode(float_0)
    none_type_1 = None
    stack_node_11 = module_0.StackNode(none_type_1)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    var_7 = stack_9.__len__()
    assert var_7 == 0
    none_type_2 = None
    stack_node_12 = module_0.StackNode(none_type_2)
    stack_node_13 = module_0.StackNode(stack_3)
    assert len(stack_node_13.data) == 0


def test_case_402():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_2 = module_0.StackNode(stack_6)
    assert len(stack_node_2.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    var_7 = stack_11.__len__()
    assert var_7 == 0
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_node_6 = module_0.StackNode(bool_0)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_9 = stack_14.__len__()
    assert var_9 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_8 = module_0.StackNode(var_9)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_14)
    assert len(stack_node_11.data) == 0
    var_10 = stack_15.__len__()
    assert var_10 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_11 = stack_16.__len__()
    assert var_11 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_12 = module_0.StackNode(var_11)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_node_12)
    stack_node_15 = module_0.StackNode(stack_16)
    assert len(stack_node_15.data) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_16 = module_0.StackNode(var_11)
    assert stack_node_16.data == 0
    var_12 = stack_0.push(stack_node_12)
    assert len(stack_0) == 1
    assert len(stack_node_1.data) == 1


def test_case_403():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0


def test_case_404():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)


def test_case_405():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(stack_2)
    assert len(stack_node_3.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_5 = module_0.StackNode(stack_6)
    assert len(stack_node_5.data) == 0
    stack_node_6 = module_0.StackNode(stack_9)
    assert len(stack_node_6.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    stack_node_8 = module_0.StackNode(stack_10)
    assert len(stack_node_8.data) == 0
    bool_0 = False
    stack_node_9 = module_0.StackNode(bool_0)
    stack_node_10 = module_0.StackNode(bool_0)
    none_type_2 = None
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.push(none_type_2)
    assert len(stack_11) == 1
    stack_node_11 = module_0.StackNode(var_4)
    bool_1 = False
    stack_node_12 = module_0.StackNode(bool_1)
    stack_node_13 = module_0.StackNode(bool_1)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_14 = module_0.StackNode(var_5)
    assert stack_node_14.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_15 = module_0.StackNode(stack_12)
    assert len(stack_node_15.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_6 = stack_16.__len__()
    assert var_6 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_16 = module_0.StackNode(var_6)
    assert stack_node_16.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_17 = module_0.StackNode(stack_16)
    assert len(stack_node_17.data) == 0
    stack_node_18 = module_0.StackNode(stack_18)
    assert len(stack_node_18.data) == 0
    var_7 = stack_6.__len__()
    assert var_7 == 0


def test_case_406():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_4.push(stack_6)
    assert len(stack_4) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    bool_1 = False
    stack_node_2 = module_0.StackNode(bool_1)
    stack_node_3 = module_0.StackNode(bool_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_9)
    assert len(stack_node_7.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_9 = module_0.StackNode(stack_11)
    assert len(stack_node_9.data) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_8 = stack_15.__len__()
    assert var_8 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0


def test_case_407():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_node_3 = module_0.StackNode(stack_node_2)
    complex_0 = -3711.3 - 806.2j
    stack_node_4 = module_0.StackNode(complex_0)
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_2 = None
    stack_node_6 = module_0.StackNode(none_type_2)
    stack_node_7 = module_0.StackNode(stack_1)
    assert len(stack_node_7.data) == 0
    var_1 = stack_1.push(none_type_1)
    assert len(stack_1) == 1
    assert len(stack_node_7.data) == 1
    bool_1 = False
    stack_node_8 = module_0.StackNode(bool_1)
    stack_node_9 = module_0.StackNode(bool_1)
    none_type_3 = None
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.push(none_type_3)
    assert len(stack_2) == 1
    stack_node_10 = module_0.StackNode(var_2)
    var_3 = stack_0.push(stack_node_3)
    assert len(stack_0) == 2


def test_case_408():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_3)
    assert len(stack_node_4.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_6 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_1 = None
    stack_node_8 = module_0.StackNode(none_type_1)
    stack_node_9 = module_0.StackNode(stack_10)
    assert len(stack_node_9.data) == 0
    var_5 = stack_10.push(none_type_0)
    assert len(stack_10) == 1
    assert len(stack_node_9.data) == 1
    stack_node_10 = module_0.StackNode(stack_node_7)


def test_case_409():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0


def test_case_410():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(stack_5)
    assert len(stack_node_2.data) == 0
    stack_node_3 = module_0.StackNode(stack_node_2)


def test_case_411():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0


def test_case_412():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_2 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    var_1 = stack_3.push(none_type_0)
    assert len(stack_3) == 1
    assert len(stack_node_5.data) == 1
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0


def test_case_413():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_0.__len__()
    assert var_2 == 0
    none_type_1 = None
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_3 = stack_1.push(none_type_1)
    assert len(stack_1) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_4 = stack_2.__len__()
    assert var_4 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_4)
    assert stack_node_1.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    stack_node_3 = module_0.StackNode(stack_5)
    assert len(stack_node_3.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    bool_0 = True
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.push(bool_0)
    assert len(stack_10) == 1
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0


def test_case_414():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_5)
    assert len(stack_node_11.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_12 = module_0.StackNode(var_4)
    assert stack_node_12.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_13 = module_0.StackNode(stack_8)
    assert len(stack_node_13.data) == 0
    stack_node_14 = module_0.StackNode(stack_11)
    assert len(stack_node_14.data) == 0
    stack_node_15 = module_0.StackNode(stack_node_3)


def test_case_415():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(stack_4)
    assert len(stack_node_2.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(stack_7)
    assert len(stack_node_4.data) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0


def test_case_416():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    dict_0 = {}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0


def test_case_417():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    var_1 = stack_0.pop()
    assert len(stack_0) == 0
    assert len(stack_node_3.data) == 0


def test_case_418():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    bool_1 = False
    stack_node_6 = module_0.StackNode(bool_1)
    stack_node_7 = module_0.StackNode(bool_1)
    none_type_0 = None
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.push(none_type_0)
    assert len(stack_5) == 1
    stack_node_8 = module_0.StackNode(var_3)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_9 = module_0.StackNode(float_0)
    stack_node_10 = module_0.StackNode(none_type_0)


def test_case_419():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(stack_6)
    assert len(stack_node_4.data) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_node_5 = module_0.StackNode(stack_6)
    assert len(stack_node_5.data) == 0
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    var_6 = stack_7.__len__()
    assert var_6 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_7 = stack_8.__len__()
    assert var_7 == 0
    stack_node_7 = module_0.StackNode(var_7)
    assert stack_node_7.data == 0
    none_type_2 = None
    stack_node_8 = module_0.StackNode(none_type_2)
    bool_0 = False
    stack_node_9 = module_0.StackNode(bool_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    int_0 = -4113
    var_8 = stack_8.push(int_0)
    assert len(stack_8) == 1


def test_case_420():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_8 = module_0.StackNode(stack_7)
    assert len(stack_node_8.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_0 = None
    stack_node_9 = module_0.StackNode(none_type_0)
    none_type_1 = None
    stack_node_10 = module_0.StackNode(none_type_1)
    bool_1 = False
    stack_node_11 = module_0.StackNode(bool_1)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_12 = module_0.StackNode(var_6)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_node_12)
    stack_node_15 = module_0.StackNode(stack_12)
    assert len(stack_node_15.data) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    var_8 = stack_12.push(stack_node_14)
    assert len(stack_12) == 1
    assert len(stack_node_15.data) == 1
    var_9 = stack_5.__len__()
    assert var_9 == 0


def test_case_421():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_4)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    var_6 = stack_6.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_2 = module_0.StackNode(var_7)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_10)
    assert len(stack_node_5.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_6 = module_0.StackNode(var_7)
    assert stack_node_6.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_7 = module_0.StackNode(var_8)
    assert stack_node_7.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_8 = module_0.StackNode(stack_13)
    assert len(stack_node_8.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_9 = stack_16.__len__()
    assert var_9 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_9 = module_0.StackNode(var_9)
    assert stack_node_9.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_10 = module_0.StackNode(stack_16)
    assert len(stack_node_10.data) == 0
    stack_node_11 = module_0.StackNode(stack_18)
    assert len(stack_node_11.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_12 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_13 = module_0.StackNode(none_type_0)
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    none_type_1 = None
    stack_node_14 = module_0.StackNode(none_type_1)
    stack_node_15 = module_0.StackNode(stack_20)
    assert len(stack_node_15.data) == 0
    var_10 = stack_20.push(none_type_0)
    assert len(stack_20) == 1
    assert len(stack_node_15.data) == 1
    bool_0 = False
    stack_node_16 = module_0.StackNode(bool_0)
    stack_node_17 = module_0.StackNode(bool_0)
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_11 = stack_21.__len__()
    assert var_11 == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_18 = module_0.StackNode(var_11)
    assert stack_node_18.data == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_node_19 = module_0.StackNode(stack_21)
    assert len(stack_node_19.data) == 0
    stack_node_20 = module_0.StackNode(stack_24)
    assert len(stack_node_20.data) == 0
    none_type_2 = None
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    var_12 = stack_25.push(none_type_2)
    assert len(stack_25) == 1
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0


def test_case_422():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(stack_4)
    assert len(stack_node_2.data) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_8)
    assert len(stack_node_6.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(var_2)
    assert stack_node_8.data == 0


def test_case_423():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0


def test_case_424():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_7)
    assert len(stack_node_9.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_10 = module_0.StackNode(var_4)
    assert stack_node_10.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    none_type_1 = None
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_7 = stack_15.push(none_type_1)
    assert len(stack_15) == 1
    complex_0 = -3711.3 - 806.2j
    stack_node_11 = module_0.StackNode(complex_0)
    none_type_2 = None
    stack_node_12 = module_0.StackNode(none_type_2)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    none_type_3 = None
    stack_node_13 = module_0.StackNode(none_type_3)
    stack_node_14 = module_0.StackNode(stack_16)
    assert len(stack_node_14.data) == 0
    var_8 = stack_16.push(none_type_2)
    assert len(stack_16) == 1
    assert len(stack_node_14.data) == 1
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0


def test_case_425():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(stack_2)
    assert len(stack_node_0.data) == 0
    var_2 = stack_2.push(var_1)
    assert len(stack_2) == 1
    assert len(stack_node_0.data) == 1


def test_case_426():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_4)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_2 = module_0.StackNode(stack_5)
    assert len(stack_node_2.data) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    var_6 = stack_1.__len__()
    assert var_6 == 0


def test_case_427():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(stack_3)
    assert len(stack_node_4.data) == 0


def test_case_428():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    dict_0 = {}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_8.__len__()
    assert var_7 == 0
    var_8 = stack_8.__len__()
    assert var_8 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_9 = stack_12.__len__()
    assert var_9 == 0
    stack_node_9 = module_0.StackNode(var_9)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_10 = stack_13.__len__()
    assert var_10 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_11 = module_0.StackNode(var_10)
    assert stack_node_11.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_11 = stack_2.__len__()
    assert var_11 == 0


def test_case_429():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(stack_6)
    assert len(stack_node_5.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    dict_0 = {}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    complex_0 = -3711.3 - 806.2j
    stack_node_7 = module_0.StackNode(complex_0)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    none_type_1 = None
    stack_node_8 = module_0.StackNode(none_type_1)
    stack_node_9 = module_0.StackNode(stack_13)
    assert len(stack_node_9.data) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_10 = module_0.StackNode(var_8)
    assert stack_node_10.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_11 = module_0.StackNode(var_1)
    assert stack_node_11.data == 0


def test_case_430():
    int_0 = -460
    stack_node_0 = module_0.StackNode(int_0)


def test_case_431():
    dict_0 = {}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_4 = module_0.StackNode(var_6)
    assert stack_node_4.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_7 = stack_12.__len__()
    assert var_7 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_8 = stack_16.__len__()
    assert var_8 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_5 = module_0.StackNode(var_8)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_17)
    assert len(stack_node_7.data) == 0
    none_type_1 = None
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_9 = stack_18.push(none_type_1)
    assert len(stack_18) == 1
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    none_type_2 = None
    stack_node_8 = module_0.StackNode(none_type_2)
    var_10 = stack_16.push(var_8)
    assert len(stack_16) == 1


def test_case_432():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.__len__()
    assert var_2 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_5 = stack_14.__len__()
    assert var_5 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_2 = module_0.StackNode(var_5)
    assert stack_node_2.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_3 = module_0.StackNode(stack_14)
    assert len(stack_node_3.data) == 0
    var_6 = stack_16.__len__()
    assert var_6 == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    int_0 = -460
    stack_node_6 = module_0.StackNode(int_0)
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_7 = stack_19.__len__()
    assert var_7 == 0
    stack_node_7 = module_0.StackNode(var_7)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    none_type_1 = None
    stack_node_9 = module_0.StackNode(none_type_1)
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_8 = stack_20.__len__()
    assert var_8 == 0
    stack_node_10 = module_0.StackNode(stack_11)
    assert len(stack_node_10.data) == 0


def test_case_433():
    str_0 = "o2EICU9\x0bp7"
    stack_node_0 = module_0.StackNode(str_0)


def test_case_434():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    bool_1 = False
    stack_node_4 = module_0.StackNode(bool_1)
    stack_node_5 = module_0.StackNode(bool_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_7)
    assert len(stack_node_8.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_9.__len__()
    assert var_7 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    none_type_0 = None
    stack_node_10 = module_0.StackNode(none_type_0)
    stack_node_11 = module_0.StackNode(stack_13)
    assert len(stack_node_11.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    none_type_1 = None
    stack_node_12 = module_0.StackNode(none_type_1)
    stack_node_13 = module_0.StackNode(var_7)
    assert stack_node_13.data == 0


def test_case_435():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    dict_0 = {}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    stack_node_2 = module_0.StackNode(float_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    bool_1 = False
    var_4 = stack_0.push(bool_1)
    assert len(stack_0) == 1


def test_case_436():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    var_4 = stack_3.__len__()
    assert var_4 == 0


def test_case_437():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)
    bool_1 = False
    stack_node_3 = module_0.StackNode(bool_1)
    stack_node_4 = module_0.StackNode(bool_1)
    none_type_1 = None
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.push(none_type_1)
    assert len(stack_1) == 1
    stack_node_5 = module_0.StackNode(var_1)
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0


def test_case_438():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_5)
    assert len(stack_node_9.data) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    var_4 = stack_5.push(stack_node_8)
    assert len(stack_5) == 1
    assert len(stack_node_9.data) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_0 = None
    stack_node_10 = module_0.StackNode(none_type_0)
    stack_node_11 = module_0.StackNode(stack_7)
    assert len(stack_node_11.data) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    var_6 = stack_5.peek()
    assert f"{type(var_6).__module__}.{type(var_6).__qualname__}" == "stack1.StackNode"
    assert (
        f"{type(var_6.data).__module__}.{type(var_6.data).__qualname__}"
        == "stack1.StackNode"
    )
    assert var_6.next is None


def test_case_439():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_3 = module_0.StackNode(stack_6)
    assert len(stack_node_3.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_node_6 = module_0.StackNode(bool_0)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(dict_0)


def test_case_440():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0


def test_case_441():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(stack_2)
    assert len(stack_node_0.data) == 0
    var_2 = stack_2.push(var_1)
    assert len(stack_2) == 1
    assert len(stack_node_0.data) == 1
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    stack_node_6 = module_0.StackNode(float_1)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_11)
    assert len(stack_node_9.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_12.__len__()
    assert var_7 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_10 = module_0.StackNode(var_7)
    assert stack_node_10.data == 0
    dict_2 = {}
    var_8 = module_0.check_parenthesis(dict_2)
    assert var_8 is True
    var_9 = stack_13.__len__()
    assert var_9 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_10 = stack_14.__len__()
    assert var_10 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_11 = module_0.StackNode(var_10)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_node_11)
    stack_node_14 = module_0.StackNode(stack_14)
    assert len(stack_node_14.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_15 = module_0.StackNode(var_10)
    assert stack_node_15.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0


def test_case_442():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_1 = stack_6.__len__()
    assert var_1 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_2 = module_0.StackNode(stack_6)
    assert len(stack_node_2.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_2 = stack_11.__len__()
    assert var_2 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    dict_0 = {}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_6 = module_0.StackNode(stack_13)
    assert len(stack_node_6.data) == 0
    stack_node_7 = module_0.StackNode(stack_15)
    assert len(stack_node_7.data) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_6 = stack_17.__len__()
    assert var_6 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_17)
    assert len(stack_node_11.data) == 0
    var_7 = stack_18.__len__()
    assert var_7 == 0
    var_8 = stack_17.push(stack_node_10)
    assert len(stack_17) == 1
    assert len(stack_node_11.data) == 1
    complex_0 = -3711.3 - 806.2j
    stack_node_12 = module_0.StackNode(complex_0)
    none_type_1 = None
    stack_node_13 = module_0.StackNode(none_type_1)
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    none_type_2 = None
    stack_node_14 = module_0.StackNode(none_type_2)
    stack_node_15 = module_0.StackNode(stack_19)
    assert len(stack_node_15.data) == 0
    var_9 = stack_19.push(none_type_1)
    assert len(stack_19) == 1
    assert len(stack_node_15.data) == 1
    stack_node_16 = module_0.StackNode(stack_node_2)


def test_case_443():
    int_0 = -460
    stack_node_0 = module_0.StackNode(int_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    stack_node_3 = module_0.StackNode(stack_3)
    assert len(stack_node_3.data) == 0
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_node_5 = module_0.StackNode(bool_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_5)
    assert len(stack_node_9.data) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    var_4 = stack_5.push(stack_node_8)
    assert len(stack_5) == 1
    assert len(stack_node_9.data) == 1
    none_type_0 = None
    stack_node_10 = module_0.StackNode(none_type_0)
    bool_1 = False
    stack_node_11 = module_0.StackNode(bool_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_1 = None
    stack_node_12 = module_0.StackNode(none_type_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    var_7 = stack_8.__len__()
    assert var_7 == 0
    dict_1 = {}
    var_8 = module_0.check_parenthesis(dict_1)
    assert var_8 is True
    bool_2 = False
    stack_node_13 = module_0.StackNode(bool_2)
    stack_node_14 = module_0.StackNode(bool_2)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_9 = stack_9.__len__()
    assert var_9 == 0
    stack_node_15 = module_0.StackNode(stack_node_14)
    stack_node_16 = module_0.StackNode(var_9)
    assert stack_node_16.data == 0


def test_case_444():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_5 = module_0.StackNode(stack_10)
    assert len(stack_node_5.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_13)
    assert len(stack_node_10.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_7 = stack_5.__len__()
    assert var_7 == 0


def test_case_445():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_3.push(stack_5)
    assert len(stack_3) == 1
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0


def test_case_446():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    str_0 = "o2EICU9\x0bp7"
    stack_node_1 = module_0.StackNode(str_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(var_5)
    assert stack_node_3.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_4 = module_0.StackNode(stack_6)
    assert len(stack_node_4.data) == 0
    stack_node_5 = module_0.StackNode(stack_9)
    assert len(stack_node_5.data) == 0
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    stack_node_7 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.push(none_type_1)
    assert len(stack_10) == 1
    stack_node_8 = module_0.StackNode(var_6)
    stack_node_9 = module_0.StackNode(stack_node_8)
    var_7 = stack_9.push(none_type_0)
    assert len(stack_9) == 1
    assert len(stack_node_5.data) == 1


def test_case_447():
    int_0 = -460
    stack_node_0 = module_0.StackNode(int_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_3 = module_0.StackNode(var_0)
    complex_0 = -3711.3 - 806.2j
    stack_node_4 = module_0.StackNode(complex_0)
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_2 = None
    stack_node_6 = module_0.StackNode(none_type_2)
    stack_node_7 = module_0.StackNode(stack_1)
    assert len(stack_node_7.data) == 0
    var_1 = stack_1.push(none_type_1)
    assert len(stack_1) == 1
    assert len(stack_node_7.data) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_8 = module_0.StackNode(var_2)
    assert stack_node_8.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_9 = module_0.StackNode(stack_3)
    assert len(stack_node_9.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_3 = None
    stack_node_10 = module_0.StackNode(none_type_3)
    stack_node_11 = module_0.StackNode(stack_5)
    assert len(stack_node_11.data) == 0
    bool_1 = False
    stack_node_12 = module_0.StackNode(bool_1)
    stack_node_13 = module_0.StackNode(bool_1)
    none_type_4 = None
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.push(none_type_4)
    assert len(stack_6) == 1
    stack_node_14 = module_0.StackNode(var_3)
    stack_node_15 = module_0.StackNode(stack_node_14)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_16 = module_0.StackNode(var_5)
    assert stack_node_16.data == 0
    stack_node_17 = module_0.StackNode(stack_node_16)
    stack_node_18 = module_0.StackNode(stack_node_16)
    stack_node_19 = module_0.StackNode(stack_8)
    assert len(stack_node_19.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_20 = module_0.StackNode(var_5)
    assert stack_node_20.data == 0
    var_6 = stack_7.push(bool_1)
    assert len(stack_7) == 1


def test_case_448():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_0)
    assert stack_node_4.data == 0
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_node_6 = module_0.StackNode(bool_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    bool_1 = False
    stack_node_7 = module_0.StackNode(bool_1)
    stack_node_8 = module_0.StackNode(bool_1)
    none_type_0 = None
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.push(none_type_0)
    assert len(stack_4) == 1
    stack_node_9 = module_0.StackNode(var_2)
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_11 = module_0.StackNode(var_3)
    assert stack_node_11.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_12 = module_0.StackNode(stack_5)
    assert len(stack_node_12.data) == 0
    stack_node_13 = module_0.StackNode(stack_7)
    assert len(stack_node_13.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_14 = module_0.StackNode(var_4)
    assert stack_node_14.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_15 = module_0.StackNode(var_6)
    assert stack_node_15.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_7 = stack_16.__len__()
    assert var_7 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    int_0 = -460
    stack_node_16 = module_0.StackNode(int_0)
    none_type_1 = None
    stack_node_17 = module_0.StackNode(none_type_1)
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_8 = stack_18.__len__()
    assert var_8 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_9 = module_0.check_parenthesis(dict_0)
    assert var_9 is True
    var_10 = stack_18.__len__()
    assert var_10 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_11 = stack_19.__len__()
    assert var_11 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_18 = module_0.StackNode(var_11)
    assert stack_node_18.data == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_19 = module_0.StackNode(stack_19)
    assert len(stack_node_19.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_20 = module_0.StackNode(complex_0)
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0


def test_case_449():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_1 = module_0.StackNode(stack_2)
    assert len(stack_node_1.data) == 0
    var_2 = stack_2.push(var_1)
    assert len(stack_2) == 1
    assert len(stack_node_1.data) == 1
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    stack_node_2 = module_0.StackNode(float_1)
    bool_1 = False
    stack_node_3 = module_0.StackNode(bool_1)
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_4 = module_0.check_parenthesis(dict_2)
    assert var_4 is True
    stack_node_4 = module_0.StackNode(float_2)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    bool_2 = False
    stack_node_5 = module_0.StackNode(bool_2)
    stack_node_6 = module_0.StackNode(bool_2)
    none_type_0 = None
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_5 = stack_4.push(none_type_0)
    assert len(stack_4) == 1
    stack_node_7 = module_0.StackNode(var_5)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_1 = None
    stack_node_8 = module_0.StackNode(none_type_1)
    stack_node_9 = module_0.StackNode(stack_5)
    assert len(stack_node_9.data) == 0
    var_6 = stack_5.__len__()
    assert var_6 == 0
    stack_node_10 = module_0.StackNode(stack_5)
    assert len(stack_node_10.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_7 = stack_6.__len__()
    assert var_7 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_11 = module_0.StackNode(var_7)
    assert stack_node_11.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_8 = stack_8.push(stack_10)
    assert len(stack_8) == 1
    var_9 = stack_0.__len__()
    assert var_9 == 0


def test_case_450():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_3.__len__()
    assert var_3 == 0
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True


def test_case_451():
    bool_0 = True
    stack_node_0 = module_0.StackNode(bool_0)


def test_case_452():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_2.push(stack_4)
    assert len(stack_2) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_2 = module_0.StackNode(var_5)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_8)
    assert len(stack_node_5.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_11)
    assert len(stack_node_9.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    none_type_0 = None
    stack_node_11 = module_0.StackNode(none_type_0)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    var_8 = stack_14.push(none_type_0)
    assert len(stack_14) == 1


def test_case_453():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(stack_2)
    assert len(stack_node_0.data) == 0
    var_2 = stack_2.push(var_1)
    assert len(stack_2) == 1
    assert len(stack_node_0.data) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    var_6 = stack_7.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_7 = stack_9.__len__()
    assert var_7 == 0
    stack_node_6 = module_0.StackNode(var_7)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_5)
    assert len(stack_node_7.data) == 0


def test_case_454():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    stack_node_3 = module_0.StackNode(stack_4)
    assert len(stack_node_3.data) == 0


def test_case_455():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_2)
    assert len(stack_node_7.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_8 = module_0.StackNode(var_2)
    assert stack_node_8.data == 0
    bool_0 = False
    stack_node_9 = module_0.StackNode(bool_0)
    stack_node_10 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.push(none_type_0)
    assert len(stack_5) == 1
    stack_node_11 = module_0.StackNode(var_3)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.push(stack_node_2)
    assert len(stack_7) == 1
    stack_node_12 = module_0.StackNode(var_5)


def test_case_456():
    bool_0 = True
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_2 = module_0.StackNode(stack_7)
    assert len(stack_node_2.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_11)
    assert len(stack_node_8.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_node_12 = module_0.StackNode(stack_12)
    assert len(stack_node_12.data) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_13 = module_0.StackNode(var_7)
    assert stack_node_13.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_8 = stack_17.__len__()
    assert var_8 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_9 = stack_18.__len__()
    assert var_9 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_14 = module_0.StackNode(var_9)
    assert stack_node_14.data == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_15 = module_0.StackNode(stack_1)
    assert len(stack_node_15.data) == 0


def test_case_457():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_node_3 = module_0.StackNode(stack_node_2)


def test_case_458():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_0)
    assert stack_node_4.data == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.__len__()
    assert var_2 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_7 = module_0.StackNode(stack_10)
    assert len(stack_node_7.data) == 0
    bool_1 = False
    stack_node_8 = module_0.StackNode(bool_1)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_1 = None
    stack_node_9 = module_0.StackNode(none_type_1)
    stack_node_10 = module_0.StackNode(stack_11)
    assert len(stack_node_10.data) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0


def test_case_459():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    dict_0 = {}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(stack_5)
    assert len(stack_node_4.data) == 0
    none_type_0 = None
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.push(none_type_0)
    assert len(stack_9) == 1
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_5 = module_0.StackNode(var_6)
    assert stack_node_5.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    bool_0 = True
    stack_node_6 = module_0.StackNode(bool_0)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_8 = stack_15.__len__()
    assert var_8 == 0
    stack_node_7 = module_0.StackNode(var_8)
    assert stack_node_7.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_9 = stack_16.__len__()
    assert var_9 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_8 = module_0.StackNode(var_9)
    assert stack_node_8.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_9 = module_0.StackNode(stack_16)
    assert len(stack_node_9.data) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_10 = stack_19.__len__()
    assert var_10 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_10 = module_0.StackNode(var_10)
    assert stack_node_10.data == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_11 = stack_20.__len__()
    assert var_11 == 0
    var_12 = stack_20.__len__()
    assert var_12 == 0
    var_13 = stack_15.push(stack_22)
    assert len(stack_15) == 1


def test_case_460():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    var_3 = stack_1.push(stack_node_2)
    assert len(stack_1) == 1
    assert len(stack_node_3.data) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    str_0 = "o2EICU9\x0bp7"
    stack_node_7 = module_0.StackNode(str_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    stack_node_9 = module_0.StackNode(stack_5)
    assert len(stack_node_9.data) == 0
    none_type_1 = None
    stack_node_10 = module_0.StackNode(none_type_1)
    none_type_2 = None
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.push(none_type_2)
    assert len(stack_6) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0


def test_case_461():
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is False


def test_case_462():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_2 = module_0.StackNode(var_5)
    assert stack_node_2.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_3 = module_0.StackNode(stack_8)
    assert len(stack_node_3.data) == 0
    stack_node_4 = module_0.StackNode(stack_11)
    assert len(stack_node_4.data) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    var_8 = stack_12.__len__()
    assert var_8 == 0
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_9 = module_0.check_parenthesis(dict_2)
    assert var_9 is True
    stack_node_6 = module_0.StackNode(float_2)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_10 = stack_13.__len__()
    assert var_10 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_7 = module_0.StackNode(var_10)
    assert stack_node_7.data == 0
    dict_3 = {}
    var_11 = module_0.check_parenthesis(dict_3)
    assert var_11 is True
    var_12 = stack_14.__len__()
    assert var_12 == 0
    stack_node_8 = module_0.StackNode(var_1)
    assert stack_node_8.data is True


def test_case_463():
    str_0 = "o2EICU9\x0bp7"
    stack_node_0 = module_0.StackNode(str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    dict_0 = {}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    dict_1 = {}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_4 = stack_2.__len__()
    assert var_4 == 0
    stack_node_2 = module_0.StackNode(var_4)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_5 = stack_3.__len__()
    assert var_5 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    float_0 = 712.593
    dict_2 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_2)
    assert var_6 is True
    stack_node_3 = module_0.StackNode(stack_5)
    assert len(stack_node_3.data) == 0
    var_7 = stack_5.push(var_6)
    assert len(stack_5) == 1
    assert len(stack_node_3.data) == 1
    bool_0 = True
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_8 = stack_6.push(bool_0)
    assert len(stack_6) == 1
    stack_node_4 = module_0.StackNode(dict_0)


def test_case_464():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_node_3 = module_0.StackNode(none_type_0)


def test_case_465():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_4 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_node_7 = module_0.StackNode(stack_2)
    assert len(stack_node_7.data) == 0
    var_2 = stack_2.push(none_type_0)
    assert len(stack_2) == 1
    assert len(stack_node_7.data) == 1
    none_type_2 = None
    stack_node_8 = module_0.StackNode(none_type_2)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_5 = stack_3.__len__()
    assert var_5 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0


def test_case_466():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    var_1 = stack_1.push(none_type_0)
    assert len(stack_1) == 1


def test_case_467():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(tuple_1)
    assert len(stack_0) == 1


def test_case_468():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(stack_4)
    assert len(stack_node_2.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0


def test_case_469():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    bool_1 = False
    stack_node_3 = module_0.StackNode(bool_1)
    int_0 = -460
    stack_node_4 = module_0.StackNode(int_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    bool_2 = False
    stack_node_5 = module_0.StackNode(bool_2)
    stack_node_6 = module_0.StackNode(bool_2)
    none_type_0 = None
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.push(none_type_0)
    assert len(stack_6) == 1
    stack_node_7 = module_0.StackNode(var_3)
    var_4 = stack_5.push(var_1)
    assert len(stack_5) == 1


def test_case_470():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_2 = module_0.check_parenthesis(dict_1)
    assert var_2 is True
    stack_node_0 = module_0.StackNode(stack_2)
    assert len(stack_node_0.data) == 0
    var_3 = stack_0.__len__()
    assert var_3 == 0


def test_case_471():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    none_type_0 = None
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.push(none_type_0)
    assert len(stack_8) == 1
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    var_7 = stack_9.__len__()
    assert var_7 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_8 = stack_10.__len__()
    assert var_8 == 0
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_9 = stack_11.push(tuple_1)
    assert len(stack_11) == 1
    var_10 = stack_10.__len__()
    assert var_10 == 0


def test_case_472():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(stack_3)
    assert len(stack_node_6.data) == 0
    stack_node_7 = module_0.StackNode(stack_6)
    assert len(stack_node_7.data) == 0
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_9 = module_0.StackNode(bool_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_10 = module_0.StackNode(complex_0)
    var_3 = stack_7.__len__()
    assert var_3 == 0


def test_case_473():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_2 = None
    stack_node_5 = module_0.StackNode(none_type_2)
    stack_node_6 = module_0.StackNode(stack_6)
    assert len(stack_node_6.data) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    complex_1 = -3711.3 - 806.2j
    stack_node_7 = module_0.StackNode(complex_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_7)
    assert len(stack_node_11.data) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    var_6 = stack_7.push(stack_node_10)
    assert len(stack_7) == 1
    assert len(stack_node_11.data) == 1
    bool_0 = False
    stack_node_12 = module_0.StackNode(bool_0)
    stack_node_13 = module_0.StackNode(bool_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_7 = stack_9.__len__()
    assert var_7 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_3 = None
    stack_node_14 = module_0.StackNode(none_type_3)
    stack_node_15 = module_0.StackNode(stack_10)
    assert len(stack_node_15.data) == 0
    var_8 = stack_10.__len__()
    assert var_8 == 0
    stack_node_16 = module_0.StackNode(stack_10)
    assert len(stack_node_16.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_9 = stack_11.__len__()
    assert var_9 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_17 = module_0.StackNode(var_9)
    assert stack_node_17.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_10 = module_0.check_parenthesis(dict_0)
    assert var_10 is True
    var_11 = stack_12.__len__()
    assert var_11 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0


def test_case_474():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    var_3 = stack_4.push(var_2)
    assert len(stack_4) == 1
    assert len(stack_node_4.data) == 1
    dict_1 = {}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(stack_5)
    assert len(stack_node_6.data) == 0
    stack_node_7 = module_0.StackNode(stack_8)
    assert len(stack_node_7.data) == 0
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_9 = module_0.StackNode(bool_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    bool_1 = False
    stack_node_10 = module_0.StackNode(bool_1)
    stack_node_11 = module_0.StackNode(bool_1)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_node_12 = module_0.StackNode(var_6)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    float_1 = 712.593
    dict_2 = {float_1: float_1, float_1: float_1}
    var_8 = module_0.check_parenthesis(dict_2)
    assert var_8 is True
    stack_node_14 = module_0.StackNode(stack_13)
    assert len(stack_node_14.data) == 0
    bool_2 = False
    stack_node_15 = module_0.StackNode(bool_2)
    var_9 = stack_11.push(stack_8)
    assert len(stack_11) == 1


def test_case_475():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    dict_0 = {}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_5 = stack_7.__len__()
    assert var_5 == 0
    list_0 = [var_1, stack_0, var_4]
    var_6 = stack_5.push(list_0)
    assert len(stack_5) == 1


def test_case_476():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_node_1 = module_0.StackNode(stack_3)
    assert len(stack_node_1.data) == 0


def test_case_477():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(stack_4)
    assert len(stack_node_3.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_5 = module_0.StackNode(stack_7)
    assert len(stack_node_5.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_5 = stack_13.push(stack_15)
    assert len(stack_13) == 1
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_6 = stack_16.__len__()
    assert var_6 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_7 = module_0.check_parenthesis(dict_0)
    assert var_7 is True
    var_8 = stack_17.__len__()
    assert var_8 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    stack_node_9 = module_0.StackNode(stack_19)
    assert len(stack_node_9.data) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_9 = stack_20.__len__()
    assert var_9 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_10 = module_0.StackNode(var_9)
    assert stack_node_10.data == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_node_11 = module_0.StackNode(stack_20)
    assert len(stack_node_11.data) == 0
    stack_node_12 = module_0.StackNode(stack_23)
    assert len(stack_node_12.data) == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    var_10 = stack_24.__len__()
    assert var_10 == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    stack_node_13 = module_0.StackNode(var_10)
    assert stack_node_13.data == 0
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0
    stack_27 = module_0.Stack()
    assert len(stack_27) == 0
    stack_28 = module_0.Stack()
    assert len(stack_28) == 0
    stack_node_14 = module_0.StackNode(stack_4)
    assert len(stack_node_14.data) == 0


def test_case_478():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_2 = module_0.check_parenthesis(str_0)
    assert var_2 is False
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_7 = module_0.StackNode(stack_12)
    assert len(stack_node_7.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_7 = module_0.check_parenthesis(dict_0)
    assert var_7 is True
    bool_1 = False
    stack_node_8 = module_0.StackNode(bool_1)
    stack_node_9 = module_0.StackNode(bool_1)
    none_type_0 = None
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.push(none_type_0)
    assert len(stack_14) == 1
    stack_node_10 = module_0.StackNode(var_8)
    var_9 = stack_13.__len__()
    assert var_9 == 0


def test_case_479():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_node_1 = module_0.StackNode(none_type_1)
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_2 = None
    stack_node_4 = module_0.StackNode(none_type_2)
    stack_node_5 = module_0.StackNode(stack_1)
    assert len(stack_node_5.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_6 = module_0.StackNode(var_1)
    assert stack_node_6.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_8 = module_0.StackNode(stack_5)
    assert len(stack_node_8.data) == 0
    stack_node_9 = module_0.StackNode(stack_8)
    assert len(stack_node_9.data) == 0
    none_type_3 = None
    stack_node_10 = module_0.StackNode(none_type_3)
    bool_0 = False
    stack_node_11 = module_0.StackNode(bool_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_12 = module_0.StackNode(var_3)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    var_4 = stack_8.push(none_type_0)
    assert len(stack_8) == 1
    assert len(stack_node_9.data) == 1


def test_case_480():
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is False
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    stack_node_6 = module_0.StackNode(stack_4)
    assert len(stack_node_6.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_0 = None
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.push(none_type_0)
    assert len(stack_7) == 1
    complex_0 = -3711.3 - 806.2j
    stack_node_7 = module_0.StackNode(complex_0)
    none_type_1 = None
    stack_node_8 = module_0.StackNode(none_type_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    int_0 = -460
    stack_node_9 = module_0.StackNode(int_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0


def test_case_481():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    stack_node_6 = module_0.StackNode(stack_4)
    assert len(stack_node_6.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_10)
    assert len(stack_node_11.data) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    var_6 = stack_10.push(stack_node_10)
    assert len(stack_10) == 1
    assert len(stack_node_11.data) == 1
    bool_1 = False
    stack_node_12 = module_0.StackNode(bool_1)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_7 = module_0.check_parenthesis(dict_0)
    assert var_7 is True
    stack_node_13 = module_0.StackNode(float_0)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    bool_2 = False
    stack_node_14 = module_0.StackNode(bool_2)
    stack_node_15 = module_0.StackNode(bool_2)
    none_type_2 = None
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.push(none_type_2)
    assert len(stack_13) == 1
    stack_node_16 = module_0.StackNode(var_8)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_9 = stack_14.__len__()
    assert var_9 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_17 = module_0.StackNode(var_9)
    assert stack_node_17.data == 0
    stack_node_18 = module_0.StackNode(stack_node_17)
    stack_node_19 = module_0.StackNode(stack_node_17)
    stack_node_20 = module_0.StackNode(stack_14)
    assert len(stack_node_20.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_10 = stack_13.pop()
    assert len(stack_13) == 0


def test_case_482():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    bool_0 = True
    stack_node_2 = module_0.StackNode(bool_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    dict_0 = {}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_9)
    assert len(stack_node_7.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_9 = module_0.StackNode(stack_10)
    assert len(stack_node_9.data) == 0


def test_case_483():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(stack_2)
    assert len(stack_node_3.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_6)
    assert len(stack_node_6.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0


def test_case_484():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_node_0 = module_0.StackNode(stack_0)
    assert len(stack_node_0.data) == 0


def test_case_485():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_2 = module_0.StackNode(stack_5)
    assert len(stack_node_2.data) == 0
    stack_node_3 = module_0.StackNode(stack_8)
    assert len(stack_node_3.data) == 0
    none_type_0 = None
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_2 = stack_9.push(none_type_0)
    assert len(stack_9) == 1
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_4 = module_0.StackNode(float_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_6 = module_0.StackNode(stack_10)
    assert len(stack_node_6.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_5 = stack_14.__len__()
    assert var_5 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    stack_node_7 = module_0.StackNode(stack_16)
    assert len(stack_node_7.data) == 0
    var_7 = stack_16.push(var_6)
    assert len(stack_16) == 1
    assert len(stack_node_7.data) == 1
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_8 = stack_17.__len__()
    assert var_8 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_8 = module_0.StackNode(var_8)
    assert stack_node_8.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    none_type_1 = None
    stack_node_9 = module_0.StackNode(none_type_1)
    stack_node_10 = module_0.StackNode(stack_20)
    assert len(stack_node_10.data) == 0
    var_9 = stack_20.__len__()
    assert var_9 == 0
    stack_node_11 = module_0.StackNode(stack_20)
    assert len(stack_node_11.data) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0


def test_case_486():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_1 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_node_4 = module_0.StackNode(stack_6)
    assert len(stack_node_4.data) == 0
    var_3 = stack_6.push(none_type_0)
    assert len(stack_6) == 1
    assert len(stack_node_4.data) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.push(tuple_1)
    assert len(stack_9) == 1
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    bool_1 = False
    stack_node_9 = module_0.StackNode(bool_1)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    stack_node_10 = module_0.StackNode(float_1)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_11 = module_0.StackNode(stack_node_8)


def test_case_487():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.push(none_type_0)
    assert len(stack_5) == 1
    stack_node_3 = module_0.StackNode(var_3)
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_5 = module_0.StackNode(var_6)
    assert stack_node_5.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    none_type_2 = None
    stack_node_6 = module_0.StackNode(none_type_2)
    stack_node_7 = module_0.StackNode(stack_13)
    assert len(stack_node_7.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_8 = module_0.StackNode(var_7)
    assert stack_node_8.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_8 = stack_16.push(stack_18)
    assert len(stack_16) == 1
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0


def test_case_488():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    bool_0 = True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.push(bool_0)
    assert len(stack_2) == 1
    bool_1 = False
    set_0 = {bool_1, bool_1, bool_1, bool_1}
    tuple_0 = (bool_1, bool_1)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_1, set_0, tuple_0, str_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.push(tuple_1)
    assert len(stack_3) == 1
    bool_2 = True
    stack_node_5 = module_0.StackNode(bool_2)
    stack_node_6 = module_0.StackNode(none_type_1)


def test_case_489():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_0 = None
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.push(none_type_0)
    assert len(stack_8) == 1
    stack_node_2 = module_0.StackNode(none_type_0)


def test_case_490():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_9 = module_0.StackNode(float_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_node_10 = module_0.StackNode(var_4)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_0 = None
    stack_node_12 = module_0.StackNode(none_type_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_13 = module_0.StackNode(var_6)
    assert stack_node_13.data == 0
    var_7 = stack_0.__len__()
    assert var_7 == 0


def test_case_491():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_5)
    assert len(stack_node_4.data) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_7)
    assert len(stack_node_8.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_10 = module_0.StackNode(var_5)
    assert stack_node_10.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_7 = stack_15.__len__()
    assert var_7 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_11 = module_0.StackNode(var_7)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_8 = stack_17.__len__()
    assert var_8 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_13 = module_0.StackNode(var_8)
    assert stack_node_13.data == 0
    stack_node_14 = module_0.StackNode(stack_node_13)
    stack_node_15 = module_0.StackNode(stack_node_13)
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_9 = stack_19.__len__()
    assert var_9 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_16 = module_0.StackNode(var_9)
    assert stack_node_16.data == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_10 = stack_20.__len__()
    assert var_10 == 0
    var_11 = stack_20.__len__()
    assert var_11 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_12 = module_0.check_parenthesis(dict_0)
    assert var_12 is True
    stack_node_17 = module_0.StackNode(float_0)
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0


def test_case_492():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(none_type_0)


def test_case_493():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_0)
    assert len(stack_node_4.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_3)
    assert len(stack_0) == 1
    assert len(stack_node_4.data) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_node_6 = module_0.StackNode(stack_2)
    assert len(stack_node_6.data) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_5 = module_0.check_parenthesis(str_0)
    assert var_5 is False
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_8 = module_0.StackNode(stack_8)
    assert len(stack_node_8.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_9 = module_0.StackNode(var_7)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    var_8 = stack_1.push(var_3)
    assert len(stack_1) == 1


def test_case_494():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    bool_1 = False
    stack_node_2 = module_0.StackNode(bool_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_0)
    assert stack_node_3.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0


def test_case_495():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    str_0 = "o2EICU9\x0bp7"
    stack_node_0 = module_0.StackNode(str_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_2)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    dict_0 = {}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    var_4 = stack_5.push(var_3)
    assert len(stack_5) == 1


def test_case_496():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_7 = module_0.StackNode(float_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_4.push(stack_4)
    assert len(stack_4) == 1


def test_case_497():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_1)
    assert len(stack_node_5.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_7 = module_0.StackNode(complex_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_5)
    assert len(stack_node_11.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_12 = module_0.StackNode(var_4)
    assert stack_node_12.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_13 = module_0.StackNode(var_5)
    assert stack_node_13.data == 0
    stack_node_14 = module_0.StackNode(stack_node_13)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    none_type_0 = None
    stack_node_15 = module_0.StackNode(none_type_0)
    stack_node_16 = module_0.StackNode(var_3)
    assert stack_node_16.data == 0


def test_case_498():
    bool_0 = True
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_2.push(stack_4)
    assert len(stack_2) == 1
    bool_1 = False
    stack_node_2 = module_0.StackNode(bool_1)
    stack_node_3 = module_0.StackNode(bool_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0


def test_case_499():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_3.push(stack_5)
    assert len(stack_3) == 1
    bool_0 = True
    stack_node_2 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_6)
    assert stack_node_4.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_5 = module_0.StackNode(stack_8)
    assert len(stack_node_5.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_6 = module_0.StackNode(var_7)
    assert stack_node_6.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_7 = module_0.StackNode(stack_10)
    assert len(stack_node_7.data) == 0
    stack_node_8 = module_0.StackNode(stack_12)
    assert len(stack_node_8.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    none_type_2 = None
    stack_node_9 = module_0.StackNode(none_type_2)
    stack_node_10 = module_0.StackNode(stack_14)
    assert len(stack_node_10.data) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    none_type_3 = None
    stack_node_11 = module_0.StackNode(none_type_3)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_9 = stack_16.__len__()
    assert var_9 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_12 = module_0.StackNode(var_9)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_node_12)
    stack_node_15 = module_0.StackNode(stack_16)
    assert len(stack_node_15.data) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    tuple_0 = ()
    var_10 = module_0.check_parenthesis(tuple_0)
    assert var_10 is True


def test_case_500():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_6 = module_0.StackNode(stack_8)
    assert len(stack_node_6.data) == 0
    var_4 = stack_8.push(var_3)
    assert len(stack_8) == 1
    assert len(stack_node_6.data) == 1
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    stack_node_7 = module_0.StackNode(stack_11)
    assert len(stack_node_7.data) == 0
    bool_0 = False
    stack_node_8 = module_0.StackNode(bool_0)
    stack_node_9 = module_0.StackNode(bool_0)
    var_7 = stack_3.__len__()
    assert var_7 == 0


def test_case_501():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_3 = module_0.StackNode(float_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    stack_node_6 = module_0.StackNode(stack_10)
    assert len(stack_node_6.data) == 0
    var_8 = stack_10.push(var_7)
    assert len(stack_10) == 1
    assert len(stack_node_6.data) == 1
    bool_0 = False
    stack_node_7 = module_0.StackNode(bool_0)
    stack_node_8 = module_0.StackNode(bool_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_9 = stack_11.__len__()
    assert var_9 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_10 = stack_13.__len__()
    assert var_10 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_9 = module_0.StackNode(var_10)
    assert stack_node_9.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_11 = stack_15.__len__()
    assert var_11 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_12 = stack_17.__len__()
    assert var_12 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_10 = module_0.StackNode(var_12)
    assert stack_node_10.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_11 = module_0.StackNode(stack_18)
    assert len(stack_node_11.data) == 0
    var_13 = stack_10.push(var_7)
    assert len(stack_10) == 2
    assert len(stack_node_6.data) == 2


def test_case_502():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_2)
    assert len(stack_node_6.data) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    bool_0 = False
    stack_node_7 = module_0.StackNode(bool_0)
    stack_node_8 = module_0.StackNode(bool_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_10 = module_0.StackNode(stack_6)
    assert len(stack_node_10.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_0 = None
    stack_node_11 = module_0.StackNode(none_type_0)
    stack_node_12 = module_0.StackNode(stack_8)
    assert len(stack_node_12.data) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_node_13 = module_0.StackNode(stack_8)
    assert len(stack_node_13.data) == 0
    int_0 = -460
    stack_node_14 = module_0.StackNode(int_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0


def test_case_503():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is False
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data is False


def test_case_504():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0


def test_case_505():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0


def test_case_506():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_3)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(stack_4)
    assert len(stack_node_3.data) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_2 = module_0.check_parenthesis(str_0)
    assert var_2 is False
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data is False
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    bool_0 = True
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.push(bool_0)
    assert len(stack_6) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_node_6 = module_0.StackNode(var_1)
    assert stack_node_6.data == 0


def test_case_507():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    bool_1 = True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.push(bool_1)
    assert len(stack_1) == 1
    stack_node_2 = module_0.StackNode(var_0)


def test_case_508():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    bool_1 = True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.push(bool_1)
    assert len(stack_1) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_2)
    assert len(stack_node_6.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_7 = module_0.StackNode(var_1)
    assert stack_node_7.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_node_8 = module_0.StackNode(var_2)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0


def test_case_509():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(tuple_1)
    assert len(stack_0) == 1
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_1 = False
    stack_node_1 = module_0.StackNode(bool_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    stack_node_6 = module_0.StackNode(var_1)
    assert stack_node_6.data == 0


def test_case_510():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    bool_1 = True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.push(bool_1)
    assert len(stack_1) == 1
    stack_node_2 = module_0.StackNode(var_0)
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    var_3 = stack_0.__len__()
    assert var_3 == 0


def test_case_511():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(none_type_0)
    int_0 = -460
    stack_node_3 = module_0.StackNode(int_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_1)
    assert len(stack_node_7.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_8 = module_0.StackNode(var_1)
    assert stack_node_8.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_1 = None
    stack_node_9 = module_0.StackNode(none_type_1)
    stack_node_10 = module_0.StackNode(stack_4)
    assert len(stack_node_10.data) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_node_11 = module_0.StackNode(stack_4)
    assert len(stack_node_11.data) == 0
    none_type_2 = None
    stack_node_12 = module_0.StackNode(none_type_2)
    bool_0 = False
    stack_node_13 = module_0.StackNode(bool_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_3 = None
    stack_node_14 = module_0.StackNode(none_type_3)
    stack_node_15 = module_0.StackNode(stack_6)
    assert len(stack_node_15.data) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_16 = module_0.StackNode(var_4)
    assert stack_node_16.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_17 = module_0.StackNode(stack_7)
    assert len(stack_node_17.data) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0


def test_case_512():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_3 = module_0.check_parenthesis(str_0)
    assert var_3 is False
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(stack_5)
    assert len(stack_node_3.data) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_6 = stack_6.__len__()
    assert var_6 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_6)
    assert stack_node_4.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_5 = module_0.StackNode(var_7)
    assert stack_node_5.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_6 = module_0.StackNode(stack_11)
    assert len(stack_node_6.data) == 0
    stack_node_7 = module_0.StackNode(none_type_0)


def test_case_513():
    bool_0 = True
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_5 = module_0.StackNode(var_6)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    bool_1 = False
    stack_node_8 = module_0.StackNode(bool_1)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_9 = module_0.StackNode(var_7)
    assert stack_node_9.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    int_0 = -460
    stack_node_10 = module_0.StackNode(int_0)
    var_8 = stack_4.__len__()
    assert var_8 == 0


def test_case_514():
    bool_0 = True
    stack_node_0 = module_0.StackNode(bool_0)
    str_0 = "o2EICU9\x0bp7"
    stack_node_1 = module_0.StackNode(str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_2 = module_0.StackNode(var_0)
    assert stack_node_2.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    var_3 = stack_1.__len__()
    assert var_3 == 0


def test_case_515():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_5 = module_0.StackNode(float_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_7 = module_0.StackNode(stack_8)
    assert len(stack_node_7.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    stack_node_8 = module_0.StackNode(stack_14)
    assert len(stack_node_8.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_8 = stack_15.__len__()
    assert var_8 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_9 = module_0.StackNode(var_8)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_16)
    assert len(stack_node_11.data) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_9 = stack_17.__len__()
    assert var_9 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_12 = module_0.StackNode(var_9)
    assert stack_node_12.data == 0
    dict_2 = {}
    var_10 = module_0.check_parenthesis(dict_2)
    assert var_10 is True
    var_11 = stack_18.__len__()
    assert var_11 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_12 = stack_19.__len__()
    assert var_12 == 0
    stack_node_13 = module_0.StackNode(var_12)
    assert stack_node_13.data == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_13 = stack_20.__len__()
    assert var_13 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_14 = module_0.StackNode(var_13)
    assert stack_node_14.data == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_14 = stack_14.push(var_2)
    assert len(stack_14) == 1
    assert len(stack_node_8.data) == 1


def test_case_516():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(stack_4)
    assert len(stack_node_3.data) == 0


def test_case_517():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    stack_node_4 = module_0.StackNode(stack_node_2)


def test_case_518():
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True


def test_case_519():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    bool_1 = False
    stack_node_5 = module_0.StackNode(bool_1)
    stack_node_6 = module_0.StackNode(bool_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    stack_node_8 = module_0.StackNode(stack_3)
    assert len(stack_node_8.data) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_3 = module_0.check_parenthesis(str_0)
    assert var_3 is False
    stack_node_9 = module_0.StackNode(var_3)
    assert stack_node_9.data is False
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_10 = module_0.StackNode(var_4)
    assert stack_node_10.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_6.push(stack_8)
    assert len(stack_6) == 1
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_11 = module_0.StackNode(var_6)
    assert stack_node_11.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_12 = module_0.StackNode(stack_9)
    assert len(stack_node_12.data) == 0
    stack_node_13 = module_0.StackNode(stack_12)
    assert len(stack_node_13.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    none_type_1 = None
    stack_node_14 = module_0.StackNode(none_type_1)
    stack_node_15 = module_0.StackNode(stack_13)
    assert len(stack_node_15.data) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_node_16 = module_0.StackNode(stack_node_1)


def test_case_520():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    str_0 = "o2EICU9\x0bp7"
    stack_node_5 = module_0.StackNode(str_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0


def test_case_521():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)


def test_case_522():
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    bool_0 = True
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_6 = stack_6.push(bool_0)
    assert len(stack_6) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_7 = stack_7.__len__()
    assert var_7 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(var_7)
    assert stack_node_3.data == 0
    dict_1 = {}
    var_8 = module_0.check_parenthesis(dict_1)
    assert var_8 is True
    var_9 = stack_8.__len__()
    assert var_9 == 0
    var_10 = stack_1.__len__()
    assert var_10 == 0


def test_case_523():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(stack_2)
    assert len(stack_node_3.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_2 = module_0.check_parenthesis(str_0)
    assert var_2 is False
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data is False
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_5 = module_0.StackNode(stack_node_1)


def test_case_524():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(tuple_1)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0


def test_case_525():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_2 = module_0.StackNode(var_0)
    assert stack_node_2.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(var_1)
    assert stack_node_5.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(stack_4)
    assert len(stack_node_6.data) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    int_0 = -460
    stack_node_7 = module_0.StackNode(int_0)
    var_3 = stack_7.__len__()
    assert var_3 == 0


def test_case_526():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_5 = stack_3.__len__()
    assert var_5 == 0
    str_0 = ""
    var_6 = module_0.check_parenthesis(str_0)
    assert var_6 is True
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_7 = stack_5.__len__()
    assert var_7 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_8 = module_0.check_parenthesis(dict_1)
    assert var_8 is True
    var_9 = stack_5.__len__()
    assert var_9 == 0
    var_10 = stack_3.push(dict_0)
    assert len(stack_3) == 1


def test_case_527():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_node_3 = module_0.StackNode(bool_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_node_6 = module_0.StackNode(stack_2)
    assert len(stack_node_6.data) == 0
    bool_1 = False
    stack_node_7 = module_0.StackNode(bool_1)
    stack_node_8 = module_0.StackNode(bool_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    bool_2 = False
    stack_node_10 = module_0.StackNode(bool_2)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_11 = module_0.StackNode(var_4)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_node_11)
    stack_node_14 = module_0.StackNode(stack_7)
    assert len(stack_node_14.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_2 = None
    stack_node_15 = module_0.StackNode(none_type_2)
    var_5 = stack_1.__len__()
    assert var_5 == 0


def test_case_528():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0


def test_case_529():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_0)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    int_0 = -460
    stack_node_5 = module_0.StackNode(int_0)
    bool_1 = False
    stack_node_6 = module_0.StackNode(bool_1)
    stack_node_7 = module_0.StackNode(bool_1)
    none_type_2 = None
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.push(none_type_2)
    assert len(stack_3) == 1
    stack_node_8 = module_0.StackNode(var_1)
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_node_10 = module_0.StackNode(var_2)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(var_2)
    assert stack_node_12.data == 0


def test_case_530():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(stack_5)
    assert len(stack_node_2.data) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_2 = module_0.check_parenthesis(str_0)
    assert var_2 is False
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data is False
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    complex_0 = -3711.3 - 806.2j
    stack_node_7 = module_0.StackNode(complex_0)
    none_type_2 = None
    stack_node_8 = module_0.StackNode(none_type_2)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_3 = None
    stack_node_9 = module_0.StackNode(none_type_3)
    stack_node_10 = module_0.StackNode(stack_8)
    assert len(stack_node_10.data) == 0
    var_4 = stack_8.push(none_type_2)
    assert len(stack_8) == 1
    assert len(stack_node_10.data) == 1
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_4 = None
    stack_node_11 = module_0.StackNode(none_type_4)
    none_type_5 = None
    stack_node_12 = module_0.StackNode(none_type_5)
    str_1 = ""
    var_5 = module_0.check_parenthesis(str_1)
    assert var_5 is True
    bool_0 = True
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.push(bool_0)
    assert len(stack_10) == 1
    dict_0 = {}
    var_7 = module_0.check_parenthesis(dict_0)
    assert var_7 is True
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_8 = stack_11.__len__()
    assert var_8 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_13 = module_0.StackNode(var_8)
    assert stack_node_13.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_14 = module_0.StackNode(stack_12)
    assert len(stack_node_14.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0


def test_case_531():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_0.__len__()
    assert var_2 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_1 = module_0.StackNode(none_type_1)
    stack_node_2 = module_0.StackNode(none_type_0)


def test_case_532():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0


def test_case_533():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    int_0 = -460
    stack_node_4 = module_0.StackNode(int_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_5 = module_0.StackNode(var_1)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_2)
    assert len(stack_node_8.data) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    var_3 = stack_2.push(stack_node_7)
    assert len(stack_2) == 1
    assert len(stack_node_8.data) == 1
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_9 = module_0.StackNode(none_type_0)
    stack_node_10 = module_0.StackNode(stack_4)
    assert len(stack_node_10.data) == 0
    var_4 = stack_0.__len__()
    assert var_4 == 0


def test_case_534():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(tuple_1)
    assert len(stack_0) == 1
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.push(none_type_0)
    assert len(stack_1) == 1
    assert len(stack_node_3.data) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    stack_node_6 = module_0.StackNode(stack_5)
    assert len(stack_node_6.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_2 = None
    stack_node_7 = module_0.StackNode(none_type_2)
    bool_1 = False
    stack_node_8 = module_0.StackNode(bool_1)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_9 = module_0.StackNode(float_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_10 = module_0.StackNode(var_4)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_13 = module_0.StackNode(var_5)
    assert stack_node_13.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_6 = stack_12.push(stack_14)
    assert len(stack_12) == 1
    bool_2 = False
    stack_node_14 = module_0.StackNode(bool_2)
    stack_node_15 = module_0.StackNode(bool_2)
    none_type_3 = None
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_7 = stack_15.push(none_type_3)
    assert len(stack_15) == 1
    stack_node_16 = module_0.StackNode(var_7)
    stack_node_17 = module_0.StackNode(stack_node_16)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0


def test_case_535():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0


def test_case_536():
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_1 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_1)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.push(tuple_1)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_0 = module_0.StackNode(var_2)
    assert stack_node_0.data == 0
    dict_0 = {}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(stack_5)
    assert len(stack_node_2.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(var_5)
    assert stack_node_3.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_node_4 = module_0.StackNode(var_6)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    var_7 = stack_7.push(stack_node_0)
    assert len(stack_7) == 1


def test_case_537():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_5.push(stack_7)
    assert len(stack_5) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_4 = module_0.StackNode(stack_9)
    assert len(stack_node_4.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    bool_0 = True
    stack_node_6 = module_0.StackNode(bool_0)
    stack_node_7 = module_0.StackNode(stack_3)
    assert len(stack_node_7.data) == 0


def test_case_538():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_2 = module_0.check_parenthesis(dict_1)
    assert var_2 is True
    stack_node_0 = module_0.StackNode(stack_2)
    assert len(stack_node_0.data) == 0
    var_3 = stack_2.push(var_2)
    assert len(stack_2) == 1
    assert len(stack_node_0.data) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_4)
    assert stack_node_1.data == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_6 = module_0.check_parenthesis(dict_2)
    assert var_6 is True
    var_7 = stack_5.__len__()
    assert var_7 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_8 = stack_6.__len__()
    assert var_8 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(var_8)
    assert stack_node_3.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(stack_7)
    assert len(stack_node_4.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_node_6 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_9 = stack_10.push(none_type_1)
    assert len(stack_10) == 1
    stack_node_7 = module_0.StackNode(var_9)
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_10 = stack_11.__len__()
    assert var_10 == 0
    var_11 = stack_9.push(var_9)
    assert len(stack_9) == 1


def test_case_539():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    dict_0 = {}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    stack_node_2 = module_0.StackNode(float_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    float_1 = 712.593
    dict_2 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_2)
    assert var_6 is True
    var_7 = stack_6.__len__()
    assert var_7 == 0
    int_0 = -460
    stack_node_6 = module_0.StackNode(int_0)
    bool_1 = False
    set_0 = {bool_1, bool_1, bool_1, bool_1}
    tuple_0 = (bool_1, bool_1)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_1, set_0, tuple_0, str_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_8 = stack_8.push(tuple_1)
    assert len(stack_8) == 1
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0


def test_case_540():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_4.push(stack_6)
    assert len(stack_4) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0


def test_case_541():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    bool_1 = True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.push(bool_1)
    assert len(stack_4) == 1
    stack_node_3 = module_0.StackNode(var_2)
    str_0 = "o2EICU9\x0bp7"
    stack_node_4 = module_0.StackNode(str_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    dict_0 = {}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0


def test_case_542():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    bool_0 = True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.push(bool_0)
    assert len(stack_3) == 1
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    bool_1 = False
    stack_node_1 = module_0.StackNode(bool_1)
    stack_node_2 = module_0.StackNode(bool_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(stack_7)
    assert len(stack_node_5.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_6)
    assert len(stack_node_8.data) == 0


def test_case_543():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_node_3 = module_0.StackNode(bool_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    set_0 = {stack_node_1, var_3}
    var_4 = module_0.check_parenthesis(set_0)
    assert var_4 is True


def test_case_544():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_2 = module_0.check_parenthesis(str_0)
    assert var_2 is False
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data is False
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_3)
    assert len(stack_node_8.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_9 = module_0.StackNode(float_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_5 = stack_4.__len__()
    assert var_5 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_10 = module_0.StackNode(var_5)
    assert stack_node_10.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    var_7 = stack_5.__len__()
    assert var_7 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_8 = stack_7.__len__()
    assert var_8 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_11 = module_0.StackNode(var_8)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_1 = None
    stack_node_13 = module_0.StackNode(none_type_1)
    complex_0 = -3711.3 - 806.2j
    stack_node_14 = module_0.StackNode(complex_0)
    none_type_2 = None
    stack_node_15 = module_0.StackNode(none_type_2)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_3 = None
    stack_node_16 = module_0.StackNode(none_type_3)
    stack_node_17 = module_0.StackNode(stack_10)
    assert len(stack_node_17.data) == 0
    var_9 = stack_10.push(none_type_2)
    assert len(stack_10) == 1
    assert len(stack_node_17.data) == 1
    bool_1 = False
    set_0 = {bool_1, bool_1, bool_1, bool_1}
    tuple_0 = (bool_1, bool_1)
    str_1 = "B@kK%+yXf"
    tuple_1 = (bool_1, set_0, tuple_0, str_1)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_10 = stack_11.push(tuple_1)
    assert len(stack_11) == 1
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0


def test_case_545():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(none_type_0)


def test_case_546():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    var_6 = stack_8.__len__()
    assert var_6 == 0
    bool_1 = True
    stack_node_4 = module_0.StackNode(bool_1)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_5 = module_0.StackNode(var_7)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_11)
    assert len(stack_node_7.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0


def test_case_547():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(stack_3)
    assert len(stack_node_4.data) == 0
    none_type_1 = None
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.push(none_type_1)
    assert len(stack_7) == 1
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_5 = module_0.StackNode(float_0)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    stack_node_6 = module_0.StackNode(float_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_2 = None
    stack_node_7 = module_0.StackNode(none_type_2)
    stack_node_8 = module_0.StackNode(none_type_2)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_3 = None
    stack_node_9 = module_0.StackNode(none_type_3)
    stack_node_10 = module_0.StackNode(stack_9)
    assert len(stack_node_10.data) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_7 = module_0.check_parenthesis(str_0)
    assert var_7 is False
    stack_node_11 = module_0.StackNode(var_7)
    assert stack_node_11.data is False
    bool_0 = True
    stack_node_12 = module_0.StackNode(bool_0)
    complex_0 = -3711.3 - 806.2j
    stack_node_13 = module_0.StackNode(complex_0)
    none_type_4 = None
    stack_node_14 = module_0.StackNode(none_type_4)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_5 = None
    stack_node_15 = module_0.StackNode(none_type_5)
    stack_node_16 = module_0.StackNode(stack_10)
    assert len(stack_node_16.data) == 0
    var_8 = stack_10.push(none_type_4)
    assert len(stack_10) == 1
    assert len(stack_node_16.data) == 1
    var_9 = stack_1.push(stack_node_7)
    assert len(stack_1) == 1


def test_case_548():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    complex_0 = -3711.3 - 806.2j
    stack_node_2 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_node_5 = module_0.StackNode(stack_1)
    assert len(stack_node_5.data) == 0
    var_1 = stack_1.push(none_type_0)
    assert len(stack_1) == 1
    assert len(stack_node_5.data) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_2)
    assert len(stack_node_9.data) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    bool_0 = False
    stack_node_10 = module_0.StackNode(bool_0)
    stack_node_11 = module_0.StackNode(bool_0)
    str_0 = ""
    var_4 = module_0.check_parenthesis(str_0)
    assert var_4 is True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_5 = stack_4.__len__()
    assert var_5 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_12 = module_0.StackNode(var_5)
    assert stack_node_12.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_13 = module_0.StackNode(var_6)
    assert stack_node_13.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_2 = None
    stack_node_14 = module_0.StackNode(none_type_2)
    stack_node_15 = module_0.StackNode(stack_11)
    assert len(stack_node_15.data) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_node_16 = module_0.StackNode(stack_node_6)


def test_case_549():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_0)
    assert len(stack_node_4.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_3)
    assert len(stack_0) == 1
    assert len(stack_node_4.data) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_6)
    assert len(stack_node_9.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    stack_node_10 = module_0.StackNode(stack_10)
    assert len(stack_node_10.data) == 0
    var_7 = stack_10.push(var_6)
    assert len(stack_10) == 1
    assert len(stack_node_10.data) == 1
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_8 = stack_11.__len__()
    assert var_8 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_11 = module_0.StackNode(var_8)
    assert stack_node_11.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    bool_0 = False
    stack_node_12 = module_0.StackNode(bool_0)
    stack_node_13 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_9 = stack_14.push(none_type_0)
    assert len(stack_14) == 1
    stack_node_14 = module_0.StackNode(var_9)
    stack_node_15 = module_0.StackNode(var_7)


def test_case_550():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    bytes_0 = b"\xe2\xe3o9\xdbw\xf8gb\x8b\xb9\xd2\x1b.\xc4p\x90_"
    var_2 = module_0.check_parenthesis(bytes_0)
    assert var_2 is True


def test_case_551():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_0 = module_0.StackNode(stack_3)
    assert len(stack_node_0.data) == 0
    var_3 = stack_3.push(var_2)
    assert len(stack_3) == 1
    assert len(stack_node_0.data) == 1
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_1 = module_0.StackNode(float_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_5 = stack_4.__len__()
    assert var_5 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_5)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    var_6 = stack_5.__len__()
    assert var_6 == 0
    var_7 = stack_4.push(stack_node_4)
    assert len(stack_4) == 1
    assert len(stack_node_5.data) == 1
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_8 = stack_6.__len__()
    assert var_8 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_8)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_9 = stack_8.__len__()
    assert var_9 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_9 = module_0.StackNode(var_9)
    assert stack_node_9.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_10 = stack_9.__len__()
    assert var_10 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_11 = stack_13.__len__()
    assert var_11 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_10 = module_0.StackNode(var_11)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    none_type_1 = None
    stack_node_12 = module_0.StackNode(none_type_1)
    bool_0 = False
    stack_node_13 = module_0.StackNode(bool_0)
    stack_node_14 = module_0.StackNode(bool_0)
    none_type_2 = None
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_12 = stack_15.push(none_type_2)
    assert len(stack_15) == 1
    stack_node_15 = module_0.StackNode(var_12)
    stack_node_16 = module_0.StackNode(stack_node_15)
    dict_2 = {}
    var_13 = module_0.check_parenthesis(dict_2)
    assert var_13 is True
    stack_node_17 = module_0.StackNode(stack_6)
    assert len(stack_node_17.data) == 0


def test_case_552():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.push(tuple_1)
    assert len(stack_1) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_3 = module_0.StackNode(float_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    stack_node_6 = module_0.StackNode(stack_5)
    assert len(stack_node_6.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_10)
    assert len(stack_node_11.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_8 = module_0.check_parenthesis(dict_1)
    assert var_8 is True
    stack_node_12 = module_0.StackNode(stack_15)
    assert len(stack_node_12.data) == 0
    none_type_1 = None
    stack_node_13 = module_0.StackNode(none_type_1)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_9 = stack_16.__len__()
    assert var_9 == 0
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_10 = module_0.check_parenthesis(dict_2)
    assert var_10 is True
    var_11 = stack_16.__len__()
    assert var_11 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_12 = stack_17.__len__()
    assert var_12 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_14 = module_0.StackNode(var_12)
    assert stack_node_14.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_13 = stack_20.__len__()
    assert var_13 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_14 = stack_21.__len__()
    assert var_14 == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_15 = module_0.StackNode(var_14)
    assert stack_node_15.data == 0
    stack_node_16 = module_0.StackNode(stack_node_15)
    stack_node_17 = module_0.StackNode(stack_22)
    assert len(stack_node_17.data) == 0
    stack_node_18 = module_0.StackNode(stack_22)
    assert len(stack_node_18.data) == 0


def test_case_553():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(stack_5)
    assert len(stack_node_2.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(stack_6)
    assert len(stack_node_4.data) == 0
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_node_6 = module_0.StackNode(bool_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_8 = module_0.StackNode(stack_8)
    assert len(stack_node_8.data) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    stack_node_9 = module_0.StackNode(float_1)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_1 = None
    stack_node_10 = module_0.StackNode(none_type_1)
    stack_node_11 = module_0.StackNode(none_type_1)
    var_7 = stack_8.push(dict_1)
    assert len(stack_8) == 1
    assert len(stack_node_8.data) == 1


def test_case_554():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    var_1 = stack_0.pop()
    assert len(stack_0) == 0


def test_case_555():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(stack_5)
    assert len(stack_node_2.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(stack_9)
    assert len(stack_node_4.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_11)
    assert len(stack_node_8.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_node_12 = module_0.StackNode(stack_14)
    assert len(stack_node_12.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_13 = module_0.StackNode(var_6)
    assert stack_node_13.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_7 = stack_17.__len__()
    assert var_7 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_14 = module_0.StackNode(var_7)
    assert stack_node_14.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_8 = stack_20.__len__()
    assert var_8 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_9 = module_0.check_parenthesis(dict_0)
    assert var_9 is True
    stack_node_15 = module_0.StackNode(float_0)
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_10 = stack_21.__len__()
    assert var_10 == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_16 = module_0.StackNode(var_10)
    assert stack_node_16.data == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_node_17 = module_0.StackNode(stack_21)
    assert len(stack_node_17.data) == 0
    stack_node_18 = module_0.StackNode(stack_23)
    assert len(stack_node_18.data) == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    var_11 = stack_25.__len__()
    assert var_11 == 0
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0
    stack_node_19 = module_0.StackNode(var_11)
    assert stack_node_19.data == 0
    stack_node_20 = module_0.StackNode(stack_node_19)
    none_type_0 = None
    stack_node_21 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_22 = module_0.StackNode(bool_0)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_12 = module_0.check_parenthesis(dict_1)
    assert var_12 is True
    stack_node_23 = module_0.StackNode(float_1)
    stack_27 = module_0.Stack()
    assert len(stack_27) == 0
    var_13 = stack_26.push(stack_14)
    assert len(stack_26) == 1


def test_case_556():
    dict_0 = {}
    stack_node_0 = module_0.StackNode(dict_0)


def test_case_557():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    bool_1 = False
    set_0 = {bool_1, bool_1, bool_1, bool_1}
    tuple_0 = (bool_1, bool_1)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_1, set_0, tuple_0, str_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.push(tuple_1)
    assert len(stack_1) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    bool_2 = False
    stack_node_2 = module_0.StackNode(bool_2)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    bool_3 = False
    stack_node_4 = module_0.StackNode(bool_3)
    stack_node_5 = module_0.StackNode(bool_3)
    none_type_0 = None
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.push(none_type_0)
    assert len(stack_8) == 1
    stack_node_6 = module_0.StackNode(var_3)
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    stack_node_9 = module_0.StackNode(var_7)
    assert stack_node_9.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_8 = stack_15.__len__()
    assert var_8 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_10 = module_0.StackNode(var_8)
    assert stack_node_10.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_9 = stack_16.__len__()
    assert var_9 == 0
    stack_node_11 = module_0.StackNode(stack_node_6)


def test_case_558():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    var_1 = stack_0.pop()
    assert len(stack_0) == 0
    bool_0 = True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.push(bool_0)
    assert len(stack_1) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_1 = None
    stack_node_0 = module_0.StackNode(none_type_1)
    stack_node_1 = module_0.StackNode(none_type_1)
    none_type_2 = None
    stack_node_2 = module_0.StackNode(none_type_2)
    bool_1 = False
    stack_node_3 = module_0.StackNode(bool_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_3 = None
    stack_node_4 = module_0.StackNode(none_type_3)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_4)
    assert len(stack_node_8.data) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    str_0 = "o2EICU9\x0bp7"
    stack_node_9 = module_0.StackNode(str_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_10 = module_0.StackNode(var_5)
    assert stack_node_10.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_11 = module_0.StackNode(stack_6)
    assert len(stack_node_11.data) == 0
    none_type_4 = None
    stack_node_12 = module_0.StackNode(none_type_4)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_13 = module_0.StackNode(var_7)
    assert stack_node_13.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_8 = module_0.check_parenthesis(dict_0)
    assert var_8 is True
    var_9 = stack_11.__len__()
    assert var_9 == 0
    list_0 = [stack_node_1, stack_node_9, stack_0]
    var_10 = module_0.check_parenthesis(list_0)
    assert var_10 is True


def test_case_559():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    dict_0 = {}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    int_0 = -460
    stack_node_1 = module_0.StackNode(int_0)
    str_0 = ""
    var_3 = module_0.check_parenthesis(str_0)
    assert var_3 is True
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0


def test_case_560():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_0)
    assert stack_node_4.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_1)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_4)
    assert len(stack_node_7.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    stack_node_9 = module_0.StackNode(stack_5)
    assert len(stack_node_9.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_10 = module_0.StackNode(var_2)
    assert stack_node_10.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0


def test_case_561():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.push(none_type_0)
    assert len(stack_1) == 1
    assert len(stack_node_3.data) == 1
    bool_1 = False
    set_0 = {bool_1, bool_1, bool_1, bool_1}
    tuple_0 = (bool_1, bool_1)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_1, set_0, tuple_0, str_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.push(tuple_1)
    assert len(stack_2) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_2 = None
    stack_node_4 = module_0.StackNode(none_type_2)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_node_5 = module_0.StackNode(stack_1)
    assert len(stack_node_5.data) == 1


def test_case_562():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_2.push(stack_4)
    assert len(stack_2) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_5)
    assert len(stack_node_4.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    stack_node_9 = module_0.StackNode(stack_10)
    assert len(stack_node_9.data) == 0
    none_type_1 = None
    stack_node_10 = module_0.StackNode(none_type_1)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_12.__len__()
    assert var_7 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_11 = module_0.StackNode(var_7)
    assert stack_node_11.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_8 = stack_16.__len__()
    assert var_8 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_12 = module_0.StackNode(var_8)
    assert stack_node_12.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_9 = stack_19.__len__()
    assert var_9 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_10 = stack_20.__len__()
    assert var_10 == 0
    stack_node_13 = module_0.StackNode(var_10)
    assert stack_node_13.data == 0
    none_type_2 = None
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_11 = stack_21.push(none_type_2)
    assert len(stack_21) == 1
    var_12 = stack_21.pop()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0


def test_case_563():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0


def test_case_564():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data is True


def test_case_565():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_node_0 = module_0.StackNode(stack_0)
    assert len(stack_node_0.data) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.push(tuple_1)
    assert len(stack_5) == 1
    var_3 = module_0.check_parenthesis(set_0)
    assert var_3 is True


def test_case_566():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    bool_0 = True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.push(bool_0)
    assert len(stack_2) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(none_type_0)
    none_type_1 = None
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.push(none_type_1)
    assert len(stack_4) == 1
    var_3 = stack_4.pop()
    assert len(stack_4) == 0
    bool_1 = False
    set_0 = {bool_1, bool_1, bool_1, bool_1}
    tuple_0 = (bool_1, bool_1)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_1, set_0, tuple_0, str_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.push(tuple_1)
    assert len(stack_5) == 1
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_2 = None
    stack_node_5 = module_0.StackNode(none_type_2)
    bool_2 = False
    stack_node_6 = module_0.StackNode(bool_2)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    bool_3 = True
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.push(bool_3)
    assert len(stack_8) == 1
    stack_node_7 = module_0.StackNode(var_5)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0


def test_case_567():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1


def test_case_568():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_node_0 = module_0.StackNode(stack_0)
    assert len(stack_node_0.data) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0


def test_case_569():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_2 = module_0.StackNode(complex_0)
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0


def test_case_570():
    int_0 = 2594
    stack_node_0 = module_0.StackNode(int_0)


def test_case_571():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_node_6 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.push(bool_0)
    assert len(stack_12) == 1
    bool_1 = True
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.push(bool_1)
    assert len(stack_13) == 1
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    none_type_1 = None
    stack_node_8 = module_0.StackNode(none_type_1)
    stack_node_9 = module_0.StackNode(none_type_1)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_7 = stack_16.__len__()
    assert var_7 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_10 = module_0.StackNode(var_7)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    none_type_2 = None
    stack_node_12 = module_0.StackNode(none_type_2)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_8 = module_0.check_parenthesis(dict_0)
    assert var_8 is True
    stack_node_13 = module_0.StackNode(var_8)
    assert stack_node_13.data is True
    var_9 = stack_7.push(stack_4)
    assert len(stack_7) == 1


def test_case_572():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(stack_4)
    assert len(stack_node_3.data) == 0
    stack_node_4 = module_0.StackNode(stack_7)
    assert len(stack_node_4.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(stack_8)
    assert len(stack_node_5.data) == 0
    int_0 = -460
    stack_node_6 = module_0.StackNode(int_0)
    var_2 = stack_6.__len__()
    assert var_2 == 0


def test_case_573():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(stack_4)
    assert len(stack_node_2.data) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(stack_8)
    assert len(stack_node_4.data) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_4 = module_0.check_parenthesis(str_0)
    assert var_4 is False
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data is False
    dict_0 = {}
    stack_node_6 = module_0.StackNode(dict_0)
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    stack_node_7 = module_0.StackNode(float_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_10)
    assert len(stack_node_10.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_11 = module_0.StackNode(var_7)
    assert stack_node_11.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_8 = stack_12.__len__()
    assert var_8 == 0
    var_9 = stack_12.__len__()
    assert var_9 == 0
    var_10 = stack_7.push(none_type_0)
    assert len(stack_7) == 1


def test_case_574():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_2 = module_0.StackNode(stack_5)
    assert len(stack_node_2.data) == 0
    stack_node_3 = module_0.StackNode(stack_8)
    assert len(stack_node_3.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_node_5 = module_0.StackNode(none_type_0)


def test_case_575():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    str_0 = "o2EICU9\x0bp7"
    stack_node_2 = module_0.StackNode(str_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0


def test_case_576():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    bool_0 = True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.push(bool_0)
    assert len(stack_4) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_8 = module_0.StackNode(stack_6)
    assert len(stack_node_8.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    var_5 = stack_11.push(var_0)
    assert len(stack_11) == 1


def test_case_577():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    dict_1 = {var_0: var_0, float_0: stack_node_0}
    stack_node_2 = module_0.StackNode(dict_1)


def test_case_578():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_3)
    assert len(stack_node_3.data) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    var_3 = stack_3.push(stack_node_2)
    assert len(stack_3) == 1
    assert len(stack_node_3.data) == 1
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_5 = module_0.StackNode(float_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    dict_1 = {var_4: var_4, float_0: stack_node_4}
    stack_node_6 = module_0.StackNode(dict_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_8 = module_0.StackNode(stack_8)
    assert len(stack_node_8.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_9 = module_0.StackNode(var_7)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    none_type_0 = None
    stack_node_11 = module_0.StackNode(none_type_0)
    var_8 = stack_6.__len__()
    assert var_8 == 0


def test_case_579():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_3 = module_0.StackNode(var_0)
    assert stack_node_3.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_node_5 = module_0.StackNode(stack_5)
    assert len(stack_node_5.data) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    none_type_1 = None
    stack_node_8 = module_0.StackNode(none_type_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_9 = module_0.StackNode(stack_10)
    assert len(stack_node_9.data) == 0
    bool_1 = False
    stack_node_10 = module_0.StackNode(bool_1)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_11 = module_0.StackNode(var_5)
    assert stack_node_11.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_6 = stack_13.push(stack_15)
    assert len(stack_13) == 1
    float_1 = -2380.5
    var_7 = stack_3.push(float_1)
    assert len(stack_3) == 1


def test_case_580():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_node_6 = module_0.StackNode(bool_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    stack_node_8 = module_0.StackNode(stack_7)
    assert len(stack_node_8.data) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_node_9 = module_0.StackNode(stack_7)
    assert len(stack_node_9.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_7 = module_0.check_parenthesis(dict_0)
    assert var_7 is True
    var_8 = stack_9.__len__()
    assert var_8 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_9 = stack_11.__len__()
    assert var_9 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_11 = module_0.StackNode(var_9)
    assert stack_node_11.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_10 = stack_13.push(stack_15)
    assert len(stack_13) == 1
    int_0 = 2594
    stack_node_12 = module_0.StackNode(int_0)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_11 = stack_16.__len__()
    assert var_11 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_13 = module_0.StackNode(var_11)
    assert stack_node_13.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_14 = module_0.StackNode(stack_16)
    assert len(stack_node_14.data) == 0
    bool_1 = False
    stack_node_15 = module_0.StackNode(bool_1)
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_12 = stack_19.__len__()
    assert var_12 == 0
    stack_node_16 = module_0.StackNode(var_12)
    assert stack_node_16.data == 0
    set_0 = set()
    stack_node_17 = module_0.StackNode(set_0)


def test_case_581():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    dict_0 = {}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0


def test_case_582():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_2.push(stack_4)
    assert len(stack_2) == 1
    int_0 = 2594
    stack_node_1 = module_0.StackNode(int_0)
    var_2 = stack_0.__len__()
    assert var_2 == 0


def test_case_583():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0


def test_case_584():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(stack_2)
    assert len(stack_node_0.data) == 0
    var_2 = stack_2.push(var_1)
    assert len(stack_2) == 1
    assert len(stack_node_0.data) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    bool_0 = True
    var_3 = stack_0.push(bool_0)
    assert len(stack_0) == 1


def test_case_585():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(stack_6)
    assert len(stack_node_6.data) == 0
    bool_0 = False
    stack_node_7 = module_0.StackNode(bool_0)
    stack_node_8 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.push(none_type_1)
    assert len(stack_8) == 1
    stack_node_9 = module_0.StackNode(var_3)
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_11 = module_0.StackNode(var_4)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    none_type_2 = None
    stack_node_13 = module_0.StackNode(none_type_2)
    bool_1 = False
    stack_node_14 = module_0.StackNode(bool_1)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    bool_2 = True
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.push(bool_2)
    assert len(stack_12) == 1
    stack_node_15 = module_0.StackNode(var_5)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0


def test_case_586():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_1.data) == 1


def test_case_587():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0


def test_case_588():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_2.push(stack_4)
    assert len(stack_2) == 1
    dict_0 = {}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    int_0 = -460
    stack_node_1 = module_0.StackNode(int_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(stack_6)
    assert len(stack_node_3.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0


def test_case_589():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_2)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0


def test_case_590():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(stack_3)
    assert len(stack_node_3.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_2 = None
    stack_node_7 = module_0.StackNode(none_type_2)
    stack_node_8 = module_0.StackNode(stack_6)
    assert len(stack_node_8.data) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_3 = module_0.check_parenthesis(str_0)
    assert var_3 is False
    stack_node_9 = module_0.StackNode(var_3)
    assert stack_node_9.data is False
    bool_1 = True
    stack_node_10 = module_0.StackNode(bool_1)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_11 = module_0.StackNode(var_4)
    assert stack_node_11.data is True
    dict_1 = {}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    bool_2 = False
    stack_node_12 = module_0.StackNode(bool_2)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0


def test_case_591():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    none_type_0 = None
    var_3 = stack_0.push(none_type_0)
    assert len(stack_0) == 1


def test_case_592():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    bool_0 = True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.push(bool_0)
    assert len(stack_2) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_7)
    assert len(stack_node_7.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_9 = module_0.StackNode(stack_8)
    assert len(stack_node_9.data) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    bool_1 = False
    stack_node_10 = module_0.StackNode(bool_1)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    stack_node_11 = module_0.StackNode(float_0)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    bool_2 = True
    stack_node_12 = module_0.StackNode(bool_2)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_node_13 = module_0.StackNode(var_7)
    assert stack_node_13.data == 0
    var_8 = stack_0.push(bool_1)
    assert len(stack_0) == 1


def test_case_593():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    var_1 = stack_1.push(none_type_0)
    assert len(stack_1) == 1
    assert len(stack_node_2.data) == 1
    stack_node_3 = module_0.StackNode(var_0)
    assert stack_node_3.data == 0


def test_case_594():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    dict_0 = {}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_0 = module_0.StackNode(var_2)
    assert stack_node_0.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(stack_10)
    assert len(stack_node_2.data) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_node_4 = module_0.StackNode(bool_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_5 = module_0.StackNode(var_6)
    assert stack_node_5.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_7 = stack_14.push(stack_16)
    assert len(stack_14) == 1
    none_type_1 = None
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_8 = stack_17.push(none_type_1)
    assert len(stack_17) == 1
    none_type_2 = None
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_9 = stack_18.push(none_type_2)
    assert len(stack_18) == 1
    var_10 = stack_18.pop()
    assert len(stack_18) == 0
    stack_node_6 = module_0.StackNode(var_9)


def test_case_595():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0


def test_case_596():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(stack_4)
    assert len(stack_node_3.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_node_6 = module_0.StackNode(bool_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.__len__()
    assert var_2 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    stack_node_9 = module_0.StackNode(stack_11)
    assert len(stack_node_9.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_3 = stack_12.__len__()
    assert var_3 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_10 = module_0.StackNode(var_3)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_12)
    assert len(stack_node_13.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_14 = module_0.StackNode(var_3)
    assert stack_node_14.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_4 = stack_15.__len__()
    assert var_4 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_15 = module_0.StackNode(var_4)
    assert stack_node_15.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_5 = stack_17.__len__()
    assert var_5 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0


def test_case_597():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_1)
    assert len(stack_node_5.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    dict_0 = {}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(stack_9)
    assert len(stack_node_8.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_9 = module_0.StackNode(stack_11)
    assert len(stack_node_9.data) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0


def test_case_598():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(stack_5)
    assert len(stack_node_7.data) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    none_type_1 = None
    stack_node_8 = module_0.StackNode(none_type_1)
    bool_1 = False
    stack_node_9 = module_0.StackNode(bool_1)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0


def test_case_599():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_1.data) == 1
    bool_0 = True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.push(bool_0)
    assert len(stack_1) == 1
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    bool_1 = False
    stack_node_3 = module_0.StackNode(bool_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    bool_2 = False
    stack_node_4 = module_0.StackNode(bool_2)
    stack_node_5 = module_0.StackNode(bool_2)
    bool_3 = False
    set_0 = {bool_3, bool_3, bool_3, bool_3}
    tuple_0 = (bool_3, bool_3)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_3, set_0, tuple_0, str_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.push(tuple_1)
    assert len(stack_3) == 1
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_2 = None
    stack_node_6 = module_0.StackNode(none_type_2)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    bool_4 = False
    stack_node_7 = module_0.StackNode(bool_4)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_8.push(stack_10)
    assert len(stack_8) == 1
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0


def test_case_600():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0


def test_case_601():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_node_0 = module_0.StackNode(stack_0)
    assert len(stack_node_0.data) == 1


def test_case_602():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    var_5 = stack_7.__len__()
    assert var_5 == 0


def test_case_603():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_2 = module_0.check_parenthesis(dict_1)
    assert var_2 is True
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data is True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(stack_6)
    assert len(stack_node_5.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_6 = module_0.StackNode(stack_10)
    assert len(stack_node_6.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0


def test_case_604():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_0 = None
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.push(none_type_0)
    assert len(stack_8) == 1
    var_5 = stack_8.pop()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_7 = module_0.StackNode(stack_9)
    assert len(stack_node_7.data) == 0
    stack_node_8 = module_0.StackNode(var_2)


def test_case_605():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    var_1 = stack_0.pop()
    assert len(stack_0) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_1 = module_0.StackNode(none_type_1)
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_2 = None
    stack_node_3 = module_0.StackNode(none_type_2)
    str_0 = "o2EICU9\x0bp7"
    stack_node_4 = module_0.StackNode(str_0)
    var_3 = stack_1.push(str_0)
    assert len(stack_1) == 1


def test_case_606():
    dict_0 = {}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_3 = module_0.check_parenthesis(str_0)
    assert var_3 is False
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_4 = module_0.StackNode(float_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0


def test_case_607():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_node_0 = module_0.StackNode(stack_0)
    assert len(stack_node_0.data) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    stack_node_3 = module_0.StackNode(stack_3)
    assert len(stack_node_3.data) == 0
    bool_1 = True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.push(bool_1)
    assert len(stack_5) == 1
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_7 = module_0.StackNode(stack_11)
    assert len(stack_node_7.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_8 = module_0.StackNode(stack_15)
    assert len(stack_node_8.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_5 = stack_16.__len__()
    assert var_5 == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_6 = stack_17.__len__()
    assert var_6 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_11 = module_0.StackNode(var_6)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_node_11)
    stack_node_14 = module_0.StackNode(stack_17)
    assert len(stack_node_14.data) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    none_type_0 = None
    stack_node_15 = module_0.StackNode(none_type_0)
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_7 = stack_20.__len__()
    assert var_7 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_8 = module_0.check_parenthesis(dict_0)
    assert var_8 is True
    var_9 = stack_20.__len__()
    assert var_9 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_10 = module_0.check_parenthesis(dict_1)
    assert var_10 is True
    stack_node_16 = module_0.StackNode(float_1)
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    none_type_1 = None
    stack_node_17 = module_0.StackNode(none_type_1)
    stack_node_18 = module_0.StackNode(none_type_1)
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    var_11 = stack_22.__len__()
    assert var_11 == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_node_19 = module_0.StackNode(var_11)
    assert stack_node_19.data == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_node_20 = module_0.StackNode(stack_22)
    assert len(stack_node_20.data) == 0
    stack_node_21 = module_0.StackNode(stack_node_3)


def test_case_608():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_2 = module_0.StackNode(bool_0)


def test_case_609():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0


def test_case_610():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_2 = module_0.StackNode(float_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    bool_1 = True
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.push(bool_1)
    assert len(stack_6) == 1
    stack_node_5 = module_0.StackNode(stack_6)
    assert len(stack_node_5.data) == 1
    var_4 = stack_2.push(stack_4)
    assert len(stack_2) == 1


def test_case_611():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_0 = module_0.StackNode(none_type_1)
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_node_3 = module_0.StackNode(bool_0)
    none_type_2 = None
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.push(none_type_2)
    assert len(stack_2) == 1
    stack_node_4 = module_0.StackNode(var_2)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    var_4 = stack_3.push(none_type_1)
    assert len(stack_3) == 1


def test_case_612():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    bool_1 = True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.push(bool_1)
    assert len(stack_3) == 1
    stack_node_2 = module_0.StackNode(var_1)
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    none_type_2 = None
    stack_node_6 = module_0.StackNode(none_type_2)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_node_8 = module_0.StackNode(stack_node_2)


def test_case_613():
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data is True


def test_case_614():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_2 = module_0.StackNode(float_0)
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.push(tuple_1)
    assert len(stack_5) == 1
    int_0 = -460
    stack_node_4 = module_0.StackNode(int_0)
    bool_1 = False
    stack_node_5 = module_0.StackNode(bool_1)
    stack_node_6 = module_0.StackNode(bool_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    dict_1 = {}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    var_7 = stack_4.__len__()
    assert var_7 == 0


def test_case_615():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_4 = module_0.StackNode(var_6)
    assert stack_node_4.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_7 = stack_16.__len__()
    assert var_7 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_8 = module_0.check_parenthesis(dict_0)
    assert var_8 is True
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0


def test_case_616():
    int_0 = 2594
    stack_node_0 = module_0.StackNode(int_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_3 = module_0.check_parenthesis(str_0)
    assert var_3 is False
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    bool_0 = True
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.push(bool_0)
    assert len(stack_6) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_2 = module_0.StackNode(var_5)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_4 = module_0.StackNode(var_6)
    assert stack_node_4.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_7 = stack_15.__len__()
    assert var_7 == 0
    str_1 = ""
    var_8 = module_0.check_parenthesis(str_1)
    assert var_8 is True
    stack_node_6 = module_0.StackNode(var_8)
    assert stack_node_6.data is True
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0


def test_case_617():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0


def test_case_618():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0


def test_case_619():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    bool_1 = True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_0 = stack_2.push(bool_1)
    assert len(stack_2) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(stack_3)
    assert len(stack_node_4.data) == 0
    stack_node_5 = module_0.StackNode(stack_6)
    assert len(stack_node_5.data) == 0
    bool_2 = True
    stack_node_6 = module_0.StackNode(bool_2)
    bool_3 = False
    stack_node_7 = module_0.StackNode(bool_3)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_8 = module_0.StackNode(float_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    dict_1 = {var_2: var_2, float_0: stack_node_7}
    stack_node_9 = module_0.StackNode(dict_1)
    bool_4 = False
    stack_node_10 = module_0.StackNode(bool_4)
    stack_node_11 = module_0.StackNode(bool_4)
    none_type_1 = None
    stack_node_12 = module_0.StackNode(none_type_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.push(bool_4)
    assert len(stack_8) == 1
    stack_node_13 = module_0.StackNode(stack_2)
    assert len(stack_node_13.data) == 1


def test_case_620():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    var_4 = stack_4.push(stack_node_3)
    assert len(stack_4) == 1
    assert len(stack_node_4.data) == 1
    int_0 = -460
    stack_node_5 = module_0.StackNode(int_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_7 = module_0.StackNode(stack_6)
    assert len(stack_node_7.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data is True
    bool_0 = True
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.push(bool_0)
    assert len(stack_10) == 1
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_8 = stack_11.__len__()
    assert var_8 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_9 = module_0.StackNode(var_8)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_9 = stack_14.__len__()
    assert var_9 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_11 = module_0.StackNode(var_9)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_node_11)
    stack_node_14 = module_0.StackNode(stack_14)
    assert len(stack_node_14.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    bool_1 = True
    stack_node_15 = module_0.StackNode(bool_1)
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    none_type_0 = None
    stack_node_16 = module_0.StackNode(none_type_0)
    stack_node_17 = module_0.StackNode(stack_18)
    assert len(stack_node_17.data) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0


def test_case_621():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    bool_1 = True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.push(bool_1)
    assert len(stack_1) == 1
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 1
    complex_0 = -3711.3 - 806.2j
    stack_node_4 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    bool_2 = False
    stack_node_6 = module_0.StackNode(bool_2)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_1 = None
    stack_node_9 = module_0.StackNode(none_type_1)
    stack_node_10 = module_0.StackNode(stack_4)
    assert len(stack_node_10.data) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_node_11 = module_0.StackNode(stack_4)
    assert len(stack_node_11.data) == 0
    str_0 = "o2EICU9\x0bp7"
    stack_node_12 = module_0.StackNode(str_0)
    var_4 = stack_1.peek()
    assert var_4 is True


def test_case_622():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_2.push(stack_4)
    assert len(stack_2) == 1
    str_0 = ""
    var_2 = module_0.check_parenthesis(str_0)
    assert var_2 is True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(stack_5)
    assert len(stack_node_2.data) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_node_5 = module_0.StackNode(stack_11)
    assert len(stack_node_5.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    none_type_2 = None
    stack_node_7 = module_0.StackNode(none_type_2)
    bool_0 = False
    stack_node_8 = module_0.StackNode(bool_0)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_7 = module_0.check_parenthesis(dict_0)
    assert var_7 is True
    stack_node_9 = module_0.StackNode(bool_0)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_8 = stack_16.__len__()
    assert var_8 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_10 = module_0.StackNode(var_8)
    assert stack_node_10.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_11 = module_0.StackNode(stack_16)
    assert len(stack_node_11.data) == 0
    var_9 = stack_18.__len__()
    assert var_9 == 0
    bool_1 = True
    stack_node_12 = module_0.StackNode(bool_1)
    var_10 = stack_8.__len__()
    assert var_10 == 0


def test_case_623():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    var_1 = stack_0.pop()
    assert len(stack_0) == 0
    str_0 = ""
    var_2 = module_0.check_parenthesis(str_0)
    assert var_2 is True
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_1 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_3 = stack_1.push(tuple_1)
    assert len(stack_1) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_0 = module_0.StackNode(var_4)
    assert stack_node_0.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_5.push(stack_7)
    assert len(stack_5) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0


def test_case_624():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_2)
    assert len(stack_node_3.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_2 = module_0.check_parenthesis(str_0)
    assert var_2 is False
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data is False
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    bool_1 = True
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.push(bool_1)
    assert len(stack_7) == 1
    stack_node_6 = module_0.StackNode(stack_7)
    assert len(stack_node_6.data) == 1
    stack_node_7 = module_0.StackNode(stack_node_2)


def test_case_625():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data is True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_4 = stack_2.__len__()
    assert var_4 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(stack_2)
    assert len(stack_node_6.data) == 0
    var_5 = stack_4.__len__()
    assert var_5 == 0
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_8 = module_0.StackNode(bool_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    bool_1 = True
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.push(bool_1)
    assert len(stack_7) == 1
    stack_node_9 = module_0.StackNode(var_6)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_7 = stack_8.__len__()
    assert var_7 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_10 = module_0.StackNode(var_7)
    assert stack_node_10.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    list_0 = [var_5, var_2]
    var_8 = stack_3.push(list_0)
    assert len(stack_3) == 1


def test_case_626():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_node_3 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_0 = stack_2.push(bool_0)
    assert len(stack_2) == 1
    none_type_2 = None
    stack_node_5 = module_0.StackNode(none_type_2)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_3 = None
    stack_node_7 = module_0.StackNode(none_type_3)
    stack_node_8 = module_0.StackNode(stack_9)
    assert len(stack_node_8.data) == 0
    int_0 = -460
    stack_node_9 = module_0.StackNode(int_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    bool_1 = True
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_12.push(bool_1)
    assert len(stack_12) == 1
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    none_type_4 = None
    stack_node_11 = module_0.StackNode(none_type_4)
    stack_node_12 = module_0.StackNode(none_type_4)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_13 = module_0.StackNode(var_8)
    assert stack_node_13.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_9 = stack_17.__len__()
    assert var_9 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_10 = stack_18.__len__()
    assert var_10 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_14 = module_0.StackNode(var_10)
    assert stack_node_14.data == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_15 = module_0.StackNode(stack_18)
    assert len(stack_node_15.data) == 0
    var_11 = stack_16.__len__()
    assert var_11 == 0


def test_case_627():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0


def test_case_628():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    var_1 = stack_1.push(none_type_1)
    assert len(stack_1) == 1
    assert len(stack_node_4.data) == 1
    bytes_0 = b"\x190\xcc2\xcc\xbe\xcaP\xd1\xcb\xe8\x1d$\xcc\xe0\x9dT\x8a\xf5"
    var_2 = module_0.check_parenthesis(bytes_0)
    assert var_2 is True


def test_case_629():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_4.push(stack_2)
    assert len(stack_4) == 1


def test_case_630():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(stack_5)
    assert len(stack_node_3.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_4 = module_0.StackNode(float_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_node_6 = module_0.StackNode(stack_6)
    assert len(stack_node_6.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_9 = module_0.StackNode(stack_9)
    assert len(stack_node_9.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_5 = stack_14.__len__()
    assert var_5 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_10 = module_0.StackNode(var_5)
    assert stack_node_10.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_11 = module_0.StackNode(stack_15)
    assert len(stack_node_11.data) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    bool_0 = False
    stack_node_12 = module_0.StackNode(bool_0)
    var_6 = stack_15.__len__()
    assert var_6 == 0


def test_case_631():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(stack_2)
    assert len(stack_node_3.data) == 0
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    bool_0 = True
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.push(bool_0)
    assert len(stack_7) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    stack_node_8 = module_0.StackNode(none_type_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_10 = module_0.StackNode(var_5)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_10)
    assert len(stack_node_13.data) == 0
    var_6 = stack_1.push(var_1)
    assert len(stack_1) == 1


def test_case_632():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0


def test_case_633():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_3 = module_0.StackNode(float_0)
    bool_1 = False
    stack_node_4 = module_0.StackNode(bool_1)
    stack_node_5 = module_0.StackNode(bool_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    bool_2 = True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.push(bool_2)
    assert len(stack_2) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data is True
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_7 = stack_9.__len__()
    assert var_7 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_8 = stack_11.__len__()
    assert var_8 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_10 = module_0.StackNode(var_8)
    assert stack_node_10.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_9 = stack_12.__len__()
    assert var_9 == 0
    var_10 = stack_12.__len__()
    assert var_10 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_11 = module_0.StackNode(complex_0)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_11 = stack_16.__len__()
    assert var_11 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_12 = module_0.StackNode(var_11)
    assert stack_node_12.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_12 = module_0.check_parenthesis(dict_2)
    assert var_12 is True
    stack_node_13 = module_0.StackNode(dict_1)


def test_case_634():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_0)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_node_4 = module_0.StackNode(stack_5)
    assert len(stack_node_4.data) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_2 = module_0.check_parenthesis(str_0)
    assert var_2 is False
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data is False
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    dict_0 = {}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0


def test_case_635():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_2)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_1 = stack_6.__len__()
    assert var_1 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    bool_1 = True
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_2 = stack_9.push(bool_1)
    assert len(stack_9) == 1
    stack_node_4 = module_0.StackNode(var_2)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_5 = module_0.StackNode(float_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_node_7 = module_0.StackNode(none_type_1)
    bool_2 = False
    stack_node_8 = module_0.StackNode(bool_2)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_9 = module_0.StackNode(float_1)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    dict_2 = {var_4: var_4, float_1: stack_node_8}
    stack_node_10 = module_0.StackNode(dict_2)
    none_type_2 = None
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.push(none_type_2)
    assert len(stack_12) == 1
    var_6 = stack_12.pop()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_11 = module_0.StackNode(var_7)
    assert stack_node_11.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_12 = module_0.StackNode(stack_13)
    assert len(stack_node_12.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_13 = module_0.StackNode(complex_0)
    none_type_3 = None
    stack_node_14 = module_0.StackNode(none_type_3)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    none_type_4 = None
    stack_node_15 = module_0.StackNode(none_type_4)
    stack_node_16 = module_0.StackNode(stack_16)
    assert len(stack_node_16.data) == 0
    var_8 = stack_16.push(none_type_3)
    assert len(stack_16) == 1
    assert len(stack_node_16.data) == 1
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_9 = stack_17.__len__()
    assert var_9 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_17 = module_0.StackNode(var_9)
    assert stack_node_17.data == 0
    stack_node_18 = module_0.StackNode(stack_node_17)
    stack_node_19 = module_0.StackNode(stack_node_17)
    stack_node_20 = module_0.StackNode(stack_17)
    assert len(stack_node_20.data) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_10 = stack_20.__len__()
    assert var_10 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_21 = module_0.StackNode(var_10)
    assert stack_node_21.data == 0
    stack_node_22 = module_0.StackNode(stack_node_21)
    stack_node_23 = module_0.StackNode(stack_node_21)
    var_11 = stack_14.push(none_type_4)
    assert len(stack_14) == 1


def test_case_636():
    dict_0 = {}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_1 = None
    stack_node_10 = module_0.StackNode(none_type_1)
    stack_node_11 = module_0.StackNode(stack_9)
    assert len(stack_node_11.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    stack_node_12 = module_0.StackNode(stack_12)
    assert len(stack_node_12.data) == 0
    var_7 = stack_12.push(var_6)
    assert len(stack_12) == 1
    assert len(stack_node_12.data) == 1
    bool_0 = False
    stack_node_13 = module_0.StackNode(bool_0)
    float_1 = 712.593
    dict_2 = {float_1: float_1, float_1: float_1}
    var_8 = module_0.check_parenthesis(dict_2)
    assert var_8 is True
    stack_node_14 = module_0.StackNode(float_1)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_9 = stack_14.__len__()
    assert var_9 == 0
    stack_node_15 = module_0.StackNode(var_9)
    assert stack_node_15.data == 0
    int_0 = -460
    stack_node_16 = module_0.StackNode(int_0)
    bool_1 = False
    stack_node_17 = module_0.StackNode(bool_1)
    stack_node_18 = module_0.StackNode(bool_1)
    none_type_2 = None
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_10 = stack_15.push(none_type_2)
    assert len(stack_15) == 1
    stack_node_19 = module_0.StackNode(var_10)
    stack_node_20 = module_0.StackNode(stack_node_19)
    stack_node_21 = module_0.StackNode(none_type_1)


def test_case_637():
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is False
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_5)
    assert len(stack_node_5.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    bool_0 = True
    stack_node_7 = module_0.StackNode(bool_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(stack_node_6)


def test_case_638():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_node_5 = module_0.StackNode(stack_5)
    assert len(stack_node_5.data) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    none_type_1 = None
    stack_node_8 = module_0.StackNode(none_type_1)
    bool_0 = False
    stack_node_9 = module_0.StackNode(bool_0)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_8 = module_0.check_parenthesis(dict_0)
    assert var_8 is True
    stack_node_10 = module_0.StackNode(float_0)
    bool_1 = True
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_9 = stack_17.push(bool_1)
    assert len(stack_17) == 1
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_10 = stack_18.__len__()
    assert var_10 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_11 = module_0.StackNode(var_10)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_11 = stack_21.__len__()
    assert var_11 == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_13 = module_0.StackNode(var_11)
    assert stack_node_13.data == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_node_14 = module_0.StackNode(stack_22)
    assert len(stack_node_14.data) == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    stack_node_15 = module_0.StackNode(stack_node_7)


def test_case_639():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_2 = module_0.StackNode(stack_4)
    assert len(stack_node_2.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_7)
    assert len(stack_node_8.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    bool_1 = False
    stack_node_10 = module_0.StackNode(bool_1)
    stack_node_11 = module_0.StackNode(bool_1)
    none_type_1 = None
    stack_node_12 = module_0.StackNode(none_type_1)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.push(bool_1)
    assert len(stack_10) == 1
    bool_2 = True
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.push(bool_2)
    assert len(stack_11) == 1
    stack_node_13 = module_0.StackNode(stack_11)
    assert len(stack_node_13.data) == 1
    stack_node_14 = module_0.StackNode(var_2)
    assert stack_node_14.data is True


def test_case_640():
    str_0 = "o2EICU9\x0bp7"
    stack_node_0 = module_0.StackNode(str_0)
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(stack_5)
    assert len(stack_node_6.data) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_9)
    assert len(stack_node_10.data) == 0
    none_type_0 = None
    stack_node_11 = module_0.StackNode(none_type_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_12 = module_0.StackNode(var_6)
    assert stack_node_12.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_13 = module_0.StackNode(stack_13)
    assert len(stack_node_13.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0


def test_case_641():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_10)
    assert len(stack_node_9.data) == 0
    bool_0 = True
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.push(bool_0)
    assert len(stack_12) == 1
    str_0 = ""
    var_7 = module_0.check_parenthesis(str_0)
    assert var_7 is True
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_10 = module_0.StackNode(stack_13)
    assert len(stack_node_10.data) == 0


def test_case_642():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    int_0 = 2594
    stack_node_3 = module_0.StackNode(int_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(stack_node_1)


def test_case_643():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(stack_7)
    assert len(stack_node_4.data) == 0
    int_0 = 2594
    stack_node_5 = module_0.StackNode(int_0)
    var_3 = stack_0.__len__()
    assert var_3 == 0


def test_case_644():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_6 = module_0.StackNode(bool_0)
    none_type_2 = None
    stack_node_7 = module_0.StackNode(none_type_2)
    bool_1 = False
    stack_node_8 = module_0.StackNode(bool_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    bool_2 = True
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.push(bool_2)
    assert len(stack_7) == 1
    stack_node_9 = module_0.StackNode(var_4)
    bool_3 = True
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.push(bool_3)
    assert len(stack_8) == 1
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    var_8 = stack_10.__len__()
    assert var_8 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0


def test_case_645():
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_0 = module_0.StackNode(none_type_1)
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    var_2 = stack_1.push(none_type_1)
    assert len(stack_1) == 1
    assert len(stack_node_1.data) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(stack_3)
    assert len(stack_node_3.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_6)
    assert len(stack_node_7.data) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    stack_node_8 = module_0.StackNode(float_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_2 = None
    stack_node_9 = module_0.StackNode(none_type_2)
    stack_node_10 = module_0.StackNode(none_type_2)
    var_7 = stack_0.peek()


def test_case_646():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(stack_5)
    assert len(stack_node_6.data) == 0
    var_4 = stack_1.__len__()
    assert var_4 == 0


def test_case_647():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    var_1 = stack_0.pop()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.push(none_type_1)
    assert len(stack_1) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0


def test_case_648():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_node_0 = module_0.StackNode(stack_0)
    assert len(stack_node_0.data) == 1
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is False
    bool_1 = False
    set_0 = {bool_1, bool_1, bool_1, bool_1}
    tuple_0 = (bool_1, bool_1)
    str_1 = "B@kK%+yXf"
    tuple_1 = (bool_1, set_0, tuple_0, str_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.push(tuple_1)
    assert len(stack_1) == 1
    bool_2 = True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.push(bool_2)
    assert len(stack_2) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    str_2 = ""
    var_5 = module_0.check_parenthesis(str_2)
    assert var_5 is True
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data is True
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_10)
    assert len(stack_node_9.data) == 0
    var_7 = stack_2.push(stack_5)
    assert len(stack_2) == 2


def test_case_649():
    bool_0 = True
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(stack_6)
    assert len(stack_node_3.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    int_0 = 2594
    stack_node_5 = module_0.StackNode(int_0)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_7 = stack_15.__len__()
    assert var_7 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_6 = module_0.StackNode(var_7)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0


def test_case_650():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_node_0 = module_0.StackNode(stack_0)
    assert len(stack_node_0.data) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    var_2 = stack_1.push(stack_node_3)
    assert len(stack_1) == 1
    assert len(stack_node_4.data) == 1
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_node_6 = module_0.StackNode(bool_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_9 = module_0.StackNode(stack_4)
    assert len(stack_node_9.data) == 0


def test_case_651():
    dict_0 = {}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data is True


def test_case_652():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(stack_4)
    assert len(stack_node_3.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    int_0 = 2594
    stack_node_4 = module_0.StackNode(int_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_1 = stack_6.__len__()
    assert var_1 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_1)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_6)
    assert len(stack_node_8.data) == 0
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.push(tuple_1)
    assert len(stack_8) == 1
    none_type_1 = None
    stack_node_9 = module_0.StackNode(none_type_1)
    bool_1 = False
    stack_node_10 = module_0.StackNode(bool_1)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_11 = module_0.StackNode(bool_1)
    none_type_2 = None
    stack_node_12 = module_0.StackNode(none_type_2)
    var_4 = stack_8.peek()


def test_case_653():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    stack_node_4 = module_0.StackNode(stack_7)
    assert len(stack_node_4.data) == 0
    var_4 = stack_7.push(var_3)
    assert len(stack_7) == 1
    assert len(stack_node_4.data) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_6 = module_0.check_parenthesis(dict_2)
    assert var_6 is True
    stack_node_5 = module_0.StackNode(stack_10)
    assert len(stack_node_5.data) == 0
    dict_3 = {}
    stack_node_6 = module_0.StackNode(dict_3)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0


def test_case_654():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    bool_0 = True
    stack_node_2 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.push(stack_1)
    assert len(stack_2) == 1


def test_case_655():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    bool_1 = False
    set_0 = {bool_1, bool_1, bool_1, bool_1}
    tuple_0 = (bool_1, bool_1)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_1, set_0, tuple_0, str_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.push(tuple_1)
    assert len(stack_6) == 1
    str_1 = ""
    var_4 = module_0.check_parenthesis(str_1)
    assert var_4 is True
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data is True
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    str_2 = "o2EICU9\x0bp7"
    stack_node_8 = module_0.StackNode(str_2)
    bool_2 = False
    stack_node_9 = module_0.StackNode(bool_2)
    stack_node_10 = module_0.StackNode(bool_2)
    none_type_0 = None
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_12.push(none_type_0)
    assert len(stack_12) == 1
    stack_node_11 = module_0.StackNode(var_7)
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0


def test_case_656():
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    none_type_0 = None
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.push(none_type_0)
    assert len(stack_1) == 1
    var_3 = stack_1.pop()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_4 = stack_2.push(none_type_1)
    assert len(stack_2) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_2 = None
    stack_node_0 = module_0.StackNode(none_type_2)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_node_2 = module_0.StackNode(bool_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_6 = stack_5.__len__()
    assert var_6 == 0
    stack_node_3 = module_0.StackNode(var_6)
    assert stack_node_3.data == 0
    bool_1 = True
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_7 = stack_6.push(bool_1)
    assert len(stack_6) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_3 = None
    stack_node_4 = module_0.StackNode(none_type_3)
    stack_node_5 = module_0.StackNode(none_type_3)
    bool_2 = False
    stack_node_6 = module_0.StackNode(bool_2)
    none_type_4 = None
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_8 = stack_8.push(none_type_4)
    assert len(stack_8) == 1
    var_9 = stack_8.pop()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_10 = stack_9.__len__()
    assert var_10 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_11 = module_0.check_parenthesis(dict_1)
    assert var_11 is True
    stack_node_7 = module_0.StackNode(stack_11)
    assert len(stack_node_7.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_12 = stack_12.__len__()
    assert var_12 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_8 = module_0.StackNode(var_12)
    assert stack_node_8.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_13 = stack_14.push(stack_16)
    assert len(stack_14) == 1
    var_14 = stack_6.pop()
    assert len(stack_6) == 0


def test_case_657():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_node_7 = module_0.StackNode(stack_11)
    assert len(stack_node_7.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    bool_0 = False
    stack_node_8 = module_0.StackNode(bool_0)
    stack_node_9 = module_0.StackNode(bool_0)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_4 = stack_13.__len__()
    assert var_4 == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_5 = stack_14.__len__()
    assert var_5 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_11 = module_0.StackNode(var_5)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_15)
    assert len(stack_node_13.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    none_type_1 = None
    stack_node_14 = module_0.StackNode(none_type_1)
    stack_node_15 = module_0.StackNode(stack_16)
    assert len(stack_node_15.data) == 0
    var_6 = stack_16.push(none_type_1)
    assert len(stack_16) == 1
    assert len(stack_node_15.data) == 1
    bool_1 = False
    stack_node_16 = module_0.StackNode(bool_1)
    stack_node_17 = module_0.StackNode(bool_1)
    none_type_2 = None
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_7 = stack_17.push(none_type_2)
    assert len(stack_17) == 1
    stack_node_18 = module_0.StackNode(var_7)
    stack_node_19 = module_0.StackNode(stack_node_18)
    bool_2 = False
    stack_node_20 = module_0.StackNode(bool_2)
    stack_node_21 = module_0.StackNode(bool_2)
    stack_node_22 = module_0.StackNode(stack_node_2)


def test_case_658():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_0)
    assert len(stack_node_4.data) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    var_3 = stack_0.push(stack_node_3)
    assert len(stack_0) == 1
    assert len(stack_node_4.data) == 1
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_4 = stack_2.__len__()
    assert var_4 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    var_6 = stack_2.__len__()
    assert var_6 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_7 = stack_3.__len__()
    assert var_7 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_8 = module_0.check_parenthesis(dict_2)
    assert var_8 is True
    stack_node_6 = module_0.StackNode(stack_5)
    assert len(stack_node_6.data) == 0
    var_9 = stack_5.push(var_8)
    assert len(stack_5) == 1
    assert len(stack_node_6.data) == 1
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_10 = stack_6.__len__()
    assert var_10 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_7 = module_0.StackNode(var_10)
    assert stack_node_7.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_8 = module_0.StackNode(stack_6)
    assert len(stack_node_8.data) == 0
    stack_node_9 = module_0.StackNode(stack_9)
    assert len(stack_node_9.data) == 0
    bool_0 = False
    stack_node_10 = module_0.StackNode(bool_0)
    stack_node_11 = module_0.StackNode(bool_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0


def test_case_659():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_node_0 = module_0.StackNode(stack_0)
    assert len(stack_node_0.data) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    bool_1 = False
    stack_node_7 = module_0.StackNode(bool_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_8 = module_0.StackNode(complex_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_9 = module_0.StackNode(var_2)
    assert stack_node_9.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_node_10 = module_0.StackNode(var_2)
    assert stack_node_10.data == 0


def test_case_660():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_2 = module_0.StackNode(float_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_2 = module_0.check_parenthesis(dict_1)
    assert var_2 is True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_3)
    assert len(stack_node_6.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    str_0 = "o2EICU9\x0bp7"
    stack_node_8 = module_0.StackNode(str_0)
    dict_2 = {}
    stack_node_9 = module_0.StackNode(dict_2)
    stack_node_10 = module_0.StackNode(float_0)


def test_case_661():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    bool_0 = True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.push(bool_0)
    assert len(stack_1) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_1 = None
    stack_node_1 = module_0.StackNode(none_type_1)
    stack_node_2 = module_0.StackNode(none_type_1)
    none_type_2 = None
    stack_node_3 = module_0.StackNode(none_type_2)
    bool_1 = False
    stack_node_4 = module_0.StackNode(bool_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    bool_2 = True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.push(bool_2)
    assert len(stack_4) == 1
    stack_node_5 = module_0.StackNode(var_2)
    none_type_3 = None
    stack_node_6 = module_0.StackNode(none_type_3)
    bool_3 = False
    stack_node_7 = module_0.StackNode(bool_3)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_8 = module_0.StackNode(bool_3)
    none_type_4 = None
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.push(none_type_4)
    assert len(stack_6) == 1
    var_5 = stack_6.pop()
    assert len(stack_6) == 0
    none_type_5 = None
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.push(none_type_5)
    assert len(stack_7) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0


def test_case_662():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_1)
    assert len(stack_node_5.data) == 0
    stack_node_6 = module_0.StackNode(stack_node_0)


def test_case_663():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    bool_1 = True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.push(bool_1)
    assert len(stack_1) == 1
    stack_node_2 = module_0.StackNode(var_0)
    var_1 = stack_1.__len__()
    assert var_1 == 1


def test_case_664():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0


def test_case_665():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0


def test_case_666():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0


def test_case_667():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0


def test_case_668():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_3 = module_0.StackNode(stack_3)
    assert len(stack_node_3.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    dict_1 = {}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data is True
    str_0 = ""
    var_5 = module_0.check_parenthesis(str_0)
    assert var_5 is True
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0


def test_case_669():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_4)
    assert len(stack_node_10.data) == 0
    none_type_1 = None
    stack_node_11 = module_0.StackNode(none_type_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_12 = module_0.StackNode(var_5)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_node_12)
    stack_node_15 = module_0.StackNode(stack_7)
    assert len(stack_node_15.data) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    var_7 = stack_7.push(stack_node_14)
    assert len(stack_7) == 1
    assert len(stack_node_15.data) == 1
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_8 = stack_9.__len__()
    assert var_8 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_16 = module_0.StackNode(var_8)
    assert stack_node_16.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_17 = module_0.StackNode(stack_9)
    assert len(stack_node_17.data) == 0
    stack_node_18 = module_0.StackNode(stack_12)
    assert len(stack_node_18.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    none_type_2 = None
    stack_node_19 = module_0.StackNode(none_type_2)
    stack_node_20 = module_0.StackNode(stack_13)
    assert len(stack_node_20.data) == 0
    var_9 = stack_13.__len__()
    assert var_9 == 0
    dict_0 = {}
    var_10 = module_0.check_parenthesis(dict_0)
    assert var_10 is True
    var_11 = stack_13.__len__()
    assert var_11 == 0


def test_case_670():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    bool_1 = True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.push(bool_1)
    assert len(stack_1) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(none_type_0)
    var_2 = stack_1.push(stack_1)
    assert len(stack_1) == 2
    var_3 = stack_1.push(var_2)
    assert len(stack_1) == 3


def test_case_671():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(none_type_0)


def test_case_672():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    var_1 = stack_1.__len__()
    assert var_1 == 0


def test_case_673():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_node_3 = module_0.StackNode(stack_node_2)
    bool_1 = False
    stack_node_4 = module_0.StackNode(bool_1)
    stack_node_5 = module_0.StackNode(bool_1)
    none_type_1 = None
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.push(none_type_1)
    assert len(stack_1) == 1
    stack_node_6 = module_0.StackNode(var_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_5)
    assert len(stack_node_10.data) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    var_5 = stack_5.push(stack_node_9)
    assert len(stack_5) == 1
    assert len(stack_node_10.data) == 1
    stack_node_11 = module_0.StackNode(stack_1)
    assert len(stack_node_11.data) == 1


def test_case_674():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_5 = stack_8.__len__()
    assert var_5 == 0
    none_type_1 = None
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.push(none_type_1)
    assert len(stack_9) == 1
    var_7 = stack_9.pop()
    assert len(stack_9) == 0
    bool_0 = False
    stack_node_8 = module_0.StackNode(bool_0)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_8 = module_0.check_parenthesis(dict_1)
    assert var_8 is True
    stack_node_9 = module_0.StackNode(float_1)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_2 = None
    stack_node_10 = module_0.StackNode(none_type_2)
    stack_node_11 = module_0.StackNode(stack_11)
    assert len(stack_node_11.data) == 0
    var_9 = stack_11.__len__()
    assert var_9 == 0
    stack_node_12 = module_0.StackNode(stack_11)
    assert len(stack_node_12.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_10 = stack_12.__len__()
    assert var_10 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_11 = stack_14.__len__()
    assert var_11 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_13 = module_0.StackNode(var_11)
    assert stack_node_13.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_12 = stack_16.push(stack_18)
    assert len(stack_16) == 1
    stack_node_14 = module_0.StackNode(stack_node_13)


def test_case_675():
    bool_0 = True
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    stack_node_6 = module_0.StackNode(stack_6)
    assert len(stack_node_6.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_3 = stack_11.__len__()
    assert var_3 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_11)
    assert len(stack_node_11.data) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_node_12 = module_0.StackNode(stack_node_5)


def test_case_676():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    bool_0 = True
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(stack_3)
    assert len(stack_node_4.data) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    bool_1 = False
    stack_node_5 = module_0.StackNode(bool_1)
    stack_node_6 = module_0.StackNode(bool_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0


def test_case_677():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_node_3 = module_0.StackNode(bool_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    var_3 = stack_4.push(none_type_0)
    assert len(stack_4) == 1
    assert len(stack_node_5.data) == 1
    none_type_1 = None
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.push(none_type_1)
    assert len(stack_5) == 1
    stack_node_6 = module_0.StackNode(var_1)
    assert stack_node_6.data == 0


def test_case_678():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    none_type_0 = None
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.push(none_type_0)
    assert len(stack_1) == 1
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_2.__len__()
    assert var_4 == 0
    stack_node_3 = module_0.StackNode(stack_2)
    assert len(stack_node_3.data) == 0


def test_case_679():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_2 = module_0.StackNode(bool_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(var_6)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_7)
    assert len(stack_node_8.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    none_type_2 = None
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.push(none_type_2)
    assert len(stack_10) == 1
    var_8 = stack_10.pop()
    assert len(stack_10) == 0
    none_type_3 = None
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_9 = stack_11.push(none_type_3)
    assert len(stack_11) == 1
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_10 = module_0.check_parenthesis(dict_2)
    assert var_10 is True
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_11 = stack_14.__len__()
    assert var_11 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_10 = module_0.StackNode(var_11)
    assert stack_node_10.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_12 = stack_15.__len__()
    assert var_12 == 0
    var_13 = stack_17.__len__()
    assert var_13 == 0
    stack_node_11 = module_0.StackNode(var_7)


def test_case_680():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_1.data) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_3 = module_0.StackNode(float_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0


def test_case_681():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    bool_0 = True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_3.push(bool_0)
    assert len(stack_3) == 1
    stack_node_1 = module_0.StackNode(float_0)


def test_case_682():
    int_0 = -222
    set_0 = {int_0}
    stack_node_0 = module_0.StackNode(set_0)


def test_case_683():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    bool_0 = True
    stack_node_5 = module_0.StackNode(bool_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_7 = module_0.StackNode(stack_6)
    assert len(stack_node_7.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_8 = module_0.StackNode(stack_9)
    assert len(stack_node_8.data) == 0
    none_type_1 = None
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.push(none_type_1)
    assert len(stack_10) == 1
    var_4 = stack_10.pop()
    assert len(stack_10) == 0
    none_type_2 = None
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.push(none_type_2)
    assert len(stack_11) == 1
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    str_0 = ""
    var_6 = module_0.check_parenthesis(str_0)
    assert var_6 is True
    bool_1 = False
    stack_node_9 = module_0.StackNode(bool_1)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_7 = module_0.check_parenthesis(dict_0)
    assert var_7 is True
    stack_node_10 = module_0.StackNode(float_0)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    dict_1 = {var_7: var_7, float_0: stack_node_9}
    stack_node_11 = module_0.StackNode(dict_1)
    bool_2 = False
    stack_node_12 = module_0.StackNode(bool_2)
    stack_node_13 = module_0.StackNode(bool_2)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    var_9 = stack_10.__len__()
    assert var_9 == 0


def test_case_684():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data is True
    str_0 = "o2EICU9\x0bp7"
    stack_node_1 = module_0.StackNode(str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_8 = module_0.StackNode(bool_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    stack_node_9 = module_0.StackNode(bool_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_10 = module_0.StackNode(var_4)
    assert stack_node_10.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_11 = module_0.StackNode(stack_7)
    assert len(stack_node_11.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    bool_1 = False
    stack_node_12 = module_0.StackNode(bool_1)
    stack_node_13 = module_0.StackNode(bool_1)
    none_type_1 = None
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.push(none_type_1)
    assert len(stack_10) == 1
    stack_node_14 = module_0.StackNode(var_6)
    stack_node_15 = module_0.StackNode(stack_node_14)
    bool_2 = True
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.push(bool_2)
    assert len(stack_11) == 1
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_8 = stack_12.__len__()
    assert var_8 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_16 = module_0.StackNode(var_8)
    assert stack_node_16.data == 0
    stack_node_17 = module_0.StackNode(stack_node_16)
    stack_node_18 = module_0.StackNode(stack_12)
    assert len(stack_node_18.data) == 0
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_9 = module_0.check_parenthesis(dict_2)
    assert var_9 is True
    stack_node_19 = module_0.StackNode(float_2)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0


def test_case_685():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    bool_1 = False
    stack_node_5 = module_0.StackNode(bool_1)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    stack_node_6 = module_0.StackNode(float_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_7 = module_0.StackNode(var_1)
    assert stack_node_7.data is True


def test_case_686():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0


def test_case_687():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(stack_8)
    assert len(stack_node_3.data) == 0
    none_type_1 = None
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_2 = stack_9.push(none_type_1)
    assert len(stack_9) == 1
    var_3 = stack_9.pop()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0


def test_case_688():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(stack_4)
    assert len(stack_node_6.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    stack_node_8 = module_0.StackNode(stack_6)
    assert len(stack_node_8.data) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_node_9 = module_0.StackNode(stack_6)
    assert len(stack_node_9.data) == 0
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True


def test_case_689():
    bool_0 = True
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_0)
    assert len(stack_node_4.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    bool_1 = False
    stack_node_6 = module_0.StackNode(bool_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_2 = module_0.check_parenthesis(dict_1)
    assert var_2 is True
    stack_node_7 = module_0.StackNode(bool_1)
    var_3 = stack_4.push(float_1)
    assert len(stack_4) == 1


def test_case_690():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_node_0)


def test_case_691():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_3 = module_0.StackNode(float_0)
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_node_5 = module_0.StackNode(bool_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    var_7 = stack_9.__len__()
    assert var_7 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_1 = None
    stack_node_9 = module_0.StackNode(none_type_1)
    stack_node_10 = module_0.StackNode(stack_10)
    assert len(stack_node_10.data) == 0
    var_8 = stack_10.__len__()
    assert var_8 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_9 = module_0.check_parenthesis(str_0)
    assert var_9 is False
    stack_node_11 = module_0.StackNode(var_9)
    assert stack_node_11.data is False
    complex_0 = -3711.3 - 806.2j
    stack_node_12 = module_0.StackNode(complex_0)
    none_type_2 = None
    stack_node_13 = module_0.StackNode(none_type_2)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_3 = None
    stack_node_14 = module_0.StackNode(none_type_3)
    stack_node_15 = module_0.StackNode(stack_11)
    assert len(stack_node_15.data) == 0
    var_10 = stack_11.push(none_type_2)
    assert len(stack_11) == 1
    assert len(stack_node_15.data) == 1
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_11 = stack_13.__len__()
    assert var_11 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_16 = module_0.StackNode(var_11)
    assert stack_node_16.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_17 = module_0.StackNode(stack_14)
    assert len(stack_node_17.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    str_1 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_12 = module_0.check_parenthesis(str_1)
    assert var_12 is False
    stack_node_18 = module_0.StackNode(var_5)
    assert stack_node_18.data == 0


def test_case_692():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(stack_4)
    assert len(stack_node_3.data) == 0
    stack_node_4 = module_0.StackNode(stack_6)
    assert len(stack_node_4.data) == 0
    bool_0 = True
    stack_node_5 = module_0.StackNode(bool_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.__len__()
    assert var_2 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0


def test_case_693():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_node_6 = module_0.StackNode(stack_16)
    assert len(stack_node_6.data) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    stack_node_8 = module_0.StackNode(stack_17)
    assert len(stack_node_8.data) == 0
    var_6 = stack_17.push(none_type_1)
    assert len(stack_17) == 1
    assert len(stack_node_8.data) == 1
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_7 = stack_18.__len__()
    assert var_7 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_8 = stack_19.__len__()
    assert var_8 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_9 = module_0.StackNode(var_8)
    assert stack_node_9.data == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_10 = module_0.StackNode(stack_19)
    assert len(stack_node_10.data) == 0
    stack_node_11 = module_0.StackNode(stack_node_6)


def test_case_694():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(stack_4)
    assert len(stack_node_3.data) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_node_6 = module_0.StackNode(stack_5)
    assert len(stack_node_6.data) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_4 = module_0.check_parenthesis(str_0)
    assert var_4 is False
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data is False
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_2 = None
    stack_node_8 = module_0.StackNode(none_type_2)
    stack_node_9 = module_0.StackNode(stack_6)
    assert len(stack_node_9.data) == 0
    bool_1 = True
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.push(bool_1)
    assert len(stack_7) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_3 = None
    stack_node_10 = module_0.StackNode(none_type_3)
    stack_node_11 = module_0.StackNode(none_type_3)
    bool_2 = False
    stack_node_12 = module_0.StackNode(bool_2)
    stack_node_13 = module_0.StackNode(bool_2)
    none_type_4 = None
    stack_node_14 = module_0.StackNode(none_type_4)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.push(bool_2)
    assert len(stack_9) == 1
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_15 = module_0.StackNode(var_7)
    assert stack_node_15.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_8 = stack_15.__len__()
    assert var_8 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_9 = stack_8.push(stack_7)
    assert len(stack_8) == 1


def test_case_695():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_1.data) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_1)
    assert len(stack_node_5.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0


def test_case_696():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_0)
    assert stack_node_4.data == 0
    none_type_0 = None
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.push(none_type_0)
    assert len(stack_3) == 1
    var_2 = stack_3.pop()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0


def test_case_697():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_3 = module_0.StackNode(bool_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    str_0 = "o2EICU9\x0bp7"
    stack_node_5 = module_0.StackNode(str_0)
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_5 = stack_15.__len__()
    assert var_5 == 0
    int_0 = -460
    stack_node_8 = module_0.StackNode(int_0)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_6 = stack_16.__len__()
    assert var_6 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    var_7 = stack_11.__len__()
    assert var_7 == 0


def test_case_698():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(stack_5)
    assert len(stack_node_4.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0


def test_case_699():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_1.data) == 1
    dict_0 = {}
    stack_node_2 = module_0.StackNode(dict_0)
    int_0 = -460
    stack_node_3 = module_0.StackNode(int_0)
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_1)
    assert var_1 is True
    stack_node_4 = module_0.StackNode(float_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_node_6 = module_0.StackNode(none_type_1)
    none_type_2 = None
    stack_node_7 = module_0.StackNode(none_type_2)
    bool_0 = False
    stack_node_8 = module_0.StackNode(bool_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_3 = None
    stack_node_9 = module_0.StackNode(none_type_3)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    float_1 = 712.593
    dict_2 = {float_1: float_1, float_1: float_1}
    var_3 = module_0.check_parenthesis(dict_2)
    assert var_3 is True
    var_4 = stack_3.__len__()
    assert var_4 == 0
    var_5 = stack_1.push(stack_node_0)
    assert len(stack_1) == 1


def test_case_700():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0


def test_case_701():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_4 = module_0.StackNode(float_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_node_7 = module_0.StackNode(stack_6)
    assert len(stack_node_7.data) == 0
    str_0 = ""
    var_3 = module_0.check_parenthesis(str_0)
    assert var_3 is True
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data is True
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_7)
    assert len(stack_node_11.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0


def test_case_702():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_node_0 = module_0.StackNode(stack_0)
    assert len(stack_node_0.data) == 0
    stack_node_1 = module_0.StackNode(stack_node_0)


def test_case_703():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(stack_2)
    assert len(stack_node_0.data) == 0
    var_2 = stack_2.push(var_1)
    assert len(stack_2) == 1
    assert len(stack_node_0.data) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(stack_4)
    assert len(stack_node_2.data) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    stack_node_5 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    none_type_2 = None
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.push(none_type_2)
    assert len(stack_7) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0


def test_case_704():
    int_0 = 3109
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(int_0)
    assert len(stack_0) == 1


def test_case_705():
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data is True
    stack_node_1 = module_0.StackNode(str_0)


def test_case_706():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(stack_2)
    assert len(stack_node_0.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(stack_5)
    assert len(stack_node_2.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(stack_node_2)


def test_case_707():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    stack_node_6 = module_0.StackNode(stack_node_4)
    bool_1 = False
    stack_node_7 = module_0.StackNode(bool_1)
    stack_node_8 = module_0.StackNode(bool_1)
    none_type_1 = None
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.push(none_type_1)
    assert len(stack_3) == 1
    stack_node_9 = module_0.StackNode(var_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_2 = None
    stack_node_10 = module_0.StackNode(none_type_2)
    stack_node_11 = module_0.StackNode(stack_4)
    assert len(stack_node_11.data) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_node_12 = module_0.StackNode(stack_4)
    assert len(stack_node_12.data) == 0
    var_3 = stack_0.__len__()
    assert var_3 == 0


def test_case_708():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_1 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    var_1 = stack_4.push(none_type_0)
    assert len(stack_4) == 1
    assert len(stack_node_4.data) == 1
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_node_6 = module_0.StackNode(bool_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    bool_1 = False
    stack_node_7 = module_0.StackNode(bool_1)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_8 = module_0.StackNode(float_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0


def test_case_709():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(tuple_1)
    assert len(stack_0) == 1
    bool_1 = False
    stack_node_0 = module_0.StackNode(bool_1)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    str_1 = ""
    var_2 = module_0.check_parenthesis(str_1)
    assert var_2 is True
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data is True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    stack_node_5 = module_0.StackNode(none_type_0)


def test_case_710():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_2 = module_0.StackNode(bool_0)
    bool_1 = False
    set_0 = {bool_1, bool_1, bool_1, bool_1}
    tuple_0 = (bool_1, bool_1)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_1, set_0, tuple_0, str_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.push(tuple_1)
    assert len(stack_1) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    stack_node_3 = module_0.StackNode(stack_4)
    assert len(stack_node_3.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(stack_6)
    assert len(stack_node_5.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    bool_2 = False
    stack_node_7 = module_0.StackNode(bool_2)
    stack_node_8 = module_0.StackNode(bool_2)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_8 = stack_15.__len__()
    assert var_8 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_10 = module_0.StackNode(var_8)
    assert stack_node_10.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_9 = stack_17.push(stack_19)
    assert len(stack_17) == 1
    var_10 = stack_9.__len__()
    assert var_10 == 0


def test_case_711():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_node_6 = module_0.StackNode(stack_3)
    assert len(stack_node_6.data) == 0
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_9 = module_0.StackNode(stack_4)
    assert len(stack_node_9.data) == 0
    stack_node_10 = module_0.StackNode(stack_6)
    assert len(stack_node_10.data) == 0
    var_4 = stack_1.__len__()
    assert var_4 == 0


def test_case_712():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    dict_0 = {}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_3.__len__()
    assert var_4 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_4 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_node_7 = module_0.StackNode(stack_4)
    assert len(stack_node_7.data) == 0
    var_5 = stack_4.push(none_type_0)
    assert len(stack_4) == 1
    assert len(stack_node_7.data) == 1
    str_0 = ""
    var_6 = module_0.check_parenthesis(str_0)
    assert var_6 is True
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data is True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_2 = None
    stack_node_9 = module_0.StackNode(none_type_2)
    stack_node_10 = module_0.StackNode(stack_5)
    assert len(stack_node_10.data) == 0
    var_7 = stack_5.push(none_type_2)
    assert len(stack_5) == 1
    assert len(stack_node_10.data) == 1
    var_8 = stack_1.push(stack_node_6)
    assert len(stack_1) == 1


def test_case_713():
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data is True
    stack_node_1 = module_0.StackNode(str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_node_7 = module_0.StackNode(stack_node_2)


def test_case_714():
    dict_0 = {}
    stack_node_0 = module_0.StackNode(dict_0)
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0


def test_case_715():
    dict_0 = {}
    stack_node_0 = module_0.StackNode(dict_0)
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_1)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(stack_node_2)


def test_case_716():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(stack_5)
    assert len(stack_node_2.data) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    var_6 = stack_7.__len__()
    assert var_6 == 0
    bool_0 = True
    stack_node_4 = module_0.StackNode(bool_0)
    bool_1 = False
    stack_node_5 = module_0.StackNode(bool_1)
    stack_node_6 = module_0.StackNode(bool_1)
    none_type_1 = None
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_7 = stack_8.push(none_type_1)
    assert len(stack_8) == 1
    stack_node_7 = module_0.StackNode(var_7)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_2 = None
    stack_node_8 = module_0.StackNode(none_type_2)
    stack_node_9 = module_0.StackNode(stack_9)
    assert len(stack_node_9.data) == 0
    var_8 = stack_9.__len__()
    assert var_8 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_9 = module_0.check_parenthesis(str_0)
    assert var_9 is False
    stack_node_10 = module_0.StackNode(var_9)
    assert stack_node_10.data is False
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_10 = stack_10.__len__()
    assert var_10 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_11 = module_0.StackNode(var_10)
    assert stack_node_11.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_12 = module_0.StackNode(stack_10)
    assert len(stack_node_12.data) == 0
    str_1 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_11 = module_0.check_parenthesis(str_1)
    assert var_11 is False
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_12 = stack_14.__len__()
    assert var_12 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_13 = module_0.check_parenthesis(dict_1)
    assert var_13 is True
    stack_node_13 = module_0.StackNode(stack_16)
    assert len(stack_node_13.data) == 0
    var_14 = stack_12.push(var_13)
    assert len(stack_12) == 1


def test_case_717():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    str_0 = ""
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data is True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_1 = module_0.StackNode(stack_4)
    assert len(stack_node_1.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_4)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0


def test_case_718():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data is True
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    bool_1 = True
    stack_node_3 = module_0.StackNode(bool_1)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    stack_node_4 = module_0.StackNode(float_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_5 = module_0.check_parenthesis(dict_2)
    assert var_5 is True
    stack_node_5 = module_0.StackNode(stack_6)
    assert len(stack_node_5.data) == 0
    bool_2 = False
    stack_node_6 = module_0.StackNode(bool_2)
    stack_node_7 = module_0.StackNode(bool_2)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    int_0 = 3109
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_7 = stack_8.push(int_0)
    assert len(stack_8) == 1
    str_0 = ""
    var_8 = module_0.check_parenthesis(str_0)
    assert var_8 is True
    stack_node_8 = module_0.StackNode(var_8)
    assert stack_node_8.data is True
    stack_node_9 = module_0.StackNode(str_0)
    var_9 = stack_8.peek()
    assert var_9 == 3109


def test_case_719():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(tuple_1)
    assert len(stack_0) == 1
    str_1 = ""
    var_1 = module_0.check_parenthesis(str_1)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data is True
    stack_node_1 = module_0.StackNode(str_1)
    bool_1 = True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.push(bool_1)
    assert len(stack_1) == 1
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 1
    bool_2 = False
    stack_node_3 = module_0.StackNode(bool_2)
    stack_node_4 = module_0.StackNode(bool_2)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    int_0 = -460
    stack_node_5 = module_0.StackNode(int_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_3)
    assert len(stack_node_9.data) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    int_1 = 3109
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_5 = stack_5.push(int_1)
    assert len(stack_5) == 1
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    stack_node_10 = module_0.StackNode(float_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_0 = None
    stack_node_11 = module_0.StackNode(none_type_0)
    stack_node_12 = module_0.StackNode(none_type_0)
    var_7 = stack_4.__len__()
    assert var_7 == 0


def test_case_720():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(stack_2)
    assert len(stack_node_0.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_2 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_node_5 = module_0.StackNode(stack_7)
    assert len(stack_node_5.data) == 0
    var_4 = stack_7.push(none_type_0)
    assert len(stack_7) == 1
    assert len(stack_node_5.data) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_10.push(stack_12)
    assert len(stack_10) == 1
    none_type_2 = None
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.push(none_type_2)
    assert len(stack_13) == 1
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_7 = module_0.StackNode(var_8)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_14)
    assert len(stack_node_10.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_11 = module_0.StackNode(stack_16)
    assert len(stack_node_11.data) == 0
    dict_1 = {}
    var_9 = module_0.check_parenthesis(dict_1)
    assert var_9 is True
    stack_node_12 = module_0.StackNode(stack_3)
    assert len(stack_node_12.data) == 0


def test_case_721():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_2)
    assert len(stack_node_3.data) == 0
    var_0 = stack_2.push(none_type_1)
    assert len(stack_2) == 1
    assert len(stack_node_3.data) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_4 = module_0.StackNode(stack_5)
    assert len(stack_node_4.data) == 0
    var_3 = stack_5.push(var_2)
    assert len(stack_5) == 1
    assert len(stack_node_4.data) == 1
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(stack_6)
    assert len(stack_node_5.data) == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    set_0 = set()
    var_4 = stack_2.push(set_0)
    assert len(stack_2) == 2
    assert len(stack_node_3.data) == 2


def test_case_722():
    dict_0 = {}
    stack_node_0 = module_0.StackNode(dict_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_2.data) == 1
    var_1 = stack_0.push(stack_node_0)
    assert len(stack_0) == 2
    assert len(stack_node_2.data) == 2


def test_case_723():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_1.data) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(stack_2)
    assert len(stack_node_3.data) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    bool_0 = True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.push(bool_0)
    assert len(stack_4) == 1
    dict_0 = {}
    stack_node_4 = module_0.StackNode(dict_0)
    str_0 = ""
    var_4 = module_0.check_parenthesis(str_0)
    assert var_4 is True
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data is True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_8.push(stack_10)
    assert len(stack_8) == 1
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    bool_1 = False
    stack_node_8 = module_0.StackNode(bool_1)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    bool_2 = True
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_12.push(bool_2)
    assert len(stack_12) == 1
    stack_node_9 = module_0.StackNode(var_7)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    none_type_2 = None
    stack_node_10 = module_0.StackNode(none_type_2)
    stack_node_11 = module_0.StackNode(stack_13)
    assert len(stack_node_11.data) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    int_0 = 2594
    stack_node_12 = module_0.StackNode(int_0)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    none_type_3 = None
    stack_node_13 = module_0.StackNode(none_type_3)
    stack_node_14 = module_0.StackNode(stack_14)
    assert len(stack_node_14.data) == 0
    stack_node_15 = module_0.StackNode(stack_node_13)
    bool_3 = True
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_9 = stack_15.push(bool_3)
    assert len(stack_15) == 1
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_10 = stack_16.__len__()
    assert var_10 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_16 = module_0.StackNode(var_10)
    assert stack_node_16.data == 0
    stack_node_17 = module_0.StackNode(stack_node_16)
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_11 = stack_8.pop()
    assert len(stack_8) == 0
    assert f"{type(var_11).__module__}.{type(var_11).__qualname__}" == "stack1.Stack"
    assert len(var_11) == 0


def test_case_724():
    dict_0 = {}
    stack_node_0 = module_0.StackNode(dict_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_2.data) == 1
    var_1 = stack_0.push(stack_node_0)
    assert len(stack_0) == 2
    assert len(stack_node_2.data) == 2
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    var_5 = stack_4.__len__()
    assert var_5 == 0


def test_case_725():
    dict_0 = {}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data is True
    stack_node_1 = module_0.StackNode(stack_node_0)


def test_case_726():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    stack_node_8 = module_0.StackNode(stack_6)
    assert len(stack_node_8.data) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_node_9 = module_0.StackNode(stack_6)
    assert len(stack_node_9.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_1 = None
    stack_node_10 = module_0.StackNode(none_type_1)
    stack_node_11 = module_0.StackNode(stack_10)
    assert len(stack_node_11.data) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0


def test_case_727():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    var_1 = stack_0.push(stack_0)
    assert len(stack_0) == 2


def test_case_728():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    str_0 = ""
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is True
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data is True
    stack_node_5 = module_0.StackNode(str_0)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_2 = module_0.check_parenthesis(dict_1)
    assert var_2 is True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0


def test_case_729():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.push(bool_0)
    assert len(stack_3) == 1


def test_case_730():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_node_7 = module_0.StackNode(stack_4)
    assert len(stack_node_7.data) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_4 = module_0.check_parenthesis(str_0)
    assert var_4 is False
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data is False
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_10 = module_0.StackNode(stack_5)
    assert len(stack_node_10.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_11 = module_0.StackNode(var_6)
    assert stack_node_11.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_12 = module_0.StackNode(stack_9)
    assert len(stack_node_12.data) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    str_1 = ""
    var_8 = module_0.check_parenthesis(str_1)
    assert var_8 is True
    stack_node_13 = module_0.StackNode(var_8)
    assert stack_node_13.data is True
    none_type_2 = None
    stack_node_14 = module_0.StackNode(none_type_2)
    bool_0 = False
    stack_node_15 = module_0.StackNode(bool_0)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_16 = module_0.StackNode(stack_1)
    assert len(stack_node_16.data) == 0


def test_case_731():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    dict_0 = {}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.push(none_type_0)
    assert len(stack_2) == 1
    stack_node_3 = module_0.StackNode(var_3)
    bool_1 = False
    stack_node_4 = module_0.StackNode(bool_1)
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_5 = module_0.StackNode(float_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    dict_2 = {var_4: var_4, float_0: stack_node_4}
    stack_node_6 = module_0.StackNode(dict_2)
    str_0 = ""
    var_5 = module_0.check_parenthesis(str_0)
    assert var_5 is True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_6 = stack_4.__len__()
    assert var_6 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_7 = stack_5.__len__()
    assert var_7 == 0
    var_8 = stack_7.__len__()
    assert var_8 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0


def test_case_732():
    dict_0 = {}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_0.push(var_0)
    assert len(stack_0) == 1


def test_case_733():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_node_5 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.push(none_type_0)
    assert len(stack_3) == 1
    stack_node_6 = module_0.StackNode(var_1)
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_8 = module_0.StackNode(var_2)
    assert stack_node_8.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_1 = None
    stack_node_9 = module_0.StackNode(none_type_1)
    stack_node_10 = module_0.StackNode(none_type_1)
    var_3 = stack_1.__len__()
    assert var_3 == 0


def test_case_734():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(stack_2)
    assert len(stack_node_0.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    str_0 = ""
    var_3 = module_0.check_parenthesis(str_0)
    assert var_3 is True
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data is True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(stack_5)
    assert len(stack_node_4.data) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    stack_node_5 = module_0.StackNode(float_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_node_7 = module_0.StackNode(none_type_0)
    stack_node_8 = module_0.StackNode(stack_7)
    assert len(stack_node_8.data) == 0
    bool_0 = False
    stack_node_9 = module_0.StackNode(bool_0)
    stack_node_10 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_node_11 = module_0.StackNode(none_type_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.push(bool_0)
    assert len(stack_8) == 1
    bool_1 = False
    stack_node_12 = module_0.StackNode(bool_1)
    stack_node_13 = module_0.StackNode(bool_1)
    none_type_2 = None
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_7 = stack_9.push(none_type_2)
    assert len(stack_9) == 1
    stack_node_14 = module_0.StackNode(var_7)
    stack_node_15 = module_0.StackNode(stack_node_14)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_8 = stack_10.__len__()
    assert var_8 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_16 = module_0.StackNode(var_8)
    assert stack_node_16.data == 0
    stack_node_17 = module_0.StackNode(stack_node_16)
    stack_node_18 = module_0.StackNode(stack_node_16)
    var_9 = stack_11.__len__()
    assert var_9 == 0
    bytes_0 = b"\xf7\xbd\x8d'\xa8\xb7\xda:\x8ffv\xbecJ"
    stack_node_19 = module_0.StackNode(bytes_0)


def test_case_735():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_7)
    assert len(stack_node_7.data) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    bool_0 = True
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_8 = stack_12.push(bool_0)
    assert len(stack_12) == 1
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_9 = stack_13.__len__()
    assert var_9 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_9 = module_0.StackNode(var_9)
    assert stack_node_9.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_10 = stack_15.push(stack_17)
    assert len(stack_15) == 1
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_11 = stack_18.__len__()
    assert var_11 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_10 = module_0.StackNode(var_11)
    assert stack_node_10.data == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_11 = module_0.StackNode(stack_19)
    assert len(stack_node_11.data) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0


def test_case_736():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    str_0 = ""
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is True
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data is True
    stack_node_3 = module_0.StackNode(str_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    dict_0 = {}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_2.__len__()
    assert var_4 == 0
    var_5 = stack_1.push(stack_node_1)
    assert len(stack_1) == 1


def test_case_737():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_1)
    assert len(stack_node_5.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_6 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_1 = None
    stack_node_8 = module_0.StackNode(none_type_1)
    stack_node_9 = module_0.StackNode(stack_3)
    assert len(stack_node_9.data) == 0
    var_2 = stack_3.push(none_type_0)
    assert len(stack_3) == 1
    assert len(stack_node_9.data) == 1
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_10 = module_0.StackNode(var_3)
    assert stack_node_10.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    bool_1 = False
    stack_node_11 = module_0.StackNode(bool_1)
    stack_node_12 = module_0.StackNode(bool_1)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_12.__len__()
    assert var_7 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_8 = module_0.check_parenthesis(dict_0)
    assert var_8 is True
    stack_node_13 = module_0.StackNode(stack_14)
    assert len(stack_node_13.data) == 0
    var_9 = stack_14.push(var_8)
    assert len(stack_14) == 1
    assert len(stack_node_13.data) == 1
    var_10 = stack_5.push(var_9)
    assert len(stack_5) == 1


def test_case_738():
    float_0 = -0.8
    stack_node_0 = module_0.StackNode(float_0)


def test_case_739():
    dict_0 = {}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data is True
    stack_node_1 = module_0.StackNode(stack_node_0)
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_node_3 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_4 = module_0.StackNode(var_1)
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_1)
    assert len(stack_node_8.data) == 0
    stack_node_9 = module_0.StackNode(var_1)


def test_case_740():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_2 = module_0.check_parenthesis(str_0)
    assert var_2 is False
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data is False
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0


def test_case_741():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    var_1 = stack_0.push(stack_0)
    assert len(stack_0) == 2
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_0 = module_0.StackNode(none_type_1)
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(stack_6)
    assert len(stack_node_7.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_10)
    assert len(stack_node_10.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_11 = module_0.StackNode(var_5)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    none_type_2 = None
    stack_node_13 = module_0.StackNode(none_type_2)
    stack_node_14 = module_0.StackNode(stack_node_2)


def test_case_742():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    str_0 = ""
    var_2 = module_0.check_parenthesis(str_0)
    assert var_2 is True
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data is True
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_5 = module_0.StackNode(stack_8)
    assert len(stack_node_5.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    dict_0 = {}
    stack_node_6 = module_0.StackNode(dict_0)
    str_1 = ""
    var_4 = module_0.check_parenthesis(str_1)
    assert var_4 is True
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data is True
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_9 = module_0.StackNode(bool_0)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    bool_1 = True
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_5 = stack_14.push(bool_1)
    assert len(stack_14) == 1
    stack_node_10 = module_0.StackNode(var_5)
    bool_2 = False
    set_0 = {bool_2, bool_2, bool_2, bool_2}
    tuple_0 = (bool_2, bool_2)
    str_2 = "B@kK%+yXf"
    tuple_1 = (bool_2, set_0, tuple_0, str_2)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_6 = stack_15.push(tuple_1)
    assert len(stack_15) == 1
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_7 = stack_17.__len__()
    assert var_7 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_8 = module_0.check_parenthesis(dict_1)
    assert var_8 is True
    stack_node_11 = module_0.StackNode(stack_19)
    assert len(stack_node_11.data) == 0
    var_9 = stack_19.push(var_8)
    assert len(stack_19) == 1
    assert len(stack_node_11.data) == 1
    none_type_1 = None
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_10 = stack_20.push(none_type_1)
    assert len(stack_20) == 1
    var_11 = stack_20.pop()
    assert len(stack_20) == 0
    none_type_2 = None
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_12 = stack_21.push(none_type_2)
    assert len(stack_21) == 1
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    var_13 = stack_12.__len__()
    assert var_13 == 0


def test_case_743():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    int_0 = -222
    set_0 = {int_0}
    stack_node_1 = module_0.StackNode(set_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0


def test_case_744():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    stack_node_6 = module_0.StackNode(stack_node_4)
    bool_0 = False
    stack_node_7 = module_0.StackNode(bool_0)
    stack_node_8 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_node_9 = module_0.StackNode(none_type_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.push(bool_0)
    assert len(stack_3) == 1
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0


def test_case_745():
    dict_0 = {}
    stack_node_0 = module_0.StackNode(dict_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_0)
    assert stack_node_3.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_1)
    assert var_2 is True
    var_3 = stack_4.__len__()
    assert var_3 == 0
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    float_1 = 712.593
    dict_2 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_2)
    assert var_4 is True
    stack_node_7 = module_0.StackNode(float_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_7)
    assert len(stack_node_11.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_1 = None
    stack_node_12 = module_0.StackNode(none_type_1)
    stack_node_13 = module_0.StackNode(stack_9)
    assert len(stack_node_13.data) == 0
    var_7 = stack_9.push(none_type_1)
    assert len(stack_9) == 1
    assert len(stack_node_13.data) == 1
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_8 = stack_10.__len__()
    assert var_8 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_14 = module_0.StackNode(var_8)
    assert stack_node_14.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_15 = module_0.StackNode(stack_10)
    assert len(stack_node_15.data) == 0
    var_9 = module_0.check_parenthesis(dict_2)
    assert var_9 is True


def test_case_746():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_0.__len__()
    assert var_2 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_3 = stack_1.__len__()
    assert var_3 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_5 = stack_4.__len__()
    assert var_5 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    var_7 = stack_5.__len__()
    assert var_7 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_8 = stack_7.__len__()
    assert var_8 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_8 = module_0.StackNode(var_8)
    assert stack_node_8.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_9 = stack_10.__len__()
    assert var_9 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_9 = module_0.StackNode(var_9)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    bool_0 = True
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_10 = stack_12.push(bool_0)
    assert len(stack_12) == 1
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_11 = stack_13.__len__()
    assert var_11 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_11 = module_0.StackNode(var_11)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_12 = stack_16.__len__()
    assert var_12 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_13 = module_0.StackNode(var_12)
    assert stack_node_13.data == 0
    dict_2 = {}
    var_13 = module_0.check_parenthesis(dict_2)
    assert var_13 is True
    var_14 = stack_17.__len__()
    assert var_14 == 0
    var_15 = stack_10.__len__()
    assert var_15 == 0


def test_case_747():
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    dict_0 = {}
    stack_node_0 = module_0.StackNode(dict_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    bool_1 = False
    stack_node_3 = module_0.StackNode(bool_1)
    stack_node_4 = module_0.StackNode(bool_1)
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.push(bool_1)
    assert len(stack_1) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    none_type_1 = None
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.push(none_type_1)
    assert len(stack_7) == 1
    var_6 = stack_7.push(stack_7)
    assert len(stack_7) == 2
    bool_2 = False
    stack_node_7 = module_0.StackNode(bool_2)
    stack_node_8 = module_0.StackNode(bool_2)
    none_type_2 = None
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_7 = stack_8.push(none_type_2)
    assert len(stack_8) == 1
    stack_node_9 = module_0.StackNode(var_7)
    stack_node_10 = module_0.StackNode(stack_node_9)
    int_0 = -460
    stack_node_11 = module_0.StackNode(int_0)
    var_8 = stack_6.__len__()
    assert var_8 == 0


def test_case_748():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.push(tuple_1)
    assert len(stack_4) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_10)
    assert len(stack_node_7.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_9 = module_0.StackNode(stack_13)
    assert len(stack_node_9.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_7 = stack_16.__len__()
    assert var_7 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_10 = module_0.StackNode(var_7)
    assert stack_node_10.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_11 = module_0.StackNode(stack_17)
    assert len(stack_node_11.data) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    none_type_0 = None
    stack_node_12 = module_0.StackNode(none_type_0)
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_8 = stack_20.__len__()
    assert var_8 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_13 = module_0.StackNode(var_8)
    assert stack_node_13.data == 0
    stack_node_14 = module_0.StackNode(stack_node_13)
    stack_node_15 = module_0.StackNode(stack_node_13)
    stack_node_16 = module_0.StackNode(stack_20)
    assert len(stack_node_16.data) == 0
    var_9 = stack_21.__len__()
    assert var_9 == 0
    var_10 = stack_20.push(stack_node_15)
    assert len(stack_20) == 1
    assert len(stack_node_16.data) == 1
    var_11 = stack_1.push(stack_node_9)
    assert len(stack_1) == 1


def test_case_749():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_node_5 = module_0.StackNode(bool_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    stack_node_8 = module_0.StackNode(stack_6)
    assert len(stack_node_8.data) == 0
    var_6 = stack_6.push(var_5)
    assert len(stack_6) == 1
    assert len(stack_node_8.data) == 1
    var_7 = stack_3.__len__()
    assert var_7 == 0


def test_case_750():
    dict_0 = {}
    stack_node_0 = module_0.StackNode(dict_0)
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0


def test_case_751():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    var_1 = stack_0.pop()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.push(none_type_1)
    assert len(stack_1) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_0 = module_0.StackNode(var_3)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_4)
    assert len(stack_node_2.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(stack_6)
    assert len(stack_node_4.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    int_0 = 2594
    stack_node_5 = module_0.StackNode(int_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data == 0
    bool_0 = True
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.push(bool_0)
    assert len(stack_10) == 1
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_8 = module_0.check_parenthesis(dict_0)
    assert var_8 is True
    stack_node_7 = module_0.StackNode(float_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_2 = None
    stack_node_8 = module_0.StackNode(none_type_2)
    stack_node_9 = module_0.StackNode(none_type_2)
    stack_node_10 = module_0.StackNode(stack_11)
    assert len(stack_node_10.data) == 0
    float_1 = -0.8
    stack_node_11 = module_0.StackNode(float_1)
    var_9 = stack_4.__len__()
    assert var_9 == 0


def test_case_752():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(stack_2)
    assert len(stack_node_0.data) == 0
    var_2 = stack_2.push(var_1)
    assert len(stack_2) == 1
    assert len(stack_node_0.data) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    none_type_0 = None
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.push(none_type_0)
    assert len(stack_5) == 1
    var_5 = stack_5.push(stack_5)
    assert len(stack_5) == 2
    var_6 = stack_5.push(dict_0)
    assert len(stack_5) == 3


def test_case_753():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    none_type_1 = None
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.push(none_type_1)
    assert len(stack_1) == 1
    var_2 = stack_1.pop()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    stack_node_3 = module_0.StackNode(stack_4)
    assert len(stack_node_3.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_4 = module_0.StackNode(complex_0)
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_node_6 = module_0.StackNode(bool_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    str_0 = ""
    var_5 = module_0.check_parenthesis(str_0)
    assert var_5 is True
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data is True
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_2 = None
    stack_node_9 = module_0.StackNode(none_type_2)
    stack_node_10 = module_0.StackNode(stack_7)
    assert len(stack_node_10.data) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    str_1 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_7 = module_0.check_parenthesis(str_1)
    assert var_7 is False
    stack_node_11 = module_0.StackNode(var_7)
    assert stack_node_11.data is False
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_8 = stack_8.__len__()
    assert var_8 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_12 = module_0.StackNode(var_8)
    assert stack_node_12.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_9 = stack_9.__len__()
    assert var_9 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0


def test_case_754():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    bool_1 = False
    stack_node_5 = module_0.StackNode(bool_1)
    stack_node_6 = module_0.StackNode(bool_1)
    none_type_2 = None
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.push(none_type_2)
    assert len(stack_3) == 1
    stack_node_7 = module_0.StackNode(var_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_8 = module_0.StackNode(stack_4)
    assert len(stack_node_8.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_9 = module_0.StackNode(var_2)
    assert stack_node_9.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_3 = None
    stack_node_10 = module_0.StackNode(none_type_3)
    stack_node_11 = module_0.StackNode(stack_8)
    assert len(stack_node_11.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_12 = module_0.StackNode(var_5)
    assert stack_node_12.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_13 = module_0.StackNode(stack_12)
    assert len(stack_node_13.data) == 0
    var_6 = stack_11.push(none_type_2)
    assert len(stack_11) == 1


def test_case_755():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0


def test_case_756():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    dict_0 = {}
    stack_node_2 = module_0.StackNode(dict_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(stack_3)
    assert len(stack_node_4.data) == 0
    var_1 = stack_3.push(none_type_0)
    assert len(stack_3) == 1
    assert len(stack_node_4.data) == 1
    var_2 = stack_3.push(stack_node_2)
    assert len(stack_3) == 2
    assert len(stack_node_4.data) == 2
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_5 = module_0.StackNode(stack_6)
    assert len(stack_node_5.data) == 0
    var_5 = stack_6.push(var_4)
    assert len(stack_6) == 1
    assert len(stack_node_5.data) == 1
    bool_0 = True
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.push(bool_0)
    assert len(stack_7) == 1
    stack_node_6 = module_0.StackNode(stack_7)
    assert len(stack_node_6.data) == 1
    bool_1 = False
    stack_node_7 = module_0.StackNode(bool_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_7 = stack_8.__len__()
    assert var_7 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    float_1 = 712.593
    dict_2 = {float_1: float_1, float_1: float_1}
    var_8 = module_0.check_parenthesis(dict_2)
    assert var_8 is True
    stack_node_8 = module_0.StackNode(float_1)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_1 = None
    stack_node_9 = module_0.StackNode(none_type_1)
    stack_node_10 = module_0.StackNode(none_type_1)
    stack_node_11 = module_0.StackNode(stack_11)
    assert len(stack_node_11.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_9 = stack_12.__len__()
    assert var_9 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_12 = module_0.StackNode(var_9)
    assert stack_node_12.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_10 = stack_13.__len__()
    assert var_10 == 0
    var_11 = stack_13.__len__()
    assert var_11 == 0
    float_2 = -0.8
    stack_node_13 = module_0.StackNode(float_2)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0


def test_case_757():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    bool_0 = True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.push(bool_0)
    assert len(stack_3) == 1
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 1
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    stack_node_3 = module_0.StackNode(float_1)
    dict_2 = {}
    var_4 = module_0.check_parenthesis(dict_2)
    assert var_4 is True
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data is True
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_5 = stack_4.__len__()
    assert var_5 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_5.__len__()
    assert var_6 == 0
    var_7 = stack_7.__len__()
    assert var_7 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_8 = stack_9.__len__()
    assert var_8 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_7 = module_0.StackNode(var_8)
    assert stack_node_7.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_8 = module_0.StackNode(stack_9)
    assert len(stack_node_8.data) == 0
    var_9 = stack_11.__len__()
    assert var_9 == 0
    dict_3 = {}
    stack_node_9 = module_0.StackNode(dict_3)
    str_0 = ""
    var_10 = module_0.check_parenthesis(str_0)
    assert var_10 is True
    stack_node_10 = module_0.StackNode(var_10)
    assert stack_node_10.data is True
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_11 = stack_14.__len__()
    assert var_11 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_11 = module_0.StackNode(var_11)
    assert stack_node_11.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_12 = module_0.StackNode(stack_15)
    assert len(stack_node_12.data) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0


def test_case_758():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data is True
    dict_1 = {}
    var_2 = module_0.check_parenthesis(dict_1)
    assert var_2 is True
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data is True
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_1)


def test_case_759():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_2)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_node_3 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_1 = stack_6.push(none_type_0)
    assert len(stack_6) == 1
    stack_node_4 = module_0.StackNode(var_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_node_6 = module_0.StackNode(stack_7)
    assert len(stack_node_6.data) == 0
    bool_1 = True
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.push(bool_1)
    assert len(stack_8) == 1
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_8 = module_0.StackNode(stack_9)
    assert len(stack_node_8.data) == 0
    stack_node_9 = module_0.StackNode(stack_12)
    assert len(stack_node_9.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_4 = stack_13.__len__()
    assert var_4 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_10 = module_0.StackNode(var_4)
    assert stack_node_10.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_5 = stack_16.__len__()
    assert var_5 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_6 = stack_18.__len__()
    assert var_6 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_11 = module_0.StackNode(var_6)
    assert stack_node_11.data == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_7 = stack_20.__len__()
    assert var_7 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    int_0 = 2594
    stack_node_12 = module_0.StackNode(int_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_8 = module_0.check_parenthesis(dict_0)
    assert var_8 is True
    stack_node_13 = module_0.StackNode(float_0)
    var_9 = stack_5.__len__()
    assert var_9 == 0


def test_case_760():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    var_1 = stack_1.__len__()
    assert var_1 == 0
    none_type_0 = None
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.push(none_type_0)
    assert len(stack_2) == 1
    var_3 = stack_2.pop()
    assert len(stack_2) == 0
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_node_4 = module_0.StackNode(bool_0)
    dict_0 = {}
    stack_node_5 = module_0.StackNode(dict_0)
    str_0 = ""
    var_4 = module_0.check_parenthesis(str_0)
    assert var_4 is True
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data is True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    bool_1 = False
    stack_node_7 = module_0.StackNode(bool_1)
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    stack_node_8 = module_0.StackNode(float_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    dict_2 = {var_5: var_5, float_0: stack_node_7}
    stack_node_9 = module_0.StackNode(dict_2)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0


def test_case_761():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_0 = module_0.StackNode(stack_3)
    assert len(stack_node_0.data) == 0
    var_3 = stack_3.push(var_2)
    assert len(stack_3) == 1
    assert len(stack_node_0.data) == 1
    none_type_0 = None
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.push(none_type_0)
    assert len(stack_4) == 1
    var_5 = stack_4.push(stack_4)
    assert len(stack_4) == 2
    dict_1 = {}
    stack_node_1 = module_0.StackNode(dict_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_5)
    assert len(stack_node_3.data) == 0
    var_6 = stack_5.push(none_type_1)
    assert len(stack_5) == 1
    assert len(stack_node_3.data) == 1
    var_7 = stack_5.push(stack_node_1)
    assert len(stack_5) == 2
    assert len(stack_node_3.data) == 2
    str_0 = ""
    var_8 = module_0.check_parenthesis(str_0)
    assert var_8 is True
    stack_node_4 = module_0.StackNode(var_8)
    assert stack_node_4.data is True
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_9 = stack_6.__len__()
    assert var_9 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_9)
    assert stack_node_5.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_2 = None
    stack_node_6 = module_0.StackNode(none_type_2)
    stack_node_7 = module_0.StackNode(stack_9)
    assert len(stack_node_7.data) == 0
    int_0 = -222
    set_0 = {int_0}
    stack_node_8 = module_0.StackNode(set_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0


def test_case_762():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_2)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.push(var_0)
    assert len(stack_5) == 1


def test_case_763():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(tuple_1)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    str_1 = ""
    var_1 = module_0.check_parenthesis(str_1)
    assert var_1 is True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_0 = module_0.StackNode(var_2)
    assert stack_node_0.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(stack_4)
    assert len(stack_node_1.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    dict_0 = {}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data is True
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_11.push(stack_13)
    assert len(stack_11) == 1
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_5 = module_0.StackNode(var_7)
    assert stack_node_5.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_8 = stack_15.__len__()
    assert var_8 == 0
    var_9 = stack_17.__len__()
    assert var_9 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_10 = stack_19.__len__()
    assert var_10 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_6 = module_0.StackNode(var_10)
    assert stack_node_6.data == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_7 = module_0.StackNode(stack_19)
    assert len(stack_node_7.data) == 0
    stack_node_8 = module_0.StackNode(stack_22)
    assert len(stack_node_8.data) == 0
    dict_1 = {}
    var_11 = module_0.check_parenthesis(dict_1)
    assert var_11 is True
    stack_node_9 = module_0.StackNode(var_11)
    assert stack_node_9.data is True
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_12 = stack_23.__len__()
    assert var_12 == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    var_13 = stack_23.push(var_11)
    assert len(stack_23) == 1
    bool_1 = False
    stack_node_10 = module_0.StackNode(bool_1)
    stack_node_11 = module_0.StackNode(bool_1)
    none_type_0 = None
    stack_node_12 = module_0.StackNode(none_type_0)
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0
    var_14 = stack_26.push(bool_1)
    assert len(stack_26) == 1
    stack_node_13 = module_0.StackNode(var_4)
    assert stack_node_13.data is True


def test_case_764():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1


def test_case_765():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_1 = module_0.check_parenthesis(dict_1)
    assert var_1 is True
    stack_node_4 = module_0.StackNode(float_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    dict_2 = {var_1: var_1, float_1: stack_node_3}
    stack_node_5 = module_0.StackNode(dict_2)
    int_0 = 3109
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.push(int_0)
    assert len(stack_2) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_3)
    assert len(stack_node_9.data) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    var_5 = stack_3.push(stack_node_8)
    assert len(stack_3) == 1
    assert len(stack_node_9.data) == 1
    bool_1 = False
    stack_node_10 = module_0.StackNode(bool_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_1 = None
    stack_node_11 = module_0.StackNode(none_type_1)
    stack_node_12 = module_0.StackNode(stack_5)
    assert len(stack_node_12.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_13 = module_0.StackNode(var_6)
    assert stack_node_13.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0


def test_case_766():
    bool_0 = True
    stack_node_0 = module_0.StackNode(bool_0)
    dict_0 = {}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data is True
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_node_7 = module_0.StackNode(stack_2)
    assert len(stack_node_7.data) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    bool_1 = False
    stack_node_8 = module_0.StackNode(bool_1)
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_9 = module_0.StackNode(float_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_5 = stack_4.__len__()
    assert var_5 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_10 = module_0.StackNode(var_5)
    assert stack_node_10.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_6 = stack_6.__len__()
    assert var_6 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_7 = stack_7.__len__()
    assert var_7 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_11 = module_0.StackNode(var_7)
    assert stack_node_11.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_12 = module_0.StackNode(stack_7)
    assert len(stack_node_12.data) == 0
    bool_2 = True
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_8 = stack_10.push(bool_2)
    assert len(stack_10) == 1
    stack_node_13 = module_0.StackNode(var_8)


def test_case_767():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    var_1 = stack_0.pop()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.push(none_type_1)
    assert len(stack_1) == 1
    var_3 = stack_1.pop()
    assert len(stack_1) == 0
    none_type_2 = None
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_4 = stack_2.push(none_type_2)
    assert len(stack_2) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    int_0 = 2594
    stack_node_0 = module_0.StackNode(int_0)
    str_0 = ""
    var_5 = module_0.check_parenthesis(str_0)
    assert var_5 is True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_6 = stack_4.__len__()
    assert var_6 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_6)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_3 = None
    stack_node_2 = module_0.StackNode(none_type_3)
    stack_node_3 = module_0.StackNode(stack_8)
    assert len(stack_node_3.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_7 = module_0.check_parenthesis(dict_0)
    assert var_7 is True
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_node_5 = module_0.StackNode(bool_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_8 = stack_12.__len__()
    assert var_8 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_9 = module_0.check_parenthesis(dict_1)
    assert var_9 is True
    stack_node_6 = module_0.StackNode(float_1)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    none_type_4 = None
    stack_node_7 = module_0.StackNode(none_type_4)
    stack_node_8 = module_0.StackNode(none_type_4)
    stack_node_9 = module_0.StackNode(stack_13)
    assert len(stack_node_9.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0


def test_case_768():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_node_3 = module_0.StackNode(stack_node_0)


def test_case_769():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.push(tuple_1)
    assert len(stack_2) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    float_0 = -0.8
    stack_node_0 = module_0.StackNode(float_0)
    float_1 = 712.593
    dict_0 = {float_1: float_1, float_1: float_1}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    bool_1 = False
    stack_node_1 = module_0.StackNode(bool_1)
    stack_node_2 = module_0.StackNode(bool_1)
    none_type_0 = None
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.push(none_type_0)
    assert len(stack_7) == 1
    stack_node_3 = module_0.StackNode(var_4)
    stack_node_4 = module_0.StackNode(stack_node_3)
    float_2 = 712.593
    dict_1 = {float_2: float_2, float_2: float_2}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    stack_node_5 = module_0.StackNode(float_2)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_node_7 = module_0.StackNode(none_type_1)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data is True


def test_case_770():
    bool_0 = True
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_3 = module_0.StackNode(complex_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_5 = module_0.StackNode(float_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_node_7 = module_0.StackNode(none_type_0)
    stack_node_8 = module_0.StackNode(stack_3)
    assert len(stack_node_8.data) == 0
    stack_node_9 = module_0.StackNode(stack_3)
    assert len(stack_node_9.data) == 0


def test_case_771():
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is False
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_3)
    assert len(stack_node_3.data) == 0
    var_2 = stack_3.push(none_type_1)
    assert len(stack_3) == 1
    assert len(stack_node_3.data) == 1
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    str_1 = ""
    var_4 = module_0.check_parenthesis(str_1)
    assert var_4 is True
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0


def test_case_772():
    bytes_0 = b"[+\x04A\xbe\x87>/P\x80\x97\x1c\x96\xdeU\x1fbW"
    stack_node_0 = module_0.StackNode(bytes_0)


def test_case_773():
    dict_0 = {}
    stack_node_0 = module_0.StackNode(dict_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    stack_node_3 = module_0.StackNode(stack_3)
    assert len(stack_node_3.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0


def test_case_774():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    var_3 = stack_5.__len__()
    assert var_3 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_4 = module_0.check_parenthesis(str_0)
    assert var_4 is False
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(stack_7)
    assert len(stack_node_7.data) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_7 = stack_9.__len__()
    assert var_7 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(var_7)
    assert stack_node_8.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_10.__len__()
    assert var_8 == 0
    var_9 = stack_12.__len__()
    assert var_9 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_10 = stack_14.__len__()
    assert var_10 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_9 = module_0.StackNode(var_10)
    assert stack_node_9.data == 0
    dict_0 = {}
    var_11 = module_0.check_parenthesis(dict_0)
    assert var_11 is True
    var_12 = stack_15.__len__()
    assert var_12 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0


def test_case_775():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_0)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(stack_2)
    assert len(stack_node_3.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_node_5 = module_0.StackNode(bool_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    var_7 = stack_8.__len__()
    assert var_7 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_8 = stack_10.__len__()
    assert var_8 == 0
    dict_2 = {}
    stack_node_8 = module_0.StackNode(dict_2)
    bool_1 = False
    stack_node_9 = module_0.StackNode(bool_1)
    stack_node_10 = module_0.StackNode(bool_1)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_9 = stack_11.__len__()
    assert var_9 == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_10 = stack_12.__len__()
    assert var_10 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_12 = module_0.StackNode(var_10)
    assert stack_node_12.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_11 = stack_15.__len__()
    assert var_11 == 0
    stack_node_13 = module_0.StackNode(var_2)
    assert stack_node_13.data == 0


def test_case_776():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_node_4 = module_0.StackNode(none_type_1)
    none_type_2 = None
    stack_node_5 = module_0.StackNode(none_type_2)
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    bool_1 = True
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.push(bool_1)
    assert len(stack_8) == 1
    stack_node_7 = module_0.StackNode(var_2)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    none_type_3 = None
    stack_node_9 = module_0.StackNode(none_type_3)
    stack_node_10 = module_0.StackNode(stack_13)
    assert len(stack_node_10.data) == 0
    var_4 = stack_13.push(none_type_3)
    assert len(stack_13) == 1
    assert len(stack_node_10.data) == 1
    var_5 = stack_7.__len__()
    assert var_5 == 0


def test_case_777():
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(stack_6)
    assert len(stack_node_5.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    var_6 = stack_8.push(stack_node_0)
    assert len(stack_8) == 1


def test_case_778():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    int_0 = 3109
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(int_0)
    assert len(stack_0) == 1
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(none_type_0)
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0


def test_case_779():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(stack_4)
    assert len(stack_node_3.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(stack_6)
    assert len(stack_node_5.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    bool_0 = False
    stack_node_7 = module_0.StackNode(bool_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_8 = module_0.StackNode(bool_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data == 0
    dict_1 = {}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_12.__len__()
    assert var_7 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_10 = module_0.StackNode(var_7)
    assert stack_node_10.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_11 = module_0.StackNode(dict_1)


def test_case_780():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_2 = None
    stack_node_4 = module_0.StackNode(none_type_2)
    bool_1 = False
    stack_node_5 = module_0.StackNode(bool_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_6 = module_0.StackNode(bool_1)
    bool_2 = False
    stack_node_7 = module_0.StackNode(bool_2)
    stack_node_8 = module_0.StackNode(bool_2)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_10 = module_0.StackNode(var_3)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_7)
    assert len(stack_node_13.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_14 = module_0.StackNode(var_4)
    assert stack_node_14.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_15 = module_0.StackNode(stack_11)
    assert len(stack_node_15.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    bool_3 = False
    stack_node_16 = module_0.StackNode(bool_3)
    stack_node_17 = module_0.StackNode(bool_3)
    none_type_3 = None
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_6 = stack_14.push(none_type_3)
    assert len(stack_14) == 1
    stack_node_18 = module_0.StackNode(var_6)
    none_type_4 = None
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_7 = stack_15.push(none_type_4)
    assert len(stack_15) == 1
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0


def test_case_781():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    bool_0 = True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.push(bool_0)
    assert len(stack_1) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(none_type_1)
    none_type_2 = None
    stack_node_4 = module_0.StackNode(none_type_2)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_3.__len__()
    assert var_4 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_5 = module_0.check_parenthesis(str_0)
    assert var_5 is False
    dict_1 = {}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    stack_node_5 = module_0.StackNode(var_6)
    assert stack_node_5.data is True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_7 = stack_4.__len__()
    assert var_7 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_8 = stack_4.push(var_6)
    assert len(stack_4) == 1
    bool_1 = True
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_9 = stack_7.push(bool_1)
    assert len(stack_7) == 1
    stack_node_6 = module_0.StackNode(stack_7)
    assert len(stack_node_6.data) == 1
    var_10 = stack_3.__len__()
    assert var_10 == 0


def test_case_782():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    bool_1 = True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.push(bool_1)
    assert len(stack_5) == 1
    stack_node_4 = module_0.StackNode(var_1)
    var_2 = stack_2.__len__()
    assert var_2 == 0


def test_case_783():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    bool_0 = True
    stack_node_2 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.push(none_type_1)
    assert len(stack_2) == 1
    bool_1 = True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.push(bool_1)
    assert len(stack_3) == 1
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_0)
    assert stack_node_5.data == 0


def test_case_784():
    int_0 = 2594
    stack_node_0 = module_0.StackNode(int_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    var_1 = stack_0.push(stack_0)
    assert len(stack_0) == 2
    var_2 = stack_0.peek()
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "stack1.Stack"
    assert len(var_2) == 2


def test_case_785():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(tuple_1)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_2)
    assert len(stack_node_1.data) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0


def test_case_786():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(tuple_1)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_2)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    str_1 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_2 = module_0.check_parenthesis(str_1)
    assert var_2 is False
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data is False
    int_0 = -460
    stack_node_3 = module_0.StackNode(int_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    var_3 = stack_3.push(none_type_1)
    assert len(stack_3) == 1
    assert len(stack_node_5.data) == 1
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_node_6 = module_0.StackNode(stack_6)
    assert len(stack_node_6.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_8 = stack_0.__len__()
    assert var_8 == 1


def test_case_787():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_1.data) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    stack_node_6 = module_0.StackNode(float_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    dict_2 = {var_3: var_3, float_1: stack_node_5}
    stack_node_7 = module_0.StackNode(dict_2)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    dict_3 = {}
    stack_node_10 = module_0.StackNode(dict_3)
    str_0 = ""
    var_7 = module_0.check_parenthesis(str_0)
    assert var_7 is True
    stack_node_11 = module_0.StackNode(var_7)
    assert stack_node_11.data is True
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_12 = module_0.StackNode(stack_10)
    assert len(stack_node_12.data) == 0


def test_case_788():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    var_1 = stack_0.push(stack_0)
    assert len(stack_0) == 2
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(stack_6)
    assert len(stack_node_5.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_10)
    assert len(stack_node_9.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    none_type_1 = None
    stack_node_10 = module_0.StackNode(none_type_1)
    bool_1 = False
    stack_node_11 = module_0.StackNode(bool_1)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_node_12 = module_0.StackNode(bool_1)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_6 = stack_15.__len__()
    assert var_6 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_13 = module_0.StackNode(var_6)
    assert stack_node_13.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_14 = module_0.StackNode(stack_16)
    assert len(stack_node_14.data) == 0
    var_7 = stack_17.__len__()
    assert var_7 == 0
    bytes_0 = b"[+\x04A\xbe\x87>/P\x80\x97\x1c\x96\xdeU\x1fbW"
    stack_node_15 = module_0.StackNode(bytes_0)
    none_type_2 = None
    stack_node_16 = module_0.StackNode(none_type_2)
    bool_2 = False
    stack_node_17 = module_0.StackNode(bool_2)
    stack_node_18 = module_0.StackNode(bool_2)
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_8 = stack_18.__len__()
    assert var_8 == 0
    var_9 = stack_17.__len__()
    assert var_9 == 0


def test_case_789():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(stack_3)
    assert len(stack_node_4.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    dict_0 = {}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data is True
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_7)
    assert len(stack_node_10.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_11 = module_0.StackNode(var_4)
    assert stack_node_11.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_1 = None
    stack_node_12 = module_0.StackNode(none_type_1)
    stack_node_13 = module_0.StackNode(none_type_1)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_14 = module_0.StackNode(var_5)
    assert stack_node_14.data == 0
    stack_node_15 = module_0.StackNode(stack_node_14)
    stack_node_16 = module_0.StackNode(stack_node_14)
    stack_node_17 = module_0.StackNode(stack_13)
    assert len(stack_node_17.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_18 = module_0.StackNode(var_5)
    assert stack_node_18.data == 0
    int_0 = -460
    stack_node_19 = module_0.StackNode(int_0)
    bool_0 = True
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_6 = stack_16.push(bool_0)
    assert len(stack_16) == 1
    stack_node_20 = module_0.StackNode(stack_16)
    assert len(stack_node_20.data) == 1
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_7 = stack_17.__len__()
    assert var_7 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_21 = module_0.StackNode(var_7)
    assert stack_node_21.data == 0


def test_case_790():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_2.push(stack_4)
    assert len(stack_2) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_5)
    assert len(stack_node_4.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0


def test_case_791():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    dict_0 = {}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0


def test_case_792():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_node_6 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.push(bool_0)
    assert len(stack_4) == 1
    complex_0 = -3711.3 - 806.2j
    stack_node_8 = module_0.StackNode(complex_0)
    none_type_1 = None
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.push(none_type_1)
    assert len(stack_5) == 1
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_8.push(stack_10)
    assert len(stack_8) == 1
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_11 = module_0.StackNode(stack_13)
    assert len(stack_node_11.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0


def test_case_793():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.push(none_type_1)
    assert len(stack_1) == 1
    stack_node_3 = module_0.StackNode(var_0)
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_5 = module_0.StackNode(var_1)
    assert stack_node_5.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_2 = None
    stack_node_6 = module_0.StackNode(none_type_2)
    stack_node_7 = module_0.StackNode(none_type_2)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_3 = None
    stack_node_8 = module_0.StackNode(none_type_3)
    var_2 = stack_5.push(none_type_3)
    assert len(stack_5) == 1
    bool_1 = True
    stack_node_9 = module_0.StackNode(bool_1)
    dict_0 = {}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_10 = module_0.StackNode(var_3)
    assert stack_node_10.data is True
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_12 = module_0.StackNode(stack_6)
    assert len(stack_node_12.data) == 0
    var_4 = stack_5.peek()


def test_case_794():
    str_0 = "o2EICU9\x0bp7"
    stack_node_0 = module_0.StackNode(str_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_3 = module_0.StackNode(var_0)
    bool_1 = False
    stack_node_4 = module_0.StackNode(bool_1)
    stack_node_5 = module_0.StackNode(bool_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_8 = module_0.StackNode(stack_3)
    assert len(stack_node_8.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    dict_0 = {}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_9 = module_0.StackNode(var_3)
    assert stack_node_9.data is True
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_6.push(var_3)
    assert len(stack_6) == 1
    bool_2 = False
    set_0 = {bool_2, bool_2, bool_2, bool_2}
    tuple_0 = (bool_2, bool_2)
    str_1 = "B@kK%+yXf"
    tuple_1 = (bool_2, set_0, tuple_0, str_1)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.push(tuple_1)
    assert len(stack_9) == 1
    bool_3 = False
    stack_node_10 = module_0.StackNode(bool_3)
    stack_node_11 = module_0.StackNode(bool_3)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_12.__len__()
    assert var_7 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_12 = module_0.StackNode(var_7)
    assert stack_node_12.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_13 = module_0.StackNode(stack_13)
    assert len(stack_node_13.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    bool_4 = False
    stack_node_14 = module_0.StackNode(bool_4)
    stack_node_15 = module_0.StackNode(bool_4)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_8 = stack_17.__len__()
    assert var_8 == 0
    dict_1 = {}
    stack_node_16 = module_0.StackNode(dict_1)
    stack_node_17 = module_0.StackNode(stack_12)
    assert len(stack_node_17.data) == 0


def test_case_795():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    str_0 = ""
    var_4 = module_0.check_parenthesis(str_0)
    assert var_4 is True
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data is True
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    dict_1 = {}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    var_7 = stack_9.__len__()
    assert var_7 == 0
    dict_2 = {}
    var_8 = module_0.check_parenthesis(dict_2)
    assert var_8 is True
    stack_node_6 = module_0.StackNode(var_8)
    assert stack_node_6.data is True
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_9 = stack_10.__len__()
    assert var_9 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_10 = stack_10.push(var_8)
    assert len(stack_10) == 1
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_11 = stack_13.__len__()
    assert var_11 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_7 = module_0.StackNode(var_11)
    assert stack_node_7.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_8 = module_0.StackNode(stack_14)
    assert len(stack_node_8.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    str_1 = ""
    var_12 = module_0.check_parenthesis(str_1)
    assert var_12 is True
    stack_node_9 = module_0.StackNode(stack_15)
    assert len(stack_node_9.data) == 0


def test_case_796():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    str_0 = ""
    var_2 = module_0.check_parenthesis(str_0)
    assert var_2 is True
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_2 = module_0.StackNode(float_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    dict_1 = {var_3: var_3, float_0: stack_node_1}
    stack_node_3 = module_0.StackNode(dict_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_6 = module_0.StackNode(stack_8)
    assert len(stack_node_6.data) == 0
    stack_node_7 = module_0.StackNode(stack_10)
    assert len(stack_node_7.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_9 = module_0.StackNode(stack_13)
    assert len(stack_node_9.data) == 0
    dict_2 = {}
    var_7 = module_0.check_parenthesis(dict_2)
    assert var_7 is True
    stack_node_10 = module_0.StackNode(var_7)
    assert stack_node_10.data is True
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_8 = stack_15.__len__()
    assert var_8 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_11 = module_0.StackNode(var_8)
    assert stack_node_11.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_12 = module_0.StackNode(stack_15)
    assert len(stack_node_12.data) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_9 = stack_19.__len__()
    assert var_9 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_13 = module_0.StackNode(var_9)
    assert stack_node_13.data == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    dict_3 = {}
    var_10 = module_0.check_parenthesis(dict_3)
    assert var_10 is True
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_11 = stack_23.push(var_6)
    assert len(stack_23) == 1


def test_case_797():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(stack_6)
    assert len(stack_node_5.data) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    none_type_1 = None
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.push(none_type_1)
    assert len(stack_8) == 1
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_9 = module_0.StackNode(var_7)
    assert stack_node_9.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_8 = stack_12.__len__()
    assert var_8 == 0
    var_9 = stack_14.__len__()
    assert var_9 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0


def test_case_798():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(tuple_1)
    assert len(stack_0) == 1
    bool_1 = True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.push(bool_1)
    assert len(stack_1) == 1
    stack_node_0 = module_0.StackNode(stack_1)
    assert len(stack_node_0.data) == 1
    stack_node_1 = module_0.StackNode(stack_node_0)


def test_case_799():
    int_0 = -460
    stack_node_0 = module_0.StackNode(int_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_1 = module_0.check_parenthesis(dict_1)
    assert var_1 is True
    stack_node_4 = module_0.StackNode(bool_0)
    dict_2 = {}
    var_2 = module_0.check_parenthesis(dict_2)
    assert var_2 is True
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data is True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_3 = stack_1.__len__()
    assert var_3 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_1.push(var_2)
    assert len(stack_1) == 1
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_5 = stack_4.__len__()
    assert var_5 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_4)
    assert len(stack_node_9.data) == 0
    var_6 = stack_5.__len__()
    assert var_6 == 0
    bool_1 = False
    set_0 = {bool_1, bool_1, bool_1, bool_1}
    tuple_0 = (bool_1, bool_1)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_1, set_0, tuple_0, str_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_7 = stack_6.push(tuple_1)
    assert len(stack_6) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_1 = None
    stack_node_10 = module_0.StackNode(none_type_1)
    stack_node_11 = module_0.StackNode(stack_7)
    assert len(stack_node_11.data) == 0
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(var_0)
    assert stack_node_13.data is True


def test_case_800():
    dict_0 = {}
    stack_node_0 = module_0.StackNode(dict_0)
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is True


def test_case_801():
    bytes_0 = b"[+\x04A\xbe\x87>/P\x80\x97\x1c\x96\xdeU\x1fbW"
    stack_node_0 = module_0.StackNode(bytes_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_1 = module_0.StackNode(stack_2)
    assert len(stack_node_1.data) == 0
    var_2 = stack_2.push(var_1)
    assert len(stack_2) == 1
    assert len(stack_node_1.data) == 1
    int_0 = -222
    set_0 = {int_0}
    stack_node_2 = module_0.StackNode(set_0)
    dict_1 = {}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    var_7 = stack_4.__len__()
    assert var_7 == 0


def test_case_802():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(none_type_0)
    int_0 = 2594
    stack_node_2 = module_0.StackNode(int_0)
    none_type_1 = None
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.push(none_type_1)
    assert len(stack_2) == 1
    var_2 = stack_2.push(stack_2)
    assert len(stack_2) == 2
    var_3 = stack_2.peek()
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "stack1.Stack"
    assert len(var_3) == 2
    bool_1 = False
    stack_node_3 = module_0.StackNode(bool_1)
    stack_node_4 = module_0.StackNode(bool_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    dict_0 = {}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_6 = stack_4.__len__()
    assert var_6 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(stack_5)
    assert len(stack_node_7.data) == 0
    var_7 = stack_6.__len__()
    assert var_7 == 0
    bool_2 = False
    stack_node_8 = module_0.StackNode(bool_2)
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_8 = module_0.check_parenthesis(dict_1)
    assert var_8 is True
    stack_node_9 = module_0.StackNode(float_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    dict_2 = {var_8: var_8, float_0: stack_node_8}
    stack_node_10 = module_0.StackNode(dict_2)
    bool_3 = True
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_9 = stack_8.push(bool_3)
    assert len(stack_8) == 1
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_10 = stack_9.__len__()
    assert var_10 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_11 = module_0.StackNode(var_10)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    bool_4 = False
    stack_node_13 = module_0.StackNode(bool_4)
    stack_node_14 = module_0.StackNode(bool_4)
    none_type_2 = None
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_11 = stack_12.push(none_type_2)
    assert len(stack_12) == 1
    stack_node_15 = module_0.StackNode(var_11)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0


def test_case_803():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    dict_0 = {}
    stack_node_2 = module_0.StackNode(dict_0)
    str_0 = ""
    var_2 = module_0.check_parenthesis(str_0)
    assert var_2 is True
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data is True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    bool_1 = True
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.push(bool_1)
    assert len(stack_6) == 1
    stack_node_6 = module_0.StackNode(var_3)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    stack_node_8 = module_0.StackNode(var_7)
    assert stack_node_8.data is True
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_8 = stack_12.__len__()
    assert var_8 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_9 = module_0.StackNode(var_8)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    var_9 = stack_13.__len__()
    assert var_9 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_10 = stack_14.__len__()
    assert var_10 == 0
    stack_node_12 = module_0.StackNode(var_10)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    dict_2 = {}
    stack_node_14 = module_0.StackNode(dict_2)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    none_type_1 = None
    stack_node_15 = module_0.StackNode(none_type_1)
    stack_node_16 = module_0.StackNode(stack_15)
    assert len(stack_node_16.data) == 0
    var_11 = stack_15.push(none_type_1)
    assert len(stack_15) == 1
    assert len(stack_node_16.data) == 1
    var_12 = stack_15.push(stack_node_14)
    assert len(stack_15) == 2
    assert len(stack_node_16.data) == 2
    stack_node_17 = module_0.StackNode(var_0)
    assert stack_node_17.data == 0


def test_case_804():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    dict_0 = {}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    str_0 = ""
    var_4 = module_0.check_parenthesis(str_0)
    assert var_4 is True
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data is True
    none_type_2 = None
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.push(none_type_2)
    assert len(stack_7) == 1
    var_6 = stack_7.pop()
    assert len(stack_7) == 0
    none_type_3 = None
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_7 = stack_8.push(none_type_3)
    assert len(stack_8) == 1
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    float_0 = -0.8
    stack_node_7 = module_0.StackNode(float_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_8 = stack_11.__len__()
    assert var_8 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_8 = module_0.StackNode(var_8)
    assert stack_node_8.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_9 = stack_13.__len__()
    assert var_9 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    str_1 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_10 = module_0.check_parenthesis(str_1)
    assert var_10 is False
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_11 = stack_15.__len__()
    assert var_11 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_9 = module_0.StackNode(var_11)
    assert stack_node_9.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_10 = module_0.StackNode(stack_15)
    assert len(stack_node_10.data) == 0
    var_12 = stack_17.__len__()
    assert var_12 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    none_type_4 = None
    stack_node_11 = module_0.StackNode(none_type_4)
    stack_node_12 = module_0.StackNode(stack_19)
    assert len(stack_node_12.data) == 0
    var_13 = stack_19.__len__()
    assert var_13 == 0
    str_2 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_14 = module_0.check_parenthesis(str_2)
    assert var_14 is False
    stack_node_13 = module_0.StackNode(var_14)
    assert stack_node_13.data is False
    bytes_0 = b""
    var_15 = module_0.check_parenthesis(bytes_0)
    assert var_15 is True


def test_case_805():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_2 = module_0.StackNode(var_4)
    assert stack_node_2.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    dict_0 = {}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_3 = module_0.StackNode(var_6)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_14)
    assert len(stack_node_6.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    bool_0 = False
    stack_node_7 = module_0.StackNode(bool_0)
    stack_node_8 = module_0.StackNode(bool_0)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    bool_1 = True
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_7 = stack_18.push(bool_1)
    assert len(stack_18) == 1
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_8 = stack_19.__len__()
    assert var_8 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_9 = module_0.StackNode(var_8)
    assert stack_node_9.data == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    dict_1 = {}
    var_9 = module_0.check_parenthesis(dict_1)
    assert var_9 is True
    stack_node_10 = module_0.StackNode(var_9)
    assert stack_node_10.data is True
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0


def test_case_806():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is False
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data is False
    dict_0 = {}
    stack_node_3 = module_0.StackNode(dict_0)
    str_1 = ""
    var_2 = module_0.check_parenthesis(str_1)
    assert var_2 is True
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data is True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_3 = module_0.check_parenthesis(str_1)
    assert var_3 is True
    stack_node_5 = module_0.StackNode(stack_node_0)


def test_case_807():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(stack_1)
    assert len(stack_node_0.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_0 = stack_3.__len__()
    assert var_0 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(stack_4)
    assert len(stack_node_2.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_1 = stack_8.__len__()
    assert var_1 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_4 = module_0.StackNode(float_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_node_7 = module_0.StackNode(stack_10)
    assert len(stack_node_7.data) == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_3 = module_0.check_parenthesis(str_0)
    assert var_3 is False
    int_0 = -222
    set_0 = {int_0}
    stack_node_8 = module_0.StackNode(set_0)
    var_4 = stack_5.__len__()
    assert var_4 == 0


def test_case_808():
    bytes_0 = b"[+\x04A\xbe\x87>/P\x80\x97\x1c\x96\xdeU\x1fbW"
    stack_node_0 = module_0.StackNode(bytes_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    bool_1 = True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.push(bool_1)
    assert len(stack_1) == 1
    stack_node_3 = module_0.StackNode(var_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_8 = module_0.StackNode(stack_4)
    assert len(stack_node_8.data) == 0
    stack_node_9 = module_0.StackNode(stack_6)
    assert len(stack_node_9.data) == 0
    bool_2 = False
    stack_node_10 = module_0.StackNode(bool_2)
    stack_node_11 = module_0.StackNode(bool_2)
    none_type_1 = None
    stack_node_12 = module_0.StackNode(none_type_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.push(bool_2)
    assert len(stack_8) == 1
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_13 = module_0.StackNode(var_6)
    assert stack_node_13.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_14 = module_0.StackNode(stack_11)
    assert len(stack_node_14.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_7 = stack_15.__len__()
    assert var_7 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_15 = module_0.StackNode(var_7)
    assert stack_node_15.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_8 = stack_16.__len__()
    assert var_8 == 0
    var_9 = stack_18.__len__()
    assert var_9 == 0
    var_10 = stack_17.__len__()
    assert var_10 == 0


def test_case_809():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_0 = stack_2.__len__()
    assert var_0 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_0)
    assert stack_node_2.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    dict_0 = {}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0


def test_case_810():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_2 = module_0.StackNode(stack_6)
    assert len(stack_node_2.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0


def test_case_811():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data is True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_3 = module_0.StackNode(stack_7)
    assert len(stack_node_3.data) == 0
    var_5 = stack_7.push(var_4)
    assert len(stack_7) == 1
    assert len(stack_node_3.data) == 1
    float_2 = -0.8
    stack_node_4 = module_0.StackNode(float_2)
    dict_2 = {}
    stack_node_5 = module_0.StackNode(dict_2)
    str_0 = ""
    var_6 = module_0.check_parenthesis(str_0)
    assert var_6 is True
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data is True
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_7 = stack_9.__len__()
    assert var_7 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_7 = module_0.StackNode(var_7)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_8 = stack_11.__len__()
    assert var_8 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_10 = module_0.StackNode(var_8)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_11)
    assert len(stack_node_13.data) == 0
    var_9 = stack_12.__len__()
    assert var_9 == 0
    dict_3 = {}
    var_10 = module_0.check_parenthesis(dict_3)
    assert var_10 is True
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_11 = stack_13.push(stack_node_2)
    assert len(stack_13) == 1


def test_case_812():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_2 = module_0.StackNode(float_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    dict_1 = {var_3: var_3, float_0: stack_node_1}
    stack_node_3 = module_0.StackNode(dict_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0


def test_case_813():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_2 = module_0.StackNode(float_0)
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_2 = module_0.check_parenthesis(dict_1)
    assert var_2 is True
    stack_node_5 = module_0.StackNode(bool_0)
    dict_2 = {}
    stack_node_6 = module_0.StackNode(dict_2)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    stack_node_8 = module_0.StackNode(stack_2)
    assert len(stack_node_8.data) == 0
    var_3 = stack_2.push(none_type_1)
    assert len(stack_2) == 1
    assert len(stack_node_8.data) == 1
    var_4 = stack_2.push(stack_node_6)
    assert len(stack_2) == 2
    assert len(stack_node_8.data) == 2
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_5 = stack_3.__len__()
    assert var_5 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    float_2 = 712.593
    dict_3 = {float_2: float_2, float_2: float_2}
    var_6 = module_0.check_parenthesis(dict_3)
    assert var_6 is True
    stack_node_9 = module_0.StackNode(stack_5)
    assert len(stack_node_9.data) == 0
    dict_4 = {}
    stack_node_10 = module_0.StackNode(dict_4)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_7 = stack_6.__len__()
    assert var_7 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_11 = module_0.StackNode(var_7)
    assert stack_node_11.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_2 = None
    stack_node_12 = module_0.StackNode(none_type_2)
    stack_node_13 = module_0.StackNode(stack_9)
    assert len(stack_node_13.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0


def test_case_814():
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is False
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    dict_1 = {var_1: var_1, float_0: stack_node_0}
    stack_node_2 = module_0.StackNode(dict_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    float_1 = 712.593
    dict_2 = {float_1: float_1, float_1: float_1}
    var_3 = module_0.check_parenthesis(dict_2)
    assert var_3 is True
    stack_node_5 = module_0.StackNode(stack_5)
    assert len(stack_node_5.data) == 0
    int_0 = 3109
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.push(int_0)
    assert len(stack_6) == 1
    float_2 = 712.593
    dict_3 = {float_2: float_2, float_2: float_2}
    var_5 = module_0.check_parenthesis(dict_3)
    assert var_5 is True
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data is True
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(stack_7)
    assert len(stack_node_8.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_12.__len__()
    assert var_7 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_9 = module_0.StackNode(var_7)
    assert stack_node_9.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_10 = module_0.StackNode(stack_13)
    assert len(stack_node_10.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_11 = module_0.StackNode(stack_3)
    assert len(stack_node_11.data) == 0


def test_case_815():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_node_0 = module_0.StackNode(stack_0)
    assert len(stack_node_0.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data is True
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_node_3 = module_0.StackNode(bool_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    bool_1 = False
    stack_node_4 = module_0.StackNode(bool_1)
    stack_node_5 = module_0.StackNode(bool_1)
    bool_2 = False
    set_0 = {bool_2, bool_2, bool_2, bool_2}
    tuple_0 = (bool_2, bool_2)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_2, set_0, tuple_0, str_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.push(tuple_1)
    assert len(stack_2) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_node_7 = module_0.StackNode(stack_3)
    assert len(stack_node_7.data) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    dict_1 = {}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data is True
    float_1 = 712.593
    dict_2 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_2)
    assert var_4 is True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_9 = module_0.StackNode(float_0)


def test_case_816():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    var_1 = stack_2.push(none_type_0)
    assert len(stack_2) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    dict_0 = {}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_4.__len__()
    assert var_4 == 0
    int_0 = 3109
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_5 = stack_5.push(int_0)
    assert len(stack_5) == 1
    complex_0 = -3711.3 - 806.2j
    stack_node_6 = module_0.StackNode(complex_0)
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_6 = stack_6.__len__()
    assert var_6 == 0
    bool_0 = True
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_7 = stack_7.push(bool_0)
    assert len(stack_7) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_2 = None
    stack_node_8 = module_0.StackNode(none_type_2)
    stack_node_9 = module_0.StackNode(none_type_2)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_3 = None
    stack_node_10 = module_0.StackNode(none_type_3)
    stack_node_11 = module_0.StackNode(stack_9)
    assert len(stack_node_11.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_8 = stack_10.__len__()
    assert var_8 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_9 = module_0.check_parenthesis(dict_1)
    assert var_9 is True
    stack_node_12 = module_0.StackNode(stack_12)
    assert len(stack_node_12.data) == 0
    none_type_4 = None
    stack_node_13 = module_0.StackNode(none_type_4)
    bool_1 = False
    stack_node_14 = module_0.StackNode(bool_1)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    float_1 = 712.593
    dict_2 = {float_1: float_1, float_1: float_1}
    var_10 = module_0.check_parenthesis(dict_2)
    assert var_10 is True
    stack_node_15 = module_0.StackNode(bool_1)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0


def test_case_817():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    var_1 = stack_0.push(none_type_0)
    assert len(stack_0) == 2


def test_case_818():
    bytes_0 = b"[+\x04A\xbe\x87>/P\x80\x97\x1c\x96\xdeU\x1fbW"
    stack_node_0 = module_0.StackNode(bytes_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_4 = module_0.StackNode(float_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    dict_1 = {var_1: var_1, float_0: stack_node_3}
    stack_node_5 = module_0.StackNode(dict_1)
    bool_1 = False
    stack_node_6 = module_0.StackNode(bool_1)
    stack_node_7 = module_0.StackNode(bool_1)
    bool_2 = False
    stack_node_8 = module_0.StackNode(bool_2)
    stack_node_9 = module_0.StackNode(bool_2)
    none_type_1 = None
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.push(none_type_1)
    assert len(stack_3) == 1
    stack_node_10 = module_0.StackNode(var_2)
    var_3 = stack_2.__len__()
    assert var_3 == 0


def test_case_819():
    dict_0 = {}
    stack_node_0 = module_0.StackNode(dict_0)
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    bool_1 = False
    set_0 = {bool_1, bool_1, bool_1, bool_1}
    tuple_0 = (bool_1, bool_1)
    str_1 = "B@kK%+yXf"
    tuple_1 = (bool_1, set_0, tuple_0, str_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.push(tuple_1)
    assert len(stack_3) == 1
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_node_7 = module_0.StackNode(stack_4)
    assert len(stack_node_7.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_10 = module_0.StackNode(stack_10)
    assert len(stack_node_10.data) == 0
    stack_node_11 = module_0.StackNode(stack_12)
    assert len(stack_node_11.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_12 = module_0.StackNode(stack_14)
    assert len(stack_node_12.data) == 0
    var_5 = stack_5.push(none_type_0)
    assert len(stack_5) == 1


def test_case_820():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_0)
    assert stack_node_4.data == 0
    int_0 = -222
    set_0 = {int_0}
    stack_node_5 = module_0.StackNode(set_0)
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    stack_node_7 = module_0.StackNode(bool_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    stack_node_9 = module_0.StackNode(stack_4)
    assert len(stack_node_9.data) == 0
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_11 = module_0.StackNode(var_2)
    assert stack_node_11.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_12 = module_0.StackNode(stack_5)
    assert len(stack_node_12.data) == 0
    stack_node_13 = module_0.StackNode(stack_8)
    assert len(stack_node_13.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_14 = module_0.StackNode(var_3)
    assert stack_node_14.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0


def test_case_821():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    bool_1 = False
    stack_node_2 = module_0.StackNode(bool_1)
    stack_node_3 = module_0.StackNode(bool_1)
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.push(bool_1)
    assert len(stack_1) == 1
    var_1 = stack_1.push(none_type_1)
    assert len(stack_1) == 2
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_2 = None
    stack_node_5 = module_0.StackNode(none_type_2)
    stack_node_6 = module_0.StackNode(stack_2)
    assert len(stack_node_6.data) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0


def test_case_822():
    dict_0 = {}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_0.push(var_0)
    assert len(stack_0) == 1
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    dict_1 = {}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data is True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_5 = stack_4.__len__()
    assert var_5 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    float_0 = 712.593
    dict_2 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_2)
    assert var_6 is True
    var_7 = stack_5.__len__()
    assert var_7 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_8 = stack_7.__len__()
    assert var_8 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(var_8)
    assert stack_node_6.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_9 = stack_8.__len__()
    assert var_9 == 0
    var_10 = stack_10.__len__()
    assert var_10 == 0
    dict_3 = {}
    stack_node_7 = module_0.StackNode(dict_3)
    str_0 = ""
    var_11 = module_0.check_parenthesis(str_0)
    assert var_11 is True
    stack_node_8 = module_0.StackNode(var_11)
    assert stack_node_8.data is True
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_9 = module_0.StackNode(stack_node_8)


def test_case_823():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    var_1 = stack_0.pop()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.push(none_type_1)
    assert len(stack_1) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_0 = module_0.StackNode(var_3)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    none_type_2 = None
    stack_node_2 = module_0.StackNode(none_type_2)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_3 = None
    stack_node_3 = module_0.StackNode(none_type_3)
    stack_node_4 = module_0.StackNode(stack_5)
    assert len(stack_node_4.data) == 0
    stack_node_5 = module_0.StackNode(stack_node_3)
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_4 = module_0.check_parenthesis(str_0)
    assert var_4 is False
    var_5 = stack_5.__len__()
    assert var_5 == 0


def test_case_824():
    dict_0 = {}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data is True
    stack_node_1 = module_0.StackNode(stack_node_0)
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_1)
    assert var_1 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_node_3 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.push(bool_0)
    assert len(stack_1) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_3)
    assert len(stack_node_7.data) == 0
    float_1 = 712.593
    dict_2 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_2)
    assert var_4 is True
    stack_node_8 = module_0.StackNode(float_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_5 = stack_4.__len__()
    assert var_5 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_10 = module_0.StackNode(stack_5)
    assert len(stack_node_10.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    int_0 = -222
    set_0 = {int_0}
    stack_node_11 = module_0.StackNode(set_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0


def test_case_825():
    str_0 = "o2EICU9\x0bp7"
    stack_node_0 = module_0.StackNode(str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = -0.8
    stack_node_5 = module_0.StackNode(float_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_0 = stack_3.__len__()
    assert var_0 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_6 = module_0.StackNode(var_0)
    assert stack_node_6.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(stack_3)
    assert len(stack_node_7.data) == 0
    stack_node_8 = module_0.StackNode(stack_5)
    assert len(stack_node_8.data) == 0
    float_1 = 712.593
    dict_0 = {float_1: float_1, float_1: float_1}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_9 = module_0.StackNode(float_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_2 = None
    stack_node_10 = module_0.StackNode(none_type_2)
    stack_node_11 = module_0.StackNode(none_type_2)
    stack_node_12 = module_0.StackNode(stack_7)
    assert len(stack_node_12.data) == 0
    bool_1 = False
    stack_node_13 = module_0.StackNode(bool_1)
    stack_node_14 = module_0.StackNode(bool_1)
    none_type_3 = None
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.push(none_type_3)
    assert len(stack_8) == 1
    stack_node_15 = module_0.StackNode(var_2)
    none_type_4 = None
    stack_node_16 = module_0.StackNode(none_type_4)
    bool_2 = False
    stack_node_17 = module_0.StackNode(bool_2)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    bool_3 = True
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.push(bool_3)
    assert len(stack_10) == 1
    stack_node_18 = module_0.StackNode(var_3)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_19 = module_0.StackNode(var_4)
    assert stack_node_19.data == 0
    stack_node_20 = module_0.StackNode(stack_node_19)
    none_type_5 = None
    stack_node_21 = module_0.StackNode(none_type_5)
    dict_1 = {}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    stack_node_22 = module_0.StackNode(var_5)
    assert stack_node_22.data is True
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_7 = stack_13.push(var_5)
    assert len(stack_13) == 1
    var_8 = stack_13.peek()
    assert var_8 is True


def test_case_826():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_0.__len__()
    assert var_2 == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0


def test_case_827():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_2.push(stack_4)
    assert len(stack_2) == 1
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data is True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    var_5 = stack_6.__len__()
    assert var_5 == 0
    int_0 = 2594
    stack_node_3 = module_0.StackNode(int_0)
    none_type_0 = None
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.push(none_type_0)
    assert len(stack_8) == 1
    var_7 = stack_8.push(stack_8)
    assert len(stack_8) == 2
    var_8 = stack_8.peek()
    assert f"{type(var_8).__module__}.{type(var_8).__qualname__}" == "stack1.Stack"
    assert len(var_8) == 2
    var_9 = stack_0.push(none_type_0)
    assert len(stack_0) == 1


def test_case_828():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    bool_1 = True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.push(bool_1)
    assert len(stack_1) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    var_1 = stack_2.push(none_type_1)
    assert len(stack_2) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    none_type_2 = None
    stack_node_9 = module_0.StackNode(none_type_2)
    bool_2 = False
    stack_node_10 = module_0.StackNode(bool_2)
    stack_node_11 = module_0.StackNode(bool_2)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_12 = module_0.StackNode(var_6)
    assert stack_node_12.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_13 = module_0.StackNode(stack_9)
    assert len(stack_node_13.data) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0


def test_case_829():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_2)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    str_0 = ""
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is True
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data is True
    bool_0 = True
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.push(bool_0)
    assert len(stack_6) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_5 = module_0.StackNode(stack_10)
    assert len(stack_node_5.data) == 0
    str_1 = "o2EICU9\x0bp7"
    stack_node_6 = module_0.StackNode(str_1)
    bool_1 = False
    stack_node_7 = module_0.StackNode(bool_1)
    stack_node_8 = module_0.StackNode(bool_1)
    none_type_0 = None
    stack_node_9 = module_0.StackNode(none_type_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.push(bool_1)
    assert len(stack_11) == 1
    var_5 = stack_11.push(none_type_0)
    assert len(stack_11) == 2
    bool_2 = False
    stack_node_10 = module_0.StackNode(bool_2)
    stack_node_11 = module_0.StackNode(bool_2)
    none_type_1 = None
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.push(none_type_1)
    assert len(stack_12) == 1
    stack_node_12 = module_0.StackNode(var_6)
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_8)
    assert len(stack_node_14.data) == 0


def test_case_830():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_5)
    assert len(stack_node_4.data) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_node_6 = module_0.StackNode(stack_7)
    assert len(stack_node_6.data) == 0
    stack_node_7 = module_0.StackNode(stack_node_5)
    str_0 = ""
    var_4 = module_0.check_parenthesis(str_0)
    assert var_4 is True
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data is True
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_node_10 = module_0.StackNode(stack_3)
    assert len(stack_node_10.data) == 0


def test_case_831():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_node_0 = module_0.StackNode(stack_0)
    assert len(stack_node_0.data) == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    var_0 = stack_0.__len__()
    assert var_0 == 0


def test_case_832():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_0.__len__()
    assert var_2 == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    none_type_1 = None
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_3 = stack_1.push(none_type_1)
    assert len(stack_1) == 1
    var_4 = stack_1.pop()
    assert len(stack_1) == 0
    none_type_2 = None
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_5 = stack_2.push(none_type_2)
    assert len(stack_2) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_3 = None
    stack_node_2 = module_0.StackNode(none_type_3)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_6 = stack_4.__len__()
    assert var_6 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    var_8 = stack_4.__len__()
    assert var_8 == 0
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_9 = module_0.check_parenthesis(dict_2)
    assert var_9 is True
    stack_node_3 = module_0.StackNode(var_9)
    assert stack_node_3.data is True
    dict_3 = {}
    var_10 = module_0.check_parenthesis(dict_3)
    assert var_10 is True
    stack_node_4 = module_0.StackNode(var_10)
    assert stack_node_4.data is True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_11 = stack_5.__len__()
    assert var_11 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_12 = stack_5.push(var_10)
    assert len(stack_5) == 1
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_node_6 = module_0.StackNode(bool_0)
    none_type_4 = None
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_13 = stack_8.push(none_type_4)
    assert len(stack_8) == 1
    stack_node_7 = module_0.StackNode(var_13)
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_14 = stack_9.__len__()
    assert var_14 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_9 = module_0.StackNode(var_14)
    assert stack_node_9.data == 0
    dict_4 = {}
    var_15 = module_0.check_parenthesis(dict_4)
    assert var_15 is True
    var_16 = stack_10.__len__()
    assert var_16 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_17 = stack_12.__len__()
    assert var_17 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_10 = module_0.StackNode(var_17)
    assert stack_node_10.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_11 = module_0.StackNode(stack_13)
    assert len(stack_node_11.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_18 = stack_2.__len__()
    assert var_18 == 1


def test_case_833():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_0.__len__()
    assert var_2 == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    stack_node_2 = module_0.StackNode(float_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_4 = stack_2.__len__()
    assert var_4 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_4.push(stack_6)
    assert len(stack_4) == 1
    var_6 = stack_5.push(var_0)
    assert len(stack_5) == 1


def test_case_834():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    dict_0 = {}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_node_3 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.push(none_type_1)
    assert len(stack_2) == 1
    stack_node_4 = module_0.StackNode(var_2)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    dict_1 = {}
    stack_node_8 = module_0.StackNode(dict_1)
    str_0 = ""
    var_4 = module_0.check_parenthesis(str_0)
    assert var_4 is True
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data is True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_10 = module_0.StackNode(var_5)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    str_1 = ""
    var_6 = module_0.check_parenthesis(str_1)
    assert var_6 is True
    float_0 = 712.593
    dict_2 = {float_0: float_0, float_0: float_0}
    var_7 = module_0.check_parenthesis(dict_2)
    assert var_7 is True
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_8 = stack_2.push(stack_node_8)
    assert len(stack_2) == 2


def test_case_835():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0


def test_case_836():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(tuple_1)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    str_1 = "o2EICU9\x0bp7"
    stack_node_0 = module_0.StackNode(str_1)
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is True


def test_case_837():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    int_0 = 3109
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.push(int_0)
    assert len(stack_3) == 1
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    dict_0 = {}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0


def test_case_838():
    bool_0 = True
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    dict_0 = {}
    stack_node_2 = module_0.StackNode(dict_0)
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    stack_node_3 = module_0.StackNode(var_0)
    assert stack_node_3.data is True
    stack_node_4 = module_0.StackNode(str_0)
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    bool_1 = False
    stack_node_6 = module_0.StackNode(bool_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_8 = module_0.StackNode(var_1)
    assert stack_node_8.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_9 = module_0.StackNode(stack_4)
    assert len(stack_node_9.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    dict_1 = {}
    var_2 = module_0.check_parenthesis(dict_1)
    assert var_2 is True
    stack_node_10 = module_0.StackNode(var_2)
    assert stack_node_10.data is True
    stack_node_11 = module_0.StackNode(stack_0)
    assert len(stack_node_11.data) == 0


def test_case_839():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    bool_0 = True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.push(bool_0)
    assert len(stack_2) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_6 = module_0.StackNode(stack_8)
    assert len(stack_node_6.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_7 = module_0.StackNode(complex_0)
    none_type_1 = None
    stack_node_8 = module_0.StackNode(none_type_1)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_2 = None
    stack_node_9 = module_0.StackNode(none_type_2)
    stack_node_10 = module_0.StackNode(stack_11)
    assert len(stack_node_10.data) == 0
    var_5 = stack_11.push(none_type_1)
    assert len(stack_11) == 1
    assert len(stack_node_10.data) == 1
    bool_1 = False
    stack_node_11 = module_0.StackNode(bool_1)
    stack_node_12 = module_0.StackNode(bool_1)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    bool_2 = False
    stack_node_13 = module_0.StackNode(bool_2)
    stack_node_14 = module_0.StackNode(bool_2)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_node_15 = module_0.StackNode(stack_node_14)
    bool_3 = False
    stack_node_16 = module_0.StackNode(bool_3)
    stack_node_17 = module_0.StackNode(bool_3)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_18 = module_0.StackNode(var_7)
    assert stack_node_18.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_19 = module_0.StackNode(stack_14)
    assert len(stack_node_19.data) == 0
    stack_node_20 = module_0.StackNode(stack_17)
    assert len(stack_node_20.data) == 0
    var_8 = stack_2.pop()
    assert var_8 is True
    assert len(stack_2) == 0


def test_case_840():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(none_type_0)
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    bool_1 = True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.push(bool_1)
    assert len(stack_4) == 1
    stack_node_5 = module_0.StackNode(var_1)
    int_0 = -460
    stack_node_6 = module_0.StackNode(int_0)
    bool_2 = False
    stack_node_7 = module_0.StackNode(bool_2)
    stack_node_8 = module_0.StackNode(bool_2)
    none_type_2 = None
    stack_node_9 = module_0.StackNode(none_type_2)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.push(bool_2)
    assert len(stack_5) == 1
    stack_node_10 = module_0.StackNode(stack_1)
    assert len(stack_node_10.data) == 0


def test_case_841():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(stack_4)
    assert len(stack_node_3.data) == 0
    stack_node_4 = module_0.StackNode(stack_7)
    assert len(stack_node_4.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.__len__()
    assert var_2 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    str_0 = "o2EICU9\x0bp7"
    stack_node_5 = module_0.StackNode(str_0)
    str_1 = ""
    var_3 = module_0.check_parenthesis(str_1)
    assert var_3 is True
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data is True
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_7 = module_0.StackNode(stack_11)
    assert len(stack_node_7.data) == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_12)
    assert len(stack_node_11.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_7 = module_0.check_parenthesis(dict_0)
    assert var_7 is True
    stack_node_12 = module_0.StackNode(stack_16)
    assert len(stack_node_12.data) == 0
    var_8 = stack_16.push(var_7)
    assert len(stack_16) == 1
    assert len(stack_node_12.data) == 1
    str_2 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_9 = module_0.check_parenthesis(str_2)
    assert var_9 is False
    stack_node_13 = module_0.StackNode(stack_node_12)


def test_case_842():
    float_0 = -0.8
    stack_node_0 = module_0.StackNode(float_0)
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(tuple_1)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    int_0 = 2594
    stack_node_1 = module_0.StackNode(int_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    float_1 = 712.593
    dict_0 = {float_1: float_1, float_1: float_1}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_node_3 = module_0.StackNode(stack_2)
    assert len(stack_node_3.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    var_5 = stack_1.__len__()
    assert var_5 == 0


def test_case_843():
    float_0 = -0.8
    stack_node_0 = module_0.StackNode(float_0)
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 1
    str_0 = ""
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is True
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data is True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0


def test_case_844():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_2 = module_0.StackNode(float_0)
    dict_1 = {}
    stack_node_3 = module_0.StackNode(dict_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(stack_6)
    assert len(stack_node_5.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_7 = module_0.StackNode(stack_10)
    assert len(stack_node_7.data) == 0
    bool_1 = False
    stack_node_8 = module_0.StackNode(bool_1)
    stack_node_9 = module_0.StackNode(bool_1)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_5 = stack_14.__len__()
    assert var_5 == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_6 = stack_15.__len__()
    assert var_6 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_11 = module_0.StackNode(var_6)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_node_11)
    stack_node_14 = module_0.StackNode(stack_15)
    assert len(stack_node_14.data) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_15 = module_0.StackNode(stack_7)
    assert len(stack_node_15.data) == 0


def test_case_845():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_2)
    assert len(stack_node_7.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    str_0 = ""
    var_4 = module_0.check_parenthesis(str_0)
    assert var_4 is True
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data is True
    stack_node_10 = module_0.StackNode(str_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_11 = module_0.StackNode(var_5)
    assert stack_node_11.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_1 = None
    stack_node_12 = module_0.StackNode(none_type_1)
    stack_node_13 = module_0.StackNode(stack_9)
    assert len(stack_node_13.data) == 0
    stack_node_14 = module_0.StackNode(stack_node_12)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_15 = module_0.StackNode(var_6)
    assert stack_node_15.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_1 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_1)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_9 = stack_15.push(tuple_1)
    assert len(stack_15) == 1
    bool_1 = False
    stack_node_16 = module_0.StackNode(bool_1)
    stack_node_17 = module_0.StackNode(bool_1)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_10 = stack_16.__len__()
    assert var_10 == 0
    stack_node_18 = module_0.StackNode(none_type_1)


def test_case_846():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_1)
    assert len(stack_node_5.data) == 0
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_8 = module_0.StackNode(stack_5)
    assert len(stack_node_8.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_9 = module_0.StackNode(stack_8)
    assert len(stack_node_9.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0


def test_case_847():
    bytes_0 = b"[+\x04A\xbe\x87>/P\x80\x97\x1c\x96\xdeU\x1fbW"
    stack_node_0 = module_0.StackNode(bytes_0)
    dict_0 = {}
    stack_node_1 = module_0.StackNode(dict_0)
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    stack_node_2 = module_0.StackNode(var_0)
    assert stack_node_2.data is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    int_0 = -460
    stack_node_4 = module_0.StackNode(int_0)
    var_1 = stack_0.push(var_0)
    assert len(stack_0) == 1


def test_case_848():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_0.__len__()
    assert var_2 == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    none_type_1 = None
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_3 = stack_1.push(none_type_1)
    assert len(stack_1) == 1
    var_4 = stack_1.push(stack_1)
    assert len(stack_1) == 2
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0


def test_case_849():
    str_0 = "O"
    stack_node_0 = module_0.StackNode(str_0)


def test_case_850():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_6 = module_0.StackNode(float_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_9 = module_0.StackNode(stack_10)
    assert len(stack_node_9.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_0 = None
    stack_node_10 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_11 = module_0.StackNode(bool_0)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    stack_node_12 = module_0.StackNode(bool_0)
    int_0 = 2594
    stack_node_13 = module_0.StackNode(int_0)
    bool_1 = False
    stack_node_14 = module_0.StackNode(bool_1)
    stack_node_15 = module_0.StackNode(bool_1)
    none_type_1 = None
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.push(none_type_1)
    assert len(stack_14) == 1
    stack_node_16 = module_0.StackNode(var_8)
    var_9 = stack_14.__len__()
    assert var_9 == 1


def test_case_851():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    dict_1 = {var_0: var_0, float_0: stack_node_0}
    stack_node_2 = module_0.StackNode(dict_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    dict_2 = {}
    var_3 = module_0.check_parenthesis(dict_2)
    assert var_3 is True
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data is True
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_9.push(var_3)
    assert len(stack_9) == 1
    float_1 = 712.593
    dict_3 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_3)
    assert var_6 is True
    stack_node_7 = module_0.StackNode(float_1)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    stack_node_9 = module_0.StackNode(none_type_0)
    var_7 = stack_11.push(dict_2)
    assert len(stack_11) == 1


def test_case_852():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(tuple_1)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_0 = module_0.StackNode(stack_3)
    assert len(stack_node_0.data) == 0
    bool_1 = False
    stack_node_1 = module_0.StackNode(bool_1)
    stack_node_2 = module_0.StackNode(bool_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0


def test_case_853():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    str_0 = ""
    var_2 = module_0.check_parenthesis(str_0)
    assert var_2 is True
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data is True
    stack_node_3 = module_0.StackNode(str_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    var_6 = stack_5.__len__()
    assert var_6 == 0
    stack_node_6 = module_0.StackNode(stack_5)
    assert len(stack_node_6.data) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    stack_node_7 = module_0.StackNode(float_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_1 = None
    stack_node_8 = module_0.StackNode(none_type_1)
    stack_node_9 = module_0.StackNode(none_type_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_2 = None
    stack_node_10 = module_0.StackNode(none_type_2)
    stack_node_11 = module_0.StackNode(stack_7)
    assert len(stack_node_11.data) == 0
    stack_node_12 = module_0.StackNode(float_1)


def test_case_854():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    none_type_0 = None
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.push(none_type_0)
    assert len(stack_11) == 1
    bool_0 = False
    stack_node_7 = module_0.StackNode(bool_0)
    stack_node_8 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_node_9 = module_0.StackNode(none_type_1)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.push(bool_0)
    assert len(stack_12) == 1
    dict_0 = {}
    stack_node_10 = module_0.StackNode(dict_0)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_11 = module_0.StackNode(var_6)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_node_11)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_7 = stack_15.__len__()
    assert var_7 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_14 = module_0.StackNode(var_7)
    assert stack_node_14.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_8 = stack_17.__len__()
    assert var_8 == 0
    stack_node_15 = module_0.StackNode(none_type_0)


def test_case_855():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_node_0 = module_0.StackNode(stack_0)
    assert len(stack_node_0.data) == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.push(none_type_0)
    assert len(stack_1) == 1
    stack_node_3 = module_0.StackNode(var_0)
    none_type_1 = None
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.push(none_type_1)
    assert len(stack_2) == 1
    var_2 = stack_2.push(stack_2)
    assert len(stack_2) == 2
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_3)
    assert len(stack_node_7.data) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    var_5 = stack_3.push(stack_node_6)
    assert len(stack_3) == 1
    assert len(stack_node_7.data) == 1
    bool_1 = False
    stack_node_8 = module_0.StackNode(bool_1)
    stack_node_9 = module_0.StackNode(bool_1)
    none_type_2 = None
    stack_node_10 = module_0.StackNode(none_type_2)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_6 = stack_5.push(bool_1)
    assert len(stack_5) == 1
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_7 = stack_6.__len__()
    assert var_7 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_11 = module_0.StackNode(var_7)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_node_11)
    stack_node_14 = module_0.StackNode(stack_6)
    assert len(stack_node_14.data) == 0
    var_8 = stack_7.__len__()
    assert var_8 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_9 = stack_8.__len__()
    assert var_9 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_15 = module_0.StackNode(var_9)
    assert stack_node_15.data == 0
    stack_node_16 = module_0.StackNode(stack_node_15)
    stack_node_17 = module_0.StackNode(stack_8)
    assert len(stack_node_17.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_10 = stack_10.__len__()
    assert var_10 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_18 = module_0.StackNode(var_10)
    assert stack_node_18.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_11 = stack_13.__len__()
    assert var_11 == 0
    dict_0 = {}
    var_12 = module_0.check_parenthesis(dict_0)
    assert var_12 is True
    stack_node_19 = module_0.StackNode(var_12)
    assert stack_node_19.data is True
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_13 = stack_14.__len__()
    assert var_13 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_14 = stack_14.push(var_12)
    assert len(stack_14) == 1
    none_type_3 = None
    stack_node_20 = module_0.StackNode(none_type_3)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0


def test_case_856():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_1.data) == 1
    bool_0 = True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.push(bool_0)
    assert len(stack_1) == 1
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 1
    bool_1 = True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.push(bool_1)
    assert len(stack_2) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_node_5 = module_0.StackNode(none_type_1)
    dict_0 = {}
    stack_node_6 = module_0.StackNode(dict_0)
    str_0 = ""
    var_4 = module_0.check_parenthesis(str_0)
    assert var_4 is True
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data is True
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    float_0 = -0.8
    stack_node_8 = module_0.StackNode(float_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_2 = None
    stack_node_9 = module_0.StackNode(none_type_2)
    var_5 = stack_7.push(none_type_2)
    assert len(stack_7) == 1
    bool_2 = True
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.push(bool_2)
    assert len(stack_8) == 1
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_3 = None
    stack_node_10 = module_0.StackNode(none_type_3)
    stack_node_11 = module_0.StackNode(none_type_3)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    stack_node_12 = module_0.StackNode(stack_0)
    assert len(stack_node_12.data) == 1


def test_case_857():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_3 = module_0.check_parenthesis(str_0)
    assert var_3 is False
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data is False
    dict_0 = {}
    stack_node_6 = module_0.StackNode(dict_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_2 = None
    stack_node_7 = module_0.StackNode(none_type_2)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    var_7 = stack_4.__len__()
    assert var_7 == 0


def test_case_858():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    var_2 = stack_1.push(stack_node_3)
    assert len(stack_1) == 1
    assert len(stack_node_4.data) == 1
    bool_0 = True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.push(bool_0)
    assert len(stack_3) == 1
    int_0 = 2594
    stack_node_5 = module_0.StackNode(int_0)
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0


def test_case_859():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_0.__len__()
    assert var_2 == 0
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    bool_1 = False
    stack_node_4 = module_0.StackNode(bool_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_3 = stack_1.__len__()
    assert var_3 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(bool_1)


def test_case_860():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(none_type_0)
    dict_0 = {}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_node_7 = module_0.StackNode(stack_5)
    assert len(stack_node_7.data) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_node_8 = module_0.StackNode(stack_5)
    assert len(stack_node_8.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_9 = module_0.StackNode(stack_6)
    assert len(stack_node_9.data) == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_11 = module_0.StackNode(var_5)
    assert stack_node_11.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    bytes_0 = b"[+\x04A\xbe\x87>/P\x80\x97\x1c\x96\xdeU\x1fbW"
    stack_node_12 = module_0.StackNode(bytes_0)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_2 = None
    stack_node_13 = module_0.StackNode(none_type_2)
    stack_node_14 = module_0.StackNode(stack_12)
    assert len(stack_node_14.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    none_type_3 = None
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_7 = stack_15.push(none_type_3)
    assert len(stack_15) == 1
    var_8 = stack_15.push(stack_15)
    assert len(stack_15) == 2
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0


def test_case_861():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_5 = stack_8.__len__()
    assert var_5 == 0
    str_0 = ""
    var_6 = module_0.check_parenthesis(str_0)
    assert var_6 is True
    stack_node_5 = module_0.StackNode(var_6)
    assert stack_node_5.data is True
    none_type_1 = None
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.push(none_type_1)
    assert len(stack_10) == 1
    var_8 = stack_10.pop()
    assert len(stack_10) == 0
    bool_0 = True
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_9 = stack_11.push(bool_0)
    assert len(stack_11) == 1
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_2 = None
    stack_node_6 = module_0.StackNode(none_type_2)
    stack_node_7 = module_0.StackNode(none_type_2)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_10 = stack_13.__len__()
    assert var_10 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_8 = module_0.StackNode(var_10)
    assert stack_node_8.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    dict_1 = {}
    var_11 = module_0.check_parenthesis(dict_1)
    assert var_11 is True
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    str_1 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_12 = module_0.check_parenthesis(str_1)
    assert var_12 is False
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_13 = stack_18.__len__()
    assert var_13 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_9 = module_0.StackNode(var_13)
    assert stack_node_9.data == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    var_14 = stack_20.push(stack_22)
    assert len(stack_20) == 1
    var_15 = stack_20.__len__()
    assert var_15 == 1


def test_case_862():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_1 = module_0.check_parenthesis(dict_1)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(float_1)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(stack_5)
    assert len(stack_node_5.data) == 0
    stack_node_6 = module_0.StackNode(stack_7)
    assert len(stack_node_6.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    var_5 = stack_9.push(none_type_1)
    assert len(stack_9) == 1
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_10)
    assert len(stack_node_10.data) == 0
    dict_2 = {}
    stack_node_11 = module_0.StackNode(dict_2)
    str_0 = ""
    var_7 = module_0.check_parenthesis(str_0)
    assert var_7 is True
    stack_node_12 = module_0.StackNode(var_7)
    assert stack_node_12.data is True
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_8 = stack_6.__len__()
    assert var_8 == 0


def test_case_863():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_1 = module_0.StackNode(complex_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0


def test_case_864():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_1 = module_0.StackNode(var_0)


def test_case_865():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(stack_2)
    assert len(stack_node_0.data) == 0
    var_2 = stack_2.push(var_1)
    assert len(stack_2) == 1
    assert len(stack_node_0.data) == 1
    dict_1 = {}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data is True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_4)
    assert stack_node_2.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(stack_3)
    assert len(stack_node_3.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_5 = module_0.StackNode(stack_6)
    assert len(stack_node_5.data) == 0
    stack_node_6 = module_0.StackNode(stack_8)
    assert len(stack_node_6.data) == 0
    bool_0 = False
    stack_node_7 = module_0.StackNode(bool_0)
    stack_node_8 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.push(none_type_0)
    assert len(stack_10) == 1
    stack_node_9 = module_0.StackNode(var_6)
    float_1 = 712.593
    dict_2 = {float_1: float_1, float_1: float_1}
    var_7 = module_0.check_parenthesis(dict_2)
    assert var_7 is True
    stack_node_10 = module_0.StackNode(float_1)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_1 = None
    stack_node_11 = module_0.StackNode(none_type_1)
    stack_node_12 = module_0.StackNode(none_type_1)
    bool_1 = False
    stack_node_13 = module_0.StackNode(bool_1)
    stack_node_14 = module_0.StackNode(bool_1)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    none_type_2 = None
    stack_node_15 = module_0.StackNode(none_type_2)
    stack_node_16 = module_0.StackNode(stack_13)
    assert len(stack_node_16.data) == 0
    var_8 = stack_2.peek()
    assert var_8 is True


def test_case_866():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_4.__len__()
    assert var_4 == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0


def test_case_867():
    dict_0 = {}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    dict_1 = {}
    var_2 = module_0.check_parenthesis(dict_1)
    assert var_2 is True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    float_0 = 712.593
    dict_2 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_2)
    assert var_3 is True
    stack_node_3 = module_0.StackNode(bool_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    none_type_1 = None
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.push(none_type_1)
    assert len(stack_11) == 1
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_2 = None
    stack_node_5 = module_0.StackNode(none_type_2)
    stack_node_6 = module_0.StackNode(stack_12)
    assert len(stack_node_6.data) == 0
    stack_node_7 = module_0.StackNode(stack_node_5)
    dict_3 = {}
    stack_node_8 = module_0.StackNode(dict_3)
    str_0 = ""
    var_7 = module_0.check_parenthesis(str_0)
    assert var_7 is True
    stack_node_9 = module_0.StackNode(var_7)
    assert stack_node_9.data is True
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = module_0.check_parenthesis(str_0)
    assert var_8 is True
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0


def test_case_868():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    float_1 = -0.8
    stack_node_1 = module_0.StackNode(float_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(stack_4)
    assert len(stack_node_3.data) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    bool_1 = True
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.push(bool_1)
    assert len(stack_7) == 1
    stack_node_6 = module_0.StackNode(var_4)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_8)
    assert len(stack_node_10.data) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    var_7 = stack_8.push(stack_node_9)
    assert len(stack_8) == 1
    assert len(stack_node_10.data) == 1
    none_type_1 = None
    stack_node_11 = module_0.StackNode(none_type_1)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_8 = stack_11.__len__()
    assert var_8 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_12 = module_0.StackNode(var_8)
    assert stack_node_12.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_9 = stack_14.__len__()
    assert var_9 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_10 = stack_15.__len__()
    assert var_10 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_13 = module_0.StackNode(var_10)
    assert stack_node_13.data == 0
    stack_node_14 = module_0.StackNode(stack_node_13)
    stack_node_15 = module_0.StackNode(stack_node_13)
    stack_node_16 = module_0.StackNode(stack_15)
    assert len(stack_node_16.data) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_17 = module_0.StackNode(var_10)
    assert stack_node_17.data == 0
    var_11 = stack_8.pop()
    assert len(stack_8) == 0
    assert len(stack_node_10.data) == 0
    assert (
        f"{type(var_11).__module__}.{type(var_11).__qualname__}" == "stack1.StackNode"
    )
    assert (
        f"{type(var_11.data).__module__}.{type(var_11.data).__qualname__}"
        == "stack1.StackNode"
    )
    assert var_11.next is None


def test_case_869():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_2 = module_0.StackNode(bool_0)
    bool_1 = False
    stack_node_3 = module_0.StackNode(bool_1)
    stack_node_4 = module_0.StackNode(bool_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    bool_2 = True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.push(bool_2)
    assert len(stack_2) == 1
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_7 = module_0.StackNode(stack_4)
    assert len(stack_node_7.data) == 0
    none_type_1 = None
    stack_node_8 = module_0.StackNode(none_type_1)
    bool_3 = False
    stack_node_9 = module_0.StackNode(bool_3)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_10 = module_0.StackNode(var_3)
    assert stack_node_10.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    str_0 = ""
    var_5 = module_0.check_parenthesis(str_0)
    assert var_5 is True
    stack_node_11 = module_0.StackNode(var_5)
    assert stack_node_11.data is True
    stack_node_12 = module_0.StackNode(str_0)
    bool_4 = False
    stack_node_13 = module_0.StackNode(bool_4)
    stack_node_14 = module_0.StackNode(bool_4)
    none_type_2 = None
    stack_node_15 = module_0.StackNode(none_type_2)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.push(bool_4)
    assert len(stack_10) == 1
    none_type_3 = None
    stack_node_16 = module_0.StackNode(none_type_3)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_8 = module_0.check_parenthesis(dict_1)
    assert var_8 is True
    var_9 = stack_11.__len__()
    assert var_9 == 0
    stack_node_17 = module_0.StackNode(stack_11)
    assert len(stack_node_17.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_4 = None
    stack_node_18 = module_0.StackNode(none_type_4)
    stack_node_19 = module_0.StackNode(stack_12)
    assert len(stack_node_19.data) == 0
    var_10 = stack_1.__len__()
    assert var_10 == 0


def test_case_870():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    int_0 = 3109
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.push(int_0)
    assert len(stack_1) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_1 = module_0.StackNode(stack_4)
    assert len(stack_node_1.data) == 0
    var_3 = stack_4.push(var_2)
    assert len(stack_4) == 1
    assert len(stack_node_1.data) == 1
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    var_6 = stack_5.__len__()
    assert var_6 == 0
    stack_node_3 = module_0.StackNode(stack_5)
    assert len(stack_node_3.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_7 = stack_7.__len__()
    assert var_7 == 0
    stack_node_4 = module_0.StackNode(var_7)
    assert stack_node_4.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_8 = stack_8.__len__()
    assert var_8 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_5 = module_0.StackNode(var_8)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_8)
    assert len(stack_node_8.data) == 0
    var_9 = stack_9.__len__()
    assert var_9 == 0
    var_10 = stack_8.push(stack_node_7)
    assert len(stack_8) == 1
    assert len(stack_node_8.data) == 1
    complex_0 = -3711.3 - 806.2j
    stack_node_9 = module_0.StackNode(complex_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_11 = stack_10.__len__()
    assert var_11 == 0
    stack_node_10 = module_0.StackNode(var_11)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0


def test_case_871():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    dict_1 = {var_0: var_0, float_0: stack_node_0}
    stack_node_2 = module_0.StackNode(dict_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0


def test_case_872():
    int_0 = 2594
    stack_node_0 = module_0.StackNode(int_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(stack_0)
    assert len(stack_node_4.data) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_5 = module_0.StackNode(var_1)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_10 = module_0.StackNode(stack_8)
    assert len(stack_node_10.data) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    stack_node_11 = module_0.StackNode(float_1)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_1 = None
    stack_node_12 = module_0.StackNode(none_type_1)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_13 = module_0.StackNode(var_8)
    assert stack_node_13.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_9 = stack_4.push(stack_17)
    assert len(stack_4) == 1


def test_case_873():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    var_1 = stack_1.push(stack_node_1)
    assert len(stack_1) == 1
    assert len(stack_node_2.data) == 1


def test_case_874():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    dict_0 = {stack_node_0: stack_node_0}
    list_0 = [dict_0, stack_node_0]
    stack_node_1 = module_0.StackNode(list_0)


def test_case_875():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    dict_0 = {}
    stack_node_6 = module_0.StackNode(dict_0)
    str_0 = ""
    var_3 = module_0.check_parenthesis(str_0)
    assert var_3 is True
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data is True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = module_0.check_parenthesis(str_0)
    assert var_4 is True
    int_0 = 2594
    stack_node_8 = module_0.StackNode(int_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_0)
    assert len(stack_node_10.data) == 0


def test_case_876():
    bytes_0 = b"[+\x04A\xbe\x87>/P\x80\x97\x1c\x96\xdeU\x1fbW"
    stack_node_0 = module_0.StackNode(bytes_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_0)
    assert len(stack_node_4.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_1)
    assert stack_node_5.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(stack_6)
    assert len(stack_node_6.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_2 = stack_10.push(tuple_1)
    assert len(stack_10) == 1
    bool_1 = False
    stack_node_7 = module_0.StackNode(bool_1)
    stack_node_8 = module_0.StackNode(bool_1)
    none_type_0 = None
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_3 = stack_11.push(none_type_0)
    assert len(stack_11) == 1
    stack_node_9 = module_0.StackNode(var_3)
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_11 = module_0.StackNode(var_4)
    assert stack_node_11.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_12 = module_0.StackNode(stack_12)
    assert len(stack_node_12.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_node_13 = module_0.StackNode(float_0)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    none_type_1 = None
    stack_node_14 = module_0.StackNode(none_type_1)
    stack_node_15 = module_0.StackNode(none_type_1)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_6 = stack_16.__len__()
    assert var_6 == 0
    bool_2 = False
    stack_node_16 = module_0.StackNode(bool_2)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    stack_node_17 = module_0.StackNode(float_1)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    dict_2 = {var_7: var_7, float_1: stack_node_16}
    stack_node_18 = module_0.StackNode(dict_2)
    str_1 = "O"
    stack_node_19 = module_0.StackNode(str_1)
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0


def test_case_877():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    dict_0 = {}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data is True
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(stack_node_2)


def test_case_878():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    str_0 = ""
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is True
    int_0 = 3109
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.push(int_0)
    assert len(stack_3) == 1
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_0 = module_0.StackNode(var_3)
    assert stack_node_0.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    dict_0 = {}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_1 = module_0.StackNode(var_5)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_9)
    assert len(stack_node_4.data) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_5 = module_0.StackNode(var_7)
    assert stack_node_5.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_8 = stack_16.__len__()
    assert var_8 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_6 = module_0.StackNode(var_8)
    assert stack_node_6.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    stack_node_8 = module_0.StackNode(none_type_0)
    stack_node_9 = module_0.StackNode(stack_node_0)


def test_case_879():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(none_type_0)
    bool_1 = False
    stack_node_2 = module_0.StackNode(bool_1)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_3 = module_0.StackNode(float_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    dict_1 = {var_1: var_1, float_0: stack_node_2}
    stack_node_4 = module_0.StackNode(dict_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_9 = module_0.StackNode(stack_5)
    assert len(stack_node_9.data) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    dict_2 = {}
    stack_node_10 = module_0.StackNode(dict_2)
    str_0 = ""
    var_5 = module_0.check_parenthesis(str_0)
    assert var_5 is True
    stack_node_11 = module_0.StackNode(var_5)
    assert stack_node_11.data is True
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    bool_2 = False
    set_0 = {bool_2, bool_2, bool_2, bool_2}
    tuple_0 = (bool_2, bool_2)
    str_1 = "B@kK%+yXf"
    tuple_1 = (bool_2, set_0, tuple_0, str_1)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.push(tuple_1)
    assert len(stack_11) == 1
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0


def test_case_880():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    int_0 = 2594
    stack_node_3 = module_0.StackNode(int_0)
    str_0 = ""
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is True
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data is True
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_node_6 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.push(bool_0)
    assert len(stack_2) == 1
    var_4 = stack_2.push(none_type_0)
    assert len(stack_2) == 2
    bool_1 = False
    stack_node_8 = module_0.StackNode(bool_1)
    stack_node_9 = module_0.StackNode(bool_1)
    none_type_1 = None
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_5 = stack_3.push(none_type_1)
    assert len(stack_3) == 1
    stack_node_10 = module_0.StackNode(var_5)
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_6 = stack_4.__len__()
    assert var_6 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_12 = module_0.StackNode(var_6)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_node_12)
    stack_node_15 = module_0.StackNode(stack_4)
    assert len(stack_node_15.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_2 = None
    stack_node_16 = module_0.StackNode(none_type_2)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_7 = stack_8.__len__()
    assert var_7 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_3 = None
    stack_node_17 = module_0.StackNode(none_type_3)
    stack_node_18 = module_0.StackNode(stack_9)
    assert len(stack_node_18.data) == 0
    int_1 = -222
    set_0 = {int_1}
    stack_node_19 = module_0.StackNode(set_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0


def test_case_881():
    str_0 = "o2EICU9\x0bp7"
    stack_node_0 = module_0.StackNode(str_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_node_3 = module_0.StackNode(str_0)


def test_case_882():
    int_0 = 2594
    stack_node_0 = module_0.StackNode(int_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.push(tuple_1)
    assert len(stack_1) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_node_5 = module_0.StackNode(none_type_1)
    bytes_0 = b"[+\x04A\xbe\x87>/P\x80\x97\x1c\x96\xdeU\x1fbW"
    stack_node_6 = module_0.StackNode(bytes_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_2 = None
    stack_node_7 = module_0.StackNode(none_type_2)
    stack_node_8 = module_0.StackNode(stack_5)
    assert len(stack_node_8.data) == 0
    stack_node_9 = module_0.StackNode(stack_node_7)
    int_1 = 2594
    stack_node_10 = module_0.StackNode(int_1)
    none_type_3 = None
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.push(none_type_3)
    assert len(stack_6) == 1
    var_3 = stack_6.push(stack_6)
    assert len(stack_6) == 2
    var_4 = stack_6.peek()
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "stack1.Stack"
    assert len(var_4) == 2
    var_5 = module_0.check_parenthesis(set_0)
    assert var_5 is True


def test_case_883():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    str_0 = "o2EICU9\x0bp7"
    stack_node_1 = module_0.StackNode(str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_2 = module_0.StackNode(var_0)
    assert stack_node_2.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_5)
    assert len(stack_node_6.data) == 0
    var_2 = stack_5.push(stack_node_5)
    assert len(stack_5) == 1
    assert len(stack_node_6.data) == 1
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_8 = module_0.StackNode(stack_6)
    assert len(stack_node_8.data) == 0
    stack_node_9 = module_0.StackNode(stack_9)
    assert len(stack_node_9.data) == 0
    bool_0 = False
    stack_node_10 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_11 = module_0.StackNode(float_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    dict_1 = {var_4: var_4, float_0: stack_node_10}
    stack_node_12 = module_0.StackNode(dict_1)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_13 = module_0.StackNode(var_5)
    assert stack_node_13.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_14 = module_0.StackNode(stack_12)
    assert len(stack_node_14.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    stack_node_15 = module_0.StackNode(stack_8)
    assert len(stack_node_15.data) == 0


def test_case_884():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    bool_1 = True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.push(bool_1)
    assert len(stack_1) == 1
    stack_node_2 = module_0.StackNode(var_0)
    dict_0 = {}
    stack_node_3 = module_0.StackNode(dict_0)
    str_0 = ""
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is True
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data is True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = module_0.check_parenthesis(str_0)
    assert var_2 is True
    str_1 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_3 = module_0.check_parenthesis(str_1)
    assert var_3 is False
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_4.__len__()
    assert var_5 == 0
    var_6 = stack_4.__len__()
    assert var_6 == 0
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_7 = stack_8.__len__()
    assert var_7 == 0
    var_8 = stack_5.__len__()
    assert var_8 == 0


def test_case_885():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_node_3 = module_0.StackNode(stack_4)
    assert len(stack_node_3.data) == 0
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_node_5 = module_0.StackNode(bool_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    str_0 = "O"
    stack_node_7 = module_0.StackNode(str_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_9 = module_0.StackNode(stack_11)
    assert len(stack_node_9.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_10 = module_0.StackNode(complex_0)
    var_4 = stack_2.__len__()
    assert var_4 == 0


def test_case_886():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(stack_2)
    assert len(stack_node_6.data) == 0
    stack_node_7 = module_0.StackNode(stack_5)
    assert len(stack_node_7.data) == 0
    stack_node_8 = module_0.StackNode(stack_node_5)


def test_case_887():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_0)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_1)
    assert len(stack_node_6.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    var_2 = stack_1.push(stack_node_5)
    assert len(stack_1) == 1
    assert len(stack_node_6.data) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    var_3 = stack_3.push(none_type_1)
    assert len(stack_3) == 1
    stack_node_8 = module_0.StackNode(var_3)
    dict_0 = {}
    stack_node_9 = module_0.StackNode(dict_0)
    str_0 = ""
    var_4 = module_0.check_parenthesis(str_0)
    assert var_4 is True
    stack_node_10 = module_0.StackNode(var_4)
    assert stack_node_10.data is True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_5 = module_0.check_parenthesis(str_0)
    assert var_5 is True
    stack_node_11 = module_0.StackNode(stack_node_10)


def test_case_888():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_1 = module_0.StackNode(var_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_2 = module_0.check_parenthesis(str_0)
    assert var_2 is False
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data is False
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_6 = module_0.StackNode(stack_3)
    assert len(stack_node_6.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_2 = None
    stack_node_7 = module_0.StackNode(none_type_2)
    stack_node_8 = module_0.StackNode(stack_6)
    assert len(stack_node_8.data) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    bool_0 = False
    stack_node_9 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_node_10 = module_0.StackNode(float_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    dict_1 = {var_5: var_5, float_0: stack_node_9}
    stack_node_11 = module_0.StackNode(dict_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_12 = module_0.StackNode(var_6)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_9)
    assert len(stack_node_14.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_15 = module_0.StackNode(var_7)
    assert stack_node_15.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_8 = stack_12.__len__()
    assert var_8 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_16 = module_0.StackNode(var_8)
    assert stack_node_16.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0


def test_case_889():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    dict_0 = {}
    stack_node_4 = module_0.StackNode(dict_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    var_3 = stack_2.__len__()
    assert var_3 == 0
    str_0 = ""
    var_4 = module_0.check_parenthesis(str_0)
    assert var_4 is True
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data is True
    stack_node_8 = module_0.StackNode(str_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_5 = stack_3.__len__()
    assert var_5 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    none_type_0 = None
    stack_node_12 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_6 = stack_5.__len__()
    assert var_6 == 0
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    var_8 = stack_5.__len__()
    assert var_8 == 0
    stack_node_13 = module_0.StackNode(stack_5)
    assert len(stack_node_13.data) == 0
    var_9 = stack_2.__len__()
    assert var_9 == 0


def test_case_890():
    dict_0 = {}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_0.push(var_0)
    assert len(stack_0) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(stack_6)
    assert len(stack_node_3.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_node_5 = module_0.StackNode(stack_7)
    assert len(stack_node_5.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    stack_node_7 = module_0.StackNode(bool_0)
    none_type_2 = None
    stack_node_8 = module_0.StackNode(none_type_2)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.push(bool_0)
    assert len(stack_9) == 1
    str_0 = "o2EICU9\x0bp7"
    stack_node_9 = module_0.StackNode(str_0)
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    stack_node_10 = module_0.StackNode(float_0)
    stack_node_11 = module_0.StackNode(stack_2)
    assert len(stack_node_11.data) == 0


def test_case_891():
    dict_0 = {}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_0.push(var_0)
    assert len(stack_0) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    bool_0 = True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.push(bool_0)
    assert len(stack_5) == 1
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_node_7 = module_0.StackNode(stack_7)
    assert len(stack_node_7.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_2 = None
    stack_node_8 = module_0.StackNode(none_type_2)
    var_7 = stack_12.push(none_type_2)
    assert len(stack_12) == 1
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    stack_node_9 = module_0.StackNode(var_8)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    str_0 = ""
    var_9 = module_0.check_parenthesis(str_0)
    assert var_9 is True
    var_10 = stack_5.__len__()
    assert var_10 == 1


def test_case_892():
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is False
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    var_1 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.push(bool_0)
    assert len(stack_1) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_2)
    assert len(stack_node_7.data) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    var_5 = stack_2.push(stack_node_6)
    assert len(stack_2) == 1
    assert len(stack_node_7.data) == 1
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    stack_node_8 = module_0.StackNode(float_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_2 = None
    stack_node_9 = module_0.StackNode(none_type_2)
    stack_node_10 = module_0.StackNode(none_type_2)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_7 = stack_5.__len__()
    assert var_7 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_11 = module_0.StackNode(var_7)
    assert stack_node_11.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_8 = stack_6.__len__()
    assert var_8 == 0
    stack_node_12 = module_0.StackNode(stack_5)
    assert len(stack_node_12.data) == 0
    stack_node_13 = module_0.StackNode(stack_0)
    assert len(stack_node_13.data) == 1


def test_case_893():
    dict_0 = {}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_1)
    assert var_2 is True
    stack_node_0 = module_0.StackNode(stack_2)
    assert len(stack_node_0.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_4)
    assert len(stack_node_3.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(stack_5)
    assert len(stack_node_5.data) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_6 = module_0.check_parenthesis(str_0)
    assert var_6 is False
    int_0 = 2594
    stack_node_6 = module_0.StackNode(int_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_7 = stack_9.__len__()
    assert var_7 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_7 = module_0.StackNode(var_7)
    assert stack_node_7.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_8 = stack_11.__len__()
    assert var_8 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_8 = module_0.StackNode(var_8)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_11)
    assert len(stack_node_11.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0


def test_case_894():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    var_1 = stack_1.push(stack_node_1)
    assert len(stack_1) == 1
    assert len(stack_node_2.data) == 1
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_node_4 = module_0.StackNode(bool_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    int_0 = 3109
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.push(int_0)
    assert len(stack_3) == 1
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_4)
    assert len(stack_node_8.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_7)
    assert len(stack_node_11.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0


def test_case_895():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_node_3 = module_0.StackNode(stack_node_2)
    bytes_0 = b""
    var_1 = stack_0.push(bytes_0)
    assert len(stack_0) == 2


def test_case_896():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_2.push(stack_4)
    assert len(stack_2) == 1
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.push(none_type_0)
    assert len(stack_5) == 1
    stack_node_3 = module_0.StackNode(var_2)
    stack_node_4 = module_0.StackNode(stack_node_3)
    var_3 = stack_1.__len__()
    assert var_3 == 0


def test_case_897():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_0)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    none_type_0 = None
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.push(none_type_0)
    assert len(stack_5) == 1
    var_2 = stack_5.pop()
    assert len(stack_5) == 0
    none_type_1 = None
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.push(none_type_1)
    assert len(stack_6) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_8)
    assert len(stack_node_7.data) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_2 = None
    stack_node_8 = module_0.StackNode(none_type_2)
    var_6 = stack_10.push(none_type_2)
    assert len(stack_10) == 1
    stack_node_9 = module_0.StackNode(var_6)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_10 = module_0.StackNode(var_7)
    assert stack_node_10.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    none_type_3 = None
    stack_node_11 = module_0.StackNode(none_type_3)
    stack_node_12 = module_0.StackNode(stack_14)
    assert len(stack_node_12.data) == 0
    stack_node_13 = module_0.StackNode(stack_0)
    assert len(stack_node_13.data) == 0


def test_case_898():
    int_0 = 2594
    stack_node_0 = module_0.StackNode(int_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    var_1 = stack_0.push(stack_0)
    assert len(stack_0) == 2
    var_2 = stack_0.peek()
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "stack1.Stack"
    assert len(var_2) == 2
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_3 = stack_1.__len__()
    assert var_3 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_node_3 = module_0.StackNode(bool_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    var_4 = stack_6.push(none_type_1)
    assert len(stack_6) == 1
    stack_node_5 = module_0.StackNode(var_4)
    none_type_2 = None
    stack_node_6 = module_0.StackNode(none_type_2)
    bool_1 = False
    stack_node_7 = module_0.StackNode(bool_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_node_8 = module_0.StackNode(bool_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    str_0 = ""
    var_7 = module_0.check_parenthesis(str_0)
    assert var_7 is True
    stack_node_9 = module_0.StackNode(var_7)
    assert stack_node_9.data is True
    stack_node_10 = module_0.StackNode(str_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0


def test_case_899():
    int_0 = -222
    set_0 = {int_0}
    stack_node_0 = module_0.StackNode(set_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    none_type_0 = None
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.push(none_type_0)
    assert len(stack_6) == 1
    var_4 = stack_6.pop()
    assert len(stack_6) == 0
    none_type_1 = None
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.push(none_type_1)
    assert len(stack_7) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_node_4 = module_0.StackNode(bool_0)
    none_type_2 = None
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_12.push(none_type_2)
    assert len(stack_12) == 1
    stack_node_5 = module_0.StackNode(var_7)
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_7 = module_0.StackNode(var_8)
    assert stack_node_7.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_8 = module_0.StackNode(stack_13)
    assert len(stack_node_8.data) == 0
    stack_node_9 = module_0.StackNode(stack_16)
    assert len(stack_node_9.data) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0


def test_case_900():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(tuple_1)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_0 = module_0.StackNode(stack_3)
    assert len(stack_node_0.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    bool_1 = False
    stack_node_2 = module_0.StackNode(bool_1)
    stack_node_3 = module_0.StackNode(bool_1)
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.push(bool_1)
    assert len(stack_5) == 1
    var_4 = stack_5.push(none_type_1)
    assert len(stack_5) == 2
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    dict_1 = {}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    var_7 = stack_7.__len__()
    assert var_7 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_8 = stack_8.__len__()
    assert var_8 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_6 = module_0.StackNode(var_8)
    assert stack_node_6.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_7 = module_0.StackNode(stack_8)
    assert len(stack_node_7.data) == 0
    stack_node_8 = module_0.StackNode(stack_10)
    assert len(stack_node_8.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_9 = stack_12.__len__()
    assert var_9 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_9 = module_0.StackNode(var_9)
    assert stack_node_9.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_10 = stack_13.__len__()
    assert var_10 == 0
    var_11 = stack_15.__len__()
    assert var_11 == 0
    float_1 = 712.593
    dict_2 = {float_1: float_1, float_1: float_1}
    var_12 = module_0.check_parenthesis(dict_2)
    assert var_12 is True
    bool_2 = True
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_13 = stack_17.push(bool_2)
    assert len(stack_17) == 1
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    none_type_2 = None
    stack_node_10 = module_0.StackNode(none_type_2)
    stack_node_11 = module_0.StackNode(none_type_2)
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_14 = stack_19.__len__()
    assert var_14 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_12 = module_0.StackNode(var_14)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_node_12)
    stack_node_15 = module_0.StackNode(stack_19)
    assert len(stack_node_15.data) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_16 = module_0.StackNode(var_14)
    assert stack_node_16.data == 0
    var_15 = stack_0.__len__()
    assert var_15 == 1


def test_case_901():
    dict_0 = {}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_0.push(var_0)
    assert len(stack_0) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_5.push(stack_7)
    assert len(stack_5) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_2 = module_0.StackNode(var_5)
    assert stack_node_2.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_12.__len__()
    assert var_7 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_3 = module_0.StackNode(var_7)
    assert stack_node_3.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_4 = module_0.StackNode(stack_12)
    assert len(stack_node_4.data) == 0
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_node_6 = module_0.StackNode(bool_0)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_8 = stack_16.__len__()
    assert var_8 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0


@pytest.mark.xfail(strict=True)
def test_case_902():
    none_type_0 = None
    module_0.postfix_eval(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_903():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    module_0.postfix_eval(stack_0)


@pytest.mark.xfail(strict=True)
def test_case_904():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_0.push(stack_2)


@pytest.mark.xfail(strict=True)
def test_case_905():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    module_0.check_parenthesis(stack_0)


@pytest.mark.xfail(strict=True)
def test_case_906():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    tuple_0 = ()
    module_0.postfix_eval(tuple_0)


def test_case_907():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    with pytest.raises(ValueError):
        stack_4.peek()


@pytest.mark.xfail(strict=True)
def test_case_908():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1.peek()


def test_case_909():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    with pytest.raises(ValueError):
        stack_1.peek()


@pytest.mark.xfail(strict=True)
def test_case_910():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    module_0.check_parenthesis(stack_2)


@pytest.mark.xfail(strict=True)
def test_case_911():
    none_type_0 = None
    module_0.postfix_eval(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_912():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    module_0.check_parenthesis(stack_0)


def test_case_913():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    with pytest.raises(ValueError):
        stack_1.pop()


def test_case_914():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    with pytest.raises(ValueError):
        stack_0.peek()


def test_case_915():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    with pytest.raises(ValueError):
        stack_1.peek()


@pytest.mark.xfail(strict=True)
def test_case_916():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.check_parenthesis(list_0)


@pytest.mark.xfail(strict=True)
def test_case_917():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    module_0.postfix_eval(var_0)


def test_case_918():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    with pytest.raises(ValueError):
        stack_9.peek()


@pytest.mark.xfail(strict=True)
def test_case_919():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    module_0.postfix_eval(stack_6)


@pytest.mark.xfail(strict=True)
def test_case_920():
    none_type_0 = None
    str_0 = "ya\r&.-)fvwLh3O"
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is False
    var_0.push(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_921():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    module_0.postfix_eval(stack_5)


@pytest.mark.xfail(strict=True)
def test_case_922():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    module_0.check_parenthesis(var_1)


def test_case_923():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    with pytest.raises(ValueError):
        stack_0.pop()


def test_case_924():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    with pytest.raises(ValueError):
        stack_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_925():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_4 = module_0.StackNode(stack_10)
    assert len(stack_node_4.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_5 = stack_14.__len__()
    assert var_5 == 0
    module_0.postfix_eval(stack_6)


@pytest.mark.xfail(strict=True)
def test_case_926():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_0.push(stack_1)


@pytest.mark.xfail(strict=True)
def test_case_927():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    module_0.check_parenthesis(stack_4)


@pytest.mark.xfail(strict=True)
def test_case_928():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_4 = module_0.StackNode(stack_10)
    assert len(stack_node_4.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_4 = stack_14.__len__()
    assert var_4 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_5 = stack_16.__len__()
    assert var_5 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_6 = stack_18.__len__()
    assert var_6 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    module_0.postfix_eval(var_1)


@pytest.mark.xfail(strict=True)
def test_case_929():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    module_0.check_parenthesis(var_0)


@pytest.mark.xfail(strict=True)
def test_case_930():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(stack_4)
    assert len(stack_node_2.data) == 0
    none_type_0 = None
    module_0.check_parenthesis(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_931():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_5 = stack_14.__len__()
    assert var_5 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_5 = module_0.StackNode(stack_14)
    assert len(stack_node_5.data) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_6 = stack_18.__len__()
    assert var_6 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_7 = module_0.StackNode(stack_18)
    assert len(stack_node_7.data) == 0
    var_7 = stack_20.__len__()
    assert var_7 == 0
    module_0.postfix_eval(var_4)


@pytest.mark.xfail(strict=True)
def test_case_932():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    var_0.peek()


def test_case_933():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    with pytest.raises(ValueError):
        stack_6.pop()


@pytest.mark.xfail(strict=True)
def test_case_934():
    float_0 = 484.374
    list_0 = [float_0, float_0, float_0, float_0]
    var_0 = module_0.check_parenthesis(list_0)
    assert var_0 is True
    module_0.postfix_eval(var_0)


def test_case_935():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    with pytest.raises(ValueError):
        stack_4.peek()


def test_case_936():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    with pytest.raises(ValueError):
        stack_2.peek()


@pytest.mark.xfail(strict=True)
def test_case_937():
    bool_0 = False
    module_0.postfix_eval(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_938():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_5 = module_0.StackNode(stack_10)
    assert len(stack_node_5.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_5 = stack_14.__len__()
    assert var_5 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_1.peek()


@pytest.mark.xfail(strict=True)
def test_case_939():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_2 = stack_9.__len__()
    assert var_2 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_3 = stack_11.__len__()
    assert var_3 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_4 = stack_13.__len__()
    assert var_4 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    module_0.check_parenthesis(var_3)


@pytest.mark.xfail(strict=True)
def test_case_940():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    module_0.postfix_eval(var_2)


@pytest.mark.xfail(strict=True)
def test_case_941():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_942():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(stack_5)
    assert len(stack_node_3.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_4.__len__()


@pytest.mark.xfail(strict=True)
def test_case_943():
    int_0 = 0
    module_0.check_parenthesis(int_0)


@pytest.mark.xfail(strict=True)
def test_case_944():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    module_0.check_parenthesis(stack_4)


@pytest.mark.xfail(strict=True)
def test_case_945():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(stack_6)
    assert len(stack_node_3.data) == 0
    module_0.check_parenthesis(var_2)


def test_case_946():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_4 = module_0.StackNode(stack_9)
    assert len(stack_node_4.data) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_6 = stack_15.__len__()
    assert var_6 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_7 = stack_18.__len__()
    assert var_7 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_7 = module_0.StackNode(var_7)
    assert stack_node_7.data == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    var_8 = stack_22.__len__()
    assert var_8 == 0
    with pytest.raises(ValueError):
        stack_20.pop()


def test_case_947():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_4 = module_0.StackNode(stack_9)
    assert len(stack_node_4.data) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_6 = module_0.StackNode(stack_13)
    assert len(stack_node_6.data) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    with pytest.raises(ValueError):
        stack_10.pop()


@pytest.mark.xfail(strict=True)
def test_case_948():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_2.push(var_2)


@pytest.mark.xfail(strict=True)
def test_case_949():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_5 = module_0.StackNode(stack_9)
    assert len(stack_node_5.data) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_5 = stack_14.__len__()
    assert var_5 == 0
    var_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_950():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    module_0.check_parenthesis(var_0)


def test_case_951():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    with pytest.raises(ValueError):
        stack_0.peek()


def test_case_952():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_3 = stack_13.__len__()
    assert var_3 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_4 = stack_15.__len__()
    assert var_4 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_5 = stack_17.__len__()
    assert var_5 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    with pytest.raises(ValueError):
        stack_11.peek()


@pytest.mark.xfail(strict=True)
def test_case_953():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_954():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_6 = module_0.StackNode(stack_11)
    assert len(stack_node_6.data) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_6 = stack_15.__len__()
    assert var_6 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_7 = stack_18.__len__()
    assert var_7 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_8 = module_0.StackNode(var_7)
    assert stack_node_8.data == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    var_8 = stack_22.__len__()
    assert var_8 == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_node_9 = module_0.StackNode(var_8)
    assert stack_node_9.data == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    var_9 = stack_24.__len__()
    assert var_9 == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0
    var_10 = stack_26.__len__()
    assert var_10 == 0
    stack_27 = module_0.Stack()
    assert len(stack_27) == 0
    stack_node_10 = module_0.StackNode(var_10)
    assert stack_node_10.data == 0
    stack_28 = module_0.Stack()
    assert len(stack_28) == 0
    stack_29 = module_0.Stack()
    assert len(stack_29) == 0
    stack_30 = module_0.Stack()
    assert len(stack_30) == 0
    var_0.push(var_9)


@pytest.mark.xfail(strict=True)
def test_case_955():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_5 = stack_14.__len__()
    assert var_5 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_6 = stack_16.__len__()
    assert var_6 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_4 = module_0.StackNode(var_6)
    assert stack_node_4.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_5 = module_0.StackNode(stack_16)
    assert len(stack_node_5.data) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_7 = stack_20.__len__()
    assert var_7 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_6 = module_0.StackNode(var_7)
    assert stack_node_6.data == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    var_8 = stack_24.__len__()
    assert var_8 == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    stack_node_7 = module_0.StackNode(var_8)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0
    stack_27 = module_0.Stack()
    assert len(stack_27) == 0
    var_9 = stack_27.__len__()
    assert var_9 == 0
    stack_28 = module_0.Stack()
    assert len(stack_28) == 0
    stack_node_9 = module_0.StackNode(var_9)
    assert stack_node_9.data == 0
    stack_29 = module_0.Stack()
    assert len(stack_29) == 0
    stack_30 = module_0.Stack()
    assert len(stack_30) == 0
    stack_node_10 = module_0.StackNode(stack_27)
    assert len(stack_node_10.data) == 0
    var_10 = stack_29.__len__()
    assert var_10 == 0
    var_5.push(stack_30)


@pytest.mark.xfail(strict=True)
def test_case_956():
    set_0 = set()
    list_0 = []
    var_0 = module_0.check_parenthesis(list_0)
    assert var_0 is True
    var_0.push(set_0)


def test_case_957():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_3 = stack_11.__len__()
    assert var_3 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_4 = stack_13.__len__()
    assert var_4 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_5 = stack_15.__len__()
    assert var_5 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_3 = module_0.StackNode(var_5)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_6 = stack_17.__len__()
    assert var_6 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_5 = module_0.StackNode(var_6)
    assert stack_node_5.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_7 = stack_21.__len__()
    assert var_7 == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_6 = module_0.StackNode(var_7)
    assert stack_node_6.data == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_node_7 = module_0.StackNode(stack_21)
    assert len(stack_node_7.data) == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    var_8 = stack_25.__len__()
    assert var_8 == 0
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0
    stack_node_8 = module_0.StackNode(var_8)
    assert stack_node_8.data == 0
    stack_27 = module_0.Stack()
    assert len(stack_27) == 0
    stack_28 = module_0.Stack()
    assert len(stack_28) == 0
    stack_node_9 = module_0.StackNode(stack_25)
    assert len(stack_node_9.data) == 0
    var_9 = stack_27.__len__()
    assert var_9 == 0
    stack_29 = module_0.Stack()
    assert len(stack_29) == 0
    var_10 = stack_29.__len__()
    assert var_10 == 0
    stack_30 = module_0.Stack()
    assert len(stack_30) == 0
    stack_node_10 = module_0.StackNode(var_10)
    assert stack_node_10.data == 0
    with pytest.raises(ValueError):
        stack_4.pop()


def test_case_958():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    with pytest.raises(ValueError):
        stack_1.peek()


@pytest.mark.xfail(strict=True)
def test_case_959():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_4 = stack_13.__len__()
    assert var_4 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_8 = module_0.StackNode(stack_13)
    assert len(stack_node_8.data) == 0
    var_5 = stack_15.__len__()
    assert var_5 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_6 = stack_18.__len__()
    assert var_6 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_7 = stack_20.__len__()
    assert var_7 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    var_8 = stack_22.__len__()
    assert var_8 == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_node_10 = module_0.StackNode(var_8)
    assert stack_node_10.data == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    stack_node_11 = module_0.StackNode(stack_22)
    assert len(stack_node_11.data) == 0
    module_0.postfix_eval(stack_4)


def test_case_960():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_6 = module_0.StackNode(stack_10)
    assert len(stack_node_6.data) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_6 = stack_15.__len__()
    assert var_6 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_7 = stack_17.__len__()
    assert var_7 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_9 = module_0.StackNode(var_7)
    assert stack_node_9.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_8 = stack_21.__len__()
    assert var_8 == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_10 = module_0.StackNode(var_8)
    assert stack_node_10.data == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_node_11 = module_0.StackNode(stack_21)
    assert len(stack_node_11.data) == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    var_9 = stack_25.__len__()
    assert var_9 == 0
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0
    var_10 = stack_26.__len__()
    assert var_10 == 0
    stack_27 = module_0.Stack()
    assert len(stack_27) == 0
    stack_node_12 = module_0.StackNode(var_10)
    assert stack_node_12.data == 0
    stack_28 = module_0.Stack()
    assert len(stack_28) == 0
    stack_29 = module_0.Stack()
    assert len(stack_29) == 0
    stack_30 = module_0.Stack()
    assert len(stack_30) == 0
    with pytest.raises(ValueError):
        stack_30.peek()


@pytest.mark.xfail(strict=True)
def test_case_961():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(stack_4)
    assert len(stack_node_2.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    module_0.check_parenthesis(var_1)


@pytest.mark.xfail(strict=True)
def test_case_962():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    module_0.postfix_eval(stack_node_0)


@pytest.mark.xfail(strict=True)
def test_case_963():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    module_0.check_parenthesis(stack_0)


@pytest.mark.xfail(strict=True)
def test_case_964():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(stack_4)
    assert len(stack_node_2.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.__len__()
    assert var_2 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    module_0.check_parenthesis(stack_0)


@pytest.mark.xfail(strict=True)
def test_case_965():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_1.push(stack_2)


def test_case_966():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(stack_4)
    assert len(stack_node_3.data) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_6 = stack_15.__len__()
    assert var_6 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_7 = stack_16.__len__()
    assert var_7 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_6 = module_0.StackNode(var_7)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_8 = stack_18.__len__()
    assert var_8 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_9 = module_0.StackNode(var_8)
    assert stack_node_9.data == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    var_9 = stack_22.__len__()
    assert var_9 == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_node_10 = module_0.StackNode(var_9)
    assert stack_node_10.data == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    with pytest.raises(ValueError):
        stack_8.peek()


@pytest.mark.xfail(strict=True)
def test_case_967():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    var_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_968():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_1.push(stack_3)


@pytest.mark.xfail(strict=True)
def test_case_969():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    module_0.postfix_eval(stack_6)


def test_case_970():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_3 = module_0.StackNode(var_5)
    assert stack_node_3.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_4 = module_0.StackNode(stack_13)
    assert len(stack_node_4.data) == 0
    var_6 = stack_15.__len__()
    assert var_6 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_7 = stack_17.__len__()
    assert var_7 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_5 = module_0.StackNode(var_7)
    assert stack_node_5.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_6 = module_0.StackNode(stack_17)
    assert len(stack_node_6.data) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_8 = stack_21.__len__()
    assert var_8 == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_7 = module_0.StackNode(var_8)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_9 = stack_23.__len__()
    assert var_9 == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_node_10 = module_0.StackNode(var_9)
    assert stack_node_10.data == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0
    var_10 = stack_26.__len__()
    assert var_10 == 0
    stack_27 = module_0.Stack()
    assert len(stack_27) == 0
    stack_node_11 = module_0.StackNode(var_10)
    assert stack_node_11.data == 0
    stack_28 = module_0.Stack()
    assert len(stack_28) == 0
    stack_29 = module_0.Stack()
    assert len(stack_29) == 0
    stack_30 = module_0.Stack()
    assert len(stack_30) == 0
    with pytest.raises(ValueError):
        stack_29.peek()


@pytest.mark.xfail(strict=True)
def test_case_971():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_6 = module_0.StackNode(stack_12)
    assert len(stack_node_6.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_5 = stack_16.__len__()
    assert var_5 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_6 = stack_20.__len__()
    assert var_6 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    var_7 = stack_24.__len__()
    assert var_7 == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    stack_node_9 = module_0.StackNode(var_7)
    assert stack_node_9.data == 0
    set_0 = {var_6, stack_22, stack_node_2, stack_node_6}
    module_0.postfix_eval(set_0)


@pytest.mark.xfail(strict=True)
def test_case_972():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_5 = module_0.StackNode(stack_12)
    assert len(stack_node_5.data) == 0
    var_5 = stack_14.__len__()
    assert var_5 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_6 = stack_16.__len__()
    assert var_6 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_7 = module_0.StackNode(stack_16)
    assert len(stack_node_7.data) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_7 = stack_20.__len__()
    assert var_7 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_8 = module_0.StackNode(var_7)
    assert stack_node_8.data == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_8 = stack_23.__len__()
    assert var_8 == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_node_9 = module_0.StackNode(var_8)
    assert stack_node_9.data == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    var_9 = stack_25.__len__()
    assert var_9 == 0
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0
    stack_node_10 = module_0.StackNode(var_9)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    module_0.postfix_eval(stack_node_5)


@pytest.mark.xfail(strict=True)
def test_case_973():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    module_0.postfix_eval(stack_node_0)


def test_case_974():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    with pytest.raises(ValueError):
        stack_4.peek()


@pytest.mark.xfail(strict=True)
def test_case_975():
    bool_0 = True
    module_0.postfix_eval(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_976():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_6 = module_0.StackNode(stack_10)
    assert len(stack_node_6.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_5 = stack_14.__len__()
    assert var_5 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_8 = module_0.StackNode(stack_14)
    assert len(stack_node_8.data) == 0
    var_6 = stack_16.__len__()
    assert var_6 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_7 = stack_18.__len__()
    assert var_7 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_9 = module_0.StackNode(var_7)
    assert stack_node_9.data == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_10 = module_0.StackNode(stack_18)
    assert len(stack_node_10.data) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_8 = stack_21.__len__()
    assert var_8 == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    var_9 = stack_22.__len__()
    assert var_9 == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_node_11 = module_0.StackNode(var_9)
    assert stack_node_11.data == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0
    module_0.postfix_eval(var_9)


@pytest.mark.xfail(strict=True)
def test_case_977():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(stack_7)
    assert len(stack_node_4.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_3 = stack_11.__len__()
    assert var_3 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    module_0.postfix_eval(stack_7)


@pytest.mark.xfail(strict=True)
def test_case_978():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.__len__()
    assert var_2 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_5 = stack_14.__len__()
    assert var_5 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_6 = stack_15.__len__()
    assert var_6 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_9 = module_0.StackNode(stack_15)
    assert len(stack_node_9.data) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_7 = stack_19.__len__()
    assert var_7 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_10 = module_0.StackNode(var_7)
    assert stack_node_10.data == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    var_8 = stack_22.__len__()
    assert var_8 == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_node_11 = module_0.StackNode(var_8)
    assert stack_node_11.data == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    stack_node_12 = module_0.StackNode(stack_22)
    assert len(stack_node_12.data) == 0
    var_9 = stack_24.__len__()
    assert var_9 == 0
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0
    var_10 = stack_26.__len__()
    assert var_10 == 0
    stack_27 = module_0.Stack()
    assert len(stack_27) == 0
    stack_node_13 = module_0.StackNode(var_10)
    assert stack_node_13.data == 0
    stack_28 = module_0.Stack()
    assert len(stack_28) == 0
    stack_29 = module_0.Stack()
    assert len(stack_29) == 0
    var_9.push(stack_node_1)


@pytest.mark.xfail(strict=True)
def test_case_979():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    module_0.check_parenthesis(var_3)


def test_case_980():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_10)
    assert len(stack_node_9.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_10 = module_0.StackNode(var_4)
    assert stack_node_10.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_5 = stack_17.__len__()
    assert var_5 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_11 = module_0.StackNode(var_5)
    assert stack_node_11.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_12 = module_0.StackNode(stack_17)
    assert len(stack_node_12.data) == 0
    var_6 = stack_19.__len__()
    assert var_6 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_7 = stack_21.__len__()
    assert var_7 == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_13 = module_0.StackNode(var_7)
    assert stack_node_13.data == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    var_8 = stack_25.__len__()
    assert var_8 == 0
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0
    stack_node_14 = module_0.StackNode(var_8)
    assert stack_node_14.data == 0
    stack_27 = module_0.Stack()
    assert len(stack_27) == 0
    stack_node_15 = module_0.StackNode(stack_25)
    assert len(stack_node_15.data) == 0
    with pytest.raises(ValueError):
        stack_8.peek()


@pytest.mark.xfail(strict=True)
def test_case_981():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_10 = module_0.StackNode(var_4)
    assert stack_node_10.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_2.pop()


def test_case_982():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_2 = stack_10.__len__()
    assert var_2 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_3 = stack_12.__len__()
    assert var_3 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_4 = stack_14.__len__()
    assert var_4 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_5 = stack_15.__len__()
    assert var_5 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_3 = module_0.StackNode(var_5)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_15)
    assert len(stack_node_6.data) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_6 = stack_17.__len__()
    assert var_6 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    bool_0 = False
    stack_node_8 = module_0.StackNode(bool_0)
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_7 = stack_19.__len__()
    assert var_7 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_9 = module_0.StackNode(var_7)
    assert stack_node_9.data == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_10 = module_0.StackNode(stack_19)
    assert len(stack_node_10.data) == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_8 = stack_23.__len__()
    assert var_8 == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_node_11 = module_0.StackNode(var_8)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_node_11)
    with pytest.raises(ValueError):
        stack_6.peek()


@pytest.mark.xfail(strict=True)
def test_case_983():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_13)
    assert len(stack_node_11.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_7 = stack_15.__len__()
    assert var_7 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_12 = module_0.StackNode(var_7)
    assert stack_node_12.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_8 = stack_20.__len__()
    assert var_8 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_13 = module_0.StackNode(var_8)
    assert stack_node_13.data == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_14 = module_0.StackNode(stack_20)
    assert len(stack_node_14.data) == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_9 = stack_23.__len__()
    assert var_9 == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_node_15 = module_0.StackNode(var_9)
    assert stack_node_15.data == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0
    stack_27 = module_0.Stack()
    assert len(stack_27) == 0
    var_10 = stack_27.__len__()
    assert var_10 == 0
    stack_28 = module_0.Stack()
    assert len(stack_28) == 0
    stack_node_16 = module_0.StackNode(var_10)
    assert stack_node_16.data == 0
    stack_node_17 = module_0.StackNode(stack_node_16)
    module_0.check_parenthesis(stack_24)


def test_case_984():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    with pytest.raises(ValueError):
        stack_0.peek()


def test_case_985():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    with pytest.raises(ValueError):
        stack_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_986():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    module_0.check_parenthesis(var_0)


@pytest.mark.xfail(strict=True)
def test_case_987():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    module_0.check_parenthesis(stack_4)


@pytest.mark.xfail(strict=True)
def test_case_988():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    module_0.postfix_eval(var_0)


@pytest.mark.xfail(strict=True)
def test_case_989():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    bool_0 = False
    stack_node_7 = module_0.StackNode(bool_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_9 = module_0.StackNode(stack_9)
    assert len(stack_node_9.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_10 = module_0.StackNode(var_4)
    assert stack_node_10.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_5 = stack_17.__len__()
    assert var_5 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_11 = module_0.StackNode(var_5)
    assert stack_node_11.data == 0
    var_2.__len__()


@pytest.mark.xfail(strict=True)
def test_case_990():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_3 = stack_12.__len__()
    assert var_3 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_4 = stack_14.__len__()
    assert var_4 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_5 = stack_16.__len__()
    assert var_5 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_6 = stack_17.__len__()
    assert var_6 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_17)
    assert len(stack_node_9.data) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_7 = stack_19.__len__()
    assert var_7 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_10 = module_0.StackNode(var_7)
    assert stack_node_10.data == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_7.pop()


@pytest.mark.xfail(strict=True)
def test_case_991():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_3 = stack_12.__len__()
    assert var_3 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_5 = module_0.StackNode(stack_12)
    assert len(stack_node_5.data) == 0
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    module_0.postfix_eval(stack_13)


@pytest.mark.xfail(strict=True)
def test_case_992():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.__len__()
    assert var_2 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_8)
    assert len(stack_node_6.data) == 0
    module_0.check_parenthesis(stack_5)


@pytest.mark.xfail(strict=True)
def test_case_993():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(stack_8)
    assert len(stack_node_8.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_12 = module_0.StackNode(var_5)
    assert stack_node_12.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_13 = module_0.StackNode(stack_13)
    assert len(stack_node_13.data) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_6 = stack_17.__len__()
    assert var_6 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_14 = module_0.StackNode(var_6)
    assert stack_node_14.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_15 = module_0.StackNode(stack_17)
    assert len(stack_node_15.data) == 0
    var_7 = stack_19.__len__()
    assert var_7 == 0
    bool_0 = False
    stack_node_16 = module_0.StackNode(bool_0)
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_8 = stack_21.__len__()
    assert var_8 == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_17 = module_0.StackNode(var_8)
    assert stack_node_17.data == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0
    module_0.check_parenthesis(var_1)


@pytest.mark.xfail(strict=True)
def test_case_994():
    none_type_0 = None
    module_0.postfix_eval(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_995():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    module_0.postfix_eval(var_1)


@pytest.mark.xfail(strict=True)
def test_case_996():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    module_0.postfix_eval(stack_0)


@pytest.mark.xfail(strict=True)
def test_case_997():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_6 = stack_15.__len__()
    assert var_6 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_7 = stack_20.__len__()
    assert var_7 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_9 = module_0.StackNode(var_7)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    var_8 = stack_22.__len__()
    assert var_8 == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_node_12 = module_0.StackNode(var_8)
    assert stack_node_12.data == 0
    bool_0 = False
    stack_node_13 = module_0.StackNode(bool_0)
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    var_9 = stack_24.__len__()
    assert var_9 == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    stack_node_14 = module_0.StackNode(var_9)
    assert stack_node_14.data == 0
    stack_node_15 = module_0.StackNode(stack_node_14)
    stack_node_16 = module_0.StackNode(stack_node_14)
    stack_node_17 = module_0.StackNode(stack_24)
    assert len(stack_node_17.data) == 0
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0
    var_10 = stack_26.__len__()
    assert var_10 == 0
    stack_27 = module_0.Stack()
    assert len(stack_27) == 0
    stack_node_18 = module_0.StackNode(var_10)
    assert stack_node_18.data == 0
    stack_28 = module_0.Stack()
    assert len(stack_28) == 0
    module_0.postfix_eval(var_6)


@pytest.mark.xfail(strict=True)
def test_case_998():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.__len__()
    assert var_2 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_3 = module_0.StackNode(stack_8)
    assert len(stack_node_3.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_3 = stack_12.__len__()
    assert var_3 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_4 = stack_13.__len__()
    assert var_4 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_5 = stack_15.__len__()
    assert var_5 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_15)
    assert len(stack_node_8.data) == 0
    var_6 = stack_16.__len__()
    assert var_6 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    none_type_0 = None
    stack_node_9 = module_0.StackNode(none_type_0)
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_7 = stack_18.__len__()
    assert var_7 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_10 = module_0.StackNode(var_7)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    module_0.check_parenthesis(stack_node_2)


@pytest.mark.xfail(strict=True)
def test_case_999():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_5 = stack_14.__len__()
    assert var_5 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_6 = stack_16.__len__()
    assert var_6 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_7 = stack_20.__len__()
    assert var_7 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_11 = module_0.StackNode(var_7)
    assert stack_node_11.data == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    var_8 = stack_22.__len__()
    assert var_8 == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_node_12 = module_0.StackNode(var_8)
    assert stack_node_12.data == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_node_13 = module_0.StackNode(stack_22)
    assert len(stack_node_13.data) == 0
    module_0.check_parenthesis(stack_2)


@pytest.mark.xfail(strict=True)
def test_case_1000():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_1 = stack_7.__len__()
    assert var_1 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_2 = stack_9.__len__()
    assert var_2 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_3 = stack_11.__len__()
    assert var_3 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_11)
    assert len(stack_node_6.data) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    var_4.pop()


@pytest.mark.xfail(strict=True)
def test_case_1001():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_6)
    assert len(stack_node_4.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_5 = stack_14.__len__()
    assert var_5 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_6 = stack_17.__len__()
    assert var_6 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    bool_0 = False
    stack_node_9 = module_0.StackNode(bool_0)
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_7 = stack_20.__len__()
    assert var_7 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_10 = module_0.StackNode(var_7)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_20)
    assert len(stack_node_13.data) == 0
    var_8 = stack_21.__len__()
    assert var_8 == 0
    var_1.__len__()


def test_case_1002():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    with pytest.raises(ValueError):
        stack_0.peek()


def test_case_1003():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    with pytest.raises(ValueError):
        stack_4.pop()


@pytest.mark.xfail(strict=True)
def test_case_1004():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    module_0.check_parenthesis(var_0)


def test_case_1005():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_8 = module_0.StackNode(stack_9)
    assert len(stack_node_8.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_10 = module_0.StackNode(stack_13)
    assert len(stack_node_10.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_6 = stack_16.__len__()
    assert var_6 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_11 = module_0.StackNode(var_6)
    assert stack_node_11.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_7 = stack_18.__len__()
    assert var_7 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_12 = module_0.StackNode(var_7)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_node_12)
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_8 = stack_20.__len__()
    assert var_8 == 0
    with pytest.raises(ValueError):
        stack_6.pop()


def test_case_1006():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    with pytest.raises(ValueError):
        stack_1.peek()


@pytest.mark.xfail(strict=True)
def test_case_1007():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_6)
    assert len(stack_node_4.data) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_10 = module_0.StackNode(stack_11)
    assert len(stack_node_10.data) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_7 = stack_15.__len__()
    assert var_7 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_11 = module_0.StackNode(var_7)
    assert stack_node_11.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_8 = stack_17.__len__()
    assert var_8 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_12 = module_0.StackNode(var_8)
    assert stack_node_12.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    module_0.check_parenthesis(stack_16)


@pytest.mark.xfail(strict=True)
def test_case_1008():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1009():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_5)
    assert len(stack_node_5.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_7 = module_0.StackNode(stack_7)
    assert len(stack_node_7.data) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    module_0.check_parenthesis(stack_node_4)


def test_case_1010():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_1 = stack_6.__len__()
    assert var_1 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.__len__()
    assert var_2 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_10)
    assert len(stack_node_5.data) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_6 = stack_15.__len__()
    assert var_6 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_8 = module_0.StackNode(stack_15)
    assert len(stack_node_8.data) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_7 = stack_18.__len__()
    assert var_7 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_9 = module_0.StackNode(var_7)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_node_12 = module_0.StackNode(stack_18)
    assert len(stack_node_12.data) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_8 = stack_20.__len__()
    assert var_8 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_13 = module_0.StackNode(var_8)
    assert stack_node_13.data == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    var_9 = stack_22.__len__()
    assert var_9 == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_node_14 = module_0.StackNode(var_9)
    assert stack_node_14.data == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    with pytest.raises(ValueError):
        stack_10.peek()


@pytest.mark.xfail(strict=True)
def test_case_1011():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_4 = module_0.StackNode(stack_6)
    assert len(stack_node_4.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_6 = stack_15.__len__()
    assert var_6 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_7 = stack_17.__len__()
    assert var_7 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_9 = module_0.StackNode(var_7)
    assert stack_node_9.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_10 = module_0.StackNode(stack_17)
    assert len(stack_node_10.data) == 0
    module_0.postfix_eval(stack_node_8)


@pytest.mark.xfail(strict=True)
def test_case_1012():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    float_0 = 1147.12935
    module_0.postfix_eval(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1013():
    bool_0 = False
    module_0.check_parenthesis(bool_0)


def test_case_1014():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    with pytest.raises(ValueError):
        stack_11.peek()


@pytest.mark.xfail(strict=True)
def test_case_1015():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    bool_0 = False
    module_0.check_parenthesis(bool_0)


def test_case_1016():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_6 = module_0.StackNode(stack_10)
    assert len(stack_node_6.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_4 = stack_13.__len__()
    assert var_4 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_5 = stack_16.__len__()
    assert var_5 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_6 = stack_18.__len__()
    assert var_6 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_7 = stack_20.__len__()
    assert var_7 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_9 = module_0.StackNode(var_7)
    assert stack_node_9.data == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    with pytest.raises(ValueError):
        stack_8.peek()


@pytest.mark.xfail(strict=True)
def test_case_1017():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_4 = module_0.StackNode(stack_6)
    assert len(stack_node_4.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_3 = stack_11.__len__()
    assert var_3 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_4 = stack_13.__len__()
    assert var_4 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_13)
    assert len(stack_node_9.data) == 0
    var_5 = stack_14.__len__()
    assert var_5 == 0
    var_5.pop()


@pytest.mark.xfail(strict=True)
def test_case_1018():
    none_type_0 = None
    module_0.postfix_eval(none_type_0)


def test_case_1019():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_2 = module_0.StackNode(var_4)
    assert stack_node_2.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_3 = module_0.StackNode(stack_10)
    assert len(stack_node_3.data) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    with pytest.raises(ValueError):
        stack_8.pop()


@pytest.mark.xfail(strict=True)
def test_case_1020():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_10)
    assert len(stack_node_10.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_12.__len__()
    assert var_7 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_11 = module_0.StackNode(var_7)
    assert stack_node_11.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_12 = module_0.StackNode(stack_12)
    assert len(stack_node_12.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_8 = stack_16.__len__()
    assert var_8 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_13 = module_0.StackNode(var_8)
    assert stack_node_13.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_9 = stack_18.__len__()
    assert var_9 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    module_0.postfix_eval(var_5)


@pytest.mark.xfail(strict=True)
def test_case_1021():
    dict_0 = {}
    module_0.postfix_eval(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1022():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_2)
    assert len(stack_node_7.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    bool_0 = False
    stack_node_8 = module_0.StackNode(bool_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_10 = module_0.StackNode(stack_6)
    assert len(stack_node_10.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_11 = module_0.StackNode(var_5)
    assert stack_node_11.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_12 = module_0.StackNode(stack_8)
    assert len(stack_node_12.data) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_13 = module_0.StackNode(var_7)
    assert stack_node_13.data == 0
    stack_node_14 = module_0.StackNode(stack_node_13)
    stack_node_15 = module_0.StackNode(stack_node_13)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_8 = stack_15.__len__()
    assert var_8 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_16 = module_0.StackNode(var_8)
    assert stack_node_16.data == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_9 = module_0.check_parenthesis(dict_0)
    assert var_9 is True
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    none_type_0 = None
    stack_node_17 = module_0.StackNode(none_type_0)
    module_0.postfix_eval(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1023():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_3)
    assert len(stack_node_6.data) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    bool_0 = False
    stack_node_7 = module_0.StackNode(bool_0)
    module_0.check_parenthesis(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1024():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(stack_9)
    assert len(stack_node_4.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_11)
    assert len(stack_node_8.data) == 0
    bool_0 = False
    stack_node_9 = module_0.StackNode(bool_0)
    module_0.postfix_eval(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1025():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_9)
    assert len(stack_node_8.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1026():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_6 = module_0.StackNode(stack_7)
    assert len(stack_node_6.data) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    bool_0 = False
    stack_node_7 = module_0.StackNode(bool_0)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_8 = stack_12.__len__()
    assert var_8 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_8 = module_0.StackNode(var_8)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_12)
    assert len(stack_node_11.data) == 0
    var_9 = stack_13.__len__()
    assert var_9 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_10 = stack_14.__len__()
    assert var_10 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_12 = module_0.StackNode(var_10)
    assert stack_node_12.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_11 = module_0.check_parenthesis(dict_0)
    assert var_11 is True
    var_11.peek()


def test_case_1027():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_3 = module_0.StackNode(stack_9)
    assert len(stack_node_3.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_12)
    assert len(stack_node_7.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_5 = stack_15.__len__()
    assert var_5 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    bool_0 = False
    stack_node_12 = module_0.StackNode(bool_0)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_6 = stack_17.__len__()
    assert var_6 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_13 = module_0.StackNode(var_6)
    assert stack_node_13.data == 0
    str_0 = "S,<"
    with pytest.raises(ValueError):
        module_0.postfix_eval(str_0)


def test_case_1028():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    with pytest.raises(ValueError):
        stack_2.pop()


def test_case_1029():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    with pytest.raises(ValueError):
        stack_2.peek()


@pytest.mark.xfail(strict=True)
def test_case_1030():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_6)
    assert len(stack_node_10.data) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    var_4 = stack_6.push(stack_node_9)
    assert len(stack_6) == 1
    assert len(stack_node_10.data) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_11 = module_0.StackNode(var_5)
    assert stack_node_11.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_0 = None
    stack_node_12 = module_0.StackNode(none_type_0)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_12.__len__()
    assert var_7 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_13 = module_0.StackNode(var_7)
    assert stack_node_13.data == 0
    stack_node_14 = module_0.StackNode(stack_node_13)
    stack_node_15 = module_0.StackNode(stack_node_13)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_16 = module_0.StackNode(var_8)
    assert stack_node_16.data == 0
    stack_node_17 = module_0.StackNode(stack_node_16)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_9 = stack_16.__len__()
    assert var_9 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_18 = module_0.StackNode(var_9)
    assert stack_node_18.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_19 = module_0.StackNode(stack_17)
    assert len(stack_node_19.data) == 0
    var_1.pop()


def test_case_1031():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_2)
    assert len(stack_node_6.data) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_8 = module_0.StackNode(stack_5)
    assert len(stack_node_8.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_10 = module_0.StackNode(stack_8)
    assert len(stack_node_10.data) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_11 = module_0.StackNode(var_6)
    assert stack_node_11.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_7 = stack_17.__len__()
    assert var_7 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_12 = module_0.StackNode(var_7)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_node_12)
    stack_node_15 = module_0.StackNode(stack_17)
    assert len(stack_node_15.data) == 0
    var_8 = stack_18.__len__()
    assert var_8 == 0
    var_9 = stack_17.push(stack_node_14)
    assert len(stack_17) == 1
    assert len(stack_node_15.data) == 1
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_10 = stack_19.__len__()
    assert var_10 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_16 = module_0.StackNode(var_10)
    assert stack_node_16.data == 0
    stack_node_17 = module_0.StackNode(stack_node_16)
    stack_node_18 = module_0.StackNode(stack_node_16)
    stack_node_19 = module_0.StackNode(stack_19)
    assert len(stack_node_19.data) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_11 = stack_21.__len__()
    assert var_11 == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_20 = module_0.StackNode(var_11)
    assert stack_node_20.data == 0
    stack_node_21 = module_0.StackNode(stack_node_20)
    with pytest.raises(ValueError):
        stack_15.pop()


def test_case_1032():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_11)
    assert len(stack_node_11.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_12 = module_0.StackNode(var_5)
    assert stack_node_12.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_6 = stack_17.__len__()
    assert var_6 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_13 = module_0.StackNode(var_6)
    assert stack_node_13.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_7 = stack_19.__len__()
    assert var_7 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_14 = module_0.StackNode(var_7)
    assert stack_node_14.data == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_15 = module_0.StackNode(stack_19)
    assert len(stack_node_15.data) == 0
    var_8 = stack_21.__len__()
    assert var_8 == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_9 = stack_23.__len__()
    assert var_9 == 0
    with pytest.raises(ValueError):
        stack_8.pop()


@pytest.mark.xfail(strict=True)
def test_case_1033():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_2)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_3)
    assert len(stack_node_7.data) == 0
    var_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_1034():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_5)
    assert len(stack_node_6.data) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    var_3 = stack_5.push(stack_node_5)
    assert len(stack_5) == 1
    assert len(stack_node_6.data) == 1
    module_0.postfix_eval(stack_node_0)


@pytest.mark.xfail(strict=True)
def test_case_1035():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_5)
    assert len(stack_node_5.data) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_9 = module_0.StackNode(stack_14)
    assert len(stack_node_9.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    module_0.check_parenthesis(stack_node_6)


def test_case_1036():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_5)
    assert len(stack_node_4.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.__len__()
    assert var_2 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_3 = stack_11.__len__()
    assert var_3 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_4 = stack_13.__len__()
    assert var_4 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_5 = stack_15.__len__()
    assert var_5 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_9 = module_0.StackNode(stack_15)
    assert len(stack_node_9.data) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_6 = stack_18.__len__()
    assert var_6 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_11 = module_0.StackNode(stack_18)
    assert len(stack_node_11.data) == 0
    var_7 = stack_20.__len__()
    assert var_7 == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    var_8 = stack_22.__len__()
    assert var_8 == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_node_12 = module_0.StackNode(var_8)
    assert stack_node_12.data == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_node_13 = module_0.StackNode(stack_23)
    assert len(stack_node_13.data) == 0
    with pytest.raises(ValueError):
        stack_4.peek()


@pytest.mark.xfail(strict=True)
def test_case_1037():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_4 = module_0.StackNode(stack_11)
    assert len(stack_node_4.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_4 = stack_13.__len__()
    assert var_4 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_6 = module_0.StackNode(stack_13)
    assert len(stack_node_6.data) == 0
    var_5 = stack_15.__len__()
    assert var_5 == 0
    bool_0 = False
    stack_node_7 = module_0.StackNode(bool_0)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_6 = stack_17.__len__()
    assert var_6 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_17)
    assert len(stack_node_11.data) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_7 = stack_20.__len__()
    assert var_7 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_8 = stack_21.__len__()
    assert var_8 == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_12 = module_0.StackNode(var_8)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_node_12)
    stack_node_15 = module_0.StackNode(stack_21)
    assert len(stack_node_15.data) == 0
    var_9 = stack_22.__len__()
    assert var_9 == 0
    var_10 = stack_21.push(stack_node_14)
    assert len(stack_21) == 1
    assert len(stack_node_15.data) == 1
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_11 = stack_23.__len__()
    assert var_11 == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_node_16 = module_0.StackNode(var_11)
    assert stack_node_16.data == 0
    stack_node_17 = module_0.StackNode(stack_node_16)
    stack_node_18 = module_0.StackNode(stack_node_16)
    stack_node_19 = module_0.StackNode(stack_23)
    assert len(stack_node_19.data) == 0
    var_12 = stack_24.__len__()
    assert var_12 == 0
    module_0.postfix_eval(stack_9)


@pytest.mark.xfail(strict=True)
def test_case_1038():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_5)
    assert len(stack_node_6.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_7 = stack_17.__len__()
    assert var_7 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_9 = module_0.StackNode(var_7)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_8 = stack_19.__len__()
    assert var_8 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_12 = module_0.StackNode(var_8)
    assert stack_node_12.data == 0
    module_0.postfix_eval(var_6)


def test_case_1039():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(stack_6)
    assert len(stack_node_3.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.__len__()
    assert var_2 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_8)
    assert len(stack_node_7.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_4 = stack_13.__len__()
    assert var_4 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_node_12 = module_0.StackNode(stack_13)
    assert len(stack_node_12.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_node_13 = module_0.StackNode(float_0)
    with pytest.raises(ValueError):
        stack_14.pop()


@pytest.mark.xfail(strict=True)
def test_case_1040():
    bool_0 = False
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    tuple_0 = (bool_0, stack_0, bool_0)
    var_0 = module_0.check_parenthesis(tuple_0)
    assert var_0 is True
    var_0.peek()


def test_case_1041():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    with pytest.raises(ValueError):
        stack_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_1042():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_2 = module_0.check_parenthesis(dict_1)
    assert var_2 is True
    stack_node_4 = module_0.StackNode(float_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(stack_3)
    assert len(stack_node_6.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_6)
    assert len(stack_node_10.data) == 0
    var_3.pop()


@pytest.mark.xfail(strict=True)
def test_case_1043():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_2)
    assert len(stack_node_3.data) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_4)
    assert len(stack_node_7.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_10 = module_0.StackNode(var_5)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_13 = module_0.StackNode(var_6)
    assert stack_node_13.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_14 = module_0.StackNode(var_7)
    assert stack_node_14.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_15 = module_0.StackNode(stack_13)
    assert len(stack_node_15.data) == 0
    var_8 = stack_15.__len__()
    assert var_8 == 0
    var_1.peek()


def test_case_1044():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    with pytest.raises(ValueError):
        stack_1.peek()


@pytest.mark.xfail(strict=True)
def test_case_1045():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1046():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_1 = stack_6.__len__()
    assert var_1 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(stack_6)
    assert len(stack_node_3.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_2 = stack_10.__len__()
    assert var_2 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_10)
    assert len(stack_node_7.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_3 = stack_13.__len__()
    assert var_3 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_9 = module_0.StackNode(stack_14)
    assert len(stack_node_9.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_4 = stack_16.__len__()
    assert var_4 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_10 = module_0.StackNode(var_4)
    assert stack_node_10.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_5 = stack_20.__len__()
    assert var_5 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_6 = stack_21.__len__()
    assert var_6 == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_11 = module_0.StackNode(var_6)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_node_11)
    var_7 = stack_21.push(stack_22)
    assert len(stack_21) == 1
    var_7.pop()


@pytest.mark.xfail(strict=True)
def test_case_1047():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    module_0.postfix_eval(stack_node_2)


@pytest.mark.xfail(strict=True)
def test_case_1048():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_1)
    assert stack_node_5.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_0 = None
    stack_node_9 = module_0.StackNode(none_type_0)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_11 = module_0.StackNode(stack_13)
    assert len(stack_node_11.data) == 0
    module_0.postfix_eval(stack_0)


@pytest.mark.xfail(strict=True)
def test_case_1049():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_7)
    assert len(stack_node_9.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_10 = module_0.StackNode(var_5)
    assert stack_node_10.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_11 = module_0.StackNode(stack_11)
    assert len(stack_node_11.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_12 = module_0.StackNode(var_6)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_node_12)
    stack_node_15 = module_0.StackNode(stack_13)
    assert len(stack_node_15.data) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    var_8 = stack_13.push(stack_node_14)
    assert len(stack_13) == 1
    assert len(stack_node_15.data) == 1
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_9 = stack_15.__len__()
    assert var_9 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_16 = module_0.StackNode(var_9)
    assert stack_node_16.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_17 = module_0.StackNode(stack_15)
    assert len(stack_node_17.data) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_10 = stack_18.__len__()
    assert var_10 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_18 = module_0.StackNode(var_10)
    assert stack_node_18.data == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_11 = stack_20.__len__()
    assert var_11 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_19 = module_0.StackNode(var_11)
    assert stack_node_19.data == 0
    stack_node_20 = module_0.StackNode(stack_node_19)
    module_0.postfix_eval(stack_10)


def test_case_1050():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    with pytest.raises(ValueError):
        stack_0.peek()


def test_case_1051():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(stack_5)
    assert len(stack_node_6.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_9 = module_0.StackNode(stack_10)
    assert len(stack_node_9.data) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_7 = stack_17.__len__()
    assert var_7 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_11 = module_0.StackNode(var_7)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_node_11)
    stack_node_14 = module_0.StackNode(stack_17)
    assert len(stack_node_14.data) == 0
    with pytest.raises(ValueError):
        stack_6.peek()


@pytest.mark.xfail(strict=True)
def test_case_1052():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_4)
    assert len(stack_node_3.data) == 0
    var_1.peek()


def test_case_1053():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(stack_5)
    assert len(stack_node_3.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_5 = module_0.StackNode(stack_9)
    assert len(stack_node_5.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_4 = stack_14.__len__()
    assert var_4 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_5 = stack_16.__len__()
    assert var_5 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_6 = stack_18.__len__()
    assert var_6 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    with pytest.raises(ValueError):
        stack_5.pop()


@pytest.mark.xfail(strict=True)
def test_case_1054():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_5)
    assert len(stack_node_5.data) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_8)
    assert len(stack_node_8.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_11 = module_0.StackNode(stack_12)
    assert len(stack_node_11.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_12 = module_0.StackNode(var_7)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_node_12)
    stack_node_15 = module_0.StackNode(stack_14)
    assert len(stack_node_15.data) == 0
    var_4.push(stack_12)


@pytest.mark.xfail(strict=True)
def test_case_1055():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.__len__()
    assert var_2 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_9)
    assert len(stack_node_5.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    module_0.check_parenthesis(stack_2)


@pytest.mark.xfail(strict=True)
def test_case_1056():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.__len__()
    assert var_2 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_4 = stack_13.__len__()
    assert var_4 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    var_3.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1057():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_7)
    assert len(stack_node_6.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_3 = stack_11.__len__()
    assert var_3 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_4 = stack_13.__len__()
    assert var_4 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_6 = stack_15.__len__()
    assert var_6 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_16)
    assert len(stack_node_10.data) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_7 = stack_17.__len__()
    assert var_7 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_11 = module_0.StackNode(var_7)
    assert stack_node_11.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    module_0.check_parenthesis(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1058():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_10)
    assert len(stack_node_6.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    module_0.check_parenthesis(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1059():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_7)
    assert len(stack_node_8.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_node_9 = module_0.StackNode(float_0)
    module_0.check_parenthesis(stack_6)


def test_case_1060():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_3)
    assert len(stack_node_4.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_7 = module_0.StackNode(float_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_10)
    assert len(stack_node_10.data) == 0
    with pytest.raises(ValueError):
        stack_10.peek()


def test_case_1061():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    with pytest.raises(ValueError):
        stack_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_1062():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_10)
    assert len(stack_node_6.data) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_7 = module_0.StackNode(float_1)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_3.push(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1063():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.__len__()
    assert var_2 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    module_0.check_parenthesis(var_0)


def test_case_1064():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    with pytest.raises(ValueError):
        stack_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1065():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_14)
    assert len(stack_node_11.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_7 = stack_17.__len__()
    assert var_7 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_12 = module_0.StackNode(var_7)
    assert stack_node_12.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_8 = stack_19.__len__()
    assert var_8 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_13 = module_0.StackNode(var_8)
    assert stack_node_13.data == 0
    stack_node_14 = module_0.StackNode(stack_node_13)
    stack_node_15 = module_0.StackNode(stack_node_13)
    stack_node_16 = module_0.StackNode(stack_19)
    assert len(stack_node_16.data) == 0
    var_0.__len__()


def test_case_1066():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    with pytest.raises(ValueError):
        stack_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1067():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    module_0.postfix_eval(var_0)


def test_case_1068():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_2 = module_0.StackNode(stack_5)
    assert len(stack_node_2.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_9)
    assert len(stack_node_6.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_5 = stack_14.__len__()
    assert var_5 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_10 = module_0.StackNode(stack_15)
    assert len(stack_node_10.data) == 0
    bool_0 = False
    stack_node_11 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    stack_node_12 = module_0.StackNode(float_0)
    with pytest.raises(ValueError):
        stack_5.peek()


@pytest.mark.xfail(strict=True)
def test_case_1069():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_3)
    assert len(stack_node_4.data) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    module_0.postfix_eval(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1070():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_1 = module_0.check_parenthesis(dict_1)
    assert var_1 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_2 = stack_0.__len__()
    assert var_2 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    var_1.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1071():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    stack_node_7 = module_0.StackNode(float_1)
    var_3.push(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1072():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    var_3 = stack_4.push(stack_node_3)
    assert len(stack_4) == 1
    assert len(stack_node_4.data) == 1
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(stack_6)
    assert len(stack_node_6.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    bool_0 = False
    stack_node_9 = module_0.StackNode(bool_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_0 = None
    stack_node_10 = module_0.StackNode(none_type_0)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_11 = module_0.StackNode(var_8)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_14)
    assert len(stack_node_13.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_9 = stack_15.__len__()
    assert var_9 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_14 = module_0.StackNode(var_9)
    assert stack_node_14.data == 0
    stack_node_15 = module_0.StackNode(stack_node_14)
    stack_node_16 = module_0.StackNode(stack_node_14)
    stack_node_17 = module_0.StackNode(stack_15)
    assert len(stack_node_17.data) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_10 = stack_18.__len__()
    assert var_10 == 0
    var_10.push(stack_node_0)


def test_case_1073():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_4 = module_0.StackNode(stack_8)
    assert len(stack_node_4.data) == 0
    with pytest.raises(ValueError):
        stack_2.peek()


@pytest.mark.xfail(strict=True)
def test_case_1074():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_7 = module_0.StackNode(stack_7)
    assert len(stack_node_7.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_node_8 = module_0.StackNode(float_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    var_1.push(stack_6)


def test_case_1075():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_12)
    assert len(stack_node_6.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_5 = stack_15.__len__()
    assert var_5 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_15)
    assert len(stack_node_10.data) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_6 = stack_17.__len__()
    assert var_6 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_11 = module_0.StackNode(var_6)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_18)
    assert len(stack_node_13.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_7 = module_0.check_parenthesis(dict_0)
    assert var_7 is True
    stack_node_14 = module_0.StackNode(float_0)
    bool_0 = False
    stack_node_15 = module_0.StackNode(bool_0)
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_8 = stack_19.__len__()
    assert var_8 == 0
    with pytest.raises(ValueError):
        stack_18.peek()


@pytest.mark.xfail(strict=True)
def test_case_1076():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_5)
    assert len(stack_node_7.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_9 = module_0.StackNode(stack_6)
    assert len(stack_node_9.data) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_10 = module_0.StackNode(var_7)
    assert stack_node_10.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_11 = module_0.StackNode(stack_10)
    assert len(stack_node_11.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_12 = module_0.StackNode(var_8)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_node_12)
    stack_node_15 = module_0.StackNode(stack_13)
    assert len(stack_node_15.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_9 = stack_15.__len__()
    assert var_9 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_16 = module_0.StackNode(var_9)
    assert stack_node_16.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    bool_0 = False
    stack_node_17 = module_0.StackNode(bool_0)
    module_0.postfix_eval(stack_6)


@pytest.mark.xfail(strict=True)
def test_case_1077():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    module_0.check_parenthesis(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1078():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0]
    module_0.postfix_eval(list_0)


def test_case_1079():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    with pytest.raises(ValueError):
        stack_10.pop()


def test_case_1080():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    with pytest.raises(ValueError):
        stack_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_1081():
    none_type_0 = None
    module_0.postfix_eval(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1082():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    module_0.postfix_eval(stack_1)


def test_case_1083():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.__len__()
    assert var_2 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    with pytest.raises(ValueError):
        stack_3.pop()


def test_case_1084():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_3)
    assert len(stack_node_7.data) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    var_3 = stack_3.push(stack_node_6)
    assert len(stack_3) == 1
    assert len(stack_node_7.data) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_5)
    assert len(stack_node_11.data) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    with pytest.raises(ValueError):
        stack_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1085():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_1 = stack_6.__len__()
    assert var_1 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_7)
    assert len(stack_node_3.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.__len__()
    assert var_2 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_5 = module_0.StackNode(stack_8)
    assert len(stack_node_5.data) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_5 = stack_16.__len__()
    assert var_5 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_6 = stack_18.__len__()
    assert var_6 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_7 = stack_21.__len__()
    assert var_7 == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_9 = module_0.StackNode(var_7)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_8 = module_0.check_parenthesis(dict_0)
    assert var_8 is True
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_9 = stack_23.__len__()
    assert var_9 == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_node_11 = module_0.StackNode(var_9)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_node_11)
    module_0.check_parenthesis(stack_1)


def test_case_1086():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_6)
    assert len(stack_node_4.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_6 = module_0.StackNode(stack_7)
    assert len(stack_node_6.data) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_11)
    assert len(stack_node_10.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_11 = module_0.StackNode(var_8)
    assert stack_node_11.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_12 = module_0.StackNode(stack_14)
    assert len(stack_node_12.data) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_9 = stack_17.__len__()
    assert var_9 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_13 = module_0.StackNode(var_9)
    assert stack_node_13.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    none_type_0 = None
    stack_node_14 = module_0.StackNode(none_type_0)
    with pytest.raises(ValueError):
        stack_8.peek()


@pytest.mark.xfail(strict=True)
def test_case_1087():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_7 = stack_17.__len__()
    assert var_7 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_9 = module_0.StackNode(var_7)
    assert stack_node_9.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_10 = module_0.StackNode(stack_18)
    assert len(stack_node_10.data) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_8 = stack_20.__len__()
    assert var_8 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_11 = module_0.StackNode(var_8)
    assert stack_node_11.data == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    module_0.postfix_eval(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1088():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(stack_7)
    assert len(stack_node_7.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_9)
    assert len(stack_node_11.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_3.peek()


@pytest.mark.xfail(strict=True)
def test_case_1089():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_7 = module_0.StackNode(stack_6)
    assert len(stack_node_7.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_12)
    assert len(stack_node_10.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_11 = module_0.StackNode(complex_0)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_12 = module_0.StackNode(var_7)
    assert stack_node_12.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_8 = stack_16.__len__()
    assert var_8 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_13 = module_0.StackNode(var_8)
    assert stack_node_13.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_9 = stack_20.__len__()
    assert var_9 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_14 = module_0.StackNode(var_9)
    assert stack_node_14.data == 0
    stack_node_15 = module_0.StackNode(stack_node_14)
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    module_0.check_parenthesis(stack_node_1)


def test_case_1090():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_5 = module_0.StackNode(stack_9)
    assert len(stack_node_5.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_4 = stack_13.__len__()
    assert var_4 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    var_6 = stack_14.__len__()
    assert var_6 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_7 = stack_16.__len__()
    assert var_7 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_7 = module_0.StackNode(var_7)
    assert stack_node_7.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_8 = stack_20.__len__()
    assert var_8 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_8 = module_0.StackNode(var_8)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_20)
    assert len(stack_node_11.data) == 0
    var_9 = stack_21.__len__()
    assert var_9 == 0
    var_10 = stack_20.push(stack_node_10)
    assert len(stack_20) == 1
    assert len(stack_node_11.data) == 1
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    none_type_0 = None
    stack_node_12 = module_0.StackNode(none_type_0)
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_11 = stack_23.__len__()
    assert var_11 == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_node_13 = module_0.StackNode(var_11)
    assert stack_node_13.data == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0
    stack_node_14 = module_0.StackNode(stack_23)
    assert len(stack_node_14.data) == 0
    var_12 = stack_25.__len__()
    assert var_12 == 0
    with pytest.raises(ValueError):
        stack_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_1091():
    bool_0 = False
    module_0.check_parenthesis(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1092():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    module_0.postfix_eval(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1093():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_6 = module_0.StackNode(float_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_8)
    assert len(stack_node_10.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_11 = module_0.StackNode(var_6)
    assert stack_node_11.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    bool_0 = False
    stack_node_12 = module_0.StackNode(bool_0)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_13 = module_0.StackNode(var_7)
    assert stack_node_13.data == 0
    stack_node_14 = module_0.StackNode(stack_node_13)
    stack_node_15 = module_0.StackNode(stack_node_13)
    stack_node_16 = module_0.StackNode(stack_14)
    assert len(stack_node_16.data) == 0
    var_8 = stack_15.__len__()
    assert var_8 == 0
    var_9 = stack_14.push(stack_node_15)
    assert len(stack_14) == 1
    assert len(stack_node_16.data) == 1
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_10 = stack_16.__len__()
    assert var_10 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_17 = module_0.StackNode(var_10)
    assert stack_node_17.data == 0
    stack_node_18 = module_0.StackNode(stack_node_17)
    stack_node_19 = module_0.StackNode(stack_17)
    assert len(stack_node_19.data) == 0
    module_0.postfix_eval(stack_9)


@pytest.mark.xfail(strict=True)
def test_case_1094():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(stack_7)
    assert len(stack_node_6.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_9)
    assert len(stack_node_10.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_11 = module_0.StackNode(var_6)
    assert stack_node_11.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    stack_node_12 = module_0.StackNode(float_1)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_13 = module_0.StackNode(var_8)
    assert stack_node_13.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_9 = stack_18.__len__()
    assert var_9 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_14 = module_0.StackNode(var_9)
    assert stack_node_14.data == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_15 = module_0.StackNode(stack_18)
    assert len(stack_node_15.data) == 0
    var_10 = stack_20.__len__()
    assert var_10 == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    var_11 = stack_22.__len__()
    assert var_11 == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_node_16 = module_0.StackNode(var_11)
    assert stack_node_16.data == 0
    var_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1095():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_3)
    assert len(stack_node_7.data) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    var_3 = stack_3.push(stack_node_6)
    assert len(stack_3) == 1
    assert len(stack_node_7.data) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_5)
    assert len(stack_node_11.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_12 = module_0.StackNode(var_5)
    assert stack_node_12.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_13 = module_0.StackNode(stack_7)
    assert len(stack_node_13.data) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    module_0.postfix_eval(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1096():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(stack_3)
    assert len(stack_node_3.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_5)
    assert len(stack_node_7.data) == 0
    module_0.postfix_eval(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1097():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_5 = module_0.StackNode(stack_7)
    assert len(stack_node_5.data) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_11)
    assert len(stack_node_9.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    module_0.check_parenthesis(stack_8)


def test_case_1098():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    with pytest.raises(ValueError):
        stack_2.peek()


@pytest.mark.xfail(strict=True)
def test_case_1099():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_1)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_4)
    assert len(stack_node_7.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_8 = module_0.StackNode(var_2)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_10 = module_0.StackNode(var_3)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_7)
    assert len(stack_node_13.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_14 = module_0.StackNode(float_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    var_5.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1100():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_0 = module_0.StackNode(var_2)
    assert stack_node_0.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(stack_2)
    assert len(stack_node_1.data) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    var_2.__len__()


def test_case_1101():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    with pytest.raises(ValueError):
        stack_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1102():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_6 = module_0.StackNode(stack_7)
    assert len(stack_node_6.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_8 = module_0.StackNode(stack_10)
    assert len(stack_node_8.data) == 0
    var_7 = stack_12.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_9 = stack_15.__len__()
    assert var_9 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_9 = module_0.StackNode(var_9)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_10 = stack_17.__len__()
    assert var_10 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_12 = module_0.StackNode(var_10)
    assert stack_node_12.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_11 = module_0.check_parenthesis(dict_0)
    assert var_11 is True
    stack_node_13 = module_0.StackNode(float_0)
    complex_0 = -3711.3 - 806.2j
    stack_node_14 = module_0.StackNode(complex_0)
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    var_12 = stack_22.__len__()
    assert var_12 == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_node_15 = module_0.StackNode(var_12)
    assert stack_node_15.data == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    var_9.push(stack_4)


@pytest.mark.xfail(strict=True)
def test_case_1103():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(stack_7)
    assert len(stack_node_6.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_9 = module_0.StackNode(stack_11)
    assert len(stack_node_9.data) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_7 = stack_15.__len__()
    assert var_7 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_10 = module_0.StackNode(var_7)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_16)
    assert len(stack_node_12.data) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_8 = stack_17.__len__()
    assert var_8 == 0
    bool_0 = True
    module_0.postfix_eval(bool_0)


def test_case_1104():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    with pytest.raises(ValueError):
        stack_2.pop()


def test_case_1105():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_8)
    assert len(stack_node_9.data) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    var_5 = stack_8.push(stack_node_8)
    assert len(stack_8) == 1
    assert len(stack_node_9.data) == 1
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_11 = module_0.StackNode(stack_10)
    assert len(stack_node_11.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_7 = module_0.check_parenthesis(dict_0)
    assert var_7 is True
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_9 = stack_15.__len__()
    assert var_9 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_12 = module_0.StackNode(var_9)
    assert stack_node_12.data == 0
    with pytest.raises(ValueError):
        stack_1.peek()


@pytest.mark.xfail(strict=True)
def test_case_1106():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    var_6 = stack_6.__len__()
    assert var_6 == 0
    module_0.postfix_eval(stack_3)


@pytest.mark.xfail(strict=True)
def test_case_1107():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(stack_2)
    assert len(stack_node_1.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    module_0.check_parenthesis(stack_node_1)


@pytest.mark.xfail(strict=True)
def test_case_1108():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_2 = module_0.StackNode(var_5)
    assert stack_node_2.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_3 = module_0.StackNode(stack_8)
    assert len(stack_node_3.data) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_12.__len__()
    assert var_7 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_4 = module_0.StackNode(var_7)
    assert stack_node_4.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_5 = module_0.StackNode(complex_0)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_8 = stack_15.__len__()
    assert var_8 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_6 = module_0.StackNode(var_8)
    assert stack_node_6.data == 0
    module_0.check_parenthesis(stack_0)


@pytest.mark.xfail(strict=True)
def test_case_1109():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    complex_0 = -3711.3 - 806.2j
    stack_node_2 = module_0.StackNode(complex_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_9)
    assert len(stack_node_10.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    module_0.check_parenthesis(stack_1)


@pytest.mark.xfail(strict=True)
def test_case_1110():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_2 = module_0.StackNode(var_4)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    var_5.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1111():
    int_0 = 3503
    module_0.postfix_eval(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1112():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(stack_6)
    assert len(stack_node_3.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_12.__len__()
    assert var_7 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_5 = module_0.StackNode(var_7)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_7 = module_0.StackNode(var_8)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_9 = stack_16.__len__()
    assert var_9 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_10 = module_0.StackNode(var_9)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_16)
    assert len(stack_node_13.data) == 0
    var_10 = stack_17.__len__()
    assert var_10 == 0
    var_11 = stack_16.push(stack_node_12)
    assert len(stack_16) == 1
    assert len(stack_node_13.data) == 1
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_12 = stack_18.__len__()
    assert var_12 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_14 = module_0.StackNode(var_12)
    assert stack_node_14.data == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    module_0.check_parenthesis(stack_node_14)


@pytest.mark.xfail(strict=True)
def test_case_1113():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    complex_0 = -3711.3 - 806.2j
    stack_node_5 = module_0.StackNode(complex_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_6)
    assert len(stack_node_9.data) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    var_5 = stack_6.push(stack_node_8)
    assert len(stack_6) == 1
    assert len(stack_node_9.data) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_11 = module_0.StackNode(var_8)
    assert stack_node_11.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_9 = module_0.check_parenthesis(dict_0)
    assert var_9 is True
    var_10 = stack_14.__len__()
    assert var_10 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_11 = stack_16.__len__()
    assert var_11 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_12 = module_0.StackNode(var_11)
    assert stack_node_12.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    module_0.postfix_eval(stack_3)


def test_case_1114():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    with pytest.raises(ValueError):
        stack_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1115():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    var_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_1116():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_3 = module_0.StackNode(stack_7)
    assert len(stack_node_3.data) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    var_6 = stack_12.__len__()
    assert var_6 == 0
    module_0.check_parenthesis(stack_6)


@pytest.mark.xfail(strict=True)
def test_case_1117():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_2 = module_0.check_parenthesis(dict_1)
    assert var_2 is True
    var_3 = stack_1.__len__()
    assert var_3 == 0
    var_2.push(stack_node_1)


@pytest.mark.xfail(strict=True)
def test_case_1118():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_6)
    assert len(stack_node_3.data) == 0
    var_1.peek()


@pytest.mark.xfail(strict=True)
def test_case_1119():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_1120():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(stack_3)
    assert len(stack_node_3.data) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_7)
    assert len(stack_node_7.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    none_type_0 = None
    stack_node_10 = module_0.StackNode(none_type_0)
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_7 = stack_19.__len__()
    assert var_7 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_11 = module_0.StackNode(var_7)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_node_11)
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_8 = stack_21.__len__()
    assert var_8 == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_14 = module_0.StackNode(var_8)
    assert stack_node_14.data == 0
    stack_node_15 = module_0.StackNode(stack_node_14)
    stack_node_16 = module_0.StackNode(stack_node_14)
    stack_node_17 = module_0.StackNode(stack_21)
    assert len(stack_node_17.data) == 0
    var_9 = stack_22.__len__()
    assert var_9 == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_10 = stack_23.__len__()
    assert var_10 == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_node_18 = module_0.StackNode(var_10)
    assert stack_node_18.data == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0
    stack_node_19 = module_0.StackNode(stack_23)
    assert len(stack_node_19.data) == 0
    var_8.pop()


@pytest.mark.xfail(strict=True)
def test_case_1121():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_2 = module_0.StackNode(var_4)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    complex_0 = 363.8009 - 893.96j
    module_0.check_parenthesis(complex_0)


def test_case_1122():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_1 = stack_6.__len__()
    assert var_1 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_2 = stack_10.__len__()
    assert var_2 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_4 = module_0.StackNode(complex_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    with pytest.raises(ValueError):
        stack_12.pop()


@pytest.mark.xfail(strict=True)
def test_case_1123():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_7)
    assert len(stack_node_7.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_8 = module_0.StackNode(complex_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_10 = module_0.StackNode(stack_11)
    assert len(stack_node_10.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_5 = stack_14.__len__()
    assert var_5 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_11 = module_0.StackNode(var_5)
    assert stack_node_11.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_6 = stack_18.__len__()
    assert var_6 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_12 = module_0.StackNode(var_6)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_node_12)
    stack_node_15 = module_0.StackNode(stack_18)
    assert len(stack_node_15.data) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    module_0.check_parenthesis(stack_0)


@pytest.mark.xfail(strict=True)
def test_case_1124():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_2 = module_0.StackNode(var_0)
    assert stack_node_2.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_5 = module_0.StackNode(stack_7)
    assert len(stack_node_5.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_3 = stack_11.__len__()
    assert var_3 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_4 = stack_14.__len__()
    assert var_4 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_5 = stack_16.__len__()
    assert var_5 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_4.pop()


@pytest.mark.xfail(strict=True)
def test_case_1125():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_4 = module_0.StackNode(float_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_4 = stack_2.__len__()
    assert var_4 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_5 = stack_3.__len__()
    assert var_5 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(stack_3)
    assert len(stack_node_6.data) == 0
    var_6 = stack_5.__len__()
    assert var_6 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_7 = stack_7.__len__()
    assert var_7 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_7)
    assert stack_node_7.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(stack_7)
    assert len(stack_node_8.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_8 = stack_11.__len__()
    assert var_8 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_9 = module_0.StackNode(var_8)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    var_7.peek()


@pytest.mark.xfail(strict=True)
def test_case_1126():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_12)
    assert len(stack_node_9.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_11 = module_0.StackNode(stack_13)
    assert len(stack_node_11.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_7 = stack_16.__len__()
    assert var_7 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_12 = module_0.StackNode(var_7)
    assert stack_node_12.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_8 = module_0.check_parenthesis(dict_0)
    assert var_8 is True
    var_9 = stack_17.__len__()
    assert var_9 == 0
    module_0.check_parenthesis(stack_3)


@pytest.mark.xfail(strict=True)
def test_case_1127():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_10)
    assert len(stack_node_9.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_10 = module_0.StackNode(var_7)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_11)
    assert len(stack_node_13.data) == 0
    var_8 = stack_12.__len__()
    assert var_8 == 0
    var_9 = stack_11.push(stack_node_12)
    assert len(stack_11) == 1
    assert len(stack_node_13.data) == 1
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_10 = stack_13.__len__()
    assert var_10 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_14 = module_0.StackNode(var_10)
    assert stack_node_14.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    module_0.check_parenthesis(var_2)


def test_case_1128():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(stack_7)
    assert len(stack_node_7.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_9)
    assert len(stack_node_11.data) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    var_5 = stack_9.push(stack_node_10)
    assert len(stack_9) == 1
    assert len(stack_node_11.data) == 1
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_12 = module_0.StackNode(var_6)
    assert stack_node_12.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_13 = module_0.StackNode(var_7)
    assert stack_node_13.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_8 = stack_18.__len__()
    assert var_8 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_14 = module_0.StackNode(var_8)
    assert stack_node_14.data == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    var_9 = stack_22.__len__()
    assert var_9 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_15 = module_0.StackNode(complex_0)
    with pytest.raises(ValueError):
        stack_12.peek()


@pytest.mark.xfail(strict=True)
def test_case_1129():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_4 = module_0.StackNode(complex_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_7 = module_0.StackNode(stack_10)
    assert len(stack_node_7.data) == 0
    module_0.check_parenthesis(stack_node_0)


def test_case_1130():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    with pytest.raises(ValueError):
        stack_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1131():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_3 = module_0.StackNode(float_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_6 = module_0.StackNode(stack_7)
    assert len(stack_node_6.data) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_11)
    assert len(stack_node_10.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_11 = module_0.StackNode(var_6)
    assert stack_node_11.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_12 = module_0.StackNode(stack_14)
    assert len(stack_node_12.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_7 = stack_16.__len__()
    assert var_7 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_13 = module_0.StackNode(var_7)
    assert stack_node_13.data == 0
    stack_node_14 = module_0.StackNode(stack_node_13)
    stack_node_15 = module_0.StackNode(stack_node_13)
    stack_node_16 = module_0.StackNode(stack_16)
    assert len(stack_node_16.data) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_8 = stack_19.__len__()
    assert var_8 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_17 = module_0.StackNode(var_8)
    assert stack_node_17.data == 0
    stack_node_18 = module_0.StackNode(stack_node_17)
    stack_node_19 = module_0.StackNode(stack_node_17)
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_9 = stack_21.__len__()
    assert var_9 == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_20 = module_0.StackNode(var_9)
    assert stack_node_20.data == 0
    stack_node_21 = module_0.StackNode(stack_node_20)
    stack_node_22 = module_0.StackNode(stack_node_20)
    stack_node_23 = module_0.StackNode(stack_21)
    assert len(stack_node_23.data) == 0
    var_10 = stack_22.__len__()
    assert var_10 == 0
    var_11 = stack_21.push(stack_node_22)
    assert len(stack_21) == 1
    assert len(stack_node_23.data) == 1
    var_9.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1132():
    bool_0 = True
    module_0.postfix_eval(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1133():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_3)
    assert len(stack_node_4.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_7)
    assert len(stack_node_8.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_9 = module_0.StackNode(var_3)
    assert stack_node_9.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_10 = module_0.StackNode(stack_9)
    assert len(stack_node_10.data) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_11 = module_0.StackNode(var_5)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_14)
    assert len(stack_node_13.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_6 = stack_15.__len__()
    assert var_6 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_14 = module_0.StackNode(var_6)
    assert stack_node_14.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_7 = module_0.check_parenthesis(dict_0)
    assert var_7 is True
    var_8 = stack_16.__len__()
    assert var_8 == 0
    bool_0 = False
    stack_node_15 = module_0.StackNode(bool_0)
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_9 = stack_18.__len__()
    assert var_9 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_16 = module_0.StackNode(var_9)
    assert stack_node_16.data == 0
    stack_node_17 = module_0.StackNode(stack_node_16)
    var_10 = stack_19.push(stack_node_8)
    assert len(stack_19) == 1
    var_10.pop()


@pytest.mark.xfail(strict=True)
def test_case_1134():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    module_0.postfix_eval(stack_2)


@pytest.mark.xfail(strict=True)
def test_case_1135():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_5)
    assert len(stack_node_8.data) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    var_5 = stack_5.push(stack_node_7)
    assert len(stack_5) == 1
    assert len(stack_node_8.data) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    none_type_0 = None
    stack_node_10 = module_0.StackNode(none_type_0)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_11 = module_0.StackNode(var_8)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_15)
    assert len(stack_node_13.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_9 = stack_16.__len__()
    assert var_9 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    module_0.postfix_eval(var_1)


def test_case_1136():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_3 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_5 = module_0.StackNode(float_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_7 = module_0.StackNode(stack_7)
    assert len(stack_node_7.data) == 0
    with pytest.raises(ValueError):
        stack_7.peek()


def test_case_1137():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_11)
    assert len(stack_node_8.data) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_7 = module_0.check_parenthesis(dict_0)
    assert var_7 is True
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_9 = module_0.StackNode(var_8)
    assert stack_node_9.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_10 = module_0.StackNode(stack_13)
    assert len(stack_node_10.data) == 0
    var_9 = stack_15.__len__()
    assert var_9 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_10 = module_0.check_parenthesis(dict_1)
    assert var_10 is True
    stack_node_11 = module_0.StackNode(float_1)
    with pytest.raises(ValueError):
        stack_10.peek()


@pytest.mark.xfail(strict=True)
def test_case_1138():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_2 = module_0.StackNode(var_4)
    assert stack_node_2.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_3 = module_0.StackNode(stack_9)
    assert len(stack_node_3.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_13)
    assert len(stack_node_9.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_7 = stack_16.__len__()
    assert var_7 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_2.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1139():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    none_type_0 = None
    module_0.postfix_eval(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1140():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(stack_4)
    assert len(stack_node_2.data) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(var_5)
    assert stack_node_3.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_4 = module_0.StackNode(stack_8)
    assert len(stack_node_4.data) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_12.__len__()
    assert var_7 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_5 = module_0.StackNode(var_7)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_12)
    assert len(stack_node_8.data) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    var_5.pop()


@pytest.mark.xfail(strict=True)
def test_case_1141():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(var_1)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_4)
    assert len(stack_node_8.data) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_9 = module_0.StackNode(var_3)
    assert stack_node_9.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_10 = module_0.StackNode(var_5)
    assert stack_node_10.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_11 = module_0.StackNode(var_7)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_8 = stack_16.__len__()
    assert var_8 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_13 = module_0.StackNode(var_8)
    assert stack_node_13.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_14 = module_0.StackNode(stack_16)
    assert len(stack_node_14.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_9 = module_0.check_parenthesis(dict_0)
    assert var_9 is True
    var_4.push(var_7)


@pytest.mark.xfail(strict=True)
def test_case_1142():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_2 = module_0.check_parenthesis(dict_1)
    assert var_2 is True
    var_3 = stack_1.__len__()
    assert var_3 == 0
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_4 = module_0.check_parenthesis(dict_2)
    assert var_4 is True
    stack_node_2 = module_0.StackNode(float_2)
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_5 = stack_3.__len__()
    assert var_5 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_3)
    assert len(stack_node_7.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_6 = stack_6.__len__()
    assert var_6 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_6)
    assert len(stack_node_11.data) == 0
    var_7 = stack_7.__len__()
    assert var_7 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_8 = stack_8.__len__()
    assert var_8 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_12 = module_0.StackNode(var_8)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_9 = stack_11.__len__()
    assert var_9 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_14 = module_0.StackNode(var_9)
    assert stack_node_14.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_10 = stack_13.__len__()
    assert var_10 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1143():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_3 = module_0.StackNode(float_0)
    complex_0 = -3711.3 - 806.2j
    stack_node_4 = module_0.StackNode(complex_0)
    module_0.check_parenthesis(stack_node_3)


def test_case_1144():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_2 = module_0.check_parenthesis(dict_1)
    assert var_2 is True
    var_3 = stack_1.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_4)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(var_5)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_6)
    assert len(stack_node_6.data) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_7 = stack_8.__len__()
    assert var_7 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_7 = module_0.StackNode(var_7)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_8)
    assert len(stack_node_10.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_8 = stack_10.__len__()
    assert var_8 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_11 = module_0.StackNode(var_8)
    assert stack_node_11.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    with pytest.raises(ValueError):
        stack_10.pop()


@pytest.mark.xfail(strict=True)
def test_case_1145():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    var_1.peek()


@pytest.mark.xfail(strict=True)
def test_case_1146():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_1147():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    bool_1 = False
    stack_node_4 = module_0.StackNode(bool_1)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_5 = module_0.StackNode(float_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(stack_4)
    assert len(stack_node_7.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    module_0.postfix_eval(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1148():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    bool_0 = False
    stack_node_8 = module_0.StackNode(bool_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_10 = module_0.StackNode(stack_8)
    assert len(stack_node_10.data) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_11 = module_0.StackNode(complex_0)
    var_6 = stack_11.__len__()
    assert var_6 == 0
    var_6.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1149():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_5 = module_0.StackNode(var_7)
    assert stack_node_5.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_6 = module_0.StackNode(stack_11)
    assert len(stack_node_6.data) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    bool_0 = False
    stack_node_7 = module_0.StackNode(bool_0)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_9 = stack_16.__len__()
    assert var_9 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_9 = module_0.StackNode(var_9)
    assert stack_node_9.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_10 = module_0.StackNode(stack_17)
    assert len(stack_node_10.data) == 0
    module_0.postfix_eval(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1150():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    module_0.postfix_eval(stack_node_4)


@pytest.mark.xfail(strict=True)
def test_case_1151():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(stack_6)
    assert len(stack_node_6.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_8 = module_0.StackNode(stack_9)
    assert len(stack_node_8.data) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_node_12 = module_0.StackNode(stack_13)
    assert len(stack_node_12.data) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    module_0.postfix_eval(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1152():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(stack_4)
    assert len(stack_node_3.data) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    module_0.postfix_eval(stack_2)


@pytest.mark.xfail(strict=True)
def test_case_1153():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(stack_5)
    assert len(stack_node_6.data) == 0
    module_0.check_parenthesis(stack_node_0)


@pytest.mark.xfail(strict=True)
def test_case_1154():
    bool_0 = True
    module_0.postfix_eval(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1155():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    module_0.check_parenthesis(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1156():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_0)
    assert len(stack_node_4.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_5 = module_0.StackNode(complex_0)
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    module_0.check_parenthesis(stack_node_2)


def test_case_1157():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    with pytest.raises(ValueError):
        stack_1.peek()


@pytest.mark.xfail(strict=True)
def test_case_1158():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_13)
    assert len(stack_node_9.data) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    var_7 = stack_13.push(stack_node_8)
    assert len(stack_13) == 1
    assert len(stack_node_9.data) == 1
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_8 = stack_15.__len__()
    assert var_8 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_10 = module_0.StackNode(var_8)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_15)
    assert len(stack_node_13.data) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_9 = module_0.check_parenthesis(dict_0)
    assert var_9 is True
    var_5.pop()


@pytest.mark.xfail(strict=True)
def test_case_1159():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    module_0.postfix_eval(stack_0)


@pytest.mark.xfail(strict=True)
def test_case_1160():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_3)
    assert len(stack_node_4.data) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_7 = module_0.StackNode(stack_7)
    assert len(stack_node_7.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_8 = module_0.StackNode(var_7)
    assert stack_node_8.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_8 = stack_16.__len__()
    assert var_8 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    module_0.postfix_eval(stack_node_4)


@pytest.mark.xfail(strict=True)
def test_case_1161():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(stack_4)
    assert len(stack_node_2.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_3 = stack_12.__len__()
    assert var_3 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    complex_0 = -3711.3 - 806.2j
    stack_node_8 = module_0.StackNode(complex_0)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_4 = stack_15.__len__()
    assert var_4 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_node_9 = module_0.StackNode(float_0)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_6 = stack_17.__len__()
    assert var_6 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_18)
    assert len(stack_node_12.data) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_7 = stack_19.__len__()
    assert var_7 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_13 = module_0.StackNode(var_7)
    assert stack_node_13.data == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    module_0.check_parenthesis(stack_16)


@pytest.mark.xfail(strict=True)
def test_case_1162():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_7)
    assert len(stack_node_6.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_8 = module_0.StackNode(stack_10)
    assert len(stack_node_8.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_node_12 = module_0.StackNode(stack_13)
    assert len(stack_node_12.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    module_0.postfix_eval(stack_4)


def test_case_1163():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_8)
    assert len(stack_node_9.data) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    bool_0 = False
    stack_node_10 = module_0.StackNode(bool_0)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    stack_node_11 = module_0.StackNode(float_1)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_8 = stack_12.__len__()
    assert var_8 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_12 = module_0.StackNode(var_8)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_node_12)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    none_type_0 = None
    stack_node_15 = module_0.StackNode(none_type_0)
    with pytest.raises(ValueError):
        stack_13.pop()


@pytest.mark.xfail(strict=True)
def test_case_1164():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_5 = module_0.StackNode(float_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_8)
    assert len(stack_node_9.data) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    var_7 = stack_8.push(stack_node_8)
    assert len(stack_8) == 1
    assert len(stack_node_9.data) == 1
    bool_0 = False
    stack_node_10 = module_0.StackNode(bool_0)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_8 = module_0.check_parenthesis(dict_1)
    assert var_8 is True
    stack_node_11 = module_0.StackNode(float_1)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_9 = stack_11.__len__()
    assert var_9 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_12 = module_0.StackNode(var_9)
    assert stack_node_12.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_10 = stack_15.__len__()
    assert var_10 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_13 = module_0.StackNode(var_10)
    assert stack_node_13.data == 0
    stack_node_14 = module_0.StackNode(stack_node_13)
    stack_node_15 = module_0.StackNode(stack_node_13)
    stack_node_16 = module_0.StackNode(stack_15)
    assert len(stack_node_16.data) == 0
    var_3.push(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1165():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    module_0.check_parenthesis(stack_node_1)


@pytest.mark.xfail(strict=True)
def test_case_1166():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_1 = stack_6.__len__()
    assert var_1 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_2 = stack_11.__len__()
    assert var_2 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_6 = module_0.StackNode(complex_0)
    module_0.check_parenthesis(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1167():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_5)
    assert len(stack_node_7.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_8 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_9 = module_0.StackNode(none_type_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_10 = module_0.StackNode(float_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_11 = module_0.StackNode(var_5)
    assert stack_node_11.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_12 = module_0.StackNode(stack_7)
    assert len(stack_node_12.data) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_13 = module_0.StackNode(var_7)
    assert stack_node_13.data == 0
    stack_node_14 = module_0.StackNode(stack_node_13)
    stack_node_15 = module_0.StackNode(stack_node_13)
    stack_node_16 = module_0.StackNode(stack_11)
    assert len(stack_node_16.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_17 = module_0.StackNode(var_8)
    assert stack_node_17.data == 0
    stack_node_18 = module_0.StackNode(stack_node_17)
    stack_node_19 = module_0.StackNode(stack_node_17)
    stack_node_20 = module_0.StackNode(stack_13)
    assert len(stack_node_20.data) == 0
    var_9 = stack_14.__len__()
    assert var_9 == 0
    var_10 = stack_13.push(stack_node_19)
    assert len(stack_13) == 1
    assert len(stack_node_20.data) == 1
    module_0.check_parenthesis(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1168():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_4 = module_0.StackNode(var_6)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_11)
    assert len(stack_node_7.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_8 = module_0.StackNode(var_7)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_13)
    assert len(stack_node_11.data) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    var_9 = stack_13.push(stack_node_10)
    assert len(stack_13) == 1
    assert len(stack_node_11.data) == 1
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_10 = stack_15.__len__()
    assert var_10 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_12 = module_0.StackNode(var_10)
    assert stack_node_12.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_13 = module_0.StackNode(stack_15)
    assert len(stack_node_13.data) == 0
    var_11 = stack_17.__len__()
    assert var_11 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_12 = stack_19.__len__()
    assert var_12 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_14 = module_0.StackNode(var_12)
    assert stack_node_14.data == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_15 = module_0.StackNode(stack_19)
    assert len(stack_node_15.data) == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_13 = stack_23.__len__()
    assert var_13 == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_node_16 = module_0.StackNode(var_13)
    assert stack_node_16.data == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    stack_node_17 = module_0.StackNode(stack_23)
    assert len(stack_node_17.data) == 0
    module_0.check_parenthesis(var_1)


def test_case_1169():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(stack_3)
    assert len(stack_node_4.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_7)
    assert len(stack_node_8.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    with pytest.raises(ValueError):
        stack_5.pop()


@pytest.mark.xfail(strict=True)
def test_case_1170():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_7 = module_0.StackNode(stack_12)
    assert len(stack_node_7.data) == 0
    module_0.postfix_eval(stack_13)


@pytest.mark.xfail(strict=True)
def test_case_1171():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    var_0.push(stack_node_0)


def test_case_1172():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    with pytest.raises(ValueError):
        stack_0.peek()


def test_case_1173():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_2 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    with pytest.raises(ValueError):
        stack_2.peek()


def test_case_1174():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_4 = module_0.StackNode(complex_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    with pytest.raises(ValueError):
        stack_3.pop()


@pytest.mark.xfail(strict=True)
def test_case_1175():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    var_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_1176():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_4.__len__()
    assert var_3 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_3 = module_0.StackNode(float_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_5 = module_0.StackNode(stack_6)
    assert len(stack_node_5.data) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_6 = module_0.StackNode(complex_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_7 = module_0.StackNode(var_7)
    assert stack_node_7.data == 0
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1177():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_2 = module_0.StackNode(complex_0)
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1178():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    module_0.check_parenthesis(stack_1)


@pytest.mark.xfail(strict=True)
def test_case_1179():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_4)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_2 = module_0.StackNode(stack_5)
    assert len(stack_node_2.data) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_3 = module_0.StackNode(var_6)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_9)
    assert len(stack_node_6.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_7 = module_0.StackNode(var_7)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    module_0.postfix_eval(stack_node_6)


@pytest.mark.xfail(strict=True)
def test_case_1180():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_1 = stack_7.__len__()
    assert var_1 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_2 = stack_9.__len__()
    assert var_2 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_3 = stack_11.__len__()
    assert var_3 == 0
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_6 = module_0.StackNode(stack_12)
    assert len(stack_node_6.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    var_3.__len__()


def test_case_1181():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    with pytest.raises(ValueError):
        stack_6.peek()


@pytest.mark.xfail(strict=True)
def test_case_1182():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    stack_node_2 = module_0.StackNode(float_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(stack_3)
    assert len(stack_node_4.data) == 0
    var_4.pop()


def test_case_1183():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_5)
    assert len(stack_node_4.data) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    var_3 = stack_5.push(stack_node_3)
    assert len(stack_5) == 1
    assert len(stack_node_4.data) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_7 = module_0.StackNode(var_7)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_14)
    assert len(stack_node_10.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_8 = stack_16.__len__()
    assert var_8 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_11 = module_0.StackNode(var_8)
    assert stack_node_11.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_12 = module_0.StackNode(stack_16)
    assert len(stack_node_12.data) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_9 = stack_20.__len__()
    assert var_9 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_13 = module_0.StackNode(var_9)
    assert stack_node_13.data == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_14 = module_0.StackNode(stack_20)
    assert len(stack_node_14.data) == 0
    bool_0 = False
    stack_node_15 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_10 = module_0.check_parenthesis(dict_0)
    assert var_10 is True
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_11 = stack_23.__len__()
    assert var_11 == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_node_16 = module_0.StackNode(var_11)
    assert stack_node_16.data == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    with pytest.raises(ValueError):
        stack_24.peek()


@pytest.mark.xfail(strict=True)
def test_case_1184():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    module_0.check_parenthesis(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1185():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_2)
    assert len(stack_node_7.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_9 = module_0.StackNode(stack_5)
    assert len(stack_node_9.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_0 = None
    stack_node_10 = module_0.StackNode(none_type_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_11 = module_0.StackNode(var_5)
    assert stack_node_11.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_12 = module_0.StackNode(stack_10)
    assert len(stack_node_12.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_13 = module_0.StackNode(var_6)
    assert stack_node_13.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    bool_0 = False
    stack_node_14 = module_0.StackNode(bool_0)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_7 = stack_17.__len__()
    assert var_7 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_15 = module_0.StackNode(var_7)
    assert stack_node_15.data == 0
    stack_node_16 = module_0.StackNode(stack_node_15)
    stack_node_17 = module_0.StackNode(stack_node_15)
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_8 = stack_19.__len__()
    assert var_8 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_18 = module_0.StackNode(var_8)
    assert stack_node_18.data == 0
    module_0.postfix_eval(stack_4)


@pytest.mark.xfail(strict=True)
def test_case_1186():
    bool_0 = False
    module_0.postfix_eval(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1187():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_4 = module_0.StackNode(complex_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_1)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    var_0.__len__()


def test_case_1188():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_9 = module_0.StackNode(bool_0)
    stack_node_10 = module_0.StackNode(bool_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_11 = module_0.StackNode(var_4)
    assert stack_node_11.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_12 = module_0.StackNode(var_5)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_13)
    assert len(stack_node_14.data) == 0
    with pytest.raises(ValueError):
        stack_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_1189():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    var_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1190():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_1 = module_0.StackNode(complex_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_1 = None
    stack_node_8 = module_0.StackNode(none_type_1)
    module_0.check_parenthesis(stack_node_8)


@pytest.mark.xfail(strict=True)
def test_case_1191():
    none_type_0 = None
    module_0.postfix_eval(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1192():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    var_0.pop()


def test_case_1193():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(stack_2)
    assert len(stack_node_3.data) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_4 = module_0.StackNode(complex_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_6 = module_0.StackNode(stack_6)
    assert len(stack_node_6.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    with pytest.raises(ValueError):
        stack_10.pop()


@pytest.mark.xfail(strict=True)
def test_case_1194():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_1 = None
    stack_node_1 = module_0.StackNode(none_type_1)
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_4 = module_0.StackNode(float_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(stack_5)
    assert len(stack_node_6.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_9)
    assert len(stack_node_10.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_11 = module_0.StackNode(var_5)
    assert stack_node_11.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_12 = module_0.StackNode(var_6)
    assert stack_node_12.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_13 = module_0.StackNode(stack_15)
    assert len(stack_node_13.data) == 0
    module_0.postfix_eval(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1195():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    complex_0 = -3711.3 - 806.2j
    stack_node_3 = module_0.StackNode(complex_0)
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_node_5 = module_0.StackNode(bool_0)
    bool_1 = False
    stack_node_6 = module_0.StackNode(bool_1)
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1196():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    module_0.check_parenthesis(stack_node_1)


@pytest.mark.xfail(strict=True)
def test_case_1197():
    bool_0 = True
    module_0.postfix_eval(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1198():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    module_0.postfix_eval(stack_0)


def test_case_1199():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_7)
    assert len(stack_node_6.data) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    var_4 = stack_7.push(stack_node_5)
    assert len(stack_7) == 1
    assert len(stack_node_6.data) == 1
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_9)
    assert len(stack_node_10.data) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_0 = None
    stack_node_11 = module_0.StackNode(none_type_0)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_12 = module_0.StackNode(var_7)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_node_12)
    stack_node_15 = module_0.StackNode(stack_13)
    assert len(stack_node_15.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_8 = stack_16.__len__()
    assert var_8 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_16 = module_0.StackNode(var_8)
    assert stack_node_16.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    with pytest.raises(ValueError):
        stack_17.peek()


@pytest.mark.xfail(strict=True)
def test_case_1200():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    module_0.check_parenthesis(stack_node_5)


def test_case_1201():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    bool_0 = False
    stack_node_8 = module_0.StackNode(bool_0)
    stack_node_9 = module_0.StackNode(bool_0)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    bool_1 = False
    stack_node_10 = module_0.StackNode(bool_1)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_11 = module_0.StackNode(var_5)
    assert stack_node_11.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_12 = module_0.StackNode(stack_13)
    assert len(stack_node_12.data) == 0
    var_6 = stack_15.__len__()
    assert var_6 == 0
    none_type_0 = None
    stack_node_13 = module_0.StackNode(none_type_0)
    with pytest.raises(ValueError):
        stack_4.pop()


def test_case_1202():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    with pytest.raises(ValueError):
        stack_0.pop()


def test_case_1203():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    with pytest.raises(ValueError):
        stack_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1204():
    object_0 = module_1.object()
    bytes_0 = b"\xc4"
    var_0 = module_0.check_parenthesis(bytes_0)
    assert var_0 is True
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1205():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_7 = module_0.StackNode(stack_10)
    assert len(stack_node_7.data) == 0
    bool_0 = False
    stack_node_8 = module_0.StackNode(bool_0)
    stack_node_9 = module_0.StackNode(bool_0)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_10 = module_0.StackNode(var_7)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_13)
    assert len(stack_node_13.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_8 = stack_15.__len__()
    assert var_8 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_14 = module_0.StackNode(var_8)
    assert stack_node_14.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_15 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_16 = module_0.StackNode(none_type_0)
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_9 = stack_20.__len__()
    assert var_9 == 0
    module_0.postfix_eval(stack_node_7)


@pytest.mark.xfail(strict=True)
def test_case_1206():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_0.__len__()
    assert var_2 == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_3 = stack_1.__len__()
    assert var_3 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_1)
    assert len(stack_node_5.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_5)
    assert len(stack_node_10.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_11 = module_0.StackNode(var_5)
    assert stack_node_11.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    var_7 = stack_8.__len__()
    assert var_7 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_2 = None
    stack_node_12 = module_0.StackNode(none_type_2)
    stack_node_13 = module_0.StackNode(stack_10)
    assert len(stack_node_13.data) == 0
    none_type_3 = None
    stack_node_14 = module_0.StackNode(none_type_3)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_8 = stack_11.__len__()
    assert var_8 == 0
    var_2.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1207():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_1 = module_0.StackNode(float_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(stack_3)
    assert len(stack_node_6.data) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    none_type_2 = None
    stack_node_7 = module_0.StackNode(none_type_2)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_8)
    assert len(stack_node_11.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6.push(stack_7)


@pytest.mark.xfail(strict=True)
def test_case_1208():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(stack_6)
    assert len(stack_node_2.data) == 0
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_4 = module_0.StackNode(float_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_1.peek()


@pytest.mark.xfail(strict=True)
def test_case_1209():
    list_0 = []
    bool_0 = True
    bytes_0 = b"Z\xf9\x91\xb3&\x18-\xa1R\xcfy\xda6\xd1\x1b"
    tuple_0 = (bool_0, bytes_0)
    list_1 = [list_0, tuple_0, tuple_0, tuple_0]
    str_0 = "/A\n"
    str_1 = "UZ+\x0c(]7FKq9bTi"
    dict_0 = {str_0: bool_0, str_1: tuple_0, str_1: bytes_0}
    module_1.object(*list_1, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1210():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_0)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_2.__len__()
    assert var_2 == 0
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_5)
    assert len(stack_node_7.data) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_7)
    assert len(stack_node_11.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_12 = module_0.StackNode(var_6)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    none_type_1 = None
    stack_node_14 = module_0.StackNode(none_type_1)
    var_6.pop()


def test_case_1211():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_2 = module_0.StackNode(var_0)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_0)
    assert len(stack_node_5.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_7)
    assert len(stack_node_11.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_1 = None
    stack_node_12 = module_0.StackNode(none_type_1)
    stack_node_13 = module_0.StackNode(stack_10)
    assert len(stack_node_13.data) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_14 = module_0.StackNode(var_5)
    assert stack_node_14.data == 0
    stack_node_15 = module_0.StackNode(stack_node_14)
    stack_node_16 = module_0.StackNode(stack_12)
    assert len(stack_node_16.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    none_type_2 = None
    stack_node_17 = module_0.StackNode(none_type_2)
    with pytest.raises(ValueError):
        stack_6.pop()


@pytest.mark.xfail(strict=True)
def test_case_1212():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(stack_4)
    assert len(stack_node_2.data) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    module_0.check_parenthesis(none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_1213():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(stack_3)
    assert len(stack_node_3.data) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_node_7 = module_0.StackNode(stack_8)
    assert len(stack_node_7.data) == 0
    none_type_2 = None
    stack_node_8 = module_0.StackNode(none_type_2)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    var_8 = stack_9.__len__()
    assert var_8 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_9 = stack_10.__len__()
    assert var_9 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_9 = module_0.StackNode(var_9)
    assert stack_node_9.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_10 = stack_13.__len__()
    assert var_10 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_11 = stack_14.__len__()
    assert var_11 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_10 = module_0.StackNode(var_11)
    assert stack_node_10.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_11 = module_0.StackNode(stack_14)
    assert len(stack_node_11.data) == 0
    var_6.push(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1214():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    bool_1 = False
    stack_node_5 = module_0.StackNode(bool_1)
    stack_node_6 = module_0.StackNode(bool_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_8 = module_0.StackNode(stack_2)
    assert len(stack_node_8.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_9 = module_0.StackNode(var_3)
    assert stack_node_9.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_10 = module_0.StackNode(stack_5)
    assert len(stack_node_10.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_0 = None
    stack_node_11 = module_0.StackNode(none_type_0)
    stack_node_12 = module_0.StackNode(stack_9)
    assert len(stack_node_12.data) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    var_2.peek()


def test_case_1215():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(stack_9)
    assert len(stack_node_4.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_node_6 = module_0.StackNode(stack_11)
    assert len(stack_node_6.data) == 0
    bool_0 = False
    stack_node_7 = module_0.StackNode(bool_0)
    with pytest.raises(ValueError):
        stack_11.pop()


@pytest.mark.xfail(strict=True)
def test_case_1216():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_10 = module_0.StackNode(var_5)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_9)
    assert len(stack_node_13.data) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_14 = module_0.StackNode(var_7)
    assert stack_node_14.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_8 = module_0.check_parenthesis(dict_1)
    assert var_8 is True
    var_9 = stack_12.__len__()
    assert var_9 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_10 = stack_14.__len__()
    assert var_10 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_15 = module_0.StackNode(var_10)
    assert stack_node_15.data == 0
    stack_node_16 = module_0.StackNode(stack_node_15)
    stack_node_17 = module_0.StackNode(stack_node_15)
    stack_node_18 = module_0.StackNode(stack_14)
    assert len(stack_node_18.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_11 = module_0.check_parenthesis(dict_2)
    assert var_11 is True
    stack_node_19 = module_0.StackNode(float_2)
    var_3.__len__()


def test_case_1217():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_0 = module_0.StackNode(var_2)
    assert stack_node_0.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_4.push(stack_6)
    assert len(stack_4) == 1
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_1 = module_0.StackNode(float_1)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    with pytest.raises(ValueError):
        stack_5.peek()


@pytest.mark.xfail(strict=True)
def test_case_1218():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1219():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_2 = None
    stack_node_4 = module_0.StackNode(none_type_2)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_5 = module_0.StackNode(var_7)
    assert stack_node_5.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_8 = stack_17.__len__()
    assert var_8 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_6 = module_0.StackNode(var_8)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_17)
    assert len(stack_node_9.data) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    none_type_3 = None
    stack_node_10 = module_0.StackNode(none_type_3)
    stack_node_11 = module_0.StackNode(stack_20)
    assert len(stack_node_11.data) == 0
    var_9 = stack_20.__len__()
    assert var_9 == 0
    var_9.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1220():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_7 = module_0.StackNode(stack_6)
    assert len(stack_node_7.data) == 0
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_10 = module_0.StackNode(var_8)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_13)
    assert len(stack_node_13.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_9 = stack_16.__len__()
    assert var_9 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_14 = module_0.StackNode(var_9)
    assert stack_node_14.data == 0
    stack_node_15 = module_0.StackNode(stack_node_14)
    stack_node_16 = module_0.StackNode(stack_node_14)
    stack_node_17 = module_0.StackNode(stack_16)
    assert len(stack_node_17.data) == 0
    var_10 = stack_17.__len__()
    assert var_10 == 0
    var_11 = stack_16.push(stack_node_16)
    assert len(stack_16) == 1
    assert len(stack_node_17.data) == 1
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    none_type_1 = None
    stack_node_18 = module_0.StackNode(none_type_1)
    module_0.check_parenthesis(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1221():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    stack_node_1 = module_0.StackNode(float_1)
    module_0.check_parenthesis(stack_node_1)


@pytest.mark.xfail(strict=True)
def test_case_1222():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_node_6 = module_0.StackNode(stack_6)
    assert len(stack_node_6.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_8 = module_0.StackNode(stack_8)
    assert len(stack_node_8.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_1.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1223():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_9)
    assert len(stack_node_7.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_7 = stack_14.push(stack_16)
    assert len(stack_14) == 1
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_8 = stack_17.__len__()
    assert var_8 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_9 = module_0.StackNode(complex_0)
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_9 = stack_19.__len__()
    assert var_9 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_10 = module_0.StackNode(var_9)
    assert stack_node_10.data == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    module_0.postfix_eval(stack_7)


@pytest.mark.xfail(strict=True)
def test_case_1224():
    float_0 = 1992.7524
    module_0.check_parenthesis(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1225():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1226():
    tuple_0 = ()
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(tuple_0)
    assert len(stack_0) == 1
    var_0.pop()


def test_case_1227():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_5 = stack_14.__len__()
    assert var_5 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_6 = stack_19.__len__()
    assert var_6 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_5 = module_0.StackNode(var_6)
    assert stack_node_5.data == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    var_7 = stack_22.__len__()
    assert var_7 == 0
    with pytest.raises(ValueError):
        stack_14.pop()


@pytest.mark.xfail(strict=True)
def test_case_1228():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_5 = stack_4.__len__()
    assert var_5 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_4 = module_0.StackNode(var_6)
    assert stack_node_4.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_8 = stack_12.__len__()
    assert var_8 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_5 = module_0.StackNode(var_8)
    assert stack_node_5.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_6 = module_0.StackNode(stack_12)
    assert len(stack_node_6.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_9 = stack_15.__len__()
    assert var_9 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_7 = module_0.StackNode(var_9)
    assert stack_node_7.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_8 = module_0.StackNode(stack_15)
    assert len(stack_node_8.data) == 0
    var_10 = stack_17.__len__()
    assert var_10 == 0
    module_0.postfix_eval(stack_node_8)


@pytest.mark.xfail(strict=True)
def test_case_1229():
    float_0 = 1387.625714
    module_0.check_parenthesis(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1230():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_7)
    assert len(stack_node_10.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_11 = module_0.StackNode(complex_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_12 = module_0.StackNode(var_6)
    assert stack_node_12.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_13 = module_0.StackNode(stack_8)
    assert len(stack_node_13.data) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_0 = None
    stack_node_14 = module_0.StackNode(none_type_0)
    stack_node_15 = module_0.StackNode(stack_12)
    assert len(stack_node_15.data) == 0
    bool_0 = False
    stack_node_16 = module_0.StackNode(bool_0)
    stack_node_17 = module_0.StackNode(bool_0)
    module_0.check_parenthesis(stack_node_5)


@pytest.mark.xfail(strict=True)
def test_case_1231():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    module_0.postfix_eval(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1232():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(stack_5)
    assert len(stack_node_3.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_4 = module_0.StackNode(complex_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_6 = module_0.StackNode(stack_10)
    assert len(stack_node_6.data) == 0
    module_0.check_parenthesis(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1233():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    module_0.check_parenthesis(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1234():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    bool_1 = False
    stack_node_2 = module_0.StackNode(bool_1)
    stack_node_3 = module_0.StackNode(bool_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_2)
    assert len(stack_node_6.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_8.push(stack_10)
    assert len(stack_8) == 1
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_9 = module_0.StackNode(stack_11)
    assert len(stack_node_9.data) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_7 = stack_15.__len__()
    assert var_7 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_10 = module_0.StackNode(var_7)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_15)
    assert len(stack_node_13.data) == 0
    var_8 = stack_16.__len__()
    assert var_8 == 0
    module_0.check_parenthesis(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1235():
    int_0 = 103
    module_0.postfix_eval(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1236():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    module_0.check_parenthesis(stack_2)


@pytest.mark.xfail(strict=True)
def test_case_1237():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(stack_3)
    assert len(stack_node_3.data) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_5 = module_0.StackNode(float_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    module_0.check_parenthesis(stack_node_3)


@pytest.mark.xfail(strict=True)
def test_case_1238():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_4 = module_0.StackNode(complex_0)
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_2 = None
    stack_node_6 = module_0.StackNode(none_type_2)
    stack_node_7 = module_0.StackNode(stack_5)
    assert len(stack_node_7.data) == 0
    var_3 = stack_5.push(none_type_1)
    assert len(stack_5) == 1
    assert len(stack_node_7.data) == 1
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_6)
    assert len(stack_node_11.data) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    var_6 = stack_6.push(stack_node_10)
    assert len(stack_6) == 1
    assert len(stack_node_11.data) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_7 = stack_8.__len__()
    assert var_7 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    complex_1 = -3711.3 - 806.2j
    stack_node_12 = module_0.StackNode(complex_1)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_3 = None
    stack_node_13 = module_0.StackNode(none_type_3)
    stack_node_14 = module_0.StackNode(stack_11)
    assert len(stack_node_14.data) == 0
    var_8 = stack_11.__len__()
    assert var_8 == 0
    none_type_4 = None
    stack_node_15 = module_0.StackNode(none_type_4)
    var_3.peek()


def test_case_1239():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_7 = stack_16.__len__()
    assert var_7 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_8 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_9 = module_0.StackNode(none_type_0)
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    none_type_1 = None
    stack_node_10 = module_0.StackNode(none_type_1)
    stack_node_11 = module_0.StackNode(stack_18)
    assert len(stack_node_11.data) == 0
    var_8 = stack_18.push(none_type_0)
    assert len(stack_18) == 1
    assert len(stack_node_11.data) == 1
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_9 = stack_19.__len__()
    assert var_9 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_12 = module_0.StackNode(var_9)
    assert stack_node_12.data == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_10 = stack_21.push(stack_23)
    assert len(stack_21) == 1
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_11 = module_0.check_parenthesis(dict_0)
    assert var_11 is True
    with pytest.raises(ValueError):
        stack_12.pop()


def test_case_1240():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    complex_0 = -3711.3 - 806.2j
    stack_node_2 = module_0.StackNode(complex_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    var_4 = stack_4.__len__()
    assert var_4 == 0
    with pytest.raises(ValueError):
        stack_2.pop()


def test_case_1241():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    with pytest.raises(ValueError):
        stack_0.peek()


def test_case_1242():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    with pytest.raises(ValueError):
        stack_0.pop()


def test_case_1243():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_1 = None
    stack_node_1 = module_0.StackNode(none_type_1)
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_2 = None
    stack_node_3 = module_0.StackNode(none_type_2)
    none_type_3 = None
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.push(none_type_3)
    assert len(stack_4) == 1
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_4 = module_0.StackNode(float_0)
    with pytest.raises(ValueError):
        stack_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_1244():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_5 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    stack_node_8 = module_0.StackNode(stack_4)
    assert len(stack_node_8.data) == 0
    var_2 = stack_4.push(none_type_0)
    assert len(stack_4) == 1
    assert len(stack_node_8.data) == 1
    module_0.check_parenthesis(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1245():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_7 = module_0.StackNode(complex_0)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    module_0.postfix_eval(stack_12)


def test_case_1246():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1247():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_2.__len__()
    assert var_4 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_5 = stack_3.__len__()
    assert var_5 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_5)
    assert stack_node_3.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_6 = stack_6.__len__()
    assert var_6 == 0
    var_2.push(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1248():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_6)
    assert len(stack_node_5.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    stack_node_8 = module_0.StackNode(stack_11)
    assert len(stack_node_8.data) == 0
    module_0.check_parenthesis(stack_7)


@pytest.mark.xfail(strict=True)
def test_case_1249():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    none_type_0 = None
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.push(none_type_0)
    assert len(stack_2) == 1
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_5 = module_0.StackNode(float_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    complex_0 = -3711.3 - 806.2j
    stack_node_6 = module_0.StackNode(complex_0)
    complex_1 = -3711.3 - 806.2j
    stack_node_7 = module_0.StackNode(complex_1)
    none_type_1 = None
    stack_node_8 = module_0.StackNode(none_type_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_2 = None
    stack_node_9 = module_0.StackNode(none_type_2)
    stack_node_10 = module_0.StackNode(stack_4)
    assert len(stack_node_10.data) == 0
    var_4 = stack_4.push(none_type_1)
    assert len(stack_4) == 1
    assert len(stack_node_10.data) == 1
    bool_1 = False
    stack_node_11 = module_0.StackNode(bool_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_6 = stack_6.__len__()
    assert var_6 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_12 = module_0.StackNode(var_6)
    assert stack_node_12.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    module_0.postfix_eval(stack_7)


@pytest.mark.xfail(strict=True)
def test_case_1250():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_1)
    assert stack_node_5.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(stack_3)
    assert len(stack_node_6.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_8)
    assert len(stack_node_9.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_10 = module_0.StackNode(var_3)
    assert stack_node_10.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_4 = stack_14.__len__()
    assert var_4 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_11 = module_0.StackNode(var_4)
    assert stack_node_11.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_5 = stack_18.__len__()
    assert var_5 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_6 = stack_20.__len__()
    assert var_6 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_12 = module_0.StackNode(var_6)
    assert stack_node_12.data == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    var_7 = stack_22.__len__()
    assert var_7 == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    module_0.check_parenthesis(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1251():
    int_0 = -2912
    module_0.check_parenthesis(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1252():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(stack_2)
    assert len(stack_node_3.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_8 = module_0.StackNode(stack_12)
    assert len(stack_node_8.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_5 = stack_15.__len__()
    assert var_5 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_10 = module_0.StackNode(stack_15)
    assert len(stack_node_10.data) == 0
    var_6 = stack_17.__len__()
    assert var_6 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_7 = stack_19.__len__()
    assert var_7 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_11 = module_0.StackNode(var_7)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_node_11)
    stack_node_14 = module_0.StackNode(stack_19)
    assert len(stack_node_14.data) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_8 = stack_21.__len__()
    assert var_8 == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_15 = module_0.StackNode(var_8)
    assert stack_node_15.data == 0
    stack_node_16 = module_0.StackNode(stack_node_15)
    module_0.postfix_eval(var_4)


def test_case_1253():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_6)
    assert len(stack_node_3.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_node_6 = module_0.StackNode(stack_12)
    assert len(stack_node_6.data) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    stack_node_8 = module_0.StackNode(float_0)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    complex_0 = -3711.3 - 806.2j
    stack_node_9 = module_0.StackNode(complex_0)
    bool_0 = False
    stack_node_10 = module_0.StackNode(bool_0)
    stack_node_11 = module_0.StackNode(bool_0)
    with pytest.raises(ValueError):
        stack_8.peek()


def test_case_1254():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    with pytest.raises(ValueError):
        stack_1.peek()


@pytest.mark.xfail(strict=True)
def test_case_1255():
    object_0 = module_1.object()
    bytes_0 = b"\xe6\xa5<\xf1zeQJ\x99}\xe6\x8a\xe5\xb6\x9ff\xe6C\xbf"
    set_0 = {bytes_0}
    module_0.postfix_eval(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1256():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    bool_1 = False
    stack_node_3 = module_0.StackNode(bool_1)
    stack_node_4 = module_0.StackNode(bool_1)
    none_type_0 = None
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.push(none_type_0)
    assert len(stack_5) == 1
    stack_node_5 = module_0.StackNode(var_2)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(stack_7)
    assert len(stack_node_7.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_9)
    assert len(stack_node_11.data) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_12 = module_0.StackNode(var_6)
    assert stack_node_12.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_13 = module_0.StackNode(stack_11)
    assert len(stack_node_13.data) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_8 = stack_15.__len__()
    assert var_8 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_14 = module_0.StackNode(var_8)
    assert stack_node_14.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_15 = module_0.StackNode(stack_15)
    assert len(stack_node_15.data) == 0
    module_0.check_parenthesis(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1257():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_2)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_9 = module_0.StackNode(stack_8)
    assert len(stack_node_9.data) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    bool_0 = False
    stack_node_10 = module_0.StackNode(bool_0)
    stack_node_11 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_12.push(none_type_1)
    assert len(stack_12) == 1
    stack_node_12 = module_0.StackNode(var_7)
    complex_0 = -3711.3 - 806.2j
    stack_node_13 = module_0.StackNode(complex_0)
    none_type_2 = None
    stack_node_14 = module_0.StackNode(none_type_2)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    none_type_3 = None
    stack_node_15 = module_0.StackNode(none_type_3)
    stack_node_16 = module_0.StackNode(stack_13)
    assert len(stack_node_16.data) == 0
    var_8 = stack_13.push(none_type_2)
    assert len(stack_13) == 1
    assert len(stack_node_16.data) == 1
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    none_type_4 = None
    stack_node_17 = module_0.StackNode(none_type_4)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_9 = stack_15.__len__()
    assert var_9 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_18 = module_0.StackNode(var_9)
    assert stack_node_18.data == 0
    stack_node_19 = module_0.StackNode(stack_node_18)
    stack_node_20 = module_0.StackNode(stack_node_18)
    stack_node_21 = module_0.StackNode(stack_15)
    assert len(stack_node_21.data) == 0
    var_10 = stack_16.__len__()
    assert var_10 == 0
    var_11 = stack_15.push(stack_node_20)
    assert len(stack_15) == 1
    assert len(stack_node_21.data) == 1
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_12 = stack_17.__len__()
    assert var_12 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_22 = module_0.StackNode(var_12)
    assert stack_node_22.data == 0
    stack_node_23 = module_0.StackNode(stack_node_22)
    stack_node_24 = module_0.StackNode(stack_18)
    assert len(stack_node_24.data) == 0
    module_0.check_parenthesis(stack_node_21)


@pytest.mark.xfail(strict=True)
def test_case_1258():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(stack_7)
    assert len(stack_node_4.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_7 = module_0.StackNode(var_7)
    assert stack_node_7.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_8 = stack_15.__len__()
    assert var_8 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_8 = module_0.StackNode(var_8)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_15)
    assert len(stack_node_11.data) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_9 = stack_1.push(var_2)
    assert len(stack_1) == 1
    var_9.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1259():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_5 = module_0.StackNode(stack_10)
    assert len(stack_node_5.data) == 0
    module_0.postfix_eval(var_2)


def test_case_1260():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_5)
    assert len(stack_node_8.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_node_12 = module_0.StackNode(stack_8)
    assert len(stack_node_12.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_1 = None
    stack_node_13 = module_0.StackNode(none_type_1)
    stack_node_14 = module_0.StackNode(stack_10)
    assert len(stack_node_14.data) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_15 = module_0.StackNode(var_6)
    assert stack_node_15.data == 0
    stack_node_16 = module_0.StackNode(stack_node_15)
    stack_node_17 = module_0.StackNode(stack_node_15)
    stack_node_18 = module_0.StackNode(stack_11)
    assert len(stack_node_18.data) == 0
    var_7 = stack_12.__len__()
    assert var_7 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_8 = module_0.check_parenthesis(dict_0)
    assert var_8 is True
    stack_node_19 = module_0.StackNode(float_0)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    none_type_2 = None
    stack_node_20 = module_0.StackNode(none_type_2)
    stack_node_21 = module_0.StackNode(stack_13)
    assert len(stack_node_21.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_9 = stack_14.__len__()
    assert var_9 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_10 = module_0.check_parenthesis(dict_1)
    assert var_10 is True
    with pytest.raises(ValueError):
        stack_12.peek()


@pytest.mark.xfail(strict=True)
def test_case_1261():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    module_0.check_parenthesis(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1262():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    var_2.__len__()


def test_case_1263():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    stack_node_1 = module_0.StackNode(float_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(stack_3)
    assert len(stack_node_3.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_4 = module_0.StackNode(complex_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(stack_4)
    assert len(stack_node_6.data) == 0
    with pytest.raises(ValueError):
        stack_6.pop()


@pytest.mark.xfail(strict=True)
def test_case_1264():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(var_5)
    assert stack_node_2.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_3 = module_0.StackNode(var_6)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_10)
    assert len(stack_node_6.data) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_8 = stack_12.__len__()
    assert var_8 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_7 = module_0.StackNode(var_8)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_13)
    assert len(stack_node_9.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_9 = stack_14.__len__()
    assert var_9 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_10 = module_0.StackNode(var_9)
    assert stack_node_10.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    bool_0 = False
    stack_node_11 = module_0.StackNode(bool_0)
    var_8.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1265():
    bool_0 = True
    module_0.check_parenthesis(bool_0)


def test_case_1266():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_5)
    assert len(stack_node_4.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_6 = module_0.StackNode(stack_7)
    assert len(stack_node_6.data) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_8 = module_0.StackNode(stack_12)
    assert len(stack_node_8.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_5 = stack_14.__len__()
    assert var_5 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_10 = module_0.StackNode(stack_14)
    assert len(stack_node_10.data) == 0
    bool_0 = False
    stack_node_11 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    stack_node_12 = module_0.StackNode(float_0)
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_7 = stack_19.__len__()
    assert var_7 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_13 = module_0.StackNode(var_7)
    assert stack_node_13.data == 0
    stack_node_14 = module_0.StackNode(stack_node_13)
    stack_node_15 = module_0.StackNode(stack_node_13)
    stack_node_16 = module_0.StackNode(stack_19)
    assert len(stack_node_16.data) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    with pytest.raises(ValueError):
        stack_12.peek()


@pytest.mark.xfail(strict=True)
def test_case_1267():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1268():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_2)
    assert len(stack_node_6.data) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_9 = module_0.StackNode(stack_5)
    assert len(stack_node_9.data) == 0
    module_0.check_parenthesis(stack_node_6)


def test_case_1269():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    with pytest.raises(ValueError):
        stack_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1270():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    var_1.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1271():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_8)
    assert len(stack_node_4.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_6 = module_0.StackNode(stack_11)
    assert len(stack_node_6.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_node_7 = module_0.StackNode(float_0)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_13)
    assert len(stack_node_11.data) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_12 = module_0.StackNode(complex_0)
    none_type_1 = None
    stack_node_13 = module_0.StackNode(none_type_1)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    none_type_2 = None
    stack_node_14 = module_0.StackNode(none_type_2)
    stack_node_15 = module_0.StackNode(stack_15)
    assert len(stack_node_15.data) == 0
    var_8 = stack_15.push(none_type_1)
    assert len(stack_15) == 1
    assert len(stack_node_15.data) == 1
    module_0.postfix_eval(stack_5)


@pytest.mark.xfail(strict=True)
def test_case_1272():
    bytes_0 = b"\xb2\x1a"
    module_0.postfix_eval(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1273():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_2 = module_0.StackNode(float_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_3 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_node_6 = module_0.StackNode(stack_6)
    assert len(stack_node_6.data) == 0
    var_3 = stack_6.push(none_type_0)
    assert len(stack_6) == 1
    assert len(stack_node_6.data) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_9.push(stack_11)
    assert len(stack_9) == 1
    none_type_2 = None
    stack_node_8 = module_0.StackNode(none_type_2)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    var_8 = stack_12.__len__()
    assert var_8 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_9 = stack_13.__len__()
    assert var_9 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_9 = module_0.StackNode(var_9)
    assert stack_node_9.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_10 = module_0.StackNode(stack_13)
    assert len(stack_node_10.data) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_10 = stack_17.__len__()
    assert var_10 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_11 = module_0.StackNode(var_10)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_node_11)
    stack_node_14 = module_0.StackNode(stack_17)
    assert len(stack_node_14.data) == 0
    var_11 = stack_18.__len__()
    assert var_11 == 0
    var_12 = stack_17.push(stack_node_13)
    assert len(stack_17) == 1
    assert len(stack_node_14.data) == 1
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_13 = stack_19.__len__()
    assert var_13 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_15 = module_0.StackNode(var_13)
    assert stack_node_15.data == 0
    stack_node_16 = module_0.StackNode(stack_node_15)
    stack_node_17 = module_0.StackNode(stack_20)
    assert len(stack_node_17.data) == 0
    module_0.check_parenthesis(var_10)


@pytest.mark.xfail(strict=True)
def test_case_1274():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_2 = None
    stack_node_4 = module_0.StackNode(none_type_2)
    stack_node_5 = module_0.StackNode(stack_1)
    assert len(stack_node_5.data) == 0
    none_type_3 = None
    stack_node_6 = module_0.StackNode(none_type_3)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_2.__len__()
    assert var_3 == 0
    none_type_4 = None
    stack_node_7 = module_0.StackNode(none_type_4)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_5 = None
    stack_node_8 = module_0.StackNode(none_type_5)
    stack_node_9 = module_0.StackNode(stack_4)
    assert len(stack_node_9.data) == 0
    var_5 = stack_4.__len__()
    assert var_5 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_6 = stack_5.__len__()
    assert var_6 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    bool_0 = False
    stack_node_11 = module_0.StackNode(bool_0)
    stack_node_12 = module_0.StackNode(bool_0)
    none_type_6 = None
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_8 = stack_11.push(none_type_6)
    assert len(stack_11) == 1
    stack_node_13 = module_0.StackNode(var_8)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_9 = stack_12.__len__()
    assert var_9 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_14 = module_0.StackNode(var_9)
    assert stack_node_14.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_10 = stack_15.__len__()
    assert var_10 == 0
    module_0.postfix_eval(none_type_6)


@pytest.mark.xfail(strict=True)
def test_case_1275():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_5 = module_0.StackNode(float_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_8 = module_0.StackNode(var_7)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_14)
    assert len(stack_node_11.data) == 0
    var_8 = stack_15.__len__()
    assert var_8 == 0
    var_5.peek()


@pytest.mark.xfail(strict=True)
def test_case_1276():
    float_0 = -3106.510608
    module_0.postfix_eval(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1277():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_1 = module_0.check_parenthesis(dict_1)
    assert var_1 is True
    stack_node_1 = module_0.StackNode(float_1)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    bool_1 = False
    stack_node_2 = module_0.StackNode(bool_1)
    stack_node_3 = module_0.StackNode(bool_1)
    none_type_0 = None
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.push(none_type_0)
    assert len(stack_1) == 1
    stack_node_4 = module_0.StackNode(var_2)
    bool_2 = True
    module_0.postfix_eval(bool_2)


@pytest.mark.xfail(strict=True)
def test_case_1278():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_8)
    assert len(stack_node_10.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_11 = module_0.StackNode(var_6)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_node_11)
    stack_node_14 = module_0.StackNode(stack_11)
    assert len(stack_node_14.data) == 0
    var_7 = stack_12.__len__()
    assert var_7 == 0
    module_0.check_parenthesis(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1279():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1280():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_0 = module_0.StackNode(var_2)
    assert stack_node_0.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_5 = module_0.StackNode(stack_7)
    assert len(stack_node_5.data) == 0
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    stack_node_7 = module_0.StackNode(bool_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_11)
    assert len(stack_node_11.data) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_12 = module_0.StackNode(var_7)
    assert stack_node_12.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_13 = module_0.StackNode(stack_13)
    assert len(stack_node_13.data) == 0
    var_8 = stack_15.__len__()
    assert var_8 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_9 = stack_17.__len__()
    assert var_9 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_14 = module_0.StackNode(var_9)
    assert stack_node_14.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_10 = stack_19.__len__()
    assert var_10 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_15 = module_0.StackNode(var_10)
    assert stack_node_15.data == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_16 = module_0.StackNode(stack_20)
    assert len(stack_node_16.data) == 0
    var_4.pop()


@pytest.mark.xfail(strict=True)
def test_case_1281():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_4)
    assert len(stack_node_7.data) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    var_4 = stack_4.push(stack_node_6)
    assert len(stack_4) == 1
    assert len(stack_node_7.data) == 1
    none_type_0 = None
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.push(none_type_0)
    assert len(stack_6) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_8 = module_0.StackNode(var_7)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    none_type_1 = None
    stack_node_11 = module_0.StackNode(none_type_1)
    stack_node_12 = module_0.StackNode(stack_13)
    assert len(stack_node_12.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_13 = module_0.StackNode(var_8)
    assert stack_node_13.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_9 = stack_16.push(stack_18)
    assert len(stack_16) == 1
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_10 = stack_19.__len__()
    assert var_10 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_14 = module_0.StackNode(var_10)
    assert stack_node_14.data == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    var_11 = stack_22.__len__()
    assert var_11 == 0
    var_11.push(var_7)


@pytest.mark.xfail(strict=True)
def test_case_1282():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(stack_5)
    assert len(stack_node_2.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_3 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_node_6 = module_0.StackNode(stack_7)
    assert len(stack_node_6.data) == 0
    var_2 = stack_7.push(none_type_0)
    assert len(stack_7) == 1
    assert len(stack_node_6.data) == 1
    bool_0 = False
    stack_node_7 = module_0.StackNode(bool_0)
    stack_node_8 = module_0.StackNode(bool_0)
    none_type_2 = None
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.push(none_type_2)
    assert len(stack_8) == 1
    stack_node_9 = module_0.StackNode(var_3)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    bool_1 = False
    stack_node_10 = module_0.StackNode(bool_1)
    var_4.push(none_type_2)


@pytest.mark.xfail(strict=True)
def test_case_1283():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_7 = module_0.StackNode(stack_5)
    assert len(stack_node_7.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_8 = module_0.StackNode(complex_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_9 = module_0.StackNode(var_3)
    assert stack_node_9.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_10 = module_0.StackNode(stack_8)
    assert len(stack_node_10.data) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    var_0.push(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1284():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_1.__len__()
    assert var_3 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_4 = stack_2.__len__()
    assert var_4 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_4)
    assert stack_node_1.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_4.push(stack_6)
    assert len(stack_4) == 1
    complex_0 = -3711.3 - 806.2j
    stack_node_2 = module_0.StackNode(complex_0)
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_2 = None
    stack_node_4 = module_0.StackNode(none_type_2)
    stack_node_5 = module_0.StackNode(stack_7)
    assert len(stack_node_5.data) == 0
    var_6 = stack_7.push(none_type_1)
    assert len(stack_7) == 1
    assert len(stack_node_5.data) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_7 = stack_8.__len__()
    assert var_7 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_6 = module_0.StackNode(var_7)
    assert stack_node_6.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_7 = module_0.StackNode(var_8)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_14)
    assert len(stack_node_9.data) == 0
    none_type_3 = None
    stack_node_10 = module_0.StackNode(none_type_3)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_9 = stack_15.__len__()
    assert var_9 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_11 = module_0.StackNode(var_9)
    assert stack_node_11.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_10 = stack_17.__len__()
    assert var_10 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_12 = module_0.StackNode(var_10)
    assert stack_node_12.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_13 = module_0.StackNode(stack_17)
    assert len(stack_node_13.data) == 0
    var_11 = stack_19.__len__()
    assert var_11 == 0
    var_12 = stack_19.__len__()
    assert var_12 == 0
    var_12.pop()


@pytest.mark.xfail(strict=True)
def test_case_1285():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    none_type_1 = None
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.push(none_type_1)
    assert len(stack_3) == 1
    none_type_2 = None
    stack_node_4 = module_0.StackNode(none_type_2)
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_node_6 = module_0.StackNode(bool_0)
    none_type_3 = None
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.push(none_type_3)
    assert len(stack_4) == 1
    stack_node_7 = module_0.StackNode(var_2)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_9 = module_0.StackNode(stack_6)
    assert len(stack_node_9.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_10 = module_0.StackNode(var_4)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_8)
    assert len(stack_node_13.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    bool_1 = False
    stack_node_14 = module_0.StackNode(bool_1)
    var_0.push(stack_1)


@pytest.mark.xfail(strict=True)
def test_case_1286():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_0 = None
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.push(none_type_0)
    assert len(stack_7) == 1
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    module_0.postfix_eval(stack_2)


@pytest.mark.xfail(strict=True)
def test_case_1287():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_8 = module_0.StackNode(stack_5)
    assert len(stack_node_8.data) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_10 = module_0.StackNode(stack_10)
    assert len(stack_node_10.data) == 0
    module_0.postfix_eval(stack_7)


@pytest.mark.xfail(strict=True)
def test_case_1288():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_0 = stack_2.__len__()
    assert var_0 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_0)
    assert stack_node_2.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_3 = module_0.StackNode(float_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_node_5 = module_0.StackNode(stack_7)
    assert len(stack_node_5.data) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_2 = None
    stack_node_6 = module_0.StackNode(none_type_2)
    none_type_3 = None
    stack_node_7 = module_0.StackNode(none_type_3)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_5 = stack_13.push(stack_15)
    assert len(stack_13) == 1
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_6 = stack_16.__len__()
    assert var_6 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_16)
    assert len(stack_node_13.data) == 0
    var_7 = stack_17.__len__()
    assert var_7 == 0
    var_8 = stack_16.push(stack_node_12)
    assert len(stack_16) == 1
    assert len(stack_node_13.data) == 1
    module_0.check_parenthesis(none_type_3)


def test_case_1289():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    with pytest.raises(ValueError):
        stack_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_1290():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_0 = module_0.StackNode(var_2)
    assert stack_node_0.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_5.push(stack_7)
    assert len(stack_5) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(stack_8)
    assert len(stack_node_2.data) == 0
    none_type_1 = None
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.push(none_type_1)
    assert len(stack_9) == 1
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_3 = module_0.StackNode(var_5)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    var_2.__len__()


def test_case_1291():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_0.__len__()
    assert var_2 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_3 = stack_1.__len__()
    assert var_3 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_3 = module_0.StackNode(float_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_5 = stack_4.__len__()
    assert var_5 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_6)
    assert stack_node_4.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_5 = module_0.StackNode(stack_7)
    assert len(stack_node_5.data) == 0
    var_7 = stack_9.__len__()
    assert var_7 == 0
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_8 = stack_11.__len__()
    assert var_8 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_9 = stack_12.__len__()
    assert var_9 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_7 = module_0.StackNode(var_9)
    assert stack_node_7.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_10 = module_0.check_parenthesis(dict_2)
    assert var_10 is True
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_11 = stack_17.__len__()
    assert var_11 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_8 = module_0.StackNode(var_11)
    assert stack_node_8.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_12 = stack_19.push(stack_21)
    assert len(stack_19) == 1
    with pytest.raises(ValueError):
        stack_12.peek()


@pytest.mark.xfail(strict=True)
def test_case_1292():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_7.push(stack_9)
    assert len(stack_7) == 1
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    module_0.postfix_eval(stack_node_1)


@pytest.mark.xfail(strict=True)
def test_case_1293():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_3)
    assert len(stack_node_4.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(stack_5)
    assert len(stack_node_6.data) == 0
    var_1.__len__()


def test_case_1294():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(stack_5)
    assert len(stack_node_2.data) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    with pytest.raises(ValueError):
        stack_4.peek()


@pytest.mark.xfail(strict=True)
def test_case_1295():
    complex_0 = 2775.354067 - 1320.7j
    module_0.check_parenthesis(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1296():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    module_0.postfix_eval(stack_1)


def test_case_1297():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(stack_5)
    assert len(stack_node_2.data) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_4 = module_0.StackNode(complex_0)
    complex_1 = -3711.3 - 806.2j
    stack_node_5 = module_0.StackNode(complex_1)
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_2 = None
    stack_node_7 = module_0.StackNode(none_type_2)
    stack_node_8 = module_0.StackNode(stack_8)
    assert len(stack_node_8.data) == 0
    var_4 = stack_8.push(none_type_1)
    assert len(stack_8) == 1
    assert len(stack_node_8.data) == 1
    with pytest.raises(ValueError):
        stack_7.peek()


@pytest.mark.xfail(strict=True)
def test_case_1298():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    module_0.postfix_eval(stack_node_1)


def test_case_1299():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_2 = module_0.StackNode(stack_7)
    assert len(stack_node_2.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_5 = stack_14.__len__()
    assert var_5 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_6 = stack_16.push(stack_18)
    assert len(stack_16) == 1
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_7 = stack_19.__len__()
    assert var_7 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_5 = module_0.StackNode(var_7)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_19)
    assert len(stack_node_8.data) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    none_type_0 = None
    stack_node_9 = module_0.StackNode(none_type_0)
    stack_node_10 = module_0.StackNode(stack_21)
    assert len(stack_node_10.data) == 0
    var_8 = stack_21.__len__()
    assert var_8 == 0
    with pytest.raises(ValueError):
        stack_7.peek()


def test_case_1300():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    with pytest.raises(ValueError):
        stack_0.pop()


def test_case_1301():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_1.__len__()
    assert var_3 == 0
    bool_1 = False
    stack_node_3 = module_0.StackNode(bool_1)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_4 = module_0.StackNode(float_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_5 = stack_3.__len__()
    assert var_5 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_3)
    assert len(stack_node_8.data) == 0
    var_6 = stack_4.__len__()
    assert var_6 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_7 = stack_5.__len__()
    assert var_7 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_9 = module_0.StackNode(var_7)
    assert stack_node_9.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_8 = stack_8.__len__()
    assert var_8 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_9 = stack_9.__len__()
    assert var_9 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_10 = module_0.StackNode(var_9)
    assert stack_node_10.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_11 = module_0.StackNode(stack_9)
    assert len(stack_node_11.data) == 0
    var_10 = stack_11.__len__()
    assert var_10 == 0
    with pytest.raises(ValueError):
        stack_5.pop()


def test_case_1302():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    none_type_2 = None
    stack_node_4 = module_0.StackNode(none_type_2)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_5 = module_0.StackNode(float_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_3 = None
    stack_node_7 = module_0.StackNode(none_type_3)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    var_6 = stack_7.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_7 = stack_9.__len__()
    assert var_7 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_8 = stack_10.__len__()
    assert var_8 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_9 = module_0.StackNode(var_8)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_node_12 = module_0.StackNode(stack_10)
    assert len(stack_node_12.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_9 = stack_12.__len__()
    assert var_9 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_13 = module_0.StackNode(var_9)
    assert stack_node_13.data == 0
    stack_node_14 = module_0.StackNode(stack_node_13)
    stack_node_15 = module_0.StackNode(stack_node_13)
    stack_node_16 = module_0.StackNode(stack_12)
    assert len(stack_node_16.data) == 0
    var_10 = stack_13.__len__()
    assert var_10 == 0
    var_11 = stack_12.push(stack_node_15)
    assert len(stack_12) == 1
    assert len(stack_node_16.data) == 1
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_12 = stack_14.__len__()
    assert var_12 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_17 = module_0.StackNode(var_12)
    assert stack_node_17.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    with pytest.raises(ValueError):
        stack_2.peek()


@pytest.mark.xfail(strict=True)
def test_case_1303():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2.peek()


@pytest.mark.xfail(strict=True)
def test_case_1304():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_3)
    assert len(stack_node_6.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    module_0.check_parenthesis(stack_node_8)


@pytest.mark.xfail(strict=True)
def test_case_1305():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(float_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.push(none_type_1)
    assert len(stack_1) == 1
    stack_node_3 = module_0.StackNode(var_2)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_2)
    assert len(stack_node_7.data) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    var_5 = stack_2.push(stack_node_6)
    assert len(stack_2) == 1
    assert len(stack_node_7.data) == 1
    module_0.check_parenthesis(var_3)


def test_case_1306():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    complex_0 = -3711.3 - 806.2j
    stack_node_3 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_node_6 = module_0.StackNode(stack_7)
    assert len(stack_node_6.data) == 0
    var_3 = stack_7.push(none_type_0)
    assert len(stack_7) == 1
    assert len(stack_node_6.data) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_12)
    assert len(stack_node_9.data) == 0
    with pytest.raises(ValueError):
        stack_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_1307():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1308():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)
    module_0.postfix_eval(var_0)


def test_case_1309():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_1 = stack_6.__len__()
    assert var_1 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(stack_7)
    assert len(stack_node_3.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_2 = stack_9.__len__()
    assert var_2 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_3 = stack_12.__len__()
    assert var_3 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_4 = stack_13.__len__()
    assert var_4 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_14)
    assert len(stack_node_6.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_5 = stack_15.__len__()
    assert var_5 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_6 = stack_17.__len__()
    assert var_6 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_7 = stack_18.__len__()
    assert var_7 == 0
    bool_0 = False
    stack_node_10 = module_0.StackNode(bool_0)
    stack_node_11 = module_0.StackNode(bool_0)
    with pytest.raises(ValueError):
        stack_15.pop()


@pytest.mark.xfail(strict=True)
def test_case_1310():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    var_1.pop()


def test_case_1311():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_4.push(stack_6)
    assert len(stack_4) == 1
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    with pytest.raises(ValueError):
        stack_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1312():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(stack_3)
    assert len(stack_node_3.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_4)
    assert len(stack_node_7.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_8 = module_0.StackNode(var_2)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_7)
    assert len(stack_node_11.data) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    var_4 = stack_7.push(stack_node_10)
    assert len(stack_7) == 1
    assert len(stack_node_11.data) == 1
    none_type_1 = None
    stack_node_12 = module_0.StackNode(none_type_1)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_13 = module_0.StackNode(var_6)
    assert stack_node_13.data == 0
    stack_node_14 = module_0.StackNode(stack_node_13)
    stack_node_15 = module_0.StackNode(stack_node_13)
    stack_node_16 = module_0.StackNode(stack_10)
    assert len(stack_node_16.data) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_8 = stack_12.__len__()
    assert var_8 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_17 = module_0.StackNode(var_8)
    assert stack_node_17.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_9 = stack_14.push(stack_16)
    assert len(stack_14) == 1
    bool_0 = False
    stack_node_18 = module_0.StackNode(bool_0)
    stack_node_19 = module_0.StackNode(bool_0)
    bool_1 = False
    stack_node_20 = module_0.StackNode(bool_1)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_10 = module_0.check_parenthesis(dict_0)
    assert var_10 is True
    stack_node_21 = module_0.StackNode(float_0)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_11 = stack_18.__len__()
    assert var_11 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_22 = module_0.StackNode(var_11)
    assert stack_node_22.data == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_12 = stack_21.__len__()
    assert var_12 == 0
    var_2.peek()


@pytest.mark.xfail(strict=True)
def test_case_1313():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_3 = stack_9.push(stack_11)
    assert len(stack_9) == 1
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_5 = module_0.StackNode(var_6)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_7 = stack_16.__len__()
    assert var_7 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_8 = stack_17.__len__()
    assert var_8 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_8 = module_0.StackNode(var_8)
    assert stack_node_8.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_9 = stack_18.__len__()
    assert var_9 == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    var_10 = stack_22.__len__()
    assert var_10 == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_node_9 = module_0.StackNode(var_10)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_node_12 = module_0.StackNode(stack_22)
    assert len(stack_node_12.data) == 0
    var_11 = stack_23.__len__()
    assert var_11 == 0
    var_12 = stack_22.push(stack_node_11)
    assert len(stack_22) == 1
    assert len(stack_node_12.data) == 1
    module_0.postfix_eval(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1314():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    complex_0 = -3711.3 - 806.2j
    stack_node_2 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    var_1 = stack_2.push(none_type_0)
    assert len(stack_2) == 1
    assert len(stack_node_5.data) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_2 = None
    stack_node_6 = module_0.StackNode(none_type_2)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_6 = stack_6.__len__()
    assert var_6 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_8 = module_0.StackNode(var_7)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_11)
    assert len(stack_node_10.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_8 = stack_12.__len__()
    assert var_8 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_11 = module_0.StackNode(var_8)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_node_11)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_9 = stack_14.__len__()
    assert var_9 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_14 = module_0.StackNode(var_9)
    assert stack_node_14.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_15 = module_0.StackNode(stack_15)
    assert len(stack_node_15.data) == 0
    var_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_1315():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    bool_1 = False
    stack_node_5 = module_0.StackNode(bool_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_1.peek()


@pytest.mark.xfail(strict=True)
def test_case_1316():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_7.push(stack_9)
    assert len(stack_7) == 1
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_7 = module_0.StackNode(stack_12)
    assert len(stack_node_7.data) == 0
    none_type_0 = None
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_6 = stack_16.push(none_type_0)
    assert len(stack_16) == 1
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_7 = stack_17.__len__()
    assert var_7 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_8 = module_0.StackNode(var_7)
    assert stack_node_8.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_8 = stack_23.__len__()
    assert var_8 == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_node_9 = module_0.StackNode(var_8)
    assert stack_node_9.data == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    var_9 = stack_25.__len__()
    assert var_9 == 0
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0
    stack_27 = module_0.Stack()
    assert len(stack_27) == 0
    var_10 = stack_27.__len__()
    assert var_10 == 0
    stack_28 = module_0.Stack()
    assert len(stack_28) == 0
    stack_node_10 = module_0.StackNode(var_10)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_27)
    assert len(stack_node_13.data) == 0
    var_11 = stack_28.__len__()
    assert var_11 == 0
    module_0.postfix_eval(stack_26)


@pytest.mark.xfail(strict=True)
def test_case_1317():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(stack_5)
    assert len(stack_node_3.data) == 0
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_7 = module_0.StackNode(stack_10)
    assert len(stack_node_7.data) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    var_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_1318():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_3)
    assert len(stack_node_6.data) == 0
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    none_type_1 = None
    stack_node_11 = module_0.StackNode(none_type_1)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_2 = None
    stack_node_12 = module_0.StackNode(none_type_2)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_13 = module_0.StackNode(var_7)
    assert stack_node_13.data == 0
    stack_node_14 = module_0.StackNode(stack_node_13)
    stack_node_15 = module_0.StackNode(stack_node_13)
    stack_node_16 = module_0.StackNode(stack_10)
    assert len(stack_node_16.data) == 0
    var_8 = stack_11.__len__()
    assert var_8 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_9 = stack_12.__len__()
    assert var_9 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_17 = module_0.StackNode(var_9)
    assert stack_node_17.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_7.push(none_type_1)


def test_case_1319():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_1 = module_0.StackNode(none_type_1)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    none_type_2 = None
    stack_node_3 = module_0.StackNode(none_type_2)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_5 = module_0.StackNode(float_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_6 = module_0.check_parenthesis(dict_2)
    assert var_6 is True
    var_7 = stack_6.__len__()
    assert var_7 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_7 = module_0.StackNode(complex_0)
    none_type_3 = None
    stack_node_8 = module_0.StackNode(none_type_3)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_4 = None
    stack_node_9 = module_0.StackNode(none_type_4)
    stack_node_10 = module_0.StackNode(stack_8)
    assert len(stack_node_10.data) == 0
    var_8 = stack_8.push(none_type_3)
    assert len(stack_8) == 1
    assert len(stack_node_10.data) == 1
    bool_1 = False
    stack_node_11 = module_0.StackNode(bool_1)
    stack_node_12 = module_0.StackNode(bool_1)
    none_type_5 = None
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_9 = stack_9.push(none_type_5)
    assert len(stack_9) == 1
    stack_node_13 = module_0.StackNode(var_9)
    with pytest.raises(ValueError):
        stack_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1320():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_4)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(stack_4)
    assert len(stack_node_2.data) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_4 = module_0.StackNode(var_6)
    assert stack_node_4.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_5 = module_0.StackNode(stack_8)
    assert len(stack_node_5.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_12.__len__()
    assert var_7 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_6 = module_0.StackNode(var_7)
    assert stack_node_6.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_9 = stack_18.__len__()
    assert var_9 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_7 = module_0.StackNode(var_9)
    assert stack_node_7.data == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_10 = stack_20.__len__()
    assert var_10 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    module_0.postfix_eval(stack_node_5)


@pytest.mark.xfail(strict=True)
def test_case_1321():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_0)
    assert len(stack_node_4.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_5 = module_0.StackNode(complex_0)
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_2 = None
    stack_node_7 = module_0.StackNode(none_type_2)
    stack_node_8 = module_0.StackNode(stack_3)
    assert len(stack_node_8.data) == 0
    var_1 = stack_3.push(none_type_1)
    assert len(stack_3) == 1
    assert len(stack_node_8.data) == 1
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_3 = None
    stack_node_9 = module_0.StackNode(none_type_3)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_10 = module_0.StackNode(var_2)
    assert stack_node_10.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_4 = None
    stack_node_11 = module_0.StackNode(none_type_4)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_12 = module_0.StackNode(var_6)
    assert stack_node_12.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_13 = module_0.StackNode(stack_10)
    assert len(stack_node_13.data) == 0
    var_4.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1322():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    bool_1 = False
    stack_node_2 = module_0.StackNode(bool_1)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_3 = module_0.StackNode(float_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    module_0.check_parenthesis(stack_node_2)


@pytest.mark.xfail(strict=True)
def test_case_1323():
    bool_0 = False
    module_0.check_parenthesis(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1324():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_2 = None
    stack_node_5 = module_0.StackNode(none_type_2)
    stack_node_6 = module_0.StackNode(stack_4)
    assert len(stack_node_6.data) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    module_0.postfix_eval(stack_4)


@pytest.mark.xfail(strict=True)
def test_case_1325():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    complex_0 = -3711.3 - 806.2j
    stack_node_2 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_node_6 = module_0.StackNode(stack_7)
    assert len(stack_node_6.data) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_7 = module_0.StackNode(float_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    var_6.pop()


def test_case_1326():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_2 = module_0.StackNode(float_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_9)
    assert len(stack_node_7.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    with pytest.raises(ValueError):
        stack_10.peek()


@pytest.mark.xfail(strict=True)
def test_case_1327():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_1 = module_0.StackNode(complex_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_4 = module_0.StackNode(float_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_10)
    assert len(stack_node_8.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_8 = stack_17.__len__()
    assert var_8 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_10 = module_0.StackNode(var_8)
    assert stack_node_10.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_11 = module_0.StackNode(stack_18)
    assert len(stack_node_11.data) == 0
    var_7.peek()


def test_case_1328():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    with pytest.raises(ValueError):
        stack_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_1329():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_9)
    assert len(stack_node_7.data) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    var_7 = stack_9.push(stack_node_6)
    assert len(stack_9) == 1
    assert len(stack_node_7.data) == 1
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6.pop()


@pytest.mark.xfail(strict=True)
def test_case_1330():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    var_3 = stack_4.push(stack_node_4)
    assert len(stack_4) == 1
    assert len(stack_node_5.data) == 1
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    module_0.postfix_eval(stack_3)


@pytest.mark.xfail(strict=True)
def test_case_1331():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_2.push(stack_4)
    assert len(stack_2) == 1
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_6)
    assert len(stack_node_5.data) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    var_5 = stack_6.push(stack_node_4)
    assert len(stack_6) == 1
    assert len(stack_node_5.data) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_node_7 = module_0.StackNode(stack_8)
    assert len(stack_node_7.data) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_7 = stack_9.__len__()
    assert var_7 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_8 = module_0.check_parenthesis(dict_0)
    assert var_8 is True
    stack_node_8 = module_0.StackNode(float_0)
    module_0.postfix_eval(stack_0)


def test_case_1332():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    with pytest.raises(ValueError):
        stack_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1333():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_node_4 = module_0.StackNode(bool_0)
    complex_0 = -3711.3 - 806.2j
    stack_node_5 = module_0.StackNode(complex_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_node_7 = module_0.StackNode(stack_2)
    assert len(stack_node_7.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_8 = module_0.StackNode(var_1)
    assert stack_node_8.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_9 = module_0.StackNode(stack_3)
    assert len(stack_node_9.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_10 = module_0.StackNode(var_2)
    assert stack_node_10.data == 0
    var_2.peek()


@pytest.mark.xfail(strict=True)
def test_case_1334():
    str_0 = "\x0bCKn?jW"
    bool_0 = True
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    tuple_0 = (str_0, bool_0, dict_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(tuple_0)
    assert len(stack_0) == 1
    var_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_1335():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(stack_3)
    assert len(stack_node_4.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_node_6 = module_0.StackNode(stack_5)
    assert len(stack_node_6.data) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_7 = module_0.StackNode(complex_0)
    none_type_1 = None
    stack_node_8 = module_0.StackNode(none_type_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_2 = None
    stack_node_9 = module_0.StackNode(none_type_2)
    stack_node_10 = module_0.StackNode(stack_6)
    assert len(stack_node_10.data) == 0
    var_4 = stack_6.push(none_type_1)
    assert len(stack_6) == 1
    assert len(stack_node_10.data) == 1
    module_0.postfix_eval(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1336():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_4)
    assert len(stack_node_3.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_8 = module_0.StackNode(stack_12)
    assert len(stack_node_8.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_6 = stack_15.__len__()
    assert var_6 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_node_12 = module_0.StackNode(stack_15)
    assert len(stack_node_12.data) == 0
    none_type_0 = None
    stack_node_13 = module_0.StackNode(none_type_0)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_7 = stack_17.__len__()
    assert var_7 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_8 = module_0.check_parenthesis(dict_0)
    assert var_8 is True
    var_9 = stack_17.__len__()
    assert var_9 == 0
    module_0.postfix_eval(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1337():
    none_type_0 = None
    module_0.check_parenthesis(none_type_0)


def test_case_1338():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_6 = stack_16.__len__()
    assert var_6 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_7 = stack_17.__len__()
    assert var_7 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_5 = module_0.StackNode(var_7)
    assert stack_node_5.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_8 = stack_19.push(stack_21)
    assert len(stack_19) == 1
    with pytest.raises(ValueError):
        stack_4.pop()


@pytest.mark.xfail(strict=True)
def test_case_1339():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    complex_0 = -3711.3 - 806.2j
    stack_node_1 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_node_4 = module_0.StackNode(stack_0)
    assert len(stack_node_4.data) == 0
    var_1 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_4.data) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    stack_node_7 = module_0.StackNode(bool_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    bool_1 = False
    stack_node_8 = module_0.StackNode(bool_1)
    stack_node_9 = module_0.StackNode(bool_1)
    none_type_2 = None
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.push(none_type_2)
    assert len(stack_9) == 1
    stack_node_10 = module_0.StackNode(var_5)
    module_0.check_parenthesis(stack_1)


@pytest.mark.xfail(strict=True)
def test_case_1340():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_0.__len__()
    assert var_2 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_3 = stack_1.__len__()
    assert var_3 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    var_4 = stack_2.__len__()
    assert var_4 == 0
    var_5 = stack_1.push(stack_node_3)
    assert len(stack_1) == 1
    assert len(stack_node_4.data) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_6 = stack_3.__len__()
    assert var_6 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_6)
    assert stack_node_5.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(stack_3)
    assert len(stack_node_6.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_7 = stack_7.__len__()
    assert var_7 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_7)
    assert stack_node_7.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_8 = stack_8.__len__()
    assert var_8 == 0
    module_0.check_parenthesis(stack_8)


@pytest.mark.xfail(strict=True)
def test_case_1341():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(stack_5)
    assert len(stack_node_5.data) == 0
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    stack_node_7 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.push(none_type_1)
    assert len(stack_7) == 1
    stack_node_8 = module_0.StackNode(var_2)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_9 = module_0.StackNode(var_3)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_node_12 = module_0.StackNode(stack_8)
    assert len(stack_node_12.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    none_type_2 = None
    stack_node_13 = module_0.StackNode(none_type_2)
    stack_node_14 = module_0.StackNode(stack_14)
    assert len(stack_node_14.data) == 0
    var_5 = stack_14.__len__()
    assert var_5 == 0
    stack_node_15 = module_0.StackNode(stack_4)
    assert len(stack_node_15.data) == 0
    module_0.check_parenthesis(stack_node_15)


@pytest.mark.xfail(strict=True)
def test_case_1342():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(stack_5)
    assert len(stack_node_3.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_5 = module_0.StackNode(stack_9)
    assert len(stack_node_5.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_12)
    assert len(stack_node_9.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_6 = stack_15.__len__()
    assert var_6 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_7 = stack_17.push(stack_19)
    assert len(stack_17) == 1
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_8 = stack_20.__len__()
    assert var_8 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_11 = module_0.StackNode(var_8)
    assert stack_node_11.data == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_9 = stack_23.__len__()
    assert var_9 == 0
    module_0.check_parenthesis(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1343():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_1 = module_0.check_parenthesis(dict_1)
    assert var_1 is True
    stack_node_1 = module_0.StackNode(float_1)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_2 = stack_0.__len__()
    assert var_2 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_2.push(stack_4)
    assert len(stack_2) == 1
    var_4 = stack_0.__len__()
    assert var_4 == 0
    var_4.pop()


def test_case_1344():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    with pytest.raises(ValueError):
        stack_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1345():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_7)
    assert len(stack_node_7.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_11.push(stack_13)
    assert len(stack_11) == 1
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    module_0.postfix_eval(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1346():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_9)
    assert len(stack_node_6.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_8 = module_0.StackNode(var_8)
    assert stack_node_8.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_9 = module_0.StackNode(stack_15)
    assert len(stack_node_9.data) == 0
    module_0.postfix_eval(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1347():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    module_0.postfix_eval(dict_0)


def test_case_1348():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    with pytest.raises(ValueError):
        stack_3.pop()


@pytest.mark.xfail(strict=True)
def test_case_1349():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    var_0.pop()


def test_case_1350():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_0)
    assert len(stack_node_4.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_1)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_3)
    assert len(stack_node_8.data) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    none_type_0 = None
    stack_node_9 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_6 = stack_6.__len__()
    assert var_6 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_7 = stack_9.__len__()
    assert var_7 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_8 = stack_10.__len__()
    assert var_8 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_11 = module_0.StackNode(var_8)
    assert stack_node_11.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_9 = stack_12.push(stack_14)
    assert len(stack_12) == 1
    with pytest.raises(ValueError):
        stack_14.peek()


def test_case_1351():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    with pytest.raises(ValueError):
        stack_1.peek()


@pytest.mark.xfail(strict=True)
def test_case_1352():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_2 = module_0.StackNode(var_5)
    assert stack_node_2.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    var_3.peek()


@pytest.mark.xfail(strict=True)
def test_case_1353():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_2.push(stack_4)
    assert len(stack_2) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_2 = module_0.StackNode(var_4)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_5 = module_0.StackNode(stack_12)
    assert len(stack_node_5.data) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_6 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_7 = stack_16.push(none_type_0)
    assert len(stack_16) == 1
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_8 = stack_17.__len__()
    assert var_8 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_9 = stack_19.__len__()
    assert var_9 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_7 = module_0.StackNode(var_9)
    assert stack_node_7.data == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_8 = module_0.StackNode(stack_19)
    assert len(stack_node_8.data) == 0
    var_8.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1354():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    none_type_1 = None
    stack_node_1 = module_0.StackNode(none_type_1)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_0.__len__()
    assert var_2 == 0
    module_0.postfix_eval(stack_node_1)


@pytest.mark.xfail(strict=True)
def test_case_1355():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_0.__len__()


def test_case_1356():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_3 = stack_11.__len__()
    assert var_3 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_5 = stack_11.__len__()
    assert var_5 == 0
    none_type_1 = None
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.push(none_type_1)
    assert len(stack_12) == 1
    with pytest.raises(ValueError):
        stack_1.pop()


def test_case_1357():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_5)
    assert len(stack_node_7.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_1 = None
    stack_node_8 = module_0.StackNode(none_type_1)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_10 = module_0.StackNode(stack_9)
    assert len(stack_node_10.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_11 = module_0.StackNode(var_6)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_13 = module_0.StackNode(var_7)
    assert stack_node_13.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    none_type_2 = None
    stack_node_14 = module_0.StackNode(none_type_2)
    stack_node_15 = module_0.StackNode(stack_17)
    assert len(stack_node_15.data) == 0
    bool_0 = False
    stack_node_16 = module_0.StackNode(bool_0)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_8 = module_0.check_parenthesis(dict_1)
    assert var_8 is True
    stack_node_17 = module_0.StackNode(float_1)
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    with pytest.raises(ValueError):
        stack_6.pop()


@pytest.mark.xfail(strict=True)
def test_case_1358():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    none_type_0 = None
    module_0.check_parenthesis(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1359():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_0 = module_0.StackNode(var_2)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    module_0.postfix_eval(stack_0)


@pytest.mark.xfail(strict=True)
def test_case_1360():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.push(none_type_0)
    assert len(stack_3) == 1
    stack_node_3 = module_0.StackNode(var_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_node_6 = module_0.StackNode(stack_4)
    assert len(stack_node_6.data) == 0
    module_0.check_parenthesis(stack_node_6)


def test_case_1361():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_2)
    assert len(stack_node_7.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    stack_node_9 = module_0.StackNode(stack_5)
    assert len(stack_node_9.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_10 = module_0.StackNode(var_3)
    assert stack_node_10.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    with pytest.raises(ValueError):
        stack_5.pop()


@pytest.mark.xfail(strict=True)
def test_case_1362():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_0)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_1)
    assert len(stack_node_5.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    module_0.postfix_eval(stack_2)


def test_case_1363():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_3)
    assert len(stack_node_7.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    with pytest.raises(ValueError):
        stack_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1364():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_2 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_node_5 = module_0.StackNode(stack_5)
    assert len(stack_node_5.data) == 0
    var_2 = stack_5.push(none_type_0)
    assert len(stack_5) == 1
    assert len(stack_node_5.data) == 1
    none_type_2 = None
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.push(none_type_2)
    assert len(stack_6) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_node_12 = module_0.StackNode(stack_9)
    assert len(stack_node_12.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_3 = None
    stack_node_13 = module_0.StackNode(none_type_3)
    stack_node_14 = module_0.StackNode(stack_12)
    assert len(stack_node_14.data) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_15 = module_0.StackNode(var_7)
    assert stack_node_15.data == 0
    var_7.push(stack_node_13)


@pytest.mark.xfail(strict=True)
def test_case_1365():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_1)
    assert len(stack_node_7.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_8 = module_0.StackNode(var_2)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_2 = None
    stack_node_10 = module_0.StackNode(none_type_2)
    stack_node_11 = module_0.StackNode(stack_6)
    assert len(stack_node_11.data) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_12 = module_0.StackNode(var_4)
    assert stack_node_12.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_9.push(stack_11)
    assert len(stack_9) == 1
    bool_0 = False
    stack_node_13 = module_0.StackNode(bool_0)
    stack_node_14 = module_0.StackNode(bool_0)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_15 = module_0.StackNode(var_7)
    assert stack_node_15.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_16 = module_0.StackNode(stack_13)
    assert len(stack_node_16.data) == 0
    var_8 = stack_15.__len__()
    assert var_8 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_9 = stack_17.__len__()
    assert var_9 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_17 = module_0.StackNode(var_9)
    assert stack_node_17.data == 0
    stack_node_18 = module_0.StackNode(stack_node_17)
    stack_node_19 = module_0.StackNode(stack_node_17)
    stack_node_20 = module_0.StackNode(stack_17)
    assert len(stack_node_20.data) == 0
    var_10 = stack_18.__len__()
    assert var_10 == 0
    module_0.postfix_eval(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1366():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    module_0.postfix_eval(stack_3)


@pytest.mark.xfail(strict=True)
def test_case_1367():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    module_0.postfix_eval(stack_node_3)


def test_case_1368():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    with pytest.raises(ValueError):
        stack_3.peek()


@pytest.mark.xfail(strict=True)
def test_case_1369():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    complex_0 = -3711.3 - 806.2j
    stack_node_4 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_node_7 = module_0.StackNode(stack_5)
    assert len(stack_node_7.data) == 0
    var_2 = stack_5.push(none_type_0)
    assert len(stack_5) == 1
    assert len(stack_node_7.data) == 1
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_2 = None
    stack_node_8 = module_0.StackNode(none_type_2)
    stack_node_9 = module_0.StackNode(stack_6)
    assert len(stack_node_9.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_10 = module_0.StackNode(var_3)
    assert stack_node_10.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_11 = module_0.StackNode(var_5)
    assert stack_node_11.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_12 = module_0.StackNode(stack_12)
    assert len(stack_node_12.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_6 = stack_16.__len__()
    assert var_6 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_13 = module_0.StackNode(var_6)
    assert stack_node_13.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_14 = module_0.StackNode(stack_16)
    assert len(stack_node_14.data) == 0
    var_7 = stack_18.__len__()
    assert var_7 == 0
    module_0.check_parenthesis(stack_node_9)


def test_case_1370():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_4 = module_0.StackNode(complex_0)
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_node_6 = module_0.StackNode(bool_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_7 = module_0.StackNode(var_1)
    assert stack_node_7.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_8 = module_0.StackNode(stack_2)
    assert len(stack_node_8.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_9 = module_0.StackNode(var_2)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_node_12 = module_0.StackNode(stack_5)
    assert len(stack_node_12.data) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_13 = module_0.StackNode(var_4)
    assert stack_node_13.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_14 = module_0.StackNode(stack_7)
    assert len(stack_node_14.data) == 0
    stack_node_15 = module_0.StackNode(stack_9)
    assert len(stack_node_15.data) == 0
    with pytest.raises(ValueError):
        stack_7.peek()


@pytest.mark.xfail(strict=True)
def test_case_1371():
    int_0 = 1461
    list_0 = [int_0, int_0]
    module_1.object(*list_0, **int_0)


def test_case_1372():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_0.__len__()
    assert var_2 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_3 = stack_1.__len__()
    assert var_3 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_4 = module_0.StackNode(var_6)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    with pytest.raises(ValueError):
        stack_9.peek()


@pytest.mark.xfail(strict=True)
def test_case_1373():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_6 = module_0.StackNode(stack_8)
    assert len(stack_node_6.data) == 0
    var_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1374():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1.peek()


def test_case_1375():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_2.push(stack_4)
    assert len(stack_2) == 1
    with pytest.raises(ValueError):
        stack_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_1376():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_1 = module_0.StackNode(complex_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(stack_5)
    assert len(stack_node_3.data) == 0
    stack_node_4 = module_0.StackNode(stack_8)
    assert len(stack_node_4.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    module_0.postfix_eval(stack_node_2)


def test_case_1377():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    with pytest.raises(ValueError):
        stack_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1378():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_5)
    assert len(stack_node_7.data) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    var_6 = stack_5.push(stack_node_6)
    assert len(stack_5) == 1
    assert len(stack_node_7.data) == 1
    module_0.check_parenthesis(stack_node_4)


@pytest.mark.xfail(strict=True)
def test_case_1379():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_2 = module_0.StackNode(var_0)
    assert stack_node_2.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(var_1)
    assert stack_node_5.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    module_0.postfix_eval(stack_4)


@pytest.mark.xfail(strict=True)
def test_case_1380():
    int_0 = -945
    module_0.check_parenthesis(int_0)


def test_case_1381():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    with pytest.raises(ValueError):
        stack_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_1382():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(stack_2)
    assert len(stack_node_0.data) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_2 = module_0.check_parenthesis(dict_1)
    assert var_2 is True
    stack_node_1 = module_0.StackNode(float_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    var_6.push(var_2)


def test_case_1383():
    float_0 = 1609.8133
    stack_node_0 = module_0.StackNode(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1384():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(stack_2)
    assert len(stack_node_0.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_6 = module_0.StackNode(float_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4.pop()


@pytest.mark.xfail(strict=True)
def test_case_1385():
    int_0 = -867
    module_0.postfix_eval(int_0)


def test_case_1386():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_node_5 = module_0.StackNode(bool_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_8 = module_0.StackNode(stack_6)
    assert len(stack_node_8.data) == 0
    stack_node_9 = module_0.StackNode(stack_8)
    assert len(stack_node_9.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_2 = None
    stack_node_10 = module_0.StackNode(none_type_2)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_11 = module_0.StackNode(var_4)
    assert stack_node_11.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_5 = stack_14.__len__()
    assert var_5 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_6 = stack_16.__len__()
    assert var_6 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_12 = module_0.StackNode(var_6)
    assert stack_node_12.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_7 = stack_18.push(stack_20)
    assert len(stack_18) == 1
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_8 = stack_21.__len__()
    assert var_8 == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_13 = module_0.StackNode(var_8)
    assert stack_node_13.data == 0
    stack_node_14 = module_0.StackNode(stack_node_13)
    stack_node_15 = module_0.StackNode(stack_node_13)
    stack_node_16 = module_0.StackNode(stack_21)
    assert len(stack_node_16.data) == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    none_type_3 = None
    stack_node_17 = module_0.StackNode(none_type_3)
    stack_node_18 = module_0.StackNode(stack_23)
    assert len(stack_node_18.data) == 0
    var_9 = stack_23.__len__()
    assert var_9 == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    var_10 = stack_24.__len__()
    assert var_10 == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    stack_node_19 = module_0.StackNode(var_10)
    assert stack_node_19.data == 0
    stack_node_20 = module_0.StackNode(stack_node_19)
    stack_node_21 = module_0.StackNode(stack_25)
    assert len(stack_node_21.data) == 0
    with pytest.raises(ValueError):
        stack_6.peek()


@pytest.mark.xfail(strict=True)
def test_case_1387():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_2 = module_0.StackNode(var_4)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_10)
    assert len(stack_node_4.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_6 = module_0.StackNode(stack_11)
    assert len(stack_node_6.data) == 0
    stack_node_7 = module_0.StackNode(stack_14)
    assert len(stack_node_7.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_6 = stack_15.__len__()
    assert var_6 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_7 = stack_18.__len__()
    assert var_7 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_8 = module_0.StackNode(var_7)
    assert stack_node_8.data == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    var_8 = stack_19.__len__()
    assert var_8 == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_9 = stack_23.__len__()
    assert var_9 == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_node_9 = module_0.StackNode(var_9)
    assert stack_node_9.data == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0
    stack_27 = module_0.Stack()
    assert len(stack_27) == 0
    var_10 = stack_27.__len__()
    assert var_10 == 0
    stack_28 = module_0.Stack()
    assert len(stack_28) == 0
    stack_node_10 = module_0.StackNode(var_10)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_27)
    assert len(stack_node_13.data) == 0
    var_11 = stack_28.__len__()
    assert var_11 == 0
    stack_29 = module_0.Stack()
    assert len(stack_29) == 0
    var_12 = stack_29.__len__()
    assert var_12 == 0
    stack_30 = module_0.Stack()
    assert len(stack_30) == 0
    stack_node_14 = module_0.StackNode(var_12)
    assert stack_node_14.data == 0
    stack_node_15 = module_0.StackNode(stack_node_14)
    stack_node_16 = module_0.StackNode(stack_node_14)
    stack_node_17 = module_0.StackNode(stack_29)
    assert len(stack_node_17.data) == 0
    stack_31 = module_0.Stack()
    assert len(stack_31) == 0
    stack_node_18 = module_0.StackNode(var_12)
    assert stack_node_18.data == 0
    module_0.postfix_eval(var_11)


def test_case_1388():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_node_6 = module_0.StackNode(bool_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_8 = module_0.StackNode(stack_6)
    assert len(stack_node_8.data) == 0
    stack_node_9 = module_0.StackNode(stack_8)
    assert len(stack_node_9.data) == 0
    bool_1 = False
    stack_node_10 = module_0.StackNode(bool_1)
    stack_node_11 = module_0.StackNode(bool_1)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    complex_1 = -3711.3 - 806.2j
    stack_node_12 = module_0.StackNode(complex_1)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_13 = module_0.StackNode(var_5)
    assert stack_node_13.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_14 = module_0.StackNode(stack_12)
    assert len(stack_node_14.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_15 = module_0.StackNode(var_6)
    assert stack_node_15.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_7 = stack_16.__len__()
    assert var_7 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_16 = module_0.StackNode(var_7)
    assert stack_node_16.data == 0
    stack_node_17 = module_0.StackNode(stack_node_16)
    stack_node_18 = module_0.StackNode(stack_node_16)
    stack_node_19 = module_0.StackNode(stack_16)
    assert len(stack_node_19.data) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_8 = stack_18.__len__()
    assert var_8 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_20 = module_0.StackNode(var_8)
    assert stack_node_20.data == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    with pytest.raises(ValueError):
        stack_18.peek()


@pytest.mark.xfail(strict=True)
def test_case_1389():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    none_type_0 = None
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.push(none_type_0)
    assert len(stack_2) == 1
    module_0.check_parenthesis(stack_node_0)


@pytest.mark.xfail(strict=True)
def test_case_1390():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_0.__len__()
    assert var_2 == 0
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    module_0.postfix_eval(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1391():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    dict_0 = {}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_7 = module_0.StackNode(stack_4)
    assert len(stack_node_7.data) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    var_7 = stack_9.__len__()
    assert var_7 == 0
    module_0.postfix_eval(var_7)


def test_case_1392():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_0)
    assert stack_node_4.data == 0
    with pytest.raises(ValueError):
        stack_0.pop()


def test_case_1393():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_2 = stack_9.__len__()
    assert var_2 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_3 = stack_12.__len__()
    assert var_3 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_node_6 = module_0.StackNode(stack_13)
    assert len(stack_node_6.data) == 0
    dict_0 = {}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_5 = stack_15.__len__()
    assert var_5 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_6 = stack_16.__len__()
    assert var_6 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_8 = module_0.StackNode(stack_16)
    assert len(stack_node_8.data) == 0
    stack_node_9 = module_0.StackNode(stack_19)
    assert len(stack_node_9.data) == 0
    with pytest.raises(ValueError):
        stack_15.peek()


@pytest.mark.xfail(strict=True)
def test_case_1394():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    int_0 = -3354
    module_0.postfix_eval(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1395():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(stack_3)
    assert len(stack_node_3.data) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_node_6 = module_0.StackNode(bool_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    stack_node_7 = module_0.StackNode(stack_9)
    assert len(stack_node_7.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_8 = module_0.StackNode(var_7)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_10)
    assert len(stack_node_11.data) == 0
    var_8 = stack_11.__len__()
    assert var_8 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_9 = stack_12.__len__()
    assert var_9 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_2.pop()


def test_case_1396():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(stack_5)
    assert len(stack_node_4.data) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    with pytest.raises(ValueError):
        stack_5.peek()


def test_case_1397():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_6 = module_0.StackNode(stack_10)
    assert len(stack_node_6.data) == 0
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_5 = stack_14.__len__()
    assert var_5 == 0
    bool_1 = False
    stack_node_8 = module_0.StackNode(bool_1)
    stack_node_9 = module_0.StackNode(bool_1)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    none_type_2 = None
    stack_node_10 = module_0.StackNode(none_type_2)
    bool_2 = False
    stack_node_11 = module_0.StackNode(bool_2)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_6 = stack_16.__len__()
    assert var_6 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_12 = module_0.StackNode(var_6)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    with pytest.raises(ValueError):
        stack_11.peek()


def test_case_1398():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(stack_2)
    assert len(stack_node_0.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    with pytest.raises(ValueError):
        stack_3.pop()


@pytest.mark.xfail(strict=True)
def test_case_1399():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(stack_10)
    assert len(stack_node_3.data) == 0
    module_0.check_parenthesis(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1400():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    none_type_1 = None
    stack_node_1 = module_0.StackNode(none_type_1)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_0.__len__()
    assert var_2 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_3 = stack_1.__len__()
    assert var_3 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(var_5)
    assert stack_node_3.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(var_6)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_9)
    assert len(stack_node_7.data) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    module_0.postfix_eval(stack_8)


def test_case_1401():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(stack_2)
    assert len(stack_node_1.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_5)
    assert len(stack_node_5.data) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_9.push(stack_11)
    assert len(stack_9) == 1
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    none_type_0 = None
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_7 = stack_15.push(none_type_0)
    assert len(stack_15) == 1
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_8 = stack_16.__len__()
    assert var_8 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_8 = module_0.StackNode(var_8)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_17)
    assert len(stack_node_10.data) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_9 = stack_18.__len__()
    assert var_9 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_11 = module_0.StackNode(var_9)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    none_type_1 = None
    stack_node_13 = module_0.StackNode(none_type_1)
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_10 = stack_20.__len__()
    assert var_10 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_11 = module_0.check_parenthesis(dict_0)
    assert var_11 is True
    var_12 = stack_20.__len__()
    assert var_12 == 0
    with pytest.raises(ValueError):
        stack_7.pop()


@pytest.mark.xfail(strict=True)
def test_case_1402():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(stack_7)
    assert len(stack_node_3.data) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_7 = stack_8.__len__()
    assert var_7 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_4 = module_0.StackNode(var_7)
    assert stack_node_4.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_5 = module_0.StackNode(stack_8)
    assert len(stack_node_5.data) == 0
    var_8 = stack_10.__len__()
    assert var_8 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_9 = stack_12.__len__()
    assert var_9 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_6 = module_0.StackNode(var_9)
    assert stack_node_6.data == 0
    bool_0 = False
    stack_node_7 = module_0.StackNode(bool_0)
    stack_node_8 = module_0.StackNode(bool_0)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_10 = stack_14.__len__()
    assert var_10 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_11 = stack_15.__len__()
    assert var_11 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_9 = module_0.StackNode(var_11)
    assert stack_node_9.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_10 = module_0.StackNode(stack_15)
    assert len(stack_node_10.data) == 0
    module_0.postfix_eval(dict_1)


@pytest.mark.xfail(strict=True)
def test_case_1403():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_3)
    assert len(stack_node_3.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_4)
    assert len(stack_node_7.data) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    var_4 = stack_4.push(stack_node_6)
    assert len(stack_4) == 1
    assert len(stack_node_7.data) == 1
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    bool_0 = False
    stack_node_9 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    stack_node_10 = module_0.StackNode(float_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_0 = None
    module_0.check_parenthesis(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1404():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_0)
    assert stack_node_4.data == 0
    none_type_0 = None
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.push(none_type_0)
    assert len(stack_3) == 1
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    stack_node_7 = module_0.StackNode(stack_9)
    assert len(stack_node_7.data) == 0
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_7 = module_0.check_parenthesis(dict_2)
    assert var_7 is True
    bool_1 = False
    stack_node_8 = module_0.StackNode(bool_1)
    stack_node_9 = module_0.StackNode(bool_1)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_8 = stack_10.__len__()
    assert var_8 == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    var_3.peek()


@pytest.mark.xfail(strict=True)
def test_case_1405():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_node_5 = module_0.StackNode(bool_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_8 = module_0.StackNode(stack_4)
    assert len(stack_node_8.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_0 = None
    stack_node_9 = module_0.StackNode(none_type_0)
    none_type_1 = None
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.push(none_type_1)
    assert len(stack_7) == 1
    dict_0 = {}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_10 = module_0.StackNode(var_5)
    assert stack_node_10.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    var_7 = stack_2.push(none_type_0)
    assert len(stack_2) == 1
    var_7.peek()


@pytest.mark.xfail(strict=True)
def test_case_1406():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    module_0.postfix_eval(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1407():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    module_0.postfix_eval(stack_0)


@pytest.mark.xfail(strict=True)
def test_case_1408():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(stack_4)
    assert len(stack_node_6.data) == 0
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_9 = module_0.StackNode(stack_6)
    assert len(stack_node_9.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_10 = module_0.StackNode(float_0)
    module_0.check_parenthesis(stack_node_4)


@pytest.mark.xfail(strict=True)
def test_case_1409():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_2 = module_0.StackNode(complex_0)
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_2 = None
    stack_node_4 = module_0.StackNode(none_type_2)
    stack_node_5 = module_0.StackNode(stack_6)
    assert len(stack_node_5.data) == 0
    var_2 = stack_6.push(none_type_1)
    assert len(stack_6) == 1
    assert len(stack_node_5.data) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_8 = stack_15.__len__()
    assert var_8 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_8 = module_0.StackNode(var_8)
    assert stack_node_8.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_9 = module_0.StackNode(stack_15)
    assert len(stack_node_9.data) == 0
    stack_node_10 = module_0.StackNode(stack_18)
    assert len(stack_node_10.data) == 0
    var_7.push(stack_node_8)


@pytest.mark.xfail(strict=True)
def test_case_1410():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_2)
    assert len(stack_node_6.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_8 = module_0.StackNode(stack_5)
    assert len(stack_node_8.data) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_node_12 = module_0.StackNode(stack_9)
    assert len(stack_node_12.data) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    var_7 = stack_9.push(stack_node_11)
    assert len(stack_9) == 1
    assert len(stack_node_12.data) == 1
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_8 = stack_11.__len__()
    assert var_8 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_13 = module_0.StackNode(var_8)
    assert stack_node_13.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_9 = stack_14.__len__()
    assert var_9 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_14 = module_0.StackNode(var_9)
    assert stack_node_14.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_10 = stack_18.__len__()
    assert var_10 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_15 = module_0.StackNode(var_10)
    assert stack_node_15.data == 0
    stack_node_16 = module_0.StackNode(stack_node_15)
    stack_node_17 = module_0.StackNode(stack_node_15)
    stack_node_18 = module_0.StackNode(stack_18)
    assert len(stack_node_18.data) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    module_0.check_parenthesis(stack_node_3)


def test_case_1411():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(var_1)
    assert stack_node_6.data == 0
    with pytest.raises(ValueError):
        stack_4.peek()


@pytest.mark.xfail(strict=True)
def test_case_1412():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_3 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_4.__len__()
    assert var_3 == 0
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_node_6 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.push(none_type_1)
    assert len(stack_5) == 1
    stack_node_7 = module_0.StackNode(var_4)
    bool_1 = False
    stack_node_8 = module_0.StackNode(bool_1)
    bool_2 = False
    stack_node_9 = module_0.StackNode(bool_2)
    stack_node_10 = module_0.StackNode(bool_2)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_12 = module_0.StackNode(var_6)
    assert stack_node_12.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_13 = module_0.StackNode(stack_8)
    assert len(stack_node_13.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_14 = module_0.StackNode(var_7)
    assert stack_node_14.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_15 = module_0.StackNode(stack_10)
    assert len(stack_node_15.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_16 = module_0.StackNode(var_8)
    assert stack_node_16.data == 0
    stack_node_17 = module_0.StackNode(stack_node_16)
    stack_node_18 = module_0.StackNode(stack_node_16)
    stack_node_19 = module_0.StackNode(stack_13)
    assert len(stack_node_19.data) == 0
    var_9 = stack_14.__len__()
    assert var_9 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_10 = stack_15.__len__()
    assert var_10 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_20 = module_0.StackNode(var_10)
    assert stack_node_20.data == 0
    stack_node_21 = module_0.StackNode(stack_node_20)
    module_0.check_parenthesis(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1413():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_6)
    assert len(stack_node_5.data) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_6 = module_0.StackNode(complex_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    complex_1 = -3711.3 - 806.2j
    stack_node_7 = module_0.StackNode(complex_1)
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_1 = None
    stack_node_9 = module_0.StackNode(none_type_1)
    stack_node_10 = module_0.StackNode(stack_8)
    assert len(stack_node_10.data) == 0
    var_5 = stack_8.push(none_type_0)
    assert len(stack_8) == 1
    assert len(stack_node_10.data) == 1
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    stack_node_11 = module_0.StackNode(stack_11)
    assert len(stack_node_11.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_2 = None
    stack_node_12 = module_0.StackNode(none_type_2)
    stack_node_13 = module_0.StackNode(stack_12)
    assert len(stack_node_13.data) == 0
    var_8 = stack_12.__len__()
    assert var_8 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_9 = stack_13.__len__()
    assert var_9 == 0
    module_0.postfix_eval(complex_1)


@pytest.mark.xfail(strict=True)
def test_case_1414():
    bool_0 = False
    float_0 = 1064.866729
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(float_0)
    assert len(stack_0) == 1
    var_0.push(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1415():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    module_0.postfix_eval(var_0)


def test_case_1416():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_1 = module_0.StackNode(none_type_1)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_6)
    assert len(stack_node_8.data) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    var_5 = stack_6.push(stack_node_7)
    assert len(stack_6) == 1
    assert len(stack_node_8.data) == 1
    dict_1 = {}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    with pytest.raises(ValueError):
        stack_1.peek()


@pytest.mark.xfail(strict=True)
def test_case_1417():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    none_type_1 = None
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.push(none_type_1)
    assert len(stack_1) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_3)
    assert len(stack_node_4.data) == 0
    var_3.peek()


@pytest.mark.xfail(strict=True)
def test_case_1418():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_2 = module_0.StackNode(complex_0)
    none_type_1 = None
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.push(none_type_1)
    assert len(stack_6) == 1
    var_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1419():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_2 = module_0.StackNode(var_0)
    assert stack_node_2.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    bool_1 = False
    stack_node_4 = module_0.StackNode(bool_1)
    stack_node_5 = module_0.StackNode(bool_1)
    none_type_0 = None
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.push(none_type_0)
    assert len(stack_3) == 1
    stack_node_6 = module_0.StackNode(var_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    stack_node_8 = module_0.StackNode(stack_4)
    assert len(stack_node_8.data) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    var_2.push(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1420():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    module_0.postfix_eval(stack_3)


@pytest.mark.xfail(strict=True)
def test_case_1421():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_3 = module_0.StackNode(stack_7)
    assert len(stack_node_3.data) == 0
    stack_node_4 = module_0.StackNode(stack_9)
    assert len(stack_node_4.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_node_6 = module_0.StackNode(stack_11)
    assert len(stack_node_6.data) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    bool_0 = False
    stack_node_7 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_node_8 = module_0.StackNode(float_0)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5.peek()


def test_case_1422():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    with pytest.raises(ValueError):
        stack_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1423():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1424():
    bool_0 = True
    module_0.postfix_eval(bool_0)


def test_case_1425():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_2 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.push(none_type_0)
    assert len(stack_4) == 1
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_6)
    assert len(stack_node_7.data) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    var_5 = stack_6.push(stack_node_6)
    assert len(stack_6) == 1
    assert len(stack_node_7.data) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_7 = module_0.check_parenthesis(dict_0)
    assert var_7 is True
    stack_node_8 = module_0.StackNode(stack_10)
    assert len(stack_node_8.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_8 = stack_12.__len__()
    assert var_8 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    bool_0 = False
    stack_node_9 = module_0.StackNode(bool_0)
    stack_node_10 = module_0.StackNode(bool_0)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_9 = stack_14.__len__()
    assert var_9 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_10 = stack_15.__len__()
    assert var_10 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_11 = module_0.StackNode(var_10)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_node_11)
    stack_node_14 = module_0.StackNode(stack_15)
    assert len(stack_node_14.data) == 0
    var_11 = stack_16.__len__()
    assert var_11 == 0
    with pytest.raises(ValueError):
        stack_12.pop()


@pytest.mark.xfail(strict=True)
def test_case_1426():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    var_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_1427():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1428():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    module_0.check_parenthesis(var_0)


def test_case_1429():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    dict_1 = {}
    var_2 = module_0.check_parenthesis(dict_1)
    assert var_2 is True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    with pytest.raises(ValueError):
        stack_0.peek()


def test_case_1430():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_5)
    assert len(stack_node_7.data) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    none_type_0 = None
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.push(none_type_0)
    assert len(stack_7) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_1 = None
    stack_node_9 = module_0.StackNode(none_type_1)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_12.__len__()
    assert var_7 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_8 = module_0.check_parenthesis(dict_1)
    assert var_8 is True
    stack_node_10 = module_0.StackNode(stack_14)
    assert len(stack_node_10.data) == 0
    with pytest.raises(ValueError):
        stack_9.pop()


@pytest.mark.xfail(strict=True)
def test_case_1431():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_6 = module_0.StackNode(stack_7)
    assert len(stack_node_6.data) == 0
    var_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_1432():
    int_0 = 1461
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_1433():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_3)
    assert len(stack_node_7.data) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    bool_0 = False
    stack_node_9 = module_0.StackNode(bool_0)
    stack_node_10 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.push(none_type_0)
    assert len(stack_9) == 1
    stack_node_11 = module_0.StackNode(var_5)
    module_0.check_parenthesis(stack_node_7)


def test_case_1434():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    with pytest.raises(ValueError):
        stack_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1435():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_6.push(stack_8)
    assert len(stack_6) == 1
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_4 = module_0.StackNode(var_6)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_13)
    assert len(stack_node_7.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_7 = stack_16.__len__()
    assert var_7 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_9 = module_0.StackNode(var_7)
    assert stack_node_9.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_8 = module_0.check_parenthesis(dict_0)
    assert var_8 is True
    var_9 = stack_17.__len__()
    assert var_9 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_10 = stack_19.__len__()
    assert var_10 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_10 = module_0.StackNode(var_10)
    assert stack_node_10.data == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_11 = module_0.StackNode(stack_19)
    assert len(stack_node_11.data) == 0
    stack_node_12 = module_0.StackNode(stack_22)
    assert len(stack_node_12.data) == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_11 = stack_23.__len__()
    assert var_11 == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_node_13 = module_0.StackNode(var_11)
    assert stack_node_13.data == 0
    stack_node_14 = module_0.StackNode(stack_node_13)
    stack_node_15 = module_0.StackNode(stack_node_13)
    stack_node_16 = module_0.StackNode(stack_23)
    assert len(stack_node_16.data) == 0
    var_12 = stack_24.__len__()
    assert var_12 == 0
    var_13 = stack_23.push(stack_node_15)
    assert len(stack_23) == 1
    assert len(stack_node_16.data) == 1
    module_0.check_parenthesis(stack_24)


@pytest.mark.xfail(strict=True)
def test_case_1436():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    stack_node_7 = module_0.StackNode(bool_0)
    var_0.__len__()


def test_case_1437():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_4 = module_0.StackNode(float_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    with pytest.raises(ValueError):
        stack_3.peek()


@pytest.mark.xfail(strict=True)
def test_case_1438():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_3 = module_0.StackNode(var_1)
    module_0.check_parenthesis(stack_node_1)


@pytest.mark.xfail(strict=True)
def test_case_1439():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    dict_0 = {}
    module_0.postfix_eval(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1440():
    dict_0 = {}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_0 = module_0.StackNode(var_2)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_2)
    assert len(stack_node_3.data) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_8.push(stack_10)
    assert len(stack_8) == 1
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_12.__len__()
    assert var_7 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_6 = module_0.StackNode(var_7)
    assert stack_node_6.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_9 = stack_16.__len__()
    assert var_9 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_7 = module_0.StackNode(var_9)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_16)
    assert len(stack_node_10.data) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_10 = stack_18.__len__()
    assert var_10 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_11 = module_0.StackNode(var_10)
    assert stack_node_11.data == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_12 = module_0.StackNode(stack_18)
    assert len(stack_node_12.data) == 0
    stack_node_13 = module_0.StackNode(stack_20)
    assert len(stack_node_13.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_14 = module_0.StackNode(complex_0)
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    var_11 = stack_22.__len__()
    assert var_11 == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_node_15 = module_0.StackNode(var_11)
    assert stack_node_15.data == 0
    stack_node_16 = module_0.StackNode(stack_node_15)
    stack_node_17 = module_0.StackNode(stack_node_15)
    stack_node_18 = module_0.StackNode(stack_22)
    assert len(stack_node_18.data) == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_node_19 = module_0.StackNode(var_11)
    assert stack_node_19.data == 0
    module_0.check_parenthesis(var_11)


@pytest.mark.xfail(strict=True)
def test_case_1441():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    none_type_2 = None
    stack_node_7 = module_0.StackNode(none_type_2)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_3 = None
    stack_node_8 = module_0.StackNode(none_type_3)
    stack_node_9 = module_0.StackNode(stack_5)
    assert len(stack_node_9.data) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_6 = stack_6.__len__()
    assert var_6 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_6)
    assert len(stack_node_13.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6.peek()


@pytest.mark.xfail(strict=True)
def test_case_1442():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_6 = module_0.StackNode(complex_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    bool_0 = False
    stack_node_7 = module_0.StackNode(bool_0)
    stack_node_8 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.push(none_type_0)
    assert len(stack_7) == 1
    stack_node_9 = module_0.StackNode(var_4)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    none_type_1 = None
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.push(none_type_1)
    assert len(stack_9) == 1
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_2 = None
    stack_node_10 = module_0.StackNode(none_type_2)
    complex_1 = -3711.3 - 806.2j
    stack_node_11 = module_0.StackNode(complex_1)
    none_type_3 = None
    stack_node_12 = module_0.StackNode(none_type_3)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_4 = None
    stack_node_13 = module_0.StackNode(none_type_4)
    stack_node_14 = module_0.StackNode(stack_11)
    assert len(stack_node_14.data) == 0
    var_7 = stack_11.push(none_type_3)
    assert len(stack_11) == 1
    assert len(stack_node_14.data) == 1
    module_0.check_parenthesis(stack_9)


def test_case_1443():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    with pytest.raises(ValueError):
        stack_4.peek()


def test_case_1444():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(var_1)
    assert stack_node_5.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(stack_4)
    assert len(stack_node_6.data) == 0
    with pytest.raises(ValueError):
        stack_2.peek()


@pytest.mark.xfail(strict=True)
def test_case_1445():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(stack_1)
    assert len(stack_node_5.data) == 0
    stack_node_6 = module_0.StackNode(stack_4)
    assert len(stack_node_6.data) == 0
    module_0.check_parenthesis(stack_4)


@pytest.mark.xfail(strict=True)
def test_case_1446():
    int_0 = 0
    module_0.postfix_eval(int_0)


def test_case_1447():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    with pytest.raises(ValueError):
        stack_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_1448():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.__len__()
    assert var_2 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_8)
    assert len(stack_node_4.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_3 = stack_11.__len__()
    assert var_3 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_7 = module_0.StackNode(stack_11)
    assert len(stack_node_7.data) == 0
    stack_node_8 = module_0.StackNode(stack_14)
    assert len(stack_node_8.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_9 = module_0.StackNode(complex_0)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_4 = stack_15.__len__()
    assert var_4 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_10 = module_0.StackNode(var_4)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_15)
    assert len(stack_node_13.data) == 0
    var_5 = stack_16.__len__()
    assert var_5 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_6 = stack_17.__len__()
    assert var_6 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_14 = module_0.StackNode(var_6)
    assert stack_node_14.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_7 = stack_18.__len__()
    assert var_7 == 0
    bool_0 = True
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    var_8 = stack_22.push(bool_0)
    assert len(stack_22) == 1
    module_0.postfix_eval(stack_node_1)


@pytest.mark.xfail(strict=True)
def test_case_1449():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_0)
    assert len(stack_node_4.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_5 = module_0.StackNode(var_1)
    assert stack_node_5.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    stack_node_9 = module_0.StackNode(stack_5)
    assert len(stack_node_9.data) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_10 = module_0.StackNode(var_4)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_7)
    assert len(stack_node_12.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_13 = module_0.StackNode(var_5)
    assert stack_node_13.data == 0
    stack_node_14 = module_0.StackNode(stack_node_13)
    stack_node_15 = module_0.StackNode(stack_node_13)
    stack_node_16 = module_0.StackNode(stack_8)
    assert len(stack_node_16.data) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_17 = module_0.StackNode(var_8)
    assert stack_node_17.data == 0
    stack_node_18 = module_0.StackNode(stack_node_17)
    stack_node_19 = module_0.StackNode(stack_node_17)
    stack_node_20 = module_0.StackNode(stack_13)
    assert len(stack_node_20.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    none_type_1 = None
    stack_node_21 = module_0.StackNode(none_type_1)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_9 = stack_16.__len__()
    assert var_9 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_10 = module_0.check_parenthesis(dict_1)
    assert var_10 is True
    var_11 = stack_16.__len__()
    assert var_11 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_7.push(stack_17)


@pytest.mark.xfail(strict=True)
def test_case_1450():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_node_6 = module_0.StackNode(stack_5)
    assert len(stack_node_6.data) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    module_0.check_parenthesis(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1451():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    stack_node_3 = module_0.StackNode(stack_5)
    assert len(stack_node_3.data) == 0
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_node_5 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_7.__len__()
    assert var_4 == 0
    module_0.check_parenthesis(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1452():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    bool_0 = True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.push(bool_0)
    assert len(stack_1) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_1 = None
    stack_node_1 = module_0.StackNode(none_type_1)
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_3)
    assert len(stack_node_6.data) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    bool_1 = False
    stack_node_10 = module_0.StackNode(bool_1)
    stack_node_11 = module_0.StackNode(bool_1)
    none_type_2 = None
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.push(none_type_2)
    assert len(stack_7) == 1
    stack_node_12 = module_0.StackNode(var_6)
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_7 = stack_8.__len__()
    assert var_7 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_14 = module_0.StackNode(var_7)
    assert stack_node_14.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_15 = module_0.StackNode(stack_9)
    assert len(stack_node_15.data) == 0
    var_4.__len__()


def test_case_1453():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_1)
    assert len(stack_node_7.data) == 0
    none_type_1 = None
    stack_node_8 = module_0.StackNode(none_type_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_2 = None
    stack_node_9 = module_0.StackNode(none_type_2)
    stack_node_10 = module_0.StackNode(stack_4)
    assert len(stack_node_10.data) == 0
    var_5 = stack_4.__len__()
    assert var_5 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_6 = stack_5.__len__()
    assert var_6 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_11 = module_0.StackNode(var_6)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_node_11)
    stack_node_14 = module_0.StackNode(stack_5)
    assert len(stack_node_14.data) == 0
    var_7 = stack_6.__len__()
    assert var_7 == 0
    var_8 = stack_5.push(stack_node_13)
    assert len(stack_5) == 1
    assert len(stack_node_14.data) == 1
    bool_1 = False
    stack_node_15 = module_0.StackNode(bool_1)
    stack_node_16 = module_0.StackNode(bool_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_9 = stack_7.__len__()
    assert var_9 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_10 = stack_8.__len__()
    assert var_10 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_17 = module_0.StackNode(var_10)
    assert stack_node_17.data == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_18 = module_0.StackNode(complex_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_11 = stack_10.__len__()
    assert var_11 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_19 = module_0.StackNode(var_11)
    assert stack_node_19.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_20 = module_0.StackNode(stack_10)
    assert len(stack_node_20.data) == 0
    stack_node_21 = module_0.StackNode(stack_13)
    assert len(stack_node_21.data) == 0
    with pytest.raises(ValueError):
        stack_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1454():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_2 = module_0.StackNode(complex_0)
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_2 = None
    stack_node_4 = module_0.StackNode(none_type_2)
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    var_2 = stack_3.push(none_type_1)
    assert len(stack_3) == 1
    assert len(stack_node_5.data) == 1
    none_type_3 = None
    stack_node_6 = module_0.StackNode(none_type_3)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_5 = stack_4.__len__()
    assert var_5 == 0
    var_4.peek()


@pytest.mark.xfail(strict=True)
def test_case_1455():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_2)
    assert len(stack_node_3.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(stack_6)
    assert len(stack_node_5.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_8)
    assert len(stack_node_9.data) == 0
    none_type_0 = None
    module_0.check_parenthesis(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1456():
    tuple_0 = ()
    module_0.postfix_eval(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1457():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_0 = None
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.push(none_type_0)
    assert len(stack_10) == 1
    module_0.check_parenthesis(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1458():
    none_type_0 = None
    module_0.postfix_eval(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1459():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_8)
    assert len(stack_node_5.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_7 = module_0.StackNode(stack_12)
    assert len(stack_node_7.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    none_type_1 = None
    stack_node_8 = module_0.StackNode(none_type_1)
    stack_node_9 = module_0.StackNode(stack_14)
    assert len(stack_node_9.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_5 = stack_15.__len__()
    assert var_5 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_10 = module_0.StackNode(var_5)
    assert stack_node_10.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_6 = stack_18.__len__()
    assert var_6 == 0
    module_0.check_parenthesis(stack_13)


@pytest.mark.xfail(strict=True)
def test_case_1460():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_1)
    assert len(stack_node_5.data) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_4)
    assert len(stack_node_9.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_10 = module_0.StackNode(var_5)
    assert stack_node_10.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_11 = module_0.StackNode(stack_6)
    assert len(stack_node_11.data) == 0
    stack_node_12 = module_0.StackNode(stack_8)
    assert len(stack_node_12.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_13 = module_0.StackNode(var_6)
    assert stack_node_13.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_7 = module_0.check_parenthesis(dict_0)
    assert var_7 is True
    stack_node_14 = module_0.StackNode(float_0)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_15 = module_0.StackNode(var_8)
    assert stack_node_15.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_16 = module_0.StackNode(stack_13)
    assert len(stack_node_16.data) == 0
    stack_node_17 = module_0.StackNode(stack_16)
    assert len(stack_node_17.data) == 0
    bool_0 = False
    stack_node_18 = module_0.StackNode(bool_0)
    stack_node_19 = module_0.StackNode(bool_0)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_9 = stack_17.__len__()
    assert var_9 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_10 = stack_18.__len__()
    assert var_10 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_20 = module_0.StackNode(var_10)
    assert stack_node_20.data == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_21 = module_0.StackNode(stack_18)
    assert len(stack_node_21.data) == 0
    module_0.postfix_eval(stack_5)


@pytest.mark.xfail(strict=True)
def test_case_1461():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_2)
    assert len(stack_node_7.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_8 = module_0.StackNode(var_1)
    assert stack_node_8.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_9 = module_0.StackNode(var_2)
    assert stack_node_9.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_10 = module_0.StackNode(var_3)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_10)
    assert len(stack_node_13.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_14 = module_0.StackNode(var_4)
    assert stack_node_14.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_5 = stack_14.push(stack_16)
    assert len(stack_14) == 1
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_6 = stack_17.__len__()
    assert var_6 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_15 = module_0.StackNode(var_6)
    assert stack_node_15.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_16 = module_0.StackNode(stack_17)
    assert len(stack_node_16.data) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_7 = stack_21.__len__()
    assert var_7 == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_17 = module_0.StackNode(var_7)
    assert stack_node_17.data == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_node_18 = module_0.StackNode(stack_22)
    assert len(stack_node_18.data) == 0
    var_3.peek()


@pytest.mark.xfail(strict=True)
def test_case_1462():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_2.push(stack_4)
    assert len(stack_2) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_5)
    assert len(stack_node_4.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_7 = module_0.StackNode(stack_8)
    assert len(stack_node_7.data) == 0
    stack_node_8 = module_0.StackNode(stack_11)
    assert len(stack_node_8.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_15)
    assert len(stack_node_11.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    none_type_0 = None
    stack_node_12 = module_0.StackNode(none_type_0)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_7 = stack_18.__len__()
    assert var_7 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_13 = module_0.StackNode(var_7)
    assert stack_node_13.data == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_6.pop()


def test_case_1463():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_10)
    assert len(stack_node_8.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    dict_0 = {}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_10 = module_0.StackNode(var_7)
    assert stack_node_10.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_8 = stack_16.__len__()
    assert var_8 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_9 = stack_17.__len__()
    assert var_9 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_11 = module_0.StackNode(var_9)
    assert stack_node_11.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_10 = stack_21.__len__()
    assert var_10 == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_12 = module_0.StackNode(var_10)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_node_12)
    stack_node_15 = module_0.StackNode(stack_21)
    assert len(stack_node_15.data) == 0
    var_11 = stack_22.__len__()
    assert var_11 == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_12 = stack_23.__len__()
    assert var_12 == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_node_16 = module_0.StackNode(var_12)
    assert stack_node_16.data == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0
    stack_27 = module_0.Stack()
    assert len(stack_27) == 0
    var_13 = stack_24.__len__()
    assert var_13 == 0
    stack_28 = module_0.Stack()
    assert len(stack_28) == 0
    var_14 = stack_28.__len__()
    assert var_14 == 0
    stack_29 = module_0.Stack()
    assert len(stack_29) == 0
    stack_30 = module_0.Stack()
    assert len(stack_30) == 0
    with pytest.raises(ValueError):
        stack_12.peek()


@pytest.mark.xfail(strict=True)
def test_case_1464():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_2.push(stack_4)
    assert len(stack_2) == 1
    var_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_1465():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_5 = module_0.StackNode(stack_7)
    assert len(stack_node_5.data) == 0
    stack_node_6 = module_0.StackNode(stack_9)
    assert len(stack_node_6.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    stack_node_8 = module_0.StackNode(stack_11)
    assert len(stack_node_8.data) == 0
    bool_0 = False
    stack_node_9 = module_0.StackNode(bool_0)
    stack_node_10 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_3 = stack_12.push(none_type_1)
    assert len(stack_12) == 1
    stack_node_11 = module_0.StackNode(var_3)
    stack_node_12 = module_0.StackNode(stack_node_11)
    none_type_2 = None
    stack_node_13 = module_0.StackNode(none_type_2)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_4 = stack_13.__len__()
    assert var_4 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_5 = stack_14.__len__()
    assert var_5 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_14 = module_0.StackNode(var_5)
    assert stack_node_14.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_6 = stack_16.__len__()
    assert var_6 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_15 = module_0.StackNode(var_6)
    assert stack_node_15.data == 0
    stack_node_16 = module_0.StackNode(stack_node_15)
    stack_node_17 = module_0.StackNode(stack_node_15)
    stack_node_18 = module_0.StackNode(stack_16)
    assert len(stack_node_18.data) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_19 = module_0.StackNode(var_6)
    assert stack_node_19.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_7 = stack_19.__len__()
    assert var_7 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_20 = module_0.StackNode(var_7)
    assert stack_node_20.data == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_21 = module_0.StackNode(stack_19)
    assert len(stack_node_21.data) == 0
    var_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1466():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_5 = module_0.StackNode(float_0)
    none_type_0 = None
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.push(none_type_0)
    assert len(stack_5) == 1
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_6)
    assert len(stack_node_9.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_10 = module_0.StackNode(var_5)
    assert stack_node_10.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_8 = stack_12.__len__()
    assert var_8 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_11 = module_0.StackNode(var_8)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_node_11)
    stack_node_14 = module_0.StackNode(stack_12)
    assert len(stack_node_14.data) == 0
    var_9 = stack_13.__len__()
    assert var_9 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    module_0.check_parenthesis(stack_14)


def test_case_1467():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_5 = module_0.StackNode(stack_7)
    assert len(stack_node_5.data) == 0
    stack_node_6 = module_0.StackNode(stack_10)
    assert len(stack_node_6.data) == 0
    with pytest.raises(ValueError):
        stack_10.peek()


def test_case_1468():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    with pytest.raises(ValueError):
        stack_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1469():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_node_3 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.push(none_type_0)
    assert len(stack_4) == 1
    stack_node_4 = module_0.StackNode(var_1)
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    module_0.check_parenthesis(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1470():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    none_type_2 = None
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.push(none_type_2)
    assert len(stack_1) == 1
    none_type_3 = None
    stack_node_4 = module_0.StackNode(none_type_3)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_5 = module_0.StackNode(float_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_2)
    assert len(stack_node_9.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_10 = module_0.StackNode(var_3)
    assert stack_node_10.data == 0
    bool_0 = False
    stack_node_11 = module_0.StackNode(bool_0)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_12 = module_0.StackNode(float_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_4 = None
    stack_node_13 = module_0.StackNode(none_type_4)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_14 = module_0.StackNode(var_5)
    assert stack_node_14.data == 0
    stack_node_15 = module_0.StackNode(stack_node_14)
    stack_node_16 = module_0.StackNode(stack_node_14)
    stack_node_17 = module_0.StackNode(stack_7)
    assert len(stack_node_17.data) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    var_7 = stack_7.push(stack_node_16)
    assert len(stack_7) == 1
    assert len(stack_node_17.data) == 1
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_8 = stack_9.__len__()
    assert var_8 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_18 = module_0.StackNode(var_8)
    assert stack_node_18.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_9 = module_0.check_parenthesis(dict_2)
    assert var_9 is True
    var_10 = stack_10.__len__()
    assert var_10 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_5 = None
    stack_node_19 = module_0.StackNode(none_type_5)
    stack_node_20 = module_0.StackNode(stack_12)
    assert len(stack_node_20.data) == 0
    var_11 = stack_12.__len__()
    assert var_11 == 0
    module_0.postfix_eval(stack_11)


def test_case_1471():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)
    dict_0 = {}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_1)
    assert var_2 is True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_3 = stack_1.__len__()
    assert var_3 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_7.push(stack_9)
    assert len(stack_7) == 1
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_6 = module_0.StackNode(var_7)
    assert stack_node_6.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_11.__len__()
    assert var_8 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_9 = stack_15.__len__()
    assert var_9 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_7 = module_0.StackNode(var_9)
    assert stack_node_7.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_8 = module_0.StackNode(stack_15)
    assert len(stack_node_8.data) == 0
    with pytest.raises(ValueError):
        stack_9.peek()


@pytest.mark.xfail(strict=True)
def test_case_1472():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    module_0.check_parenthesis(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1473():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_2.push(stack_4)
    assert len(stack_2) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_2 = module_0.StackNode(stack_5)
    assert len(stack_node_2.data) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_4 = module_0.StackNode(var_6)
    assert stack_node_4.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_7 = stack_12.__len__()
    assert var_7 == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    module_0.check_parenthesis(stack_node_5)


def test_case_1474():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_4)
    assert len(stack_node_3.data) == 0
    var_1 = stack_4.push(none_type_0)
    assert len(stack_4) == 1
    assert len(stack_node_3.data) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_2 = None
    stack_node_4 = module_0.StackNode(none_type_2)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_5 = module_0.StackNode(float_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    bool_0 = False
    stack_node_7 = module_0.StackNode(bool_0)
    stack_node_8 = module_0.StackNode(bool_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_6 = stack_16.__len__()
    assert var_6 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_16)
    assert len(stack_node_13.data) == 0
    with pytest.raises(ValueError):
        stack_15.pop()


@pytest.mark.xfail(strict=True)
def test_case_1475():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_3)
    assert len(stack_node_10.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_11 = module_0.StackNode(var_2)
    assert stack_node_11.data == 0
    complex_1 = -3711.3 - 806.2j
    stack_node_12 = module_0.StackNode(complex_1)
    bool_0 = False
    stack_node_13 = module_0.StackNode(bool_0)
    none_type_2 = None
    stack_node_14 = module_0.StackNode(none_type_2)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_15 = module_0.StackNode(var_6)
    assert stack_node_15.data == 0
    stack_node_16 = module_0.StackNode(stack_node_15)
    stack_node_17 = module_0.StackNode(stack_node_15)
    stack_node_18 = module_0.StackNode(stack_7)
    assert len(stack_node_18.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_7 = stack_9.__len__()
    assert var_7 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_19 = module_0.StackNode(var_7)
    assert stack_node_19.data == 0
    stack_node_20 = module_0.StackNode(stack_node_19)
    var_7.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1476():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_4 = module_0.StackNode(stack_11)
    assert len(stack_node_4.data) == 0
    stack_node_5 = module_0.StackNode(stack_14)
    assert len(stack_node_5.data) == 0
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    stack_node_7 = module_0.StackNode(bool_0)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_5 = stack_15.__len__()
    assert var_5 == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_6 = stack_16.__len__()
    assert var_6 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_7 = stack_19.__len__()
    assert var_7 == 0
    module_0.postfix_eval(stack_node_9)


@pytest.mark.xfail(strict=True)
def test_case_1477():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_node_3 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.push(none_type_0)
    assert len(stack_12) == 1
    complex_0 = -3711.3 - 806.2j
    stack_node_4 = module_0.StackNode(complex_0)
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    var_1.peek()


@pytest.mark.xfail(strict=True)
def test_case_1478():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(var_1)
    assert stack_node_6.data == 0
    module_0.postfix_eval(stack_2)


@pytest.mark.xfail(strict=True)
def test_case_1479():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_4.push(stack_6)
    assert len(stack_4) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_6 = module_0.StackNode(stack_7)
    assert len(stack_node_6.data) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    bool_0 = False
    stack_node_7 = module_0.StackNode(bool_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_2.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1480():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_1 = None
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.push(none_type_1)
    assert len(stack_6) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    module_0.postfix_eval(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1481():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_0 = stack_2.__len__()
    assert var_0 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_0)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    module_0.check_parenthesis(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1482():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(stack_2)
    assert len(stack_node_0.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_3)
    assert len(stack_node_4.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    none_type_0 = None
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.push(none_type_0)
    assert len(stack_6) == 1
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    module_0.check_parenthesis(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1483():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(var_5)
    assert stack_node_3.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_4 = module_0.StackNode(stack_7)
    assert len(stack_node_4.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_5 = module_0.StackNode(var_6)
    assert stack_node_5.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_6 = module_0.StackNode(stack_10)
    assert len(stack_node_6.data) == 0
    stack_node_7 = module_0.StackNode(stack_13)
    assert len(stack_node_7.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    stack_node_9 = module_0.StackNode(stack_14)
    assert len(stack_node_9.data) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    bool_0 = False
    stack_node_10 = module_0.StackNode(bool_0)
    stack_node_11 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_8 = stack_15.push(none_type_1)
    assert len(stack_15) == 1
    stack_node_12 = module_0.StackNode(var_8)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_6.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1484():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_8)
    assert len(stack_node_9.data) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    module_0.postfix_eval(stack_9)


@pytest.mark.xfail(strict=True)
def test_case_1485():
    none_type_0 = None
    module_0.check_parenthesis(none_type_0)


def test_case_1486():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_5)
    assert len(stack_node_4.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_11)
    assert len(stack_node_9.data) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    var_6 = stack_11.push(stack_node_8)
    assert len(stack_11) == 1
    assert len(stack_node_9.data) == 1
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    none_type_0 = None
    stack_node_10 = module_0.StackNode(none_type_0)
    stack_node_11 = module_0.StackNode(stack_13)
    assert len(stack_node_11.data) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_9 = module_0.check_parenthesis(dict_0)
    assert var_9 is True
    stack_node_12 = module_0.StackNode(stack_16)
    assert len(stack_node_12.data) == 0
    with pytest.raises(ValueError):
        stack_5.pop()


def test_case_1487():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    with pytest.raises(ValueError):
        stack_3.pop()


@pytest.mark.xfail(strict=True)
def test_case_1488():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(stack_2)
    assert len(stack_node_0.data) == 0
    var_1.push(var_1)


def test_case_1489():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_0)
    assert stack_node_4.data == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    with pytest.raises(ValueError):
        stack_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_1490():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_2.push(stack_4)
    assert len(stack_2) == 1
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    var_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_1491():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    bool_0 = True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.push(bool_0)
    assert len(stack_4) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(stack_6)
    assert len(stack_node_4.data) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_5 = stack_8.__len__()
    assert var_5 == 0
    bool_1 = False
    stack_node_7 = module_0.StackNode(bool_1)
    stack_node_8 = module_0.StackNode(bool_1)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    complex_0 = -3711.3 - 806.2j
    stack_node_10 = module_0.StackNode(complex_0)
    none_type_2 = None
    stack_node_11 = module_0.StackNode(none_type_2)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_3 = None
    stack_node_12 = module_0.StackNode(none_type_3)
    stack_node_13 = module_0.StackNode(stack_10)
    assert len(stack_node_13.data) == 0
    var_7 = stack_10.push(none_type_2)
    assert len(stack_10) == 1
    assert len(stack_node_13.data) == 1
    bool_2 = False
    stack_node_14 = module_0.StackNode(bool_2)
    stack_node_15 = module_0.StackNode(bool_2)
    none_type_4 = None
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_8 = stack_11.push(none_type_4)
    assert len(stack_11) == 1
    stack_node_16 = module_0.StackNode(var_8)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_9 = stack_12.__len__()
    assert var_9 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_17 = module_0.StackNode(var_9)
    assert stack_node_17.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_10 = module_0.check_parenthesis(dict_1)
    assert var_10 is True
    var_11 = stack_13.__len__()
    assert var_11 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_12 = stack_15.__len__()
    assert var_12 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_6.peek()


@pytest.mark.xfail(strict=True)
def test_case_1492():
    int_0 = 1573
    list_0 = [int_0, int_0, int_0]
    stack_node_0 = module_0.StackNode(list_0)
    float_0 = 288.3707
    set_0 = {float_0, float_0}
    module_0.postfix_eval(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1493():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_6 = module_0.StackNode(float_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    bool_1 = False
    stack_node_10 = module_0.StackNode(bool_1)
    stack_node_11 = module_0.StackNode(bool_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_7 = stack_8.__len__()
    assert var_7 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_13 = module_0.StackNode(var_7)
    assert stack_node_13.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_8 = stack_10.push(stack_12)
    assert len(stack_10) == 1
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_9 = stack_13.__len__()
    assert var_9 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_14 = module_0.StackNode(var_9)
    assert stack_node_14.data == 0
    stack_node_15 = module_0.StackNode(stack_node_14)
    stack_node_16 = module_0.StackNode(stack_node_14)
    stack_node_17 = module_0.StackNode(stack_13)
    assert len(stack_node_17.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_18 = module_0.StackNode(var_9)
    assert stack_node_18.data == 0
    module_0.check_parenthesis(stack_3)


@pytest.mark.xfail(strict=True)
def test_case_1494():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(stack_2)
    assert len(stack_node_0.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_3)
    assert len(stack_node_4.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    var_5 = stack_7.__len__()
    assert var_5 == 0
    module_0.check_parenthesis(stack_8)


@pytest.mark.xfail(strict=True)
def test_case_1495():
    complex_0 = -1589.8451 + 718.7215j
    set_0 = {complex_0}
    module_1.object(*set_0)


@pytest.mark.xfail(strict=True)
def test_case_1496():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2.peek()


def test_case_1497():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    with pytest.raises(ValueError):
        stack_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_1498():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_node_3 = module_0.StackNode(stack_node_2)
    module_0.postfix_eval(stack_node_1)


@pytest.mark.xfail(strict=True)
def test_case_1499():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_0 = module_0.StackNode(var_2)
    assert stack_node_0.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(stack_3)
    assert len(stack_node_1.data) == 0
    var_1.push(stack_node_0)


@pytest.mark.xfail(strict=True)
def test_case_1500():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    module_0.check_parenthesis(var_0)


def test_case_1501():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_3 = module_0.StackNode(complex_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    with pytest.raises(ValueError):
        stack_9.peek()


@pytest.mark.xfail(strict=True)
def test_case_1502():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)
    bool_1 = False
    stack_node_3 = module_0.StackNode(bool_1)
    stack_node_4 = module_0.StackNode(bool_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_5 = module_0.StackNode(var_1)
    assert stack_node_5.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_6 = module_0.StackNode(stack_1)
    assert len(stack_node_6.data) == 0
    stack_node_7 = module_0.StackNode(stack_3)
    assert len(stack_node_7.data) == 0
    bool_2 = False
    stack_node_8 = module_0.StackNode(bool_2)
    stack_node_9 = module_0.StackNode(bool_2)
    none_type_1 = None
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.push(none_type_1)
    assert len(stack_5) == 1
    stack_node_10 = module_0.StackNode(var_2)
    stack_node_11 = module_0.StackNode(stack_node_10)
    module_0.postfix_eval(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1503():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_4 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.push(none_type_0)
    assert len(stack_6) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    module_0.check_parenthesis(stack_node_1)


@pytest.mark.xfail(strict=True)
def test_case_1504():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    module_0.postfix_eval(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1505():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    bool_1 = False
    stack_node_3 = module_0.StackNode(bool_1)
    stack_node_4 = module_0.StackNode(bool_1)
    module_0.postfix_eval(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1506():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(stack_2)
    assert len(stack_node_0.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    module_0.postfix_eval(var_1)


def test_case_1507():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    with pytest.raises(ValueError):
        stack_0.peek()


def test_case_1508():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1509():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_0 = module_0.StackNode(stack_3)
    assert len(stack_node_0.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_7)
    assert len(stack_node_3.data) == 0
    module_0.postfix_eval(stack_7)


@pytest.mark.xfail(strict=True)
def test_case_1510():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_3.__len__()
    assert var_3 == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    bool_1 = False
    stack_node_3 = module_0.StackNode(bool_1)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_4 = module_0.StackNode(float_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    dict_2 = {}
    var_6 = module_0.check_parenthesis(dict_2)
    assert var_6 is True
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_7 = stack_7.__len__()
    assert var_7 == 0
    stack_node_6 = module_0.StackNode(var_7)
    assert stack_node_6.data == 0
    bool_2 = False
    stack_node_7 = module_0.StackNode(bool_2)
    stack_node_8 = module_0.StackNode(bool_2)
    none_type_1 = None
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_8 = stack_8.push(none_type_1)
    assert len(stack_8) == 1
    stack_node_9 = module_0.StackNode(var_8)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_9 = stack_9.__len__()
    assert var_9 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_10 = module_0.StackNode(var_9)
    assert stack_node_10.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_10 = stack_10.__len__()
    assert var_10 == 0
    var_1.push(stack_6)


@pytest.mark.xfail(strict=True)
def test_case_1511():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_4 = module_0.StackNode(complex_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_6)
    assert len(stack_node_9.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_0 = None
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.push(none_type_0)
    assert len(stack_9) == 1
    module_0.postfix_eval(var_2)


def test_case_1512():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(stack_5)
    assert len(stack_node_2.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_4 = module_0.StackNode(var_6)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_11)
    assert len(stack_node_7.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_8 = module_0.StackNode(var_7)
    assert stack_node_8.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    with pytest.raises(ValueError):
        stack_4.pop()


@pytest.mark.xfail(strict=True)
def test_case_1513():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1514():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_0)
    assert stack_node_4.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(var_1)
    assert stack_node_6.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    stack_node_8 = module_0.StackNode(stack_8)
    assert len(stack_node_8.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_2 = stack_9.__len__()
    assert var_2 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_9 = module_0.StackNode(var_3)
    assert stack_node_9.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_10 = module_0.StackNode(stack_10)
    assert len(stack_node_10.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_4 = stack_13.__len__()
    assert var_4 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_11 = module_0.StackNode(var_4)
    assert stack_node_11.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_5 = stack_16.__len__()
    assert var_5 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_7 = stack_17.__len__()
    assert var_7 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_12 = module_0.StackNode(var_7)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_node_12)
    stack_node_15 = module_0.StackNode(stack_17)
    assert len(stack_node_15.data) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_8 = stack_19.__len__()
    assert var_8 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_16 = module_0.StackNode(var_8)
    assert stack_node_16.data == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_17 = module_0.StackNode(stack_19)
    assert len(stack_node_17.data) == 0
    stack_node_18 = module_0.StackNode(stack_22)
    assert len(stack_node_18.data) == 0
    module_0.postfix_eval(stack_node_16)


def test_case_1515():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(stack_3)
    assert len(stack_node_3.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_5)
    assert len(stack_node_7.data) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_7 = stack_15.__len__()
    assert var_7 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_10 = module_0.StackNode(var_7)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_15)
    assert len(stack_node_13.data) == 0
    with pytest.raises(ValueError):
        stack_11.peek()


@pytest.mark.xfail(strict=True)
def test_case_1516():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_4 = module_0.StackNode(float_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_4 = stack_2.__len__()
    assert var_4 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_5 = stack_4.__len__()
    assert var_5 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_5.__len__()
    assert var_6 == 0
    bool_0 = False
    module_0.check_parenthesis(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1517():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    module_0.check_parenthesis(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1518():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    complex_0 = -3711.3 - 806.2j
    stack_node_6 = module_0.StackNode(complex_0)
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_2 = None
    stack_node_8 = module_0.StackNode(none_type_2)
    stack_node_9 = module_0.StackNode(stack_8)
    assert len(stack_node_9.data) == 0
    var_3 = stack_8.push(none_type_1)
    assert len(stack_8) == 1
    assert len(stack_node_9.data) == 1
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_10 = module_0.StackNode(var_5)
    assert stack_node_10.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    var_7 = stack_12.__len__()
    assert var_7 == 0
    bool_0 = False
    stack_node_11 = module_0.StackNode(bool_0)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_12 = module_0.StackNode(var_8)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    module_0.check_parenthesis(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1519():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_4)
    assert len(stack_node_6.data) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_8 = module_0.StackNode(stack_6)
    assert len(stack_node_8.data) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    bool_1 = False
    stack_node_9 = module_0.StackNode(bool_1)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_11)
    assert len(stack_node_12.data) == 0
    bool_2 = False
    stack_node_13 = module_0.StackNode(bool_2)
    stack_node_14 = module_0.StackNode(bool_2)
    none_type_0 = None
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_12.push(none_type_0)
    assert len(stack_12) == 1
    stack_node_15 = module_0.StackNode(var_7)
    stack_node_16 = module_0.StackNode(stack_node_15)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_17 = module_0.StackNode(var_8)
    assert stack_node_17.data == 0
    stack_node_18 = module_0.StackNode(stack_node_17)
    stack_node_19 = module_0.StackNode(stack_node_17)
    stack_node_20 = module_0.StackNode(stack_13)
    assert len(stack_node_20.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_9 = stack_15.__len__()
    assert var_9 == 0
    module_0.postfix_eval(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1520():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    module_0.postfix_eval(stack_2)


def test_case_1521():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_node_3 = module_0.StackNode(bool_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_4)
    assert len(stack_node_7.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_8 = module_0.StackNode(complex_0)
    with pytest.raises(ValueError):
        stack_3.pop()


@pytest.mark.xfail(strict=True)
def test_case_1522():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    complex_0 = -3711.3 - 806.2j
    stack_node_2 = module_0.StackNode(complex_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_3 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_2.push(stack_6)


@pytest.mark.xfail(strict=True)
def test_case_1523():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(stack_2)
    assert len(stack_node_0.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_2 = module_0.StackNode(var_5)
    assert stack_node_2.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_7 = stack_16.__len__()
    assert var_7 == 0
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_node_4 = module_0.StackNode(bool_0)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_8 = stack_17.__len__()
    assert var_8 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_9 = stack_18.__len__()
    assert var_9 == 0
    stack_node_5 = module_0.StackNode(var_9)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_10 = stack_19.__len__()
    assert var_10 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_7 = module_0.StackNode(var_10)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    var_8.push(stack_19)


@pytest.mark.xfail(strict=True)
def test_case_1524():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    stack_node_4 = module_0.StackNode(stack_3)
    assert len(stack_node_4.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_5 = module_0.StackNode(float_0)
    module_0.check_parenthesis(stack_node_1)


@pytest.mark.xfail(strict=True)
def test_case_1525():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_node_6 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.push(none_type_1)
    assert len(stack_12) == 1
    stack_node_7 = module_0.StackNode(var_4)
    stack_node_8 = module_0.StackNode(stack_node_7)
    bool_1 = True
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.push(bool_1)
    assert len(stack_13) == 1
    bool_2 = False
    stack_node_9 = module_0.StackNode(bool_2)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    stack_node_10 = module_0.StackNode(float_0)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    none_type_2 = None
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_7 = stack_15.push(none_type_2)
    assert len(stack_15) == 1
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    none_type_3 = None
    stack_node_11 = module_0.StackNode(none_type_3)
    stack_node_12 = module_0.StackNode(stack_16)
    assert len(stack_node_12.data) == 0
    var_4.peek()


@pytest.mark.xfail(strict=True)
def test_case_1526():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(stack_4)
    assert len(stack_node_3.data) == 0
    stack_node_4 = module_0.StackNode(stack_7)
    assert len(stack_node_4.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_5 = module_0.StackNode(float_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_node_7 = module_0.StackNode(stack_8)
    assert len(stack_node_7.data) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    none_type_1 = None
    stack_node_8 = module_0.StackNode(none_type_1)
    complex_0 = -3711.3 - 806.2j
    stack_node_9 = module_0.StackNode(complex_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_10 = module_0.StackNode(var_5)
    assert stack_node_10.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_11 = module_0.StackNode(var_8)
    assert stack_node_11.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_9 = stack_19.__len__()
    assert var_9 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    bool_0 = True
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    var_10 = stack_22.push(bool_0)
    assert len(stack_22) == 1
    module_0.check_parenthesis(stack_1)


@pytest.mark.xfail(strict=True)
def test_case_1527():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    bool_1 = True
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.push(bool_1)
    assert len(stack_14) == 1
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_9 = stack_15.__len__()
    assert var_9 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_8 = module_0.StackNode(complex_0)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_10 = stack_16.__len__()
    assert var_10 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_11 = module_0.check_parenthesis(dict_0)
    assert var_11 is True
    stack_node_9 = module_0.StackNode(stack_18)
    assert len(stack_node_9.data) == 0
    var_2.peek()


@pytest.mark.xfail(strict=True)
def test_case_1528():
    bool_0 = False
    module_0.postfix_eval(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1529():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1530():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    bool_0 = False
    stack_node_7 = module_0.StackNode(bool_0)
    stack_node_8 = module_0.StackNode(bool_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    stack_node_9 = module_0.StackNode(float_1)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_0 = None
    stack_node_10 = module_0.StackNode(none_type_0)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_11 = module_0.StackNode(var_6)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_node_11)
    stack_node_14 = module_0.StackNode(stack_13)
    assert len(stack_node_14.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    bool_1 = False
    stack_node_15 = module_0.StackNode(bool_1)
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_7 = module_0.check_parenthesis(dict_2)
    assert var_7 is True
    stack_node_16 = module_0.StackNode(float_2)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    int_0 = 637
    var_1.push(int_0)


def test_case_1531():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    with pytest.raises(ValueError):
        stack_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1532():
    dict_0 = {}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_1)
    assert var_1 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2.peek()


@pytest.mark.xfail(strict=True)
def test_case_1533():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(stack_2)
    assert len(stack_node_0.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    var_1.push(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1534():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_2)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_3)
    assert len(stack_node_6.data) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    var_5 = stack_3.push(stack_node_5)
    assert len(stack_3) == 1
    assert len(stack_node_6.data) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_6 = stack_5.__len__()
    assert var_6 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_7 = stack_7.__len__()
    assert var_7 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_9 = module_0.StackNode(var_7)
    assert stack_node_9.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_8 = stack_9.__len__()
    assert var_8 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_10 = module_0.StackNode(var_8)
    assert stack_node_10.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_11 = module_0.StackNode(stack_9)
    assert len(stack_node_11.data) == 0
    stack_node_12 = module_0.StackNode(stack_12)
    assert len(stack_node_12.data) == 0
    bool_1 = False
    stack_node_13 = module_0.StackNode(bool_1)
    stack_node_14 = module_0.StackNode(bool_1)
    none_type_0 = None
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_9 = stack_13.push(none_type_0)
    assert len(stack_13) == 1
    stack_node_15 = module_0.StackNode(var_9)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    none_type_1 = None
    stack_node_16 = module_0.StackNode(none_type_1)
    stack_node_17 = module_0.StackNode(stack_14)
    assert len(stack_node_17.data) == 0
    var_10 = stack_14.__len__()
    assert var_10 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_18 = module_0.StackNode(complex_0)
    none_type_2 = None
    stack_node_19 = module_0.StackNode(none_type_2)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    none_type_3 = None
    stack_node_20 = module_0.StackNode(none_type_3)
    stack_node_21 = module_0.StackNode(stack_15)
    assert len(stack_node_21.data) == 0
    var_11 = stack_15.push(none_type_2)
    assert len(stack_15) == 1
    assert len(stack_node_21.data) == 1
    var_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_1535():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_4.push(stack_6)
    assert len(stack_4) == 1
    dict_0 = {}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_node_6 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.push(none_type_1)
    assert len(stack_7) == 1
    stack_node_7 = module_0.StackNode(var_5)
    stack_node_8 = module_0.StackNode(stack_node_7)
    module_0.postfix_eval(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1536():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1537():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    none_type_0 = None
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.push(none_type_0)
    assert len(stack_4) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_5)
    assert len(stack_node_5.data) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_7 = module_0.check_parenthesis(dict_0)
    assert var_7 is True
    var_8 = stack_10.__len__()
    assert var_8 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_9 = stack_12.__len__()
    assert var_9 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_10 = module_0.StackNode(var_9)
    assert stack_node_10.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    none_type_1 = None
    stack_node_11 = module_0.StackNode(none_type_1)
    stack_node_12 = module_0.StackNode(stack_16)
    assert len(stack_node_12.data) == 0
    var_10 = stack_16.__len__()
    assert var_10 == 0
    none_type_2 = None
    stack_node_13 = module_0.StackNode(none_type_2)
    bool_0 = False
    stack_node_14 = module_0.StackNode(bool_0)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_11 = stack_18.__len__()
    assert var_11 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_15 = module_0.StackNode(var_11)
    assert stack_node_15.data == 0
    stack_node_16 = module_0.StackNode(stack_node_15)
    stack_node_17 = module_0.StackNode(stack_node_15)
    stack_node_18 = module_0.StackNode(stack_18)
    assert len(stack_node_18.data) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    module_0.check_parenthesis(none_type_2)


@pytest.mark.xfail(strict=True)
def test_case_1538():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(stack_5)
    assert len(stack_node_3.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    module_0.check_parenthesis(stack_node_4)


@pytest.mark.xfail(strict=True)
def test_case_1539():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    bool_1 = False
    stack_node_0 = module_0.StackNode(bool_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    dict_0 = {}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_5 = stack_8.__len__()
    assert var_5 == 0
    var_5.push(stack_node_4)


def test_case_1540():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0


@pytest.mark.xfail(strict=True)
def test_case_1541():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    var_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_1542():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    stack_node_3 = module_0.StackNode(stack_2)
    assert len(stack_node_3.data) == 0
    var_0.peek()


def test_case_1543():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_2 = None
    stack_node_3 = module_0.StackNode(none_type_2)
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_4)
    assert len(stack_node_8.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_7 = stack_9.__len__()
    assert var_7 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_10 = module_0.StackNode(var_7)
    assert stack_node_10.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_8 = module_0.check_parenthesis(dict_1)
    assert var_8 is True
    var_9 = stack_10.__len__()
    assert var_9 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_10 = stack_12.__len__()
    assert var_10 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_11 = module_0.StackNode(var_10)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_node_11)
    stack_node_14 = module_0.StackNode(stack_12)
    assert len(stack_node_14.data) == 0
    var_11 = stack_13.__len__()
    assert var_11 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_12 = stack_14.__len__()
    assert var_12 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_13 = module_0.check_parenthesis(dict_2)
    assert var_13 is True
    stack_node_15 = module_0.StackNode(stack_16)
    assert len(stack_node_15.data) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_14 = stack_17.__len__()
    assert var_14 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_16 = module_0.StackNode(var_14)
    assert stack_node_16.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_17 = module_0.StackNode(stack_17)
    assert len(stack_node_17.data) == 0
    stack_node_18 = module_0.StackNode(stack_20)
    assert len(stack_node_18.data) == 0
    none_type_3 = None
    stack_node_19 = module_0.StackNode(none_type_3)
    with pytest.raises(ValueError):
        stack_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1544():
    dict_0 = {}
    module_0.postfix_eval(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1545():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    module_0.check_parenthesis(stack_3)


def test_case_1546():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_2)
    assert len(stack_node_8.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_9 = module_0.StackNode(var_2)
    assert stack_node_9.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_1 = None
    stack_node_10 = module_0.StackNode(none_type_1)
    stack_node_11 = module_0.StackNode(stack_5)
    assert len(stack_node_11.data) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_node_12 = module_0.StackNode(stack_5)
    assert len(stack_node_12.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_13 = module_0.StackNode(var_4)
    assert stack_node_13.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_14 = module_0.StackNode(stack_7)
    assert len(stack_node_14.data) == 0
    bool_1 = False
    stack_node_15 = module_0.StackNode(bool_1)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_node_16 = module_0.StackNode(float_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    with pytest.raises(ValueError):
        stack_8.pop()


@pytest.mark.xfail(strict=True)
def test_case_1547():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(stack_3)
    assert len(stack_node_4.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    dict_0 = {}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    var_1.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1548():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_2 = module_0.StackNode(float_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    int_0 = -460
    stack_node_3 = module_0.StackNode(int_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_6 = module_0.StackNode(stack_10)
    assert len(stack_node_6.data) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_7 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    none_type_1 = None
    stack_node_9 = module_0.StackNode(none_type_1)
    stack_node_10 = module_0.StackNode(stack_14)
    assert len(stack_node_10.data) == 0
    var_6 = stack_14.push(none_type_0)
    assert len(stack_14) == 1
    assert len(stack_node_10.data) == 1
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    none_type_2 = None
    stack_node_11 = module_0.StackNode(none_type_2)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_7 = stack_16.__len__()
    assert var_7 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_12 = module_0.StackNode(var_7)
    assert stack_node_12.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_13 = module_0.StackNode(stack_17)
    assert len(stack_node_13.data) == 0
    none_type_3 = None
    stack_node_14 = module_0.StackNode(none_type_3)
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_8 = stack_19.__len__()
    assert var_8 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_9 = module_0.check_parenthesis(dict_1)
    assert var_9 is True
    var_10 = stack_19.__len__()
    assert var_10 == 0
    module_0.postfix_eval(var_10)


def test_case_1549():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_7)
    assert len(stack_node_6.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_9)
    assert len(stack_node_10.data) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_node_11 = module_0.StackNode(var_6)
    assert stack_node_11.data == 0
    with pytest.raises(ValueError):
        stack_5.peek()


@pytest.mark.xfail(strict=True)
def test_case_1550():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_0)
    assert len(stack_node_4.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_node_6 = module_0.StackNode(stack_3)
    assert len(stack_node_6.data) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_6.push(stack_8)
    assert len(stack_6) == 1
    bool_1 = False
    stack_node_8 = module_0.StackNode(bool_1)
    stack_node_9 = module_0.StackNode(bool_1)
    none_type_1 = None
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.push(none_type_1)
    assert len(stack_9) == 1
    stack_node_10 = module_0.StackNode(var_4)
    stack_node_11 = module_0.StackNode(stack_node_10)
    bool_2 = True
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.push(bool_2)
    assert len(stack_10) == 1
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_12 = module_0.StackNode(var_6)
    assert stack_node_12.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_13 = module_0.StackNode(stack_11)
    assert len(stack_node_13.data) == 0
    stack_node_14 = module_0.StackNode(stack_13)
    assert len(stack_node_14.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_7 = stack_16.__len__()
    assert var_7 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_15 = module_0.StackNode(var_7)
    assert stack_node_15.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_8 = stack_18.__len__()
    assert var_8 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_9 = stack_20.__len__()
    assert var_9 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_16 = module_0.StackNode(var_9)
    assert stack_node_16.data == 0
    stack_node_17 = module_0.StackNode(stack_node_16)
    stack_node_18 = module_0.StackNode(stack_node_16)
    stack_node_19 = module_0.StackNode(stack_20)
    assert len(stack_node_19.data) == 0
    var_10 = stack_21.__len__()
    assert var_10 == 0
    module_0.postfix_eval(stack_node_12)


@pytest.mark.xfail(strict=True)
def test_case_1551():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_3)
    assert len(stack_node_8.data) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    module_0.postfix_eval(stack_3)


@pytest.mark.xfail(strict=True)
def test_case_1552():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_4 = module_0.StackNode(stack_9)
    assert len(stack_node_4.data) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    none_type_0 = None
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.push(none_type_0)
    assert len(stack_13) == 1
    dict_0 = {}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_5 = module_0.StackNode(var_7)
    assert stack_node_5.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_6 = module_0.StackNode(stack_14)
    assert len(stack_node_6.data) == 0
    stack_node_7 = module_0.StackNode(stack_16)
    assert len(stack_node_7.data) == 0
    module_0.postfix_eval(stack_node_7)


@pytest.mark.xfail(strict=True)
def test_case_1553():
    bool_0 = False
    module_0.check_parenthesis(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1554():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_6)
    assert len(stack_node_6.data) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    str_0 = "o2EICU9\x0bp7"
    stack_node_7 = module_0.StackNode(str_0)
    module_0.check_parenthesis(var_0)


def test_case_1555():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_0.__len__()
    assert var_2 == 0
    dict_1 = {}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_4 = stack_1.push(none_type_1)
    assert len(stack_1) == 1
    stack_node_3 = module_0.StackNode(var_4)
    float_1 = 712.593
    dict_2 = {float_1: float_1, float_1: float_1}
    var_5 = module_0.check_parenthesis(dict_2)
    assert var_5 is True
    stack_node_4 = module_0.StackNode(float_1)
    bool_1 = False
    stack_node_5 = module_0.StackNode(bool_1)
    float_2 = 712.593
    dict_3 = {float_2: float_2, float_2: float_2}
    var_6 = module_0.check_parenthesis(dict_3)
    assert var_6 is True
    stack_node_6 = module_0.StackNode(float_2)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_7 = stack_3.__len__()
    assert var_7 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_7 = module_0.StackNode(var_7)
    assert stack_node_7.data == 0
    with pytest.raises(ValueError):
        stack_3.pop()


@pytest.mark.xfail(strict=True)
def test_case_1556():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_0.pop()


def test_case_1557():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_node_3 = module_0.StackNode(bool_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_7.push(stack_9)
    assert len(stack_7) == 1
    bool_1 = False
    stack_node_6 = module_0.StackNode(bool_1)
    stack_node_7 = module_0.StackNode(bool_1)
    none_type_0 = None
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.push(none_type_0)
    assert len(stack_10) == 1
    stack_node_8 = module_0.StackNode(var_4)
    with pytest.raises(ValueError):
        stack_8.pop()


@pytest.mark.xfail(strict=True)
def test_case_1558():
    bytes_0 = b"#\xfb\xebQ\x12\x0e\xe9\xbb"
    module_0.postfix_eval(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1559():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    var_3.__len__()


def test_case_1560():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    with pytest.raises(ValueError):
        stack_0.peek()


def test_case_1561():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    int_0 = -460
    stack_node_3 = module_0.StackNode(int_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_node_6 = module_0.StackNode(stack_8)
    assert len(stack_node_6.data) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_node_7 = module_0.StackNode(stack_8)
    assert len(stack_node_7.data) == 0
    with pytest.raises(ValueError):
        stack_3.peek()


@pytest.mark.xfail(strict=True)
def test_case_1562():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    bool_1 = False
    stack_node_3 = module_0.StackNode(bool_1)
    stack_node_4 = module_0.StackNode(bool_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    var_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1563():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    bool_1 = False
    stack_node_7 = module_0.StackNode(bool_1)
    stack_node_8 = module_0.StackNode(bool_1)
    none_type_1 = None
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.push(none_type_1)
    assert len(stack_10) == 1
    stack_node_9 = module_0.StackNode(var_5)
    stack_node_10 = module_0.StackNode(stack_node_9)
    bool_2 = False
    stack_node_11 = module_0.StackNode(bool_2)
    stack_node_12 = module_0.StackNode(bool_2)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_node_13 = module_0.StackNode(var_6)
    assert stack_node_13.data == 0
    stack_node_14 = module_0.StackNode(stack_node_13)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_2 = None
    stack_node_15 = module_0.StackNode(none_type_2)
    stack_node_16 = module_0.StackNode(stack_12)
    assert len(stack_node_16.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_17 = module_0.StackNode(var_7)
    assert stack_node_17.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    var_9 = stack_14.__len__()
    assert var_9 == 0
    var_9.push(var_8)


@pytest.mark.xfail(strict=True)
def test_case_1564():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_2.__len__()
    assert var_4 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_5 = stack_3.__len__()
    assert var_5 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_3)
    assert len(stack_node_9.data) == 0
    var_6 = stack_4.__len__()
    assert var_6 == 0
    var_7 = stack_3.push(stack_node_8)
    assert len(stack_3) == 1
    assert len(stack_node_9.data) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_8 = stack_5.__len__()
    assert var_8 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_10 = module_0.StackNode(var_8)
    assert stack_node_10.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_9 = stack_9.__len__()
    assert var_9 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_11 = module_0.StackNode(var_9)
    assert stack_node_11.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_10 = stack_14.__len__()
    assert var_10 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_12 = module_0.StackNode(var_10)
    assert stack_node_12.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_11 = stack_17.__len__()
    assert var_11 == 0
    var_5.push(stack_14)


@pytest.mark.xfail(strict=True)
def test_case_1565():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    module_0.postfix_eval(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1566():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    bool_1 = True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.push(bool_1)
    assert len(stack_1) == 1
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_2.__len__()
    assert var_4 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_5 = stack_3.__len__()
    assert var_5 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    var_7 = stack_4.__len__()
    assert var_7 == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    bool_2 = False
    stack_node_6 = module_0.StackNode(bool_2)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    dict_2 = {}
    var_8 = module_0.check_parenthesis(dict_2)
    assert var_8 is True
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_9 = stack_7.__len__()
    assert var_9 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_9)
    assert stack_node_7.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_10 = stack_9.push(stack_11)
    assert len(stack_9) == 1
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_11 = stack_12.__len__()
    assert var_11 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_8 = module_0.StackNode(var_11)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    module_0.check_parenthesis(stack_node_7)


@pytest.mark.xfail(strict=True)
def test_case_1567():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    bool_1 = False
    stack_node_2 = module_0.StackNode(bool_1)
    stack_node_3 = module_0.StackNode(bool_1)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    stack_node_4 = module_0.StackNode(stack_8)
    assert len(stack_node_4.data) == 0
    module_0.postfix_eval(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1568():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_node_3 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.push(none_type_0)
    assert len(stack_2) == 1
    stack_node_4 = module_0.StackNode(var_1)
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_1 = None
    stack_node_8 = module_0.StackNode(none_type_1)
    none_type_2 = None
    stack_node_9 = module_0.StackNode(none_type_2)
    bool_1 = False
    stack_node_10 = module_0.StackNode(bool_1)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    stack_node_11 = module_0.StackNode(float_1)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1569():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    dict_0 = {}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_2 = module_0.StackNode(var_4)
    assert stack_node_2.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_3 = module_0.StackNode(var_5)
    assert stack_node_3.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_4 = module_0.StackNode(stack_9)
    assert len(stack_node_4.data) == 0
    stack_node_5 = module_0.StackNode(stack_12)
    assert len(stack_node_5.data) == 0
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    stack_node_7 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.push(none_type_0)
    assert len(stack_13) == 1
    stack_node_8 = module_0.StackNode(var_6)
    stack_node_9 = module_0.StackNode(stack_node_8)
    dict_1 = {}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    float_0 = 712.593
    dict_2 = {float_0: float_0, float_0: float_0}
    var_8 = module_0.check_parenthesis(dict_2)
    assert var_8 is True
    stack_node_10 = module_0.StackNode(float_0)
    module_0.postfix_eval(stack_8)


@pytest.mark.xfail(strict=True)
def test_case_1570():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_1 = module_0.StackNode(none_type_1)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(stack_4)
    assert len(stack_node_6.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_7 = module_0.StackNode(stack_8)
    assert len(stack_node_7.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_9)
    assert len(stack_node_11.data) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_12 = module_0.StackNode(var_7)
    assert stack_node_12.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_8 = stack_12.__len__()
    assert var_8 == 0
    var_9 = stack_12.__len__()
    assert var_9 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_10 = stack_16.__len__()
    assert var_10 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_11 = stack_17.__len__()
    assert var_11 == 0
    stack_node_13 = module_0.StackNode(var_11)
    assert stack_node_13.data == 0
    str_0 = "o2EICU9\x0bp7"
    stack_node_14 = module_0.StackNode(str_0)
    module_0.postfix_eval(var_4)


def test_case_1571():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    with pytest.raises(ValueError):
        stack_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_1572():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_5)
    assert len(stack_node_7.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    bool_0 = False
    stack_node_9 = module_0.StackNode(bool_0)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_10 = module_0.StackNode(var_5)
    assert stack_node_10.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_11 = module_0.StackNode(stack_12)
    assert len(stack_node_11.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_6 = stack_16.__len__()
    assert var_6 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_12 = module_0.StackNode(var_6)
    assert stack_node_12.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    module_0.postfix_eval(stack_1)


@pytest.mark.xfail(strict=True)
def test_case_1573():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_node_3 = module_0.StackNode(stack_node_2)
    complex_0 = -3711.3 - 806.2j
    stack_node_4 = module_0.StackNode(complex_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_node_5 = module_0.StackNode(var_1)
    assert stack_node_5.data == 0
    module_0.postfix_eval(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1574():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.push(none_type_0)
    assert len(stack_7) == 1
    stack_node_3 = module_0.StackNode(var_3)
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_8)
    assert len(stack_node_8.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_9 = module_0.StackNode(var_7)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_node_12 = module_0.StackNode(stack_13)
    assert len(stack_node_12.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_13 = module_0.StackNode(var_7)
    assert stack_node_13.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_8 = stack_16.__len__()
    assert var_8 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_14 = module_0.StackNode(var_8)
    assert stack_node_14.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_15 = module_0.StackNode(stack_16)
    assert len(stack_node_15.data) == 0
    stack_node_16 = module_0.StackNode(stack_19)
    assert len(stack_node_16.data) == 0
    module_0.check_parenthesis(stack_node_2)


@pytest.mark.xfail(strict=True)
def test_case_1575():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_1)
    assert len(stack_node_6.data) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    var_0.push(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1576():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    list_0 = [var_0, var_0, stack_0]
    module_0.postfix_eval(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1577():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_0 = stack_2.__len__()
    assert var_0 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_0)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    bool_0 = True
    stack_node_4 = module_0.StackNode(bool_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_node_5 = module_0.StackNode(var_1)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    dict_0 = {}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    module_0.check_parenthesis(stack_1)


@pytest.mark.xfail(strict=True)
def test_case_1578():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_1)
    assert len(stack_node_5.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.push(none_type_0)
    assert len(stack_4) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_node_7 = module_0.StackNode(stack_8)
    assert len(stack_node_7.data) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_node_8 = module_0.StackNode(stack_8)
    assert len(stack_node_8.data) == 0
    var_1.pop()


def test_case_1579():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    with pytest.raises(ValueError):
        stack_0.peek()


def test_case_1580():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_1 = module_0.check_parenthesis(dict_1)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(float_1)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_2 = stack_0.__len__()
    assert var_2 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    stack_node_3 = module_0.StackNode(stack_2)
    assert len(stack_node_3.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_4 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_node_7 = module_0.StackNode(stack_4)
    assert len(stack_node_7.data) == 0
    var_3 = stack_4.push(none_type_0)
    assert len(stack_4) == 1
    assert len(stack_node_7.data) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    with pytest.raises(ValueError):
        stack_3.pop()


def test_case_1581():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.push(none_type_1)
    assert len(stack_1) == 1
    stack_node_3 = module_0.StackNode(var_0)
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    bool_1 = True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.push(bool_1)
    assert len(stack_5) == 1
    dict_1 = {}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(stack_6)
    assert len(stack_node_7.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_9 = module_0.StackNode(stack_9)
    assert len(stack_node_9.data) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_10 = module_0.StackNode(var_8)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_13)
    assert len(stack_node_13.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_9 = stack_15.__len__()
    assert var_9 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_14 = module_0.StackNode(var_9)
    assert stack_node_14.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_15 = module_0.StackNode(stack_15)
    assert len(stack_node_15.data) == 0
    stack_node_16 = module_0.StackNode(stack_18)
    assert len(stack_node_16.data) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    none_type_2 = None
    stack_node_17 = module_0.StackNode(none_type_2)
    stack_node_18 = module_0.StackNode(stack_19)
    assert len(stack_node_18.data) == 0
    var_10 = stack_19.__len__()
    assert var_10 == 0
    with pytest.raises(ValueError):
        stack_13.peek()


@pytest.mark.xfail(strict=True)
def test_case_1582():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_0 = module_0.StackNode(stack_3)
    assert len(stack_node_0.data) == 0
    str_0 = "o2EICU9\x0bp7"
    stack_node_1 = module_0.StackNode(str_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(var_4)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_7)
    assert len(stack_node_4.data) == 0
    var_2.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1583():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    module_0.postfix_eval(stack_4)


@pytest.mark.xfail(strict=True)
def test_case_1584():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    dict_0 = {}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    stack_node_5 = module_0.StackNode(stack_9)
    assert len(stack_node_5.data) == 0
    var_8 = stack_9.push(var_7)
    assert len(stack_9) == 1
    assert len(stack_node_5.data) == 1
    module_0.postfix_eval(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1585():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_node_4 = module_0.StackNode(bool_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(stack_3)
    assert len(stack_node_7.data) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    bool_1 = True
    stack_node_8 = module_0.StackNode(bool_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_node_9 = module_0.StackNode(stack_9)
    assert len(stack_node_9.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    var_8 = stack_11.__len__()
    assert var_8 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_9 = stack_15.__len__()
    assert var_9 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_11 = module_0.StackNode(var_9)
    assert stack_node_11.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_12 = module_0.StackNode(stack_15)
    assert len(stack_node_12.data) == 0
    stack_node_13 = module_0.StackNode(stack_18)
    assert len(stack_node_13.data) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_10 = stack_19.__len__()
    assert var_10 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_14 = module_0.StackNode(var_10)
    assert stack_node_14.data == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_11 = stack_21.push(stack_23)
    assert len(stack_21) == 1
    var_8.pop()


@pytest.mark.xfail(strict=True)
def test_case_1586():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_node_3 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.push(none_type_0)
    assert len(stack_3) == 1
    stack_node_4 = module_0.StackNode(var_1)
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_4)
    assert len(stack_node_9.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_10 = module_0.StackNode(var_2)
    assert stack_node_10.data == 0
    module_0.postfix_eval(stack_2)


@pytest.mark.xfail(strict=True)
def test_case_1587():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    module_0.check_parenthesis(var_0)


def test_case_1588():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_2 = module_0.StackNode(stack_5)
    assert len(stack_node_2.data) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    with pytest.raises(ValueError):
        stack_3.pop()


@pytest.mark.xfail(strict=True)
def test_case_1589():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_0)
    assert stack_node_4.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_1)
    assert stack_node_5.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_6)
    assert len(stack_node_9.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_10 = module_0.StackNode(var_3)
    assert stack_node_10.data == 0
    int_0 = -460
    stack_node_11 = module_0.StackNode(int_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_12 = module_0.StackNode(var_4)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_node_12)
    stack_node_15 = module_0.StackNode(stack_10)
    assert len(stack_node_15.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_16 = module_0.StackNode(var_5)
    assert stack_node_16.data == 0
    stack_node_17 = module_0.StackNode(stack_node_16)
    stack_node_18 = module_0.StackNode(stack_14)
    assert len(stack_node_18.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_6 = stack_15.__len__()
    assert var_6 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_19 = module_0.StackNode(var_6)
    assert stack_node_19.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_20 = module_0.StackNode(stack_16)
    assert len(stack_node_20.data) == 0
    bool_0 = False
    stack_node_21 = module_0.StackNode(bool_0)
    module_0.postfix_eval(stack_node_6)


def test_case_1590():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    with pytest.raises(ValueError):
        stack_2.peek()


@pytest.mark.xfail(strict=True)
def test_case_1591():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_node_5 = module_0.StackNode(stack_5)
    assert len(stack_node_5.data) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_node_6 = module_0.StackNode(stack_5)
    assert len(stack_node_6.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_7 = module_0.StackNode(complex_0)
    none_type_1 = None
    stack_node_8 = module_0.StackNode(none_type_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_2 = None
    stack_node_9 = module_0.StackNode(none_type_2)
    stack_node_10 = module_0.StackNode(stack_6)
    assert len(stack_node_10.data) == 0
    var_5 = stack_6.push(none_type_1)
    assert len(stack_6) == 1
    assert len(stack_node_10.data) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_3 = None
    stack_node_11 = module_0.StackNode(none_type_3)
    module_0.check_parenthesis(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1592():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_node_1 = module_0.StackNode(none_type_1)
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    dict_0 = {}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_2.__len__()
    assert var_3 == 0
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_5 = module_0.StackNode(float_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_5 = stack_3.__len__()
    assert var_5 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_7 = module_0.StackNode(stack_4)
    assert len(stack_node_7.data) == 0
    module_0.postfix_eval(stack_node_7)


@pytest.mark.xfail(strict=True)
def test_case_1593():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_2)
    assert len(stack_node_3.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    var_0.pop()


def test_case_1594():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_3.__len__()
    assert var_3 == 0
    with pytest.raises(ValueError):
        stack_2.peek()


def test_case_1595():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_node_7 = module_0.StackNode(stack_6)
    assert len(stack_node_7.data) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_9 = module_0.StackNode(stack_9)
    assert len(stack_node_9.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    with pytest.raises(ValueError):
        stack_3.pop()


@pytest.mark.xfail(strict=True)
def test_case_1596():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    var_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_1597():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    stack_node_6 = module_0.StackNode(stack_7)
    assert len(stack_node_6.data) == 0
    var_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_1598():
    bool_0 = True
    module_0.check_parenthesis(bool_0)


def test_case_1599():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_2.push(stack_4)
    assert len(stack_2) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_5)
    assert len(stack_node_4.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_node_7 = module_0.StackNode(stack_10)
    assert len(stack_node_7.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_node_8 = module_0.StackNode(stack_13)
    assert len(stack_node_8.data) == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_6 = module_0.check_parenthesis(str_0)
    assert var_6 is False
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    with pytest.raises(ValueError):
        stack_9.pop()


@pytest.mark.xfail(strict=True)
def test_case_1600():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_0)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_1)
    assert len(stack_node_5.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1601():
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is False
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_2 = module_0.StackNode(float_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_2)
    assert len(stack_node_6.data) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    module_0.check_parenthesis(stack_node_1)


@pytest.mark.xfail(strict=True)
def test_case_1602():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(stack_2)
    assert len(stack_node_0.data) == 0
    var_2 = stack_2.push(var_1)
    assert len(stack_2) == 1
    assert len(stack_node_0.data) == 1
    none_type_0 = None
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.push(none_type_0)
    assert len(stack_3) == 1
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_4)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(stack_4)
    assert len(stack_node_2.data) == 0
    stack_node_3 = module_0.StackNode(stack_7)
    assert len(stack_node_3.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_12.__len__()
    assert var_7 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_5 = module_0.StackNode(var_8)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_13)
    assert len(stack_node_8.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_9 = module_0.StackNode(var_8)
    assert stack_node_9.data == 0
    bool_0 = False
    stack_node_10 = module_0.StackNode(bool_0)
    stack_node_11 = module_0.StackNode(bool_0)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_9 = stack_16.__len__()
    assert var_9 == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_10 = stack_17.__len__()
    assert var_10 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_13 = module_0.StackNode(var_10)
    assert stack_node_13.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_11 = stack_19.push(stack_21)
    assert len(stack_19) == 1
    module_0.check_parenthesis(stack_14)


@pytest.mark.xfail(strict=True)
def test_case_1603():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(stack_2)
    assert len(stack_node_0.data) == 0
    var_2 = stack_2.push(var_1)
    assert len(stack_2) == 1
    assert len(stack_node_0.data) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_2 = module_0.StackNode(var_4)
    assert stack_node_2.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(stack_7)
    assert len(stack_node_3.data) == 0
    bool_0 = True
    stack_node_4 = module_0.StackNode(bool_0)
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_5 = module_0.check_parenthesis(str_0)
    assert var_5 is False
    module_0.postfix_eval(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1604():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_node_6 = module_0.StackNode(stack_2)
    assert len(stack_node_6.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_3 = module_0.check_parenthesis(str_0)
    assert var_3 is False
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_1 = None
    stack_node_10 = module_0.StackNode(none_type_1)
    stack_node_11 = module_0.StackNode(stack_6)
    assert len(stack_node_11.data) == 0
    module_0.postfix_eval(stack_5)


def test_case_1605():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(tuple_1)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    with pytest.raises(ValueError):
        stack_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1606():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    module_0.check_parenthesis(stack_node_2)


@pytest.mark.xfail(strict=True)
def test_case_1607():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    none_type_0 = None
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.push(none_type_0)
    assert len(stack_2) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_4.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_5 = module_0.StackNode(var_6)
    assert stack_node_5.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    stack_node_7 = module_0.StackNode(bool_0)
    bool_1 = False
    stack_node_8 = module_0.StackNode(bool_1)
    module_0.check_parenthesis(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1608():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    var_3 = stack_3.push(var_2)
    assert len(stack_3) == 1
    assert len(stack_node_2.data) == 1
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_4)
    assert len(stack_node_6.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    str_0 = "o2EICU9\x0bp7"
    stack_node_8 = module_0.StackNode(str_0)
    bool_0 = True
    stack_node_9 = module_0.StackNode(bool_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_8 = stack_15.__len__()
    assert var_8 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_11 = module_0.StackNode(var_8)
    assert stack_node_11.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_12 = module_0.StackNode(stack_15)
    assert len(stack_node_12.data) == 0
    none_type_0 = None
    stack_node_13 = module_0.StackNode(none_type_0)
    bool_1 = False
    stack_node_14 = module_0.StackNode(bool_1)
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_9 = stack_19.__len__()
    assert var_9 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_15 = module_0.StackNode(var_9)
    assert stack_node_15.data == 0
    stack_node_16 = module_0.StackNode(stack_node_15)
    stack_node_17 = module_0.StackNode(stack_node_15)
    stack_node_18 = module_0.StackNode(stack_19)
    assert len(stack_node_18.data) == 0
    var_10 = stack_20.__len__()
    assert var_10 == 0
    var_11 = stack_19.push(stack_node_17)
    assert len(stack_19) == 1
    assert len(stack_node_18.data) == 1
    var_1.__len__()


def test_case_1609():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_5)
    assert len(stack_node_3.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_node_5 = module_0.StackNode(stack_6)
    assert len(stack_node_5.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    with pytest.raises(ValueError):
        stack_10.pop()


def test_case_1610():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1611():
    bool_0 = True
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    module_0.postfix_eval(stack_4)


@pytest.mark.xfail(strict=True)
def test_case_1612():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_0.__len__()
    assert var_2 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_3 = stack_1.__len__()
    assert var_3 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2.peek()


@pytest.mark.xfail(strict=True)
def test_case_1613():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_6)
    assert len(stack_node_8.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_9 = module_0.StackNode(var_3)
    assert stack_node_9.data == 0
    bool_1 = False
    stack_node_10 = module_0.StackNode(bool_1)
    stack_node_11 = module_0.StackNode(bool_1)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_12 = module_0.StackNode(var_4)
    assert stack_node_12.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_7 = stack_16.__len__()
    assert var_7 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_8 = module_0.check_parenthesis(dict_0)
    assert var_8 is True
    stack_node_13 = module_0.StackNode(stack_18)
    assert len(stack_node_13.data) == 0
    var_9 = stack_18.push(var_8)
    assert len(stack_18) == 1
    assert len(stack_node_13.data) == 1
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_10 = stack_19.__len__()
    assert var_10 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_14 = module_0.StackNode(var_10)
    assert stack_node_14.data == 0
    stack_node_15 = module_0.StackNode(stack_node_14)
    stack_node_16 = module_0.StackNode(stack_node_14)
    stack_node_17 = module_0.StackNode(stack_19)
    assert len(stack_node_17.data) == 0
    bool_2 = False
    stack_node_18 = module_0.StackNode(bool_2)
    stack_node_19 = module_0.StackNode(bool_2)
    none_type_0 = None
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_11 = stack_21.push(none_type_0)
    assert len(stack_21) == 1
    stack_node_20 = module_0.StackNode(var_11)
    var_10.peek()


@pytest.mark.xfail(strict=True)
def test_case_1614():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1615():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_4)
    assert stack_node_1.data == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_2 = module_0.StackNode(complex_0)
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_node_4 = module_0.StackNode(bool_0)
    var_1.push(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1616():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    bool_0 = True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.push(bool_0)
    assert len(stack_4) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(stack_5)
    assert len(stack_node_3.data) == 0
    stack_node_4 = module_0.StackNode(stack_7)
    assert len(stack_node_4.data) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    int_0 = -460
    stack_node_7 = module_0.StackNode(int_0)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_9 = module_0.StackNode(stack_12)
    assert len(stack_node_9.data) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    none_type_1 = None
    stack_node_10 = module_0.StackNode(none_type_1)
    stack_node_11 = module_0.StackNode(stack_16)
    assert len(stack_node_11.data) == 0
    var_7 = stack_16.__len__()
    assert var_7 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_8 = stack_17.__len__()
    assert var_8 == 0
    stack_node_12 = module_0.StackNode(var_8)
    assert stack_node_12.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_9 = stack_18.__len__()
    assert var_9 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_13 = module_0.StackNode(var_9)
    assert stack_node_13.data == 0
    stack_node_14 = module_0.StackNode(stack_node_13)
    stack_node_15 = module_0.StackNode(stack_node_13)
    module_0.check_parenthesis(stack_12)


@pytest.mark.xfail(strict=True)
def test_case_1617():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    module_0.postfix_eval(stack_node_5)


@pytest.mark.xfail(strict=True)
def test_case_1618():
    int_0 = -460
    stack_node_0 = module_0.StackNode(int_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    complex_0 = -3711.3 - 806.2j
    stack_node_5 = module_0.StackNode(complex_0)
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_2 = None
    stack_node_7 = module_0.StackNode(none_type_2)
    stack_node_8 = module_0.StackNode(stack_3)
    assert len(stack_node_8.data) == 0
    var_1 = stack_3.push(none_type_1)
    assert len(stack_3) == 1
    assert len(stack_node_8.data) == 1
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_9 = module_0.StackNode(var_2)
    assert stack_node_9.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_10 = module_0.StackNode(stack_4)
    assert len(stack_node_10.data) == 0
    complex_1 = -3711.3 - 806.2j
    stack_node_11 = module_0.StackNode(complex_1)
    none_type_3 = None
    stack_node_12 = module_0.StackNode(none_type_3)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_13 = module_0.StackNode(var_4)
    assert stack_node_13.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_14 = module_0.StackNode(var_6)
    assert stack_node_14.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_15 = module_0.StackNode(stack_13)
    assert len(stack_node_15.data) == 0
    bool_0 = False
    stack_node_16 = module_0.StackNode(bool_0)
    var_4.pop()


@pytest.mark.xfail(strict=True)
def test_case_1619():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(stack_5)
    assert len(stack_node_4.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_node_6 = module_0.StackNode(stack_9)
    assert len(stack_node_6.data) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_node_7 = module_0.StackNode(stack_9)
    assert len(stack_node_7.data) == 0
    bool_0 = True
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.push(bool_0)
    assert len(stack_10) == 1
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    stack_node_9 = module_0.StackNode(float_0)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_10 = module_0.StackNode(var_7)
    assert stack_node_10.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    bool_1 = False
    stack_node_11 = module_0.StackNode(bool_1)
    stack_node_12 = module_0.StackNode(bool_1)
    none_type_1 = None
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_8 = stack_17.push(none_type_1)
    assert len(stack_17) == 1
    stack_node_13 = module_0.StackNode(var_8)
    stack_node_14 = module_0.StackNode(stack_node_13)
    list_0 = [var_2, stack_5, stack_6, stack_node_13]
    module_0.postfix_eval(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1620():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_node_6 = module_0.StackNode(stack_4)
    assert len(stack_node_6.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_5)
    assert len(stack_node_10.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_11 = module_0.StackNode(var_3)
    assert stack_node_11.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_12 = module_0.StackNode(var_4)
    assert stack_node_12.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    bool_1 = False
    stack_node_13 = module_0.StackNode(bool_1)
    stack_node_14 = module_0.StackNode(bool_1)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_15 = module_0.StackNode(var_7)
    assert stack_node_15.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_8 = stack_18.__len__()
    assert var_8 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_16 = module_0.StackNode(var_8)
    assert stack_node_16.data == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_17 = module_0.StackNode(stack_19)
    assert len(stack_node_17.data) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_9 = stack_21.__len__()
    assert var_9 == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_18 = module_0.StackNode(var_9)
    assert stack_node_18.data == 0
    stack_node_19 = module_0.StackNode(stack_node_18)
    stack_node_20 = module_0.StackNode(stack_node_18)
    module_0.postfix_eval(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1621():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_7 = module_0.StackNode(stack_8)
    assert len(stack_node_7.data) == 0
    bool_0 = False
    stack_node_8 = module_0.StackNode(bool_0)
    stack_node_9 = module_0.StackNode(bool_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    bool_1 = False
    stack_node_11 = module_0.StackNode(bool_1)
    complex_0 = -3711.3 - 806.2j
    stack_node_12 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_13 = module_0.StackNode(none_type_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_1 = None
    stack_node_14 = module_0.StackNode(none_type_1)
    stack_node_15 = module_0.StackNode(stack_11)
    assert len(stack_node_15.data) == 0
    var_5 = stack_11.push(none_type_0)
    assert len(stack_11) == 1
    assert len(stack_node_15.data) == 1
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    module_0.check_parenthesis(var_5)


@pytest.mark.xfail(strict=True)
def test_case_1622():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_2.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1623():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_5)
    assert len(stack_node_8.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_10 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_11 = module_0.StackNode(none_type_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_1 = None
    stack_node_12 = module_0.StackNode(none_type_1)
    stack_node_13 = module_0.StackNode(stack_11)
    assert len(stack_node_13.data) == 0
    var_5 = stack_11.push(none_type_0)
    assert len(stack_11) == 1
    assert len(stack_node_13.data) == 1
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_14 = module_0.StackNode(var_6)
    assert stack_node_14.data == 0
    stack_node_15 = module_0.StackNode(stack_node_14)
    module_0.postfix_eval(stack_node_2)


def test_case_1624():
    pass


def test_case_1625():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(stack_2)
    assert len(stack_node_0.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    stack_node_3 = module_0.StackNode(stack_6)
    assert len(stack_node_3.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_9.push(stack_11)
    assert len(stack_9) == 1
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_12)
    assert len(stack_node_8.data) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    none_type_0 = None
    stack_node_9 = module_0.StackNode(none_type_0)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_10 = module_0.StackNode(var_7)
    assert stack_node_10.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_8 = stack_15.__len__()
    assert var_8 == 0
    var_9 = stack_15.__len__()
    assert var_9 == 0
    with pytest.raises(ValueError):
        stack_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1626():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.push(tuple_1)
    assert len(stack_1) == 1
    bool_1 = True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.push(bool_1)
    assert len(stack_2) == 1
    set_1 = {bool_0, stack_1, stack_node_1}
    module_0.postfix_eval(set_1)


@pytest.mark.xfail(strict=True)
def test_case_1627():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is False
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    var_4 = stack_2.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_5 = module_0.StackNode(var_6)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_12.__len__()
    assert var_7 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_9 = module_0.StackNode(var_8)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_node_12 = module_0.StackNode(stack_13)
    assert len(stack_node_12.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_13 = module_0.StackNode(var_8)
    assert stack_node_13.data == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_14 = module_0.StackNode(complex_0)
    none_type_1 = None
    stack_node_15 = module_0.StackNode(none_type_1)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    none_type_2 = None
    stack_node_16 = module_0.StackNode(none_type_2)
    stack_node_17 = module_0.StackNode(stack_16)
    assert len(stack_node_17.data) == 0
    var_9 = stack_16.push(none_type_1)
    assert len(stack_16) == 1
    assert len(stack_node_17.data) == 1
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_10 = stack_17.__len__()
    assert var_10 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_18 = module_0.StackNode(var_10)
    assert stack_node_18.data == 0
    stack_node_19 = module_0.StackNode(stack_node_18)
    stack_node_20 = module_0.StackNode(stack_node_18)
    stack_node_21 = module_0.StackNode(stack_17)
    assert len(stack_node_21.data) == 0
    var_11 = stack_18.__len__()
    assert var_11 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_12 = module_0.check_parenthesis(dict_0)
    assert var_12 is True
    stack_node_22 = module_0.StackNode(float_0)
    module_0.check_parenthesis(var_11)


@pytest.mark.xfail(strict=True)
def test_case_1628():
    none_type_0 = None
    module_0.postfix_eval(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1629():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    dict_0 = {}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    bool_1 = True
    stack_node_6 = module_0.StackNode(bool_1)
    bool_2 = False
    stack_node_7 = module_0.StackNode(bool_2)
    none_type_2 = None
    stack_node_8 = module_0.StackNode(none_type_2)
    bool_3 = False
    stack_node_9 = module_0.StackNode(bool_3)
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_10 = module_0.StackNode(float_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    module_0.postfix_eval(stack_node_0)


@pytest.mark.xfail(strict=True)
def test_case_1630():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    dict_1 = {}
    var_1 = module_0.check_parenthesis(dict_1)
    assert var_1 is True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    float_1 = 712.593
    dict_2 = {float_1: float_1, float_1: float_1}
    var_3 = module_0.check_parenthesis(dict_2)
    assert var_3 is True
    stack_node_5 = module_0.StackNode(float_1)
    bool_1 = True
    stack_node_6 = module_0.StackNode(bool_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_5.push(stack_7)
    assert len(stack_5) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    module_0.postfix_eval(stack_node_1)


@pytest.mark.xfail(strict=True)
def test_case_1631():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    module_0.check_parenthesis(stack_0)


@pytest.mark.xfail(strict=True)
def test_case_1632():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(stack_6)
    assert len(stack_node_4.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_node_6 = module_0.StackNode(stack_7)
    assert len(stack_node_6.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.__len__()
    assert var_2 == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    none_type_1 = None
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_6 = stack_14.push(none_type_1)
    assert len(stack_14) == 1
    module_0.check_parenthesis(stack_13)


@pytest.mark.xfail(strict=True)
def test_case_1633():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_5 = module_0.StackNode(float_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    var_6 = stack_5.__len__()
    assert var_6 == 0
    bool_1 = True
    stack_node_7 = module_0.StackNode(bool_1)
    bool_2 = False
    stack_node_8 = module_0.StackNode(bool_2)
    stack_node_9 = module_0.StackNode(bool_2)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_7 = stack_7.__len__()
    assert var_7 == 0
    var_5.push(stack_node_8)


@pytest.mark.xfail(strict=True)
def test_case_1634():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_7.__len__()
    assert var_4 == 0
    bool_1 = False
    stack_node_6 = module_0.StackNode(bool_1)
    stack_node_7 = module_0.StackNode(bool_1)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_10)
    assert len(stack_node_11.data) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_8 = stack_12.__len__()
    assert var_8 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_12 = module_0.StackNode(var_8)
    assert stack_node_12.data == 0
    dict_2 = {}
    var_9 = module_0.check_parenthesis(dict_2)
    assert var_9 is True
    var_10 = stack_13.__len__()
    assert var_10 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_11 = stack_14.__len__()
    assert var_11 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_13 = module_0.StackNode(var_11)
    assert stack_node_13.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_14 = module_0.StackNode(stack_14)
    assert len(stack_node_14.data) == 0
    module_0.check_parenthesis(var_9)


@pytest.mark.xfail(strict=True)
def test_case_1635():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    complex_0 = -3711.3 - 806.2j
    stack_node_1 = module_0.StackNode(complex_0)
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_2 = None
    stack_node_3 = module_0.StackNode(none_type_2)
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    var_0 = stack_1.push(none_type_1)
    assert len(stack_1) == 1
    assert len(stack_node_4.data) == 1
    module_0.postfix_eval(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1636():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    bool_1 = False
    stack_node_5 = module_0.StackNode(bool_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_7 = module_0.StackNode(stack_9)
    assert len(stack_node_7.data) == 0
    var_5 = stack_9.push(var_4)
    assert len(stack_9) == 1
    assert len(stack_node_7.data) == 1
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    none_type_2 = None
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_8 = stack_15.push(none_type_2)
    assert len(stack_15) == 1
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_9 = stack_16.__len__()
    assert var_9 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    int_0 = -460
    stack_node_9 = module_0.StackNode(int_0)
    module_0.check_parenthesis(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1637():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)
    str_0 = "o2EICU9\x0bp7"
    stack_node_3 = module_0.StackNode(str_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_4 = module_0.StackNode(stack_3)
    assert len(stack_node_4.data) == 0
    var_3 = stack_3.push(var_2)
    assert len(stack_3) == 1
    assert len(stack_node_4.data) == 1
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_4)
    assert len(stack_node_8.data) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    bool_1 = False
    stack_node_9 = module_0.StackNode(bool_1)
    stack_node_10 = module_0.StackNode(bool_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_6 = stack_6.__len__()
    assert var_6 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_11 = module_0.StackNode(var_6)
    assert stack_node_11.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_12 = module_0.StackNode(stack_6)
    assert len(stack_node_12.data) == 0
    stack_node_13 = module_0.StackNode(stack_9)
    assert len(stack_node_13.data) == 0
    bool_2 = False
    set_0 = {bool_2, bool_2, bool_2, bool_2}
    tuple_0 = (bool_2, bool_2)
    str_1 = "B@kK%+yXf"
    tuple_1 = (bool_2, set_0, tuple_0, str_1)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.push(tuple_1)
    assert len(stack_10) == 1
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_8 = stack_11.__len__()
    assert var_8 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_14 = module_0.StackNode(var_8)
    assert stack_node_14.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_15 = module_0.StackNode(stack_11)
    assert len(stack_node_15.data) == 0
    none_type_1 = None
    stack_node_16 = module_0.StackNode(none_type_1)
    module_0.check_parenthesis(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1638():
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is False
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_node_0 = module_0.StackNode(stack_0)
    assert len(stack_node_0.data) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_1 = module_0.StackNode(float_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    module_0.postfix_eval(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1639():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_1 = module_0.StackNode(stack_2)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    dict_1 = {}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(var_5)
    assert stack_node_3.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    float_1 = 712.593
    dict_2 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_2)
    assert var_6 is True
    var_7 = stack_6.__len__()
    assert var_7 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_8 = stack_8.__len__()
    assert var_8 == 0
    stack_node_4 = module_0.StackNode(var_8)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_9 = stack_9.__len__()
    assert var_9 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_6 = module_0.StackNode(var_9)
    assert stack_node_6.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_7 = module_0.StackNode(stack_9)
    assert len(stack_node_7.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_10 = stack_13.__len__()
    assert var_10 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_8 = module_0.StackNode(var_10)
    assert stack_node_8.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_9 = module_0.StackNode(stack_14)
    assert len(stack_node_9.data) == 0
    none_type_1 = None
    stack_node_10 = module_0.StackNode(none_type_1)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_11 = stack_16.__len__()
    assert var_11 == 0
    bool_0 = False
    stack_node_11 = module_0.StackNode(bool_0)
    none_type_2 = None
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_12 = stack_17.push(none_type_2)
    assert len(stack_17) == 1
    module_0.postfix_eval(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1640():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_0)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_5)
    assert len(stack_node_6.data) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    bool_0 = False
    stack_node_7 = module_0.StackNode(bool_0)
    stack_node_8 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.push(none_type_1)
    assert len(stack_7) == 1
    stack_node_9 = module_0.StackNode(var_3)
    bool_1 = True
    stack_node_10 = module_0.StackNode(bool_1)
    module_0.postfix_eval(stack_2)


@pytest.mark.xfail(strict=True)
def test_case_1641():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_2 = module_0.StackNode(var_0)
    assert stack_node_2.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_5 = module_0.StackNode(stack_7)
    assert len(stack_node_5.data) == 0
    var_3 = stack_7.push(var_2)
    assert len(stack_7) == 1
    assert len(stack_node_5.data) == 1
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    bool_1 = False
    stack_node_7 = module_0.StackNode(bool_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    int_0 = -460
    stack_node_8 = module_0.StackNode(int_0)
    var_3.peek()


@pytest.mark.xfail(strict=True)
def test_case_1642():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    module_0.check_parenthesis(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1643():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_3)
    assert len(stack_node_6.data) == 0
    none_type_0 = None
    module_0.postfix_eval(none_type_0)


def test_case_1644():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_7 = module_0.StackNode(stack_7)
    assert len(stack_node_7.data) == 0
    stack_node_8 = module_0.StackNode(stack_10)
    assert len(stack_node_8.data) == 0
    bool_0 = False
    stack_node_9 = module_0.StackNode(bool_0)
    stack_node_10 = module_0.StackNode(bool_0)
    bool_1 = False
    set_0 = {bool_1, bool_1, bool_1, bool_1}
    tuple_0 = (bool_1, bool_1)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_1, set_0, tuple_0, str_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_3 = stack_11.push(tuple_1)
    assert len(stack_11) == 1
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_0 = None
    stack_node_11 = module_0.StackNode(none_type_0)
    int_0 = -460
    stack_node_12 = module_0.StackNode(int_0)
    bool_2 = True
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_4 = stack_13.push(bool_2)
    assert len(stack_13) == 1
    with pytest.raises(ValueError):
        stack_8.peek()


def test_case_1645():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_1)
    assert len(stack_node_5.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(stack_5)
    assert len(stack_node_7.data) == 0
    stack_node_8 = module_0.StackNode(stack_7)
    assert len(stack_node_8.data) == 0
    bool_0 = False
    stack_node_9 = module_0.StackNode(bool_0)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    stack_node_10 = module_0.StackNode(float_1)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    bool_1 = False
    set_0 = {bool_1, bool_1, bool_1, bool_1}
    tuple_0 = (bool_1, bool_1)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_1, set_0, tuple_0, str_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.push(tuple_1)
    assert len(stack_10) == 1
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    with pytest.raises(ValueError):
        stack_1.peek()


@pytest.mark.xfail(strict=True)
def test_case_1646():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_0)
    assert stack_node_4.data == 0
    module_0.check_parenthesis(stack_node_1)


@pytest.mark.xfail(strict=True)
def test_case_1647():
    bool_0 = True
    stack_node_0 = module_0.StackNode(bool_0)
    complex_0 = -3711.3 - 806.2j
    stack_node_1 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_node_4 = module_0.StackNode(stack_0)
    assert len(stack_node_4.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_4.data) == 1
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_5 = module_0.StackNode(float_0)
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1648():
    str_0 = "o2EICU9\x0bp7"
    stack_node_0 = module_0.StackNode(str_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_2 = module_0.StackNode(var_0)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_0)
    assert len(stack_node_5.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_6 = module_0.StackNode(var_1)
    assert stack_node_6.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    str_1 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_3 = module_0.check_parenthesis(str_1)
    assert var_3 is False
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    stack_node_8 = module_0.StackNode(stack_8)
    assert len(stack_node_8.data) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_node_12 = module_0.StackNode(stack_9)
    assert len(stack_node_12.data) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_13 = module_0.StackNode(complex_0)
    none_type_2 = None
    stack_node_14 = module_0.StackNode(none_type_2)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_3 = None
    stack_node_15 = module_0.StackNode(none_type_3)
    stack_node_16 = module_0.StackNode(stack_11)
    assert len(stack_node_16.data) == 0
    var_7 = stack_11.push(none_type_2)
    assert len(stack_11) == 1
    assert len(stack_node_16.data) == 1
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_8 = stack_12.__len__()
    assert var_8 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_17 = module_0.StackNode(var_8)
    assert stack_node_17.data == 0
    dict_0 = {}
    var_9 = module_0.check_parenthesis(dict_0)
    assert var_9 is True
    var_10 = stack_13.__len__()
    assert var_10 == 0
    var_9.pop()


@pytest.mark.xfail(strict=True)
def test_case_1649():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(var_4)
    assert stack_node_2.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_8.push(stack_10)
    assert len(stack_8) == 1
    bool_0 = True
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.push(bool_0)
    assert len(stack_11) == 1
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_12.__len__()
    assert var_7 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_3 = module_0.StackNode(var_7)
    assert stack_node_3.data == 0
    dict_0 = {}
    var_8 = module_0.check_parenthesis(dict_0)
    assert var_8 is True
    var_9 = stack_13.__len__()
    assert var_9 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_10 = stack_14.__len__()
    assert var_10 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_4 = module_0.StackNode(var_10)
    assert stack_node_4.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    module_0.check_parenthesis(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1650():
    none_type_0 = None
    module_0.postfix_eval(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1651():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    module_0.check_parenthesis(stack_0)


def test_case_1652():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    complex_0 = -3711.3 - 806.2j
    stack_node_2 = module_0.StackNode(complex_0)
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_2 = None
    stack_node_4 = module_0.StackNode(none_type_2)
    stack_node_5 = module_0.StackNode(stack_5)
    assert len(stack_node_5.data) == 0
    var_2 = stack_5.push(none_type_1)
    assert len(stack_5) == 1
    assert len(stack_node_5.data) == 1
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(stack_7)
    assert len(stack_node_7.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_10 = module_0.StackNode(var_5)
    assert stack_node_10.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_11 = module_0.StackNode(var_6)
    assert stack_node_11.data == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_7 = module_0.check_parenthesis(str_0)
    assert var_7 is False
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_8 = stack_16.__len__()
    assert var_8 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_12 = module_0.StackNode(var_8)
    assert stack_node_12.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_13 = module_0.StackNode(stack_16)
    assert len(stack_node_13.data) == 0
    stack_node_14 = module_0.StackNode(stack_18)
    assert len(stack_node_14.data) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_9 = stack_20.__len__()
    assert var_9 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_15 = module_0.StackNode(var_9)
    assert stack_node_15.data == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    with pytest.raises(ValueError):
        stack_21.peek()


@pytest.mark.xfail(strict=True)
def test_case_1653():
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is False
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    var_1.__len__()


def test_case_1654():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_2 = module_0.StackNode(float_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_7 = module_0.StackNode(stack_8)
    assert len(stack_node_7.data) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_8 = stack_12.__len__()
    assert var_8 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_8 = module_0.StackNode(var_8)
    assert stack_node_8.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_9 = stack_13.__len__()
    assert var_9 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_10 = stack_17.__len__()
    assert var_10 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    with pytest.raises(ValueError):
        stack_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1655():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.push(none_type_0)
    assert len(stack_6) == 1
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    bool_1 = False
    stack_node_5 = module_0.StackNode(bool_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_8)
    assert len(stack_node_9.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_2 = None
    stack_node_10 = module_0.StackNode(none_type_2)
    stack_node_11 = module_0.StackNode(stack_10)
    assert len(stack_node_11.data) == 0
    module_0.check_parenthesis(bool_0)


def test_case_1656():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    with pytest.raises(ValueError):
        stack_0.pop()


def test_case_1657():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_node_5 = module_0.StackNode(stack_5)
    assert len(stack_node_5.data) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_node_6 = module_0.StackNode(stack_5)
    assert len(stack_node_6.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_6)
    assert len(stack_node_10.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_11 = module_0.StackNode(var_3)
    assert stack_node_11.data == 0
    bool_1 = False
    stack_node_12 = module_0.StackNode(bool_1)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_13 = module_0.StackNode(float_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    with pytest.raises(ValueError):
        stack_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_1658():
    set_0 = set()
    module_0.postfix_eval(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1659():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    str_0 = "o2EICU9\x0bp7"
    stack_node_6 = module_0.StackNode(str_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_8 = module_0.StackNode(var_7)
    assert stack_node_8.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_9 = module_0.StackNode(stack_10)
    assert len(stack_node_9.data) == 0
    stack_node_10 = module_0.StackNode(stack_12)
    assert len(stack_node_10.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    stack_node_11 = module_0.StackNode(var_8)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    var_3.pop()


@pytest.mark.xfail(strict=True)
def test_case_1660():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_3 = module_0.StackNode(float_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_node_6 = module_0.StackNode(stack_4)
    assert len(stack_node_6.data) == 0
    bool_0 = True
    stack_node_7 = module_0.StackNode(bool_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    module_0.postfix_eval(stack_0)


@pytest.mark.xfail(strict=True)
def test_case_1661():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    dict_0 = {}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(stack_3)
    assert len(stack_node_3.data) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_node_5 = module_0.StackNode(stack_7)
    assert len(stack_node_5.data) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    bool_1 = False
    stack_node_6 = module_0.StackNode(bool_1)
    bool_2 = False
    stack_node_7 = module_0.StackNode(bool_2)
    stack_node_8 = module_0.StackNode(bool_2)
    none_type_1 = None
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.push(none_type_1)
    assert len(stack_8) == 1
    stack_node_9 = module_0.StackNode(var_6)
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_7 = stack_9.__len__()
    assert var_7 == 0
    stack_node_11 = module_0.StackNode(var_7)
    assert stack_node_11.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_12 = module_0.StackNode(stack_10)
    assert len(stack_node_12.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_8 = stack_11.__len__()
    assert var_8 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_13 = module_0.StackNode(var_8)
    assert stack_node_13.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_14 = module_0.StackNode(stack_11)
    assert len(stack_node_14.data) == 0
    var_0.push(stack_2)


@pytest.mark.xfail(strict=True)
def test_case_1662():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_0)
    assert stack_node_4.data == 0
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_node_6 = module_0.StackNode(bool_0)
    bool_1 = False
    stack_node_7 = module_0.StackNode(bool_1)
    stack_node_8 = module_0.StackNode(bool_1)
    none_type_0 = None
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.push(none_type_0)
    assert len(stack_3) == 1
    stack_node_9 = module_0.StackNode(var_1)
    tuple_0 = (stack_2, stack_node_3, stack_node_6)
    module_0.postfix_eval(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1663():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    str_0 = "o2EICU9\x0bp7"
    stack_node_0 = module_0.StackNode(str_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_1 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.push(tuple_1)
    assert len(stack_2) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(stack_3)
    assert len(stack_node_4.data) == 0
    stack_node_5 = module_0.StackNode(stack_6)
    assert len(stack_node_5.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_10)
    assert len(stack_node_9.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_2 = None
    stack_node_10 = module_0.StackNode(none_type_2)
    stack_node_11 = module_0.StackNode(stack_12)
    assert len(stack_node_11.data) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    str_2 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_7 = module_0.check_parenthesis(str_2)
    assert var_7 is False
    stack_node_12 = module_0.StackNode(var_7)
    assert stack_node_12.data is False
    var_4.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1664():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(stack_2)
    assert len(stack_node_0.data) == 0
    var_2 = stack_2.push(var_1)
    assert len(stack_2) == 1
    assert len(stack_node_0.data) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3.push(stack_node_0)


@pytest.mark.xfail(strict=True)
def test_case_1665():
    bool_0 = False
    module_0.check_parenthesis(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1666():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    module_0.check_parenthesis(stack_node_0)


@pytest.mark.xfail(strict=True)
def test_case_1667():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_5)
    assert len(stack_node_4.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_6 = module_0.StackNode(stack_8)
    assert len(stack_node_6.data) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_7 = module_0.check_parenthesis(dict_0)
    assert var_7 is True
    bool_0 = False
    stack_node_8 = module_0.StackNode(bool_0)
    stack_node_9 = module_0.StackNode(bool_0)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_9 = stack_15.__len__()
    assert var_9 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_11 = module_0.StackNode(var_9)
    assert stack_node_11.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_10 = stack_18.__len__()
    assert var_10 == 0
    bool_1 = False
    stack_node_12 = module_0.StackNode(bool_1)
    stack_node_13 = module_0.StackNode(bool_1)
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_11 = stack_19.__len__()
    assert var_11 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_12 = stack_21.__len__()
    assert var_12 == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_14 = module_0.StackNode(var_12)
    assert stack_node_14.data == 0
    stack_node_15 = module_0.StackNode(stack_node_14)
    stack_node_16 = module_0.StackNode(stack_node_14)
    stack_node_17 = module_0.StackNode(stack_21)
    assert len(stack_node_17.data) == 0
    var_13 = stack_22.__len__()
    assert var_13 == 0
    var_14 = stack_21.push(stack_node_16)
    assert len(stack_21) == 1
    assert len(stack_node_17.data) == 1
    var_11.__len__()


def test_case_1668():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    int_0 = -460
    stack_node_2 = module_0.StackNode(int_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(stack_5)
    assert len(stack_node_3.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_3 = stack_11.__len__()
    assert var_3 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    stack_node_7 = module_0.StackNode(bool_0)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_6 = stack_16.__len__()
    assert var_6 == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    none_type_1 = None
    stack_node_9 = module_0.StackNode(none_type_1)
    stack_node_10 = module_0.StackNode(stack_17)
    assert len(stack_node_10.data) == 0
    var_7 = stack_17.__len__()
    assert var_7 == 0
    stack_node_11 = module_0.StackNode(stack_17)
    assert len(stack_node_11.data) == 0
    dict_0 = {}
    var_8 = module_0.check_parenthesis(dict_0)
    assert var_8 is True
    complex_0 = -3711.3 - 806.2j
    stack_node_12 = module_0.StackNode(complex_0)
    with pytest.raises(ValueError):
        stack_11.pop()


@pytest.mark.xfail(strict=True)
def test_case_1669():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    dict_0 = {}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    module_0.postfix_eval(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1670():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_3.__len__()
    assert var_3 == 0
    module_0.check_parenthesis(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1671():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    none_type_2 = None
    stack_node_5 = module_0.StackNode(none_type_2)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    var_4 = stack_4.__len__()
    assert var_4 == 0
    var_2.__len__()


def test_case_1672():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_5)
    assert len(stack_node_3.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_8.push(stack_10)
    assert len(stack_8) == 1
    with pytest.raises(ValueError):
        stack_4.peek()


@pytest.mark.xfail(strict=True)
def test_case_1673():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_3.push(stack_5)
    assert len(stack_3) == 1
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_6 = module_0.StackNode(stack_6)
    assert len(stack_node_6.data) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_8 = module_0.StackNode(stack_14)
    assert len(stack_node_8.data) == 0
    bool_1 = False
    set_0 = {bool_1, bool_1, bool_1, bool_1}
    tuple_0 = (bool_1, bool_1)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_1, set_0, tuple_0, str_0)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_7 = stack_15.push(tuple_1)
    assert len(stack_15) == 1
    module_0.postfix_eval(stack_node_1)


@pytest.mark.xfail(strict=True)
def test_case_1674():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    module_0.postfix_eval(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1675():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    var_3 = stack_1.push(stack_node_3)
    assert len(stack_1) == 1
    assert len(stack_node_4.data) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_3)
    assert len(stack_node_8.data) == 0
    module_0.postfix_eval(stack_node_6)


@pytest.mark.xfail(strict=True)
def test_case_1676():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(stack_5)
    assert len(stack_node_3.data) == 0
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.__len__()
    assert var_2 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_node_7 = module_0.StackNode(stack_13)
    assert len(stack_node_7.data) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_node_8 = module_0.StackNode(stack_13)
    assert len(stack_node_8.data) == 0
    var_0.pop()


def test_case_1677():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_2)
    assert len(stack_node_6.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    with pytest.raises(ValueError):
        stack_2.peek()


@pytest.mark.xfail(strict=True)
def test_case_1678():
    none_type_0 = None
    module_0.postfix_eval(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1679():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(stack_4)
    assert len(stack_node_3.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(stack_5)
    assert len(stack_node_5.data) == 0
    stack_node_6 = module_0.StackNode(stack_7)
    assert len(stack_node_6.data) == 0
    none_type_0 = None
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_2 = stack_9.push(none_type_0)
    assert len(stack_9) == 1
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_8 = module_0.StackNode(stack_10)
    assert len(stack_node_8.data) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    var_2.peek()


@pytest.mark.xfail(strict=True)
def test_case_1680():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_1 = module_0.StackNode(none_type_1)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    none_type_2 = None
    stack_node_4 = module_0.StackNode(none_type_2)
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    bool_1 = True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.push(bool_1)
    assert len(stack_3) == 1
    stack_node_6 = module_0.StackNode(var_2)
    bool_2 = False
    stack_node_7 = module_0.StackNode(bool_2)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_3 = None
    stack_node_8 = module_0.StackNode(none_type_3)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_9 = module_0.StackNode(var_3)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_node_12 = module_0.StackNode(stack_5)
    assert len(stack_node_12.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    bool_3 = False
    stack_node_13 = module_0.StackNode(bool_3)
    stack_node_14 = module_0.StackNode(bool_3)
    none_type_4 = None
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.push(none_type_4)
    assert len(stack_8) == 1
    stack_node_15 = module_0.StackNode(var_4)
    stack_node_16 = module_0.StackNode(stack_node_15)
    none_type_5 = None
    stack_node_17 = module_0.StackNode(none_type_5)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_node_18 = module_0.StackNode(var_5)
    assert stack_node_18.data == 0
    stack_node_19 = module_0.StackNode(stack_node_18)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_7 = module_0.check_parenthesis(dict_0)
    assert var_7 is True
    stack_node_20 = module_0.StackNode(stack_12)
    assert len(stack_node_20.data) == 0
    var_1.__len__()


def test_case_1681():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    bool_1 = False
    set_0 = {bool_1, bool_1, bool_1, bool_1}
    tuple_0 = (bool_1, bool_1)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_1, set_0, tuple_0, str_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.push(tuple_1)
    assert len(stack_1) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_7 = module_0.StackNode(stack_6)
    assert len(stack_node_7.data) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    dict_0 = {}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    stack_node_9 = module_0.StackNode(stack_13)
    assert len(stack_node_9.data) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    str_1 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_7 = module_0.check_parenthesis(str_1)
    assert var_7 is False
    stack_node_10 = module_0.StackNode(var_7)
    assert stack_node_10.data is False
    bool_2 = False
    stack_node_11 = module_0.StackNode(bool_2)
    stack_node_12 = module_0.StackNode(bool_2)
    none_type_1 = None
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.push(none_type_1)
    assert len(stack_14) == 1
    stack_node_13 = module_0.StackNode(var_8)
    bool_3 = False
    stack_node_14 = module_0.StackNode(bool_3)
    stack_node_15 = module_0.StackNode(bool_3)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_9 = stack_15.__len__()
    assert var_9 == 0
    stack_node_16 = module_0.StackNode(stack_node_15)
    with pytest.raises(ValueError):
        stack_2.peek()


@pytest.mark.xfail(strict=True)
def test_case_1682():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1683():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_6.push(stack_8)
    assert len(stack_6) == 1
    int_0 = -460
    stack_node_4 = module_0.StackNode(int_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_12)
    assert len(stack_node_9.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_10 = module_0.StackNode(var_4)
    assert stack_node_10.data == 0
    dict_0 = {}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_6 = stack_15.__len__()
    assert var_6 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_11 = module_0.StackNode(var_6)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_16)
    assert len(stack_node_13.data) == 0
    str_0 = "o2EICU9\x0bp7"
    stack_node_14 = module_0.StackNode(str_0)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_7 = stack_17.__len__()
    assert var_7 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_15 = module_0.StackNode(var_7)
    assert stack_node_15.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_16 = module_0.StackNode(stack_17)
    assert len(stack_node_16.data) == 0
    stack_node_17 = module_0.StackNode(stack_19)
    assert len(stack_node_17.data) == 0
    module_0.postfix_eval(stack_18)


@pytest.mark.xfail(strict=True)
def test_case_1684():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is False
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data is False
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    str_1 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_2 = module_0.check_parenthesis(str_1)
    assert var_2 is False
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_2 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_2)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.push(tuple_1)
    assert len(stack_2) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_5 = stack_4.__len__()
    assert var_5 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(stack_5)
    assert len(stack_node_7.data) == 0
    module_0.postfix_eval(stack_5)


def test_case_1685():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    complex_0 = -3711.3 - 806.2j
    stack_node_9 = module_0.StackNode(complex_0)
    none_type_1 = None
    stack_node_10 = module_0.StackNode(none_type_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_2 = None
    stack_node_11 = module_0.StackNode(none_type_2)
    stack_node_12 = module_0.StackNode(stack_5)
    assert len(stack_node_12.data) == 0
    var_3 = stack_5.push(none_type_1)
    assert len(stack_5) == 1
    assert len(stack_node_12.data) == 1
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_node_13 = module_0.StackNode(var_4)
    assert stack_node_13.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_14 = module_0.StackNode(var_5)
    assert stack_node_14.data == 0
    dict_0 = {}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    var_7 = stack_8.__len__()
    assert var_7 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_8 = stack_9.__len__()
    assert var_8 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_15 = module_0.StackNode(var_8)
    assert stack_node_15.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_9 = stack_10.__len__()
    assert var_9 == 0
    var_10 = stack_10.__len__()
    assert var_10 == 0
    complex_1 = -3711.3 - 806.2j
    stack_node_16 = module_0.StackNode(complex_1)
    with pytest.raises(ValueError):
        stack_12.peek()


@pytest.mark.xfail(strict=True)
def test_case_1686():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    module_0.postfix_eval(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1687():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(stack_4)
    assert len(stack_node_2.data) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_3 = module_0.check_parenthesis(str_0)
    assert var_3 is False
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data is False
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_5)
    assert len(stack_node_7.data) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    var_6 = stack_5.push(stack_node_6)
    assert len(stack_5) == 1
    assert len(stack_node_7.data) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_7 = stack_7.__len__()
    assert var_7 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_8 = module_0.StackNode(var_7)
    assert stack_node_8.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_8 = stack_12.__len__()
    assert var_8 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_9 = module_0.StackNode(var_8)
    assert stack_node_9.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_9 = stack_15.__len__()
    assert var_9 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_10 = module_0.StackNode(var_9)
    assert stack_node_10.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_10 = stack_17.push(stack_19)
    assert len(stack_17) == 1
    module_0.check_parenthesis(stack_12)


@pytest.mark.xfail(strict=True)
def test_case_1688():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is False
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data is False
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_3.push(stack_5)
    assert len(stack_3) == 1
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_5 = module_0.StackNode(float_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_0.push(float_0)


def test_case_1689():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.push(none_type_0)
    assert len(stack_5) == 1
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_2 = module_0.StackNode(complex_0)
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_2 = None
    stack_node_4 = module_0.StackNode(none_type_2)
    stack_node_5 = module_0.StackNode(stack_11)
    assert len(stack_node_5.data) == 0
    var_4 = stack_11.push(none_type_1)
    assert len(stack_11) == 1
    assert len(stack_node_5.data) == 1
    none_type_3 = None
    stack_node_6 = module_0.StackNode(none_type_3)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    var_7 = stack_12.__len__()
    assert var_7 == 0
    dict_1 = {}
    var_8 = module_0.check_parenthesis(dict_1)
    assert var_8 is True
    none_type_4 = None
    stack_node_7 = module_0.StackNode(none_type_4)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_9 = stack_13.__len__()
    assert var_9 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_10 = stack_14.__len__()
    assert var_10 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_8 = module_0.StackNode(var_10)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_14)
    assert len(stack_node_11.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_12 = module_0.StackNode(var_10)
    assert stack_node_12.data == 0
    bool_0 = False
    stack_node_13 = module_0.StackNode(bool_0)
    float_1 = 712.593
    dict_2 = {float_1: float_1, float_1: float_1}
    var_11 = module_0.check_parenthesis(dict_2)
    assert var_11 is True
    stack_node_14 = module_0.StackNode(float_1)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    with pytest.raises(ValueError):
        stack_9.pop()


def test_case_1690():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(stack_5)
    assert len(stack_node_3.data) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_node_4 = module_0.StackNode(float_0)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    none_type_1 = None
    stack_node_8 = module_0.StackNode(none_type_1)
    stack_node_9 = module_0.StackNode(stack_18)
    assert len(stack_node_9.data) == 0
    var_8 = stack_18.__len__()
    assert var_8 == 0
    with pytest.raises(ValueError):
        stack_12.pop()


def test_case_1691():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    with pytest.raises(ValueError):
        stack_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_1692():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_4 = module_0.StackNode(float_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    module_0.check_parenthesis(stack_node_2)


@pytest.mark.xfail(strict=True)
def test_case_1693():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_1 = module_0.StackNode(none_type_1)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_node_4 = module_0.StackNode(bool_0)
    none_type_2 = None
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.push(none_type_2)
    assert len(stack_2) == 1
    stack_node_5 = module_0.StackNode(var_2)
    str_0 = ""
    var_3 = module_0.check_parenthesis(str_0)
    assert var_3 is True
    int_0 = -460
    stack_node_6 = module_0.StackNode(int_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_node_7 = module_0.StackNode(stack_5)
    assert len(stack_node_7.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_6 = stack_6.__len__()
    assert var_6 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_9 = module_0.StackNode(stack_6)
    assert len(stack_node_9.data) == 0
    stack_node_10 = module_0.StackNode(stack_8)
    assert len(stack_node_10.data) == 0
    bool_1 = True
    stack_node_11 = module_0.StackNode(bool_1)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_12 = module_0.StackNode(var_7)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    var_4.push(stack_node_13)


@pytest.mark.xfail(strict=True)
def test_case_1694():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_2 = module_0.check_parenthesis(str_0)
    assert var_2 is False
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    none_type_1 = None
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.push(none_type_1)
    assert len(stack_6) == 1
    none_type_2 = None
    stack_node_4 = module_0.StackNode(none_type_2)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    bool_0 = True
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.push(bool_0)
    assert len(stack_8) == 1
    var_3.push(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1695():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    module_0.check_parenthesis(stack_2)


def test_case_1696():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_1 = True
    stack_node_1 = module_0.StackNode(bool_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_3 = module_0.StackNode(complex_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_4 = module_0.StackNode(stack_8)
    assert len(stack_node_4.data) == 0
    with pytest.raises(ValueError):
        stack_3.pop()


def test_case_1697():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is False
    complex_0 = -3711.3 - 806.2j
    stack_node_1 = module_0.StackNode(complex_0)
    with pytest.raises(ValueError):
        module_0.postfix_eval(str_0)


def test_case_1698():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    with pytest.raises(ValueError):
        stack_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1699():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_5)
    assert len(stack_node_4.data) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_5 = module_0.StackNode(var_6)
    assert stack_node_5.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_6 = module_0.StackNode(var_8)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_15)
    assert len(stack_node_8.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_9 = stack_16.__len__()
    assert var_9 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_9 = module_0.StackNode(var_9)
    assert stack_node_9.data == 0
    dict_0 = {}
    var_10 = module_0.check_parenthesis(dict_0)
    assert var_10 is True
    var_11 = stack_17.__len__()
    assert var_11 == 0
    bool_0 = False
    stack_node_10 = module_0.StackNode(bool_0)
    stack_node_11 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_12 = stack_18.push(none_type_0)
    assert len(stack_18) == 1
    stack_node_12 = module_0.StackNode(var_12)
    var_2.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1700():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_node_6 = module_0.StackNode(bool_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    module_0.check_parenthesis(stack_3)


@pytest.mark.xfail(strict=True)
def test_case_1701():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_0.__len__()
    assert var_2 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_3 = stack_1.__len__()
    assert var_3 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_node_7 = module_0.StackNode(stack_4)
    assert len(stack_node_7.data) == 0
    var_3.push(stack_node_2)


def test_case_1702():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    with pytest.raises(ValueError):
        stack_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_1703():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_node_3 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_4 = module_0.StackNode(float_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    stack_node_8 = module_0.StackNode(stack_5)
    assert len(stack_node_8.data) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_node_9 = module_0.StackNode(stack_5)
    assert len(stack_node_9.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_2 = None
    stack_node_10 = module_0.StackNode(none_type_2)
    stack_node_11 = module_0.StackNode(stack_6)
    assert len(stack_node_11.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_12 = module_0.StackNode(var_3)
    assert stack_node_12.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    var_4.push(var_1)


def test_case_1704():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    dict_0 = {}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_12.__len__()
    assert var_7 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_8 = module_0.StackNode(var_7)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_12)
    assert len(stack_node_11.data) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    bool_0 = False
    stack_node_12 = module_0.StackNode(bool_0)
    stack_node_13 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_9 = stack_14.push(none_type_0)
    assert len(stack_14) == 1
    stack_node_14 = module_0.StackNode(var_9)
    stack_node_15 = module_0.StackNode(stack_node_14)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_10 = stack_15.__len__()
    assert var_10 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_16 = module_0.StackNode(var_10)
    assert stack_node_16.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_17 = module_0.StackNode(stack_16)
    assert len(stack_node_17.data) == 0
    with pytest.raises(ValueError):
        stack_13.pop()


@pytest.mark.xfail(strict=True)
def test_case_1705():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.push(tuple_1)
    assert len(stack_2) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_5)
    assert len(stack_node_9.data) == 0
    none_type_2 = None
    stack_node_10 = module_0.StackNode(none_type_2)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    bool_1 = False
    stack_node_11 = module_0.StackNode(bool_1)
    stack_node_12 = module_0.StackNode(bool_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    bool_2 = False
    stack_node_13 = module_0.StackNode(bool_2)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_node_14 = module_0.StackNode(float_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_3 = None
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.push(none_type_3)
    assert len(stack_10) == 1
    complex_0 = -3711.3 - 806.2j
    stack_node_15 = module_0.StackNode(complex_0)
    none_type_4 = None
    stack_node_16 = module_0.StackNode(none_type_4)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_5 = None
    stack_node_17 = module_0.StackNode(none_type_5)
    stack_node_18 = module_0.StackNode(stack_11)
    assert len(stack_node_18.data) == 0
    var_7 = stack_11.push(none_type_4)
    assert len(stack_11) == 1
    assert len(stack_node_18.data) == 1
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    module_0.check_parenthesis(stack_12)


@pytest.mark.xfail(strict=True)
def test_case_1706():
    str_0 = "o2EICU9\x0bp7"
    stack_node_0 = module_0.StackNode(str_0)
    module_0.postfix_eval(stack_node_0)


@pytest.mark.xfail(strict=True)
def test_case_1707():
    dict_0 = {}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_1)
    assert var_1 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    bool_1 = False
    stack_node_6 = module_0.StackNode(bool_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    bool_2 = True
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.push(bool_2)
    assert len(stack_7) == 1
    stack_node_7 = module_0.StackNode(var_5)
    module_0.postfix_eval(stack_node_7)


def test_case_1708():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(stack_3)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_6)
    assert len(stack_node_2.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_8)
    assert len(stack_node_5.data) == 0
    with pytest.raises(ValueError):
        stack_4.peek()


@pytest.mark.xfail(strict=True)
def test_case_1709():
    tuple_0 = ()
    var_0 = module_0.check_parenthesis(tuple_0)
    assert var_0 is True
    var_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_1710():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_1)
    assert stack_node_5.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.__len__()
    assert var_2 == 0
    module_0.check_parenthesis(stack_7)


@pytest.mark.xfail(strict=True)
def test_case_1711():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    var_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_1712():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_2 = module_0.check_parenthesis(str_0)
    assert var_2 is False
    str_1 = "o2EICU9\x0bp7"
    stack_node_2 = module_0.StackNode(str_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_6 = stack_16.__len__()
    assert var_6 == 0
    stack_node_5 = module_0.StackNode(var_6)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_7 = stack_17.__len__()
    assert var_7 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_7 = module_0.StackNode(var_7)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    var_4.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1713():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(stack_2)
    assert len(stack_node_0.data) == 0
    module_0.check_parenthesis(stack_0)


@pytest.mark.xfail(strict=True)
def test_case_1714():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    bool_1 = True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.push(bool_1)
    assert len(stack_1) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_4.push(stack_6)
    assert len(stack_4) == 1
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    bool_2 = False
    stack_node_6 = module_0.StackNode(bool_2)
    stack_node_7 = module_0.StackNode(bool_2)
    none_type_2 = None
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.push(none_type_2)
    assert len(stack_13) == 1
    stack_node_8 = module_0.StackNode(var_7)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_9 = module_0.StackNode(var_8)
    assert stack_node_9.data == 0
    dict_0 = {}
    var_9 = module_0.check_parenthesis(dict_0)
    assert var_9 is True
    var_10 = stack_15.__len__()
    assert var_10 == 0
    bool_3 = True
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_11 = stack_16.push(bool_3)
    assert len(stack_16) == 1
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    none_type_3 = None
    stack_node_10 = module_0.StackNode(none_type_3)
    stack_node_11 = module_0.StackNode(none_type_3)
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_12 = stack_18.__len__()
    assert var_12 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_12 = module_0.StackNode(var_12)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_node_12)
    stack_node_15 = module_0.StackNode(stack_18)
    assert len(stack_node_15.data) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_7.peek()


@pytest.mark.xfail(strict=True)
def test_case_1715():
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    bool_1 = True
    stack_node_2 = module_0.StackNode(bool_1)
    var_0.push(bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1716():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    complex_0 = -3711.3 - 806.2j
    stack_node_3 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_node_6 = module_0.StackNode(stack_2)
    assert len(stack_node_6.data) == 0
    var_1 = stack_2.push(none_type_0)
    assert len(stack_2) == 1
    assert len(stack_node_6.data) == 1
    module_0.check_parenthesis(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1717():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_4 = module_0.StackNode(stack_8)
    assert len(stack_node_4.data) == 0
    bool_1 = False
    stack_node_5 = module_0.StackNode(bool_1)
    stack_node_6 = module_0.StackNode(bool_1)
    none_type_1 = None
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.push(none_type_1)
    assert len(stack_9) == 1
    stack_node_7 = module_0.StackNode(var_5)
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_node_12 = module_0.StackNode(stack_10)
    assert len(stack_node_12.data) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    var_8 = stack_10.push(stack_node_11)
    assert len(stack_10) == 1
    assert len(stack_node_12.data) == 1
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_9 = stack_12.__len__()
    assert var_9 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_13 = module_0.StackNode(var_9)
    assert stack_node_13.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_10 = stack_14.__len__()
    assert var_10 == 0
    module_0.postfix_eval(stack_node_12)


@pytest.mark.xfail(strict=True)
def test_case_1718():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    module_0.postfix_eval(stack_0)


def test_case_1719():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    with pytest.raises(ValueError):
        stack_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1720():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    var_3.pop()


@pytest.mark.xfail(strict=True)
def test_case_1721():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_node_3 = module_0.StackNode(stack_node_2)
    bool_1 = False
    stack_node_4 = module_0.StackNode(bool_1)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_5 = module_0.StackNode(float_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_6 = module_0.StackNode(complex_0)
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_2 = None
    stack_node_8 = module_0.StackNode(none_type_2)
    stack_node_9 = module_0.StackNode(stack_2)
    assert len(stack_node_9.data) == 0
    var_2 = stack_2.push(none_type_1)
    assert len(stack_2) == 1
    assert len(stack_node_9.data) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_10 = module_0.StackNode(var_3)
    assert stack_node_10.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_node_11 = module_0.StackNode(var_4)
    assert stack_node_11.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_12 = module_0.StackNode(var_5)
    assert stack_node_12.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_13 = module_0.StackNode(stack_6)
    assert len(stack_node_13.data) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    bool_2 = False
    stack_node_14 = module_0.StackNode(bool_2)
    stack_node_15 = module_0.StackNode(bool_2)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_node_16 = module_0.StackNode(stack_node_15)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_8 = stack_11.__len__()
    assert var_8 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_17 = module_0.StackNode(var_8)
    assert stack_node_17.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_18 = module_0.StackNode(stack_12)
    assert len(stack_node_18.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    none_type_3 = None
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_9 = stack_15.push(none_type_3)
    assert len(stack_15) == 1
    var_6.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1722():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    bool_1 = True
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.push(bool_1)
    assert len(stack_8) == 1
    stack_node_6 = module_0.StackNode(var_2)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_9)
    assert len(stack_node_10.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_11 = module_0.StackNode(var_4)
    assert stack_node_11.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_12 = module_0.StackNode(stack_13)
    assert len(stack_node_12.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_5 = stack_16.__len__()
    assert var_5 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_6 = stack_19.__len__()
    assert var_6 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_13 = module_0.StackNode(var_6)
    assert stack_node_13.data == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_14 = module_0.StackNode(stack_19)
    assert len(stack_node_14.data) == 0
    bool_2 = False
    stack_node_15 = module_0.StackNode(bool_2)
    stack_node_16 = module_0.StackNode(bool_2)
    none_type_1 = None
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_7 = stack_23.push(none_type_1)
    assert len(stack_23) == 1
    stack_node_17 = module_0.StackNode(var_7)
    stack_node_18 = module_0.StackNode(stack_node_17)
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    var_8 = stack_24.__len__()
    assert var_8 == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    stack_node_19 = module_0.StackNode(var_8)
    assert stack_node_19.data == 0
    stack_node_20 = module_0.StackNode(stack_node_19)
    stack_node_21 = module_0.StackNode(stack_node_19)
    stack_node_22 = module_0.StackNode(stack_24)
    assert len(stack_node_22.data) == 0
    var_9 = stack_25.__len__()
    assert var_9 == 0
    var_10 = stack_24.push(stack_node_21)
    assert len(stack_24) == 1
    assert len(stack_node_22.data) == 1
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0
    var_11 = stack_26.__len__()
    assert var_11 == 0
    stack_27 = module_0.Stack()
    assert len(stack_27) == 0
    stack_node_23 = module_0.StackNode(var_11)
    assert stack_node_23.data == 0
    dict_0 = {}
    var_12 = module_0.check_parenthesis(dict_0)
    assert var_12 is True
    var_13 = stack_27.__len__()
    assert var_13 == 0
    module_0.postfix_eval(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1723():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    dict_0 = {}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_node_6 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_5 = stack_5.push(none_type_1)
    assert len(stack_5) == 1
    stack_node_7 = module_0.StackNode(var_5)
    stack_node_8 = module_0.StackNode(stack_node_7)
    bool_1 = False
    stack_node_9 = module_0.StackNode(bool_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_6 = stack_6.__len__()
    assert var_6 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    var_8 = stack_7.__len__()
    assert var_8 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_9 = stack_9.__len__()
    assert var_9 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_11 = module_0.StackNode(var_9)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_node_11)
    var_8.pop()


@pytest.mark.xfail(strict=True)
def test_case_1724():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(none_type_0)
    bool_0 = True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.push(bool_0)
    assert len(stack_1) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_node_4 = module_0.StackNode(none_type_1)
    none_type_2 = None
    stack_node_5 = module_0.StackNode(none_type_2)
    bool_1 = False
    stack_node_6 = module_0.StackNode(bool_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    bool_2 = True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.push(bool_2)
    assert len(stack_4) == 1
    stack_node_7 = module_0.StackNode(var_2)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_3 = None
    stack_node_8 = module_0.StackNode(none_type_3)
    stack_node_9 = module_0.StackNode(stack_5)
    assert len(stack_node_9.data) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_node_10 = module_0.StackNode(stack_5)
    assert len(stack_node_10.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_11 = module_0.StackNode(var_4)
    assert stack_node_11.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_12 = module_0.StackNode(stack_7)
    assert len(stack_node_12.data) == 0
    none_type_4 = None
    stack_node_13 = module_0.StackNode(none_type_4)
    bool_3 = False
    stack_node_14 = module_0.StackNode(bool_3)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_5 = None
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.push(none_type_5)
    assert len(stack_10) == 1
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_15 = module_0.StackNode(var_6)
    assert stack_node_15.data == 0
    stack_node_16 = module_0.StackNode(stack_node_15)
    stack_node_17 = module_0.StackNode(stack_12)
    assert len(stack_node_17.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_18 = module_0.StackNode(var_7)
    assert stack_node_18.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_8 = stack_17.__len__()
    assert var_8 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_19 = module_0.StackNode(var_8)
    assert stack_node_19.data == 0
    stack_node_20 = module_0.StackNode(stack_node_19)
    stack_node_21 = module_0.StackNode(stack_node_19)
    module_0.postfix_eval(none_type_0)


def test_case_1725():
    str_0 = "dhczV\rcuw"
    with pytest.raises(ValueError):
        module_0.postfix_eval(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1726():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_1 = False
    stack_node_1 = module_0.StackNode(bool_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    bool_2 = False
    stack_node_2 = module_0.StackNode(bool_2)
    stack_node_3 = module_0.StackNode(bool_2)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    module_0.check_parenthesis(stack_4)


@pytest.mark.xfail(strict=True)
def test_case_1727():
    dict_0 = {}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    str_0 = ""
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_2 = stack_0.__len__()
    assert var_2 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_2)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(stack_5)
    assert len(stack_node_4.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_10.push(stack_12)
    assert len(stack_10) == 1
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    bool_0 = False
    stack_node_7 = module_0.StackNode(bool_0)
    stack_node_8 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_7 = stack_18.push(none_type_0)
    assert len(stack_18) == 1
    stack_node_9 = module_0.StackNode(var_7)
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_8 = stack_19.__len__()
    assert var_8 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_10 = module_0.StackNode(var_8)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_19)
    assert len(stack_node_13.data) == 0
    var_9 = stack_20.__len__()
    assert var_9 == 0
    none_type_1 = None
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_10 = stack_21.push(none_type_1)
    assert len(stack_21) == 1
    module_0.check_parenthesis(stack_node_6)


@pytest.mark.xfail(strict=True)
def test_case_1728():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(stack_7)
    assert len(stack_node_6.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_9)
    assert len(stack_node_9.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_10 = module_0.StackNode(var_5)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_11)
    assert len(stack_node_13.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_14 = module_0.StackNode(var_6)
    assert stack_node_14.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_15 = module_0.StackNode(stack_14)
    assert len(stack_node_15.data) == 0
    stack_node_16 = module_0.StackNode(stack_16)
    assert len(stack_node_16.data) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_7 = stack_18.__len__()
    assert var_7 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_17 = module_0.StackNode(var_7)
    assert stack_node_17.data == 0
    stack_node_18 = module_0.StackNode(stack_node_17)
    stack_node_19 = module_0.StackNode(stack_node_17)
    module_0.postfix_eval(stack_4)


@pytest.mark.xfail(strict=True)
def test_case_1729():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    bool_1 = False
    stack_node_2 = module_0.StackNode(bool_1)
    stack_node_3 = module_0.StackNode(bool_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_2 = module_0.check_parenthesis(dict_1)
    assert var_2 is True
    stack_node_5 = module_0.StackNode(float_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    bool_2 = False
    stack_node_8 = module_0.StackNode(bool_2)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    var_6 = stack_5.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_7 = stack_9.__len__()
    assert var_7 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_10 = module_0.StackNode(var_7)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_9)
    assert len(stack_node_13.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_14 = module_0.StackNode(var_7)
    assert stack_node_14.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_8 = stack_12.__len__()
    assert var_8 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_15 = module_0.StackNode(var_8)
    assert stack_node_15.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_16 = module_0.StackNode(stack_13)
    assert len(stack_node_16.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    int_0 = -460
    stack_node_17 = module_0.StackNode(int_0)
    var_1.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1730():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(stack_1)
    assert len(stack_node_0.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_0 = stack_2.__len__()
    assert var_0 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    dict_0 = {}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_3.__len__()
    assert var_2 == 0
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    stack_node_2 = module_0.StackNode(float_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_5 = module_0.StackNode(var_6)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_8)
    assert len(stack_node_8.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    list_0 = [float_0, stack_7]
    module_0.postfix_eval(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1731():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(stack_2)
    assert len(stack_node_0.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_3)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(stack_4)
    assert len(stack_node_3.data) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_7 = stack_15.__len__()
    assert var_7 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_8 = stack_18.__len__()
    assert var_8 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_9 = stack_20.__len__()
    assert var_9 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_6 = module_0.StackNode(var_9)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_21)
    assert len(stack_node_8.data) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    var_10 = stack_22.__len__()
    assert var_10 == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_node_9 = module_0.StackNode(var_10)
    assert stack_node_9.data == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0
    var_11 = stack_24.push(stack_26)
    assert len(stack_24) == 1
    stack_27 = module_0.Stack()
    assert len(stack_27) == 0
    var_12 = stack_27.__len__()
    assert var_12 == 0
    stack_28 = module_0.Stack()
    assert len(stack_28) == 0
    stack_node_10 = module_0.StackNode(var_12)
    assert stack_node_10.data == 0
    stack_29 = module_0.Stack()
    assert len(stack_29) == 0
    stack_30 = module_0.Stack()
    assert len(stack_30) == 0
    stack_31 = module_0.Stack()
    assert len(stack_31) == 0
    var_13 = stack_28.__len__()
    assert var_13 == 0
    module_0.check_parenthesis(var_7)


@pytest.mark.xfail(strict=True)
def test_case_1732():
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    bool_1 = True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.push(bool_1)
    assert len(stack_2) == 1
    stack_node_2 = module_0.StackNode(var_2)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(stack_3)
    assert len(stack_node_4.data) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_7 = module_0.check_parenthesis(dict_0)
    assert var_7 is True
    stack_node_8 = module_0.StackNode(float_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_1 = None
    stack_node_9 = module_0.StackNode(none_type_1)
    stack_node_10 = module_0.StackNode(none_type_1)
    none_type_2 = None
    stack_node_11 = module_0.StackNode(none_type_2)
    bool_2 = False
    stack_node_12 = module_0.StackNode(bool_2)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_3 = None
    stack_node_13 = module_0.StackNode(none_type_3)
    stack_node_14 = module_0.StackNode(stack_12)
    assert len(stack_node_14.data) == 0
    var_2.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1733():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_2)
    assert len(stack_node_6.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    dict_0 = {}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_5 = stack_5.__len__()
    assert var_5 == 0
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    stack_node_8 = module_0.StackNode(float_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_7 = stack_6.__len__()
    assert var_7 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_9 = module_0.StackNode(var_7)
    assert stack_node_9.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_10 = module_0.StackNode(stack_6)
    assert len(stack_node_10.data) == 0
    stack_node_11 = module_0.StackNode(stack_8)
    assert len(stack_node_11.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_8 = stack_10.__len__()
    assert var_8 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_12 = module_0.StackNode(var_8)
    assert stack_node_12.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_9 = stack_11.__len__()
    assert var_9 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_10 = stack_15.__len__()
    assert var_10 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_13 = module_0.StackNode(var_10)
    assert stack_node_13.data == 0
    stack_node_14 = module_0.StackNode(stack_node_13)
    none_type_1 = None
    stack_node_15 = module_0.StackNode(none_type_1)
    module_0.check_parenthesis(stack_8)


@pytest.mark.xfail(strict=True)
def test_case_1734():
    none_type_0 = None
    module_0.postfix_eval(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1735():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1736():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    module_0.postfix_eval(stack_node_1)


@pytest.mark.xfail(strict=True)
def test_case_1737():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_node_3 = module_0.StackNode(bool_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(stack_5)
    assert len(stack_node_5.data) == 0
    bool_1 = False
    stack_node_6 = module_0.StackNode(bool_1)
    stack_node_7 = module_0.StackNode(bool_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_10 = module_0.StackNode(stack_9)
    assert len(stack_node_10.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_11 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_12 = module_0.StackNode(none_type_0)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_1 = None
    stack_node_13 = module_0.StackNode(none_type_1)
    stack_node_14 = module_0.StackNode(stack_12)
    assert len(stack_node_14.data) == 0
    var_5 = stack_12.push(none_type_0)
    assert len(stack_12) == 1
    assert len(stack_node_14.data) == 1
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_15 = module_0.StackNode(var_6)
    assert stack_node_15.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_7 = stack_16.push(stack_18)
    assert len(stack_16) == 1
    var_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_1738():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_7 = module_0.StackNode(var_1)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    none_type_2 = None
    stack_node_9 = module_0.StackNode(none_type_2)
    module_0.postfix_eval(stack_node_0)


def test_case_1739():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_node_6 = module_0.StackNode(stack_11)
    assert len(stack_node_6.data) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_node_7 = module_0.StackNode(stack_11)
    assert len(stack_node_7.data) == 0
    with pytest.raises(ValueError):
        stack_3.pop()


@pytest.mark.xfail(strict=True)
def test_case_1740():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(tuple_1)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(stack_2)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_4)
    assert len(stack_node_2.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_3 = module_0.StackNode(float_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_5 = module_0.StackNode(var_6)
    assert stack_node_5.data == 0
    dict_1 = {}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    var_8 = stack_12.__len__()
    assert var_8 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_9 = stack_13.__len__()
    assert var_9 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_6 = module_0.StackNode(var_9)
    assert stack_node_6.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_7 = module_0.StackNode(stack_13)
    assert len(stack_node_7.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_10 = stack_16.__len__()
    assert var_10 == 0
    stack_node_8 = module_0.StackNode(var_10)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_11 = stack_17.__len__()
    assert var_11 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_10 = module_0.StackNode(var_11)
    assert stack_node_10.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_11 = module_0.StackNode(stack_17)
    assert len(stack_node_11.data) == 0
    stack_node_12 = module_0.StackNode(stack_20)
    assert len(stack_node_12.data) == 0
    bool_1 = False
    stack_node_13 = module_0.StackNode(bool_1)
    stack_node_14 = module_0.StackNode(bool_1)
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_12 = stack_21.__len__()
    assert var_12 == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    var_13 = stack_22.__len__()
    assert var_13 == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_node_15 = module_0.StackNode(var_13)
    assert stack_node_15.data == 0
    stack_node_16 = module_0.StackNode(stack_node_15)
    stack_node_17 = module_0.StackNode(stack_node_15)
    stack_node_18 = module_0.StackNode(stack_22)
    assert len(stack_node_18.data) == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    var_2.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1741():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    module_0.check_parenthesis(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1742():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(tuple_1)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    bool_1 = True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.push(bool_1)
    assert len(stack_2) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_0 = module_0.StackNode(var_2)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_3 = module_0.StackNode(float_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_node_5 = module_0.StackNode(none_type_0)
    bool_2 = False
    stack_node_6 = module_0.StackNode(bool_2)
    stack_node_7 = module_0.StackNode(bool_2)
    none_type_1 = None
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.push(none_type_1)
    assert len(stack_11) == 1
    stack_node_8 = module_0.StackNode(var_5)
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_2 = None
    stack_node_10 = module_0.StackNode(none_type_2)
    stack_node_11 = module_0.StackNode(stack_12)
    assert len(stack_node_11.data) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    none_type_3 = None
    stack_node_12 = module_0.StackNode(none_type_3)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    object_0 = module_1.object()
    module_0.check_parenthesis(object_0)


@pytest.mark.xfail(strict=True)
def test_case_1743():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    bool_0 = False
    stack_node_7 = module_0.StackNode(bool_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    bool_1 = True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.push(bool_1)
    assert len(stack_4) == 1
    stack_node_8 = module_0.StackNode(var_1)
    module_0.postfix_eval(stack_node_0)


@pytest.mark.xfail(strict=True)
def test_case_1744():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_1 = module_0.StackNode(stack_3)
    assert len(stack_node_1.data) == 0
    var_3 = stack_3.push(var_2)
    assert len(stack_3) == 1
    assert len(stack_node_1.data) == 1
    none_type_1 = None
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.push(none_type_1)
    assert len(stack_4) == 1
    var_5 = stack_4.pop()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_6 = stack_5.__len__()
    assert var_6 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_6)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_node_4 = module_0.StackNode(bool_0)
    none_type_2 = None
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_7 = stack_9.push(none_type_2)
    assert len(stack_9) == 1
    stack_node_5 = module_0.StackNode(var_7)
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_8 = stack_10.__len__()
    assert var_8 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_9 = stack_12.__len__()
    assert var_9 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_7 = module_0.StackNode(var_9)
    assert stack_node_7.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_10 = stack_14.__len__()
    assert var_10 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_11 = module_0.check_parenthesis(dict_1)
    assert var_11 is True
    stack_node_8 = module_0.StackNode(float_1)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    none_type_3 = None
    stack_node_9 = module_0.StackNode(none_type_3)
    stack_node_10 = module_0.StackNode(none_type_3)
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_12 = module_0.check_parenthesis(dict_2)
    assert var_12 is True
    stack_node_11 = module_0.StackNode(var_12)
    assert stack_node_11.data is True
    dict_3 = {}
    var_13 = module_0.check_parenthesis(dict_3)
    assert var_13 is True
    module_0.postfix_eval(none_type_0)


def test_case_1745():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    dict_0 = {}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(var_5)
    assert stack_node_3.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    int_0 = -460
    stack_node_4 = module_0.StackNode(int_0)
    bool_1 = False
    stack_node_5 = module_0.StackNode(bool_1)
    stack_node_6 = module_0.StackNode(bool_1)
    none_type_0 = None
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.push(none_type_0)
    assert len(stack_10) == 1
    stack_node_7 = module_0.StackNode(var_6)
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_9 = module_0.StackNode(var_7)
    assert stack_node_9.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    bool_2 = True
    stack_node_10 = module_0.StackNode(bool_2)
    with pytest.raises(ValueError):
        stack_8.peek()


@pytest.mark.xfail(strict=True)
def test_case_1746():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_0)
    assert stack_node_4.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_1)
    assert stack_node_5.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    bool_0 = True
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.push(bool_0)
    assert len(stack_7) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_7 = module_0.StackNode(stack_9)
    assert len(stack_node_7.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_12.__len__()
    assert var_7 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_8 = module_0.StackNode(var_7)
    assert stack_node_8.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_9 = module_0.StackNode(complex_0)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_8 = stack_17.__len__()
    assert var_8 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_10 = module_0.StackNode(var_8)
    assert stack_node_10.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_11 = module_0.StackNode(stack_17)
    assert len(stack_node_11.data) == 0
    stack_node_12 = module_0.StackNode(stack_20)
    assert len(stack_node_12.data) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    none_type_0 = None
    stack_node_13 = module_0.StackNode(none_type_0)
    stack_node_14 = module_0.StackNode(stack_21)
    assert len(stack_node_14.data) == 0
    var_9 = stack_21.__len__()
    assert var_9 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_10 = module_0.check_parenthesis(str_0)
    assert var_10 is False
    stack_node_15 = module_0.StackNode(var_10)
    assert stack_node_15.data is False
    module_0.postfix_eval(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1747():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    str_0 = "o2EICU9\x0bp7"
    stack_node_2 = module_0.StackNode(str_0)
    module_0.postfix_eval(stack_node_2)


@pytest.mark.xfail(strict=True)
def test_case_1748():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(stack_5)
    assert len(stack_node_3.data) == 0
    stack_node_4 = module_0.StackNode(stack_7)
    assert len(stack_node_4.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data is True
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_5 = stack_15.__len__()
    assert var_5 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_6 = stack_16.__len__()
    assert var_6 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_10 = module_0.StackNode(stack_16)
    assert len(stack_node_10.data) == 0
    var_7 = stack_18.__len__()
    assert var_7 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_8 = module_0.check_parenthesis(dict_1)
    assert var_8 is True
    stack_node_11 = module_0.StackNode(float_1)
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    none_type_1 = None
    stack_node_12 = module_0.StackNode(none_type_1)
    stack_node_13 = module_0.StackNode(none_type_1)
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    none_type_2 = None
    stack_node_14 = module_0.StackNode(none_type_2)
    stack_node_15 = module_0.StackNode(stack_21)
    assert len(stack_node_15.data) == 0
    var_2.push(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1749():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_2 = module_0.check_parenthesis(str_0)
    assert var_2 is False
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(stack_4)
    assert len(stack_node_3.data) == 0
    bool_1 = False
    stack_node_4 = module_0.StackNode(bool_1)
    stack_node_5 = module_0.StackNode(bool_1)
    none_type_1 = None
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.push(none_type_1)
    assert len(stack_5) == 1
    stack_node_6 = module_0.StackNode(var_3)
    stack_node_7 = module_0.StackNode(stack_node_6)
    none_type_2 = None
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.push(none_type_2)
    assert len(stack_6) == 1
    bool_2 = False
    stack_node_8 = module_0.StackNode(bool_2)
    stack_node_9 = module_0.StackNode(bool_2)
    none_type_3 = None
    stack_node_10 = module_0.StackNode(none_type_3)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_11 = module_0.StackNode(var_5)
    assert stack_node_11.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    module_0.check_parenthesis(stack_5)


@pytest.mark.xfail(strict=True)
def test_case_1750():
    bool_0 = True
    stack_node_0 = module_0.StackNode(bool_0)
    none_type_0 = None
    module_0.postfix_eval(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1751():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_2 = module_0.StackNode(float_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    str_0 = "o2EICU9\x0bp7"
    stack_node_3 = module_0.StackNode(str_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_5 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    stack_node_8 = module_0.StackNode(stack_10)
    assert len(stack_node_8.data) == 0
    var_6 = stack_10.push(none_type_0)
    assert len(stack_10) == 1
    assert len(stack_node_8.data) == 1
    module_0.check_parenthesis(stack_5)


def test_case_1752():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    with pytest.raises(ValueError):
        stack_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1753():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_1 = module_0.StackNode(none_type_1)
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    dict_1 = {}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_5 = stack_4.__len__()
    assert var_5 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_4)
    assert len(stack_node_7.data) == 0
    var_6 = stack_5.__len__()
    assert var_6 == 0
    var_6.__len__()


def test_case_1754():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.push(tuple_1)
    assert len(stack_2) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    with pytest.raises(ValueError):
        stack_5.peek()


@pytest.mark.xfail(strict=True)
def test_case_1755():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is False
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data is False
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_3 = module_0.StackNode(float_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_3 = stack_1.__len__()
    assert var_3 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(stack_1)
    assert len(stack_node_5.data) == 0
    stack_node_6 = module_0.StackNode(stack_4)
    assert len(stack_node_6.data) == 0
    var_2.push(stack_4)


@pytest.mark.xfail(strict=True)
def test_case_1756():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_2 = module_0.StackNode(var_4)
    assert stack_node_2.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_3 = module_0.StackNode(stack_9)
    assert len(stack_node_3.data) == 0
    stack_node_4 = module_0.StackNode(stack_12)
    assert len(stack_node_4.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_5 = module_0.StackNode(stack_13)
    assert len(stack_node_5.data) == 0
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_5 = stack_14.push(tuple_1)
    assert len(stack_14) == 1
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    stack_node_6 = module_0.StackNode(float_0)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    stack_node_8 = module_0.StackNode(none_type_0)
    none_type_1 = None
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_7 = stack_17.push(none_type_1)
    assert len(stack_17) == 1
    bool_1 = True
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_8 = stack_18.push(bool_1)
    assert len(stack_18) == 1
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    none_type_2 = None
    stack_node_9 = module_0.StackNode(none_type_2)
    stack_node_10 = module_0.StackNode(none_type_2)
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_9 = stack_20.__len__()
    assert var_9 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_11 = module_0.StackNode(var_9)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_node_11)
    stack_node_14 = module_0.StackNode(stack_20)
    assert len(stack_node_14.data) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_10 = module_0.check_parenthesis(dict_1)
    assert var_10 is True
    var_4.peek()


@pytest.mark.xfail(strict=True)
def test_case_1757():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    dict_0 = {}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    int_0 = -460
    stack_node_5 = module_0.StackNode(int_0)
    dict_1 = {}
    stack_node_6 = module_0.StackNode(dict_1)
    none_type_0 = None
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.push(none_type_0)
    assert len(stack_5) == 1
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.push(tuple_1)
    assert len(stack_6) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_8)
    assert len(stack_node_10.data) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    var_7 = stack_8.push(stack_node_9)
    assert len(stack_8) == 1
    assert len(stack_node_10.data) == 1
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_8 = stack_10.__len__()
    assert var_8 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_11 = module_0.StackNode(var_8)
    assert stack_node_11.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_9 = stack_12.__len__()
    assert var_9 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    float_0 = 712.593
    dict_2 = {float_0: float_0, float_0: float_0}
    var_10 = module_0.check_parenthesis(dict_2)
    assert var_10 is True
    stack_node_12 = module_0.StackNode(stack_14)
    assert len(stack_node_12.data) == 0
    var_11 = stack_14.push(var_10)
    assert len(stack_14) == 1
    assert len(stack_node_12.data) == 1
    var_8.peek()


@pytest.mark.xfail(strict=True)
def test_case_1758():
    int_0 = -127
    module_0.check_parenthesis(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1759():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_3 = module_0.StackNode(float_0)
    module_0.postfix_eval(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1760():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_3)
    assert len(stack_node_7.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_8 = module_0.StackNode(var_1)
    assert stack_node_8.data == 0
    bool_0 = True
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.push(bool_0)
    assert len(stack_6) == 1
    none_type_0 = None
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.push(none_type_0)
    assert len(stack_7) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    bool_1 = False
    stack_node_9 = module_0.StackNode(bool_1)
    stack_node_10 = module_0.StackNode(bool_1)
    none_type_1 = None
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.push(none_type_1)
    assert len(stack_9) == 1
    stack_node_11 = module_0.StackNode(var_5)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_2 = None
    stack_node_12 = module_0.StackNode(none_type_2)
    stack_node_13 = module_0.StackNode(stack_10)
    assert len(stack_node_13.data) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_7 = module_0.check_parenthesis(str_0)
    assert var_7 is False
    stack_node_14 = module_0.StackNode(var_7)
    assert stack_node_14.data is False
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_3.__len__()


def test_case_1761():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    bool_1 = False
    stack_node_2 = module_0.StackNode(bool_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_3 = module_0.StackNode(stack_3)
    assert len(stack_node_3.data) == 0
    str_0 = "~.zlsszCHr[:\x0bQpmF"
    with pytest.raises(ValueError):
        module_0.postfix_eval(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1762():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    dict_0 = {}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_1)
    assert var_1 is True
    float_1 = 712.593
    dict_2 = {float_1: float_1, float_1: float_1}
    var_2 = module_0.check_parenthesis(dict_2)
    assert var_2 is True
    stack_node_1 = module_0.StackNode(float_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(none_type_1)
    bool_0 = True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.push(bool_0)
    assert len(stack_2) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_2 = None
    stack_node_4 = module_0.StackNode(none_type_2)
    stack_node_5 = module_0.StackNode(none_type_2)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    bool_1 = True
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.push(bool_1)
    assert len(stack_8) == 1
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_7 = stack_9.__len__()
    assert var_7 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_7 = module_0.StackNode(var_7)
    assert stack_node_7.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_11.push(stack_13)
    assert len(stack_11) == 1
    float_2 = 712.593
    dict_3 = {float_2: float_2, float_2: float_2}
    var_9 = module_0.check_parenthesis(dict_3)
    assert var_9 is True
    stack_node_8 = module_0.StackNode(var_9)
    assert stack_node_8.data is True
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_10 = stack_14.__len__()
    assert var_10 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_9 = module_0.StackNode(var_10)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_node_12 = module_0.StackNode(stack_14)
    assert len(stack_node_12.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_13 = module_0.StackNode(var_10)
    assert stack_node_13.data == 0
    module_0.postfix_eval(var_7)


@pytest.mark.xfail(strict=True)
def test_case_1763():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    bool_1 = True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.push(bool_1)
    assert len(stack_1) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_3 = module_0.StackNode(stack_4)
    assert len(stack_node_3.data) == 0
    var_3 = stack_4.push(var_2)
    assert len(stack_4) == 1
    assert len(stack_node_3.data) == 1
    bool_2 = True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.push(bool_2)
    assert len(stack_5) == 1
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_node_5 = module_0.StackNode(stack_6)
    assert len(stack_node_5.data) == 0
    bool_3 = False
    stack_node_6 = module_0.StackNode(bool_3)
    stack_node_7 = module_0.StackNode(bool_3)
    none_type_2 = None
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.push(none_type_2)
    assert len(stack_7) == 1
    stack_node_8 = module_0.StackNode(var_5)
    stack_node_9 = module_0.StackNode(stack_node_8)
    none_type_3 = None
    stack_node_10 = module_0.StackNode(none_type_3)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    var_8 = stack_8.__len__()
    assert var_8 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_4 = None
    stack_node_11 = module_0.StackNode(none_type_4)
    int_0 = -460
    stack_node_12 = module_0.StackNode(int_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_9 = stack_10.__len__()
    assert var_9 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_13 = module_0.StackNode(var_9)
    assert stack_node_13.data == 0
    stack_node_14 = module_0.StackNode(stack_node_13)
    stack_node_15 = module_0.StackNode(stack_node_13)
    stack_node_16 = module_0.StackNode(stack_10)
    assert len(stack_node_16.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_17 = module_0.StackNode(var_9)
    assert stack_node_17.data == 0
    module_0.postfix_eval(dict_1)


@pytest.mark.xfail(strict=True)
def test_case_1764():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(stack_5)
    assert len(stack_node_1.data) == 0
    module_0.check_parenthesis(stack_node_0)


@pytest.mark.xfail(strict=True)
def test_case_1765():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_2 = module_0.StackNode(complex_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    dict_0 = {}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_5 = stack_7.__len__()
    assert var_5 == 0
    module_0.postfix_eval(stack_node_4)


def test_case_1766():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(tuple_1)
    assert len(stack_0) == 1
    bool_1 = True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.push(bool_1)
    assert len(stack_1) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_2 = module_0.StackNode(stack_5)
    assert len(stack_node_2.data) == 0
    var_4 = stack_5.push(var_3)
    assert len(stack_5) == 1
    assert len(stack_node_2.data) == 1
    none_type_1 = None
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.push(none_type_1)
    assert len(stack_6) == 1
    var_6 = stack_6.pop()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_7 = stack_7.__len__()
    assert var_7 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(var_7)
    assert stack_node_3.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_8 = stack_8.__len__()
    assert var_8 == 0
    var_9 = stack_10.__len__()
    assert var_9 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_2 = None
    stack_node_4 = module_0.StackNode(none_type_2)
    stack_node_5 = module_0.StackNode(stack_12)
    assert len(stack_node_5.data) == 0
    var_10 = stack_12.__len__()
    assert var_10 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_11 = stack_13.__len__()
    assert var_11 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_6 = module_0.StackNode(var_11)
    assert stack_node_6.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_12 = stack_16.__len__()
    assert var_12 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_7 = module_0.StackNode(complex_0)
    with pytest.raises(ValueError):
        stack_14.pop()


@pytest.mark.xfail(strict=True)
def test_case_1767():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_2 = module_0.check_parenthesis(str_0)
    assert var_2 is False
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data is False
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_3 = module_0.StackNode(float_0)
    int_0 = -460
    stack_node_4 = module_0.StackNode(int_0)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_5 = stack_2.__len__()
    assert var_5 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_2)
    assert len(stack_node_8.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_1 = None
    stack_node_9 = module_0.StackNode(none_type_1)
    stack_node_10 = module_0.StackNode(stack_5)
    assert len(stack_node_10.data) == 0
    var_6 = stack_5.__len__()
    assert var_6 == 0
    stack_node_11 = module_0.StackNode(stack_5)
    assert len(stack_node_11.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_7 = stack_6.__len__()
    assert var_7 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_12 = module_0.StackNode(var_7)
    assert stack_node_12.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    module_0.check_parenthesis(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1768():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    bool_1 = False
    set_0 = {bool_1, bool_1, bool_1, bool_1}
    tuple_0 = (bool_1, bool_1)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_1, set_0, tuple_0, str_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.push(tuple_1)
    assert len(stack_4) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(stack_7)
    assert len(stack_node_3.data) == 0
    module_0.postfix_eval(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1769():
    int_0 = 4821
    set_0 = {int_0}
    var_0 = module_0.check_parenthesis(set_0)
    assert var_0 is True
    var_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_1770():
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is False
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_2 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    var_3 = stack_0.pop()
    assert len(stack_0) == 0
    int_0 = -460
    stack_node_0 = module_0.StackNode(int_0)
    module_0.postfix_eval(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1771():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    module_0.check_parenthesis(var_0)


def test_case_1772():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.push(none_type_0)
    assert len(stack_4) == 1
    var_3 = stack_4.pop()
    assert len(stack_4) == 0
    int_0 = -460
    stack_node_2 = module_0.StackNode(int_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_node_3 = module_0.StackNode(stack_7)
    assert len(stack_node_3.data) == 0
    var_6 = stack_7.push(var_5)
    assert len(stack_7) == 1
    assert len(stack_node_3.data) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    with pytest.raises(ValueError):
        stack_3.peek()


def test_case_1773():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    with pytest.raises(ValueError):
        stack_0.peek()


def test_case_1774():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_7.push(stack_9)
    assert len(stack_7) == 1
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_2 = module_0.StackNode(var_5)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_node_5 = module_0.StackNode(stack_12)
    assert len(stack_node_5.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_7 = stack_15.push(tuple_1)
    assert len(stack_15) == 1
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_8 = stack_17.__len__()
    assert var_8 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_6 = module_0.StackNode(var_8)
    assert stack_node_6.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_7 = module_0.StackNode(stack_17)
    assert len(stack_node_7.data) == 0
    with pytest.raises(ValueError):
        stack_6.peek()


@pytest.mark.xfail(strict=True)
def test_case_1775():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_2)
    assert len(stack_node_6.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_8 = module_0.StackNode(stack_6)
    assert len(stack_node_8.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_9 = module_0.StackNode(float_1)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_1 = None
    stack_node_10 = module_0.StackNode(none_type_1)
    stack_node_11 = module_0.StackNode(stack_9)
    assert len(stack_node_11.data) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_node_12 = module_0.StackNode(stack_9)
    assert len(stack_node_12.data) == 0
    bool_0 = True
    stack_node_13 = module_0.StackNode(bool_0)
    bool_1 = False
    stack_node_14 = module_0.StackNode(bool_1)
    stack_node_15 = module_0.StackNode(bool_1)
    none_type_2 = None
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.push(none_type_2)
    assert len(stack_10) == 1
    stack_node_16 = module_0.StackNode(var_6)
    stack_node_17 = module_0.StackNode(stack_node_16)
    bool_2 = False
    set_0 = {bool_2, bool_2, bool_2, bool_2}
    tuple_0 = (bool_2, bool_2)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_2, set_0, tuple_0, str_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.push(tuple_1)
    assert len(stack_11) == 1
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_1.push(stack_node_3)


def test_case_1776():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(stack_5)
    assert len(stack_node_6.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_8 = module_0.StackNode(stack_8)
    assert len(stack_node_8.data) == 0
    stack_node_9 = module_0.StackNode(stack_11)
    assert len(stack_node_9.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_10 = module_0.StackNode(complex_0)
    with pytest.raises(ValueError):
        stack_8.peek()


@pytest.mark.xfail(strict=True)
def test_case_1777():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1778():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_2)
    assert len(stack_node_6.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_8 = module_0.StackNode(stack_5)
    assert len(stack_node_8.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_9 = module_0.StackNode(var_3)
    assert stack_node_9.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_10 = module_0.StackNode(var_5)
    assert stack_node_10.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_6 = stack_15.__len__()
    assert var_6 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_11 = module_0.StackNode(var_6)
    assert stack_node_11.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_7 = stack_16.__len__()
    assert var_7 == 0
    var_8 = stack_18.__len__()
    assert var_8 == 0
    str_0 = "o2EICU9\x0bp7"
    stack_node_12 = module_0.StackNode(str_0)
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_9 = stack_20.__len__()
    assert var_9 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_13 = module_0.StackNode(var_9)
    assert stack_node_13.data == 0
    stack_node_14 = module_0.StackNode(stack_node_13)
    stack_node_15 = module_0.StackNode(stack_node_13)
    stack_node_16 = module_0.StackNode(stack_20)
    assert len(stack_node_16.data) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_17 = module_0.StackNode(var_9)
    assert stack_node_17.data == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_10 = stack_23.__len__()
    assert var_10 == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    module_0.check_parenthesis(var_1)


def test_case_1779():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    dict_1 = {}
    var_2 = module_0.check_parenthesis(dict_1)
    assert var_2 is True
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(stack_3)
    assert len(stack_node_4.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(stack_5)
    assert len(stack_node_6.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    none_type_1 = None
    stack_node_9 = module_0.StackNode(none_type_1)
    float_1 = 712.593
    dict_2 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_2)
    assert var_6 is True
    with pytest.raises(ValueError):
        stack_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_1780():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_1)
    assert stack_node_5.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(stack_3)
    assert len(stack_node_6.data) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_7 = module_0.StackNode(complex_0)
    module_0.postfix_eval(stack_0)


@pytest.mark.xfail(strict=True)
def test_case_1781():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_1782():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_2.push(stack_4)
    assert len(stack_2) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    dict_0 = {}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(var_4)
    assert stack_node_2.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(stack_6)
    assert len(stack_node_3.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    bool_0 = False
    stack_node_8 = module_0.StackNode(bool_0)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_9 = module_0.StackNode(stack_12)
    assert len(stack_node_9.data) == 0
    bool_1 = True
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.push(bool_1)
    assert len(stack_13) == 1
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_10 = module_0.StackNode(var_7)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_8 = module_0.check_parenthesis(dict_1)
    assert var_8 is True
    stack_node_12 = module_0.StackNode(float_0)
    module_0.postfix_eval(stack_6)


def test_case_1783():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    with pytest.raises(ValueError):
        stack_4.pop()


@pytest.mark.xfail(strict=True)
def test_case_1784():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_node_3 = module_0.StackNode(stack_node_2)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_4 = module_0.StackNode(float_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    module_0.check_parenthesis(none_type_1)


def test_case_1785():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(stack_3)
    assert len(stack_node_3.data) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    str_0 = ""
    var_3 = module_0.check_parenthesis(str_0)
    assert var_3 is True
    with pytest.raises(ValueError):
        module_0.postfix_eval(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1786():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    complex_0 = -3711.3 - 806.2j
    stack_node_1 = module_0.StackNode(complex_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(stack_2)
    assert len(stack_node_3.data) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_4 = module_0.StackNode(float_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_node_6 = module_0.StackNode(none_type_1)
    none_type_2 = None
    stack_node_7 = module_0.StackNode(none_type_2)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    none_type_3 = None
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.push(none_type_3)
    assert len(stack_8) == 1
    var_6 = stack_8.pop()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_7 = stack_9.__len__()
    assert var_7 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(var_7)
    assert stack_node_8.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_9 = module_0.StackNode(stack_10)
    assert len(stack_node_9.data) == 0
    var_2.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1787():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    module_0.postfix_eval(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1788():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is False
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_5)
    assert len(stack_node_3.data) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    bool_0 = True
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.push(bool_0)
    assert len(stack_7) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_7 = module_0.StackNode(stack_8)
    assert len(stack_node_7.data) == 0
    var_1.push(none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_1789():
    bool_0 = True
    stack_node_0 = module_0.StackNode(bool_0)
    bool_1 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_1)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(none_type_0)
    none_type_1 = None
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.push(none_type_1)
    assert len(stack_2) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_5.push(stack_7)
    assert len(stack_5) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_8)
    assert len(stack_node_7.data) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    var_6 = stack_8.push(stack_node_6)
    assert len(stack_8) == 1
    assert len(stack_node_7.data) == 1
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_8 = module_0.StackNode(var_7)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_10)
    assert len(stack_node_11.data) == 0
    var_8 = stack_11.__len__()
    assert var_8 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_9 = stack_12.__len__()
    assert var_9 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_12 = module_0.StackNode(var_9)
    assert stack_node_12.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_10 = stack_13.__len__()
    assert var_10 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_11 = stack_17.__len__()
    assert var_11 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_12 = stack_18.__len__()
    assert var_12 == 0
    stack_node_13 = module_0.StackNode(var_12)
    assert stack_node_13.data == 0
    var_3.push(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1790():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    dict_0 = {}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    var_6 = stack_10.__len__()
    assert var_6 == 0
    bool_0 = True
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.push(bool_0)
    assert len(stack_11) == 1
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_8 = stack_12.__len__()
    assert var_8 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_6 = module_0.StackNode(var_8)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    none_type_1 = None
    stack_node_8 = module_0.StackNode(none_type_1)
    stack_node_9 = module_0.StackNode(stack_15)
    assert len(stack_node_9.data) == 0
    var_9 = stack_15.__len__()
    assert var_9 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_10 = module_0.check_parenthesis(str_0)
    assert var_10 is False
    stack_node_10 = module_0.StackNode(var_10)
    assert stack_node_10.data is False
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_11 = stack_16.__len__()
    assert var_11 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    none_type_2 = None
    stack_node_11 = module_0.StackNode(none_type_2)
    bool_1 = False
    stack_node_12 = module_0.StackNode(bool_1)
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    bool_2 = True
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_12 = stack_19.push(bool_2)
    assert len(stack_19) == 1
    stack_node_13 = module_0.StackNode(var_12)
    module_0.check_parenthesis(var_11)


@pytest.mark.xfail(strict=True)
def test_case_1791():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    dict_0 = {}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(stack_5)
    assert len(stack_node_6.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_9.push(stack_11)
    assert len(stack_9) == 1
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_2 = None
    stack_node_8 = module_0.StackNode(none_type_2)
    stack_node_9 = module_0.StackNode(stack_12)
    assert len(stack_node_9.data) == 0
    var_7 = stack_12.__len__()
    assert var_7 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_8 = module_0.check_parenthesis(str_0)
    assert var_8 is False
    stack_node_10 = module_0.StackNode(var_8)
    assert stack_node_10.data is False
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    none_type_3 = None
    stack_node_11 = module_0.StackNode(none_type_3)
    stack_node_12 = module_0.StackNode(stack_13)
    assert len(stack_node_12.data) == 0
    var_9 = stack_13.__len__()
    assert var_9 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_10 = stack_14.__len__()
    assert var_10 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_11 = module_0.check_parenthesis(dict_1)
    assert var_11 is True
    stack_node_13 = module_0.StackNode(stack_16)
    assert len(stack_node_13.data) == 0
    bool_0 = False
    stack_node_14 = module_0.StackNode(bool_0)
    float_1 = 712.593
    dict_2 = {float_1: float_1, float_1: float_1}
    var_12 = module_0.check_parenthesis(dict_2)
    assert var_12 is True
    stack_node_15 = module_0.StackNode(float_1)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    module_0.check_parenthesis(stack_1)


@pytest.mark.xfail(strict=True)
def test_case_1792():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(stack_5)
    assert len(stack_node_3.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    bool_1 = False
    stack_node_4 = module_0.StackNode(bool_1)
    stack_node_5 = module_0.StackNode(bool_1)
    int_0 = 2594
    stack_node_6 = module_0.StackNode(int_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_11)
    assert len(stack_node_10.data) == 0
    module_0.check_parenthesis(var_4)


def test_case_1793():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    with pytest.raises(ValueError):
        stack_0.peek()


def test_case_1794():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_3)
    assert len(stack_node_7.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_8 = module_0.StackNode(var_2)
    assert stack_node_8.data == 0
    none_type_0 = None
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.push(none_type_0)
    assert len(stack_6) == 1
    var_4 = stack_6.pop()
    assert len(stack_6) == 0
    with pytest.raises(ValueError):
        stack_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_1795():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(stack_2)
    assert len(stack_node_0.data) == 0
    var_2 = stack_2.push(var_1)
    assert len(stack_2) == 1
    assert len(stack_node_0.data) == 1
    dict_1 = {}
    stack_node_1 = module_0.StackNode(dict_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(stack_3)
    assert len(stack_node_3.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_5)
    assert len(stack_node_6.data) == 0
    bool_0 = True
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.push(bool_0)
    assert len(stack_6) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_7 = module_0.StackNode(stack_7)
    assert len(stack_node_7.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_5.pop()


def test_case_1796():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_2 = module_0.StackNode(complex_0)
    str_0 = ""
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_1)
    assert len(stack_node_6.data) == 0
    str_1 = "o2EICU9\x0bp7"
    stack_node_7 = module_0.StackNode(str_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_10 = module_0.StackNode(stack_8)
    assert len(stack_node_10.data) == 0
    stack_node_11 = module_0.StackNode(stack_10)
    assert len(stack_node_11.data) == 0
    with pytest.raises(ValueError):
        stack_9.peek()


@pytest.mark.xfail(strict=True)
def test_case_1797():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_2)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_1 = stack_6.__len__()
    assert var_1 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.__len__()
    assert var_2 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    bool_1 = False
    stack_node_6 = module_0.StackNode(bool_1)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_node_7 = module_0.StackNode(float_0)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_9 = module_0.StackNode(stack_14)
    assert len(stack_node_9.data) == 0
    stack_node_10 = module_0.StackNode(stack_17)
    assert len(stack_node_10.data) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_7 = stack_18.__len__()
    assert var_7 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    none_type_0 = None
    stack_node_11 = module_0.StackNode(none_type_0)
    bool_2 = False
    stack_node_12 = module_0.StackNode(bool_2)
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    bool_3 = True
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    var_8 = stack_22.push(bool_3)
    assert len(stack_22) == 1
    stack_node_13 = module_0.StackNode(var_8)
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_9 = stack_23.__len__()
    assert var_9 == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_10 = module_0.check_parenthesis(dict_1)
    assert var_10 is True
    stack_node_14 = module_0.StackNode(stack_25)
    assert len(stack_node_14.data) == 0
    var_11 = stack_25.push(var_10)
    assert len(stack_25) == 1
    assert len(stack_node_14.data) == 1
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0
    var_12 = stack_26.__len__()
    assert var_12 == 0
    stack_27 = module_0.Stack()
    assert len(stack_27) == 0
    stack_node_15 = module_0.StackNode(var_12)
    assert stack_node_15.data == 0
    stack_node_16 = module_0.StackNode(stack_node_15)
    stack_node_17 = module_0.StackNode(stack_node_15)
    stack_node_18 = module_0.StackNode(stack_26)
    assert len(stack_node_18.data) == 0
    module_0.postfix_eval(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1798():
    bool_0 = False
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    var_0.push(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1799():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(tuple_1)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(stack_3)
    assert len(stack_node_1.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(stack_6)
    assert len(stack_node_3.data) == 0
    var_2 = stack_6.push(none_type_0)
    assert len(stack_6) == 1
    assert len(stack_node_3.data) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_7)
    assert len(stack_node_7.data) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    bool_1 = True
    stack_node_8 = module_0.StackNode(bool_1)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    int_0 = 2594
    stack_node_10 = module_0.StackNode(int_0)
    bool_2 = False
    stack_node_11 = module_0.StackNode(bool_2)
    stack_node_12 = module_0.StackNode(bool_2)
    none_type_1 = None
    stack_node_13 = module_0.StackNode(none_type_1)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_14.push(bool_2)
    assert len(stack_14) == 1
    bool_3 = True
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_8 = stack_15.push(bool_3)
    assert len(stack_15) == 1
    set_1 = {stack_15, stack_node_4, stack_1}
    var_7.push(set_1)


@pytest.mark.xfail(strict=True)
def test_case_1800():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    bool_1 = False
    stack_node_4 = module_0.StackNode(bool_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    bool_2 = True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.push(bool_2)
    assert len(stack_2) == 1
    stack_node_5 = module_0.StackNode(var_1)
    module_0.check_parenthesis(bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1801():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is False
    stack_node_5 = module_0.StackNode(var_1)
    assert stack_node_5.data is False
    bool_1 = False
    stack_node_6 = module_0.StackNode(bool_1)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_7 = module_0.StackNode(float_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    bool_2 = True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.push(bool_2)
    assert len(stack_3) == 1
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_10 = module_0.StackNode(var_5)
    assert stack_node_10.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_11 = module_0.StackNode(stack_9)
    assert len(stack_node_11.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    bool_3 = True
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.push(bool_3)
    assert len(stack_13) == 1
    dict_1 = {}
    stack_node_12 = module_0.StackNode(dict_1)
    none_type_2 = None
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_14.push(none_type_2)
    assert len(stack_14) == 1
    var_8 = stack_14.pop()
    assert len(stack_14) == 0
    var_3.peek()


@pytest.mark.xfail(strict=True)
def test_case_1802():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    module_0.postfix_eval(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1803():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    str_0 = ""
    var_4 = module_0.check_parenthesis(str_0)
    assert var_4 is True
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_node_7 = module_0.StackNode(stack_7)
    assert len(stack_node_7.data) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_8)
    assert len(stack_node_11.data) == 0
    var_7 = stack_9.__len__()
    assert var_7 == 0
    var_8 = stack_8.push(stack_node_10)
    assert len(stack_8) == 1
    assert len(stack_node_11.data) == 1
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_9 = stack_10.__len__()
    assert var_9 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_12 = module_0.StackNode(var_9)
    assert stack_node_12.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_13 = module_0.StackNode(stack_10)
    assert len(stack_node_13.data) == 0
    stack_node_14 = module_0.StackNode(stack_12)
    assert len(stack_node_14.data) == 0
    module_0.check_parenthesis(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1804():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(stack_6)
    assert len(stack_node_3.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data is True
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_node_6 = module_0.StackNode(stack_12)
    assert len(stack_node_6.data) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_6 = stack_15.push(stack_17)
    assert len(stack_15) == 1
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_7 = stack_18.__len__()
    assert var_7 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_8 = module_0.StackNode(var_7)
    assert stack_node_8.data == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_8 = stack_23.__len__()
    assert var_8 == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_node_9 = module_0.StackNode(var_8)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_24)
    assert len(stack_node_11.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_12 = module_0.StackNode(complex_0)
    module_0.check_parenthesis(stack_0)


@pytest.mark.xfail(strict=True)
def test_case_1805():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_node_3 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    bool_1 = False
    stack_node_5 = module_0.StackNode(bool_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    bool_2 = True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.push(bool_2)
    assert len(stack_2) == 1
    stack_node_6 = module_0.StackNode(var_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    stack_node_8 = module_0.StackNode(stack_3)
    assert len(stack_node_8.data) == 0
    none_type_2 = None
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.push(none_type_2)
    assert len(stack_4) == 1
    var_3 = stack_4.pop()
    assert len(stack_4) == 0
    none_type_3 = None
    stack_node_9 = module_0.StackNode(none_type_3)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    bool_3 = True
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.push(bool_3)
    assert len(stack_6) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    module_0.check_parenthesis(stack_node_1)


@pytest.mark.xfail(strict=True)
def test_case_1806():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_2 = module_0.check_parenthesis(str_0)
    assert var_2 is False
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_node_5 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.push(bool_0)
    assert len(stack_7) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(stack_9)
    assert len(stack_node_8.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_2 = None
    stack_node_9 = module_0.StackNode(none_type_2)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_7 = module_0.check_parenthesis(dict_0)
    assert var_7 is True
    var_8 = stack_12.__len__()
    assert var_8 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_9 = module_0.check_parenthesis(dict_1)
    assert var_9 is True
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_10 = stack_13.__len__()
    assert var_10 == 0
    stack_node_10 = module_0.StackNode(var_10)
    assert stack_node_10.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_11 = stack_14.__len__()
    assert var_11 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_11 = module_0.StackNode(var_11)
    assert stack_node_11.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_12 = module_0.check_parenthesis(dict_2)
    assert var_12 is True
    var_13 = stack_15.__len__()
    assert var_13 == 0
    var_6.peek()


def test_case_1807():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    with pytest.raises(ValueError):
        stack_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1808():
    bool_0 = True
    module_0.postfix_eval(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1809():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1810():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_1 = module_0.StackNode(var_4)
    assert stack_node_1.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    module_0.postfix_eval(stack_3)


def test_case_1811():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    with pytest.raises(ValueError):
        stack_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_1812():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_node_0 = module_0.StackNode(stack_0)
    assert len(stack_node_0.data) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    module_0.postfix_eval(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1813():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    bool_0 = True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.push(bool_0)
    assert len(stack_3) == 1
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(stack_5)
    assert len(stack_node_3.data) == 0
    bool_1 = True
    stack_node_4 = module_0.StackNode(bool_1)
    bool_2 = False
    stack_node_5 = module_0.StackNode(bool_2)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_6 = module_0.StackNode(float_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    dict_1 = {var_3: var_3, float_0: stack_node_5}
    stack_node_7 = module_0.StackNode(dict_1)
    bool_3 = False
    stack_node_8 = module_0.StackNode(bool_3)
    stack_node_9 = module_0.StackNode(bool_3)
    none_type_1 = None
    stack_node_10 = module_0.StackNode(none_type_1)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.push(bool_3)
    assert len(stack_10) == 1
    var_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1814():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(none_type_0)
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1815():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    var_1 = stack_4.push(none_type_1)
    assert len(stack_4) == 1
    assert len(stack_node_4.data) == 1
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1816():
    str_0 = "o2EICU9\x0bp7"
    stack_node_0 = module_0.StackNode(str_0)
    bool_0 = True
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    module_0.postfix_eval(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1817():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(none_type_0)
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    bool_1 = False
    stack_node_4 = module_0.StackNode(bool_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    bool_2 = True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.push(bool_2)
    assert len(stack_3) == 1
    stack_node_5 = module_0.StackNode(var_2)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    module_0.check_parenthesis(stack_2)


@pytest.mark.xfail(strict=True)
def test_case_1818():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    var_1.peek()


@pytest.mark.xfail(strict=True)
def test_case_1819():
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    dict_0 = {}
    stack_node_4 = module_0.StackNode(dict_0)
    str_1 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_2 = module_0.check_parenthesis(str_1)
    assert var_2 is False
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_3 = stack_1.__len__()
    assert var_3 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_2 = None
    stack_node_5 = module_0.StackNode(none_type_2)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_3)
    assert len(stack_node_9.data) == 0
    var_5 = stack_4.__len__()
    assert var_5 == 0
    var_6 = stack_3.push(stack_node_8)
    assert len(stack_3) == 1
    assert len(stack_node_9.data) == 1
    module_0.check_parenthesis(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1820():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_node_4 = module_0.StackNode(stack_6)
    assert len(stack_node_4.data) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    none_type_2 = None
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.push(none_type_2)
    assert len(stack_7) == 1
    var_5 = stack_7.pop()
    assert len(stack_7) == 0
    none_type_3 = None
    stack_node_5 = module_0.StackNode(none_type_3)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_7 = module_0.check_parenthesis(dict_0)
    assert var_7 is True
    var_8 = stack_8.__len__()
    assert var_8 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_6 = module_0.StackNode(complex_0)
    none_type_4 = None
    stack_node_7 = module_0.StackNode(none_type_4)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_5 = None
    stack_node_8 = module_0.StackNode(none_type_5)
    stack_node_9 = module_0.StackNode(stack_9)
    assert len(stack_node_9.data) == 0
    var_9 = stack_9.push(none_type_4)
    assert len(stack_9) == 1
    assert len(stack_node_9.data) == 1
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_10 = module_0.check_parenthesis(dict_1)
    assert var_10 is True
    stack_node_10 = module_0.StackNode(var_10)
    assert stack_node_10.data is True
    var_4.push(stack_3)


@pytest.mark.xfail(strict=True)
def test_case_1821():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_4 = module_0.StackNode(complex_0)
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_2 = None
    stack_node_6 = module_0.StackNode(none_type_2)
    stack_node_7 = module_0.StackNode(stack_3)
    assert len(stack_node_7.data) == 0
    var_2 = stack_3.push(none_type_1)
    assert len(stack_3) == 1
    assert len(stack_node_7.data) == 1
    none_type_3 = None
    stack_node_8 = module_0.StackNode(none_type_3)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    bool_0 = True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.push(bool_0)
    assert len(stack_5) == 1
    dict_0 = {}
    stack_node_9 = module_0.StackNode(dict_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_4 = None
    stack_node_10 = module_0.StackNode(none_type_4)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_11 = module_0.StackNode(var_5)
    assert stack_node_11.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_12 = module_0.StackNode(stack_9)
    assert len(stack_node_12.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_13 = module_0.StackNode(var_6)
    assert stack_node_13.data == 0
    stack_node_14 = module_0.StackNode(stack_node_13)
    stack_node_15 = module_0.StackNode(stack_node_13)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_7 = stack_15.__len__()
    assert var_7 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_16 = module_0.StackNode(var_7)
    assert stack_node_16.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    module_0.postfix_eval(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1822():
    str_0 = "7N2rk75+H<Rkxn"
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1823():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_1.data) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_1)
    assert len(stack_node_5.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_6 = module_0.StackNode(var_1)
    assert stack_node_6.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_5)
    assert len(stack_node_10.data) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    var_5 = stack_5.push(stack_node_9)
    assert len(stack_5) == 1
    assert len(stack_node_10.data) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_11 = module_0.StackNode(var_6)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_node_11)
    stack_node_14 = module_0.StackNode(stack_7)
    assert len(stack_node_14.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_15 = module_0.StackNode(var_7)
    assert stack_node_15.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_8 = stack_13.push(stack_15)
    assert len(stack_13) == 1
    int_0 = 2594
    stack_node_16 = module_0.StackNode(int_0)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_9 = stack_16.__len__()
    assert var_9 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_17 = module_0.StackNode(var_9)
    assert stack_node_17.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_10 = stack_19.__len__()
    assert var_10 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_11 = stack_20.__len__()
    assert var_11 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_12 = module_0.check_parenthesis(dict_0)
    assert var_12 is True
    stack_node_18 = module_0.StackNode(stack_22)
    assert len(stack_node_18.data) == 0
    bool_0 = True
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_13 = stack_23.push(bool_0)
    assert len(stack_23) == 1
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    var_14 = stack_24.__len__()
    assert var_14 == 0
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    stack_node_19 = module_0.StackNode(var_14)
    assert stack_node_19.data == 0
    stack_node_20 = module_0.StackNode(stack_node_19)
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0
    var_8.peek()


@pytest.mark.xfail(strict=True)
def test_case_1824():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(stack_2)
    assert len(stack_node_0.data) == 0
    var_2 = stack_2.push(var_1)
    assert len(stack_2) == 1
    assert len(stack_node_0.data) == 1
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    bool_1 = False
    stack_node_4 = module_0.StackNode(bool_1)
    stack_node_5 = module_0.StackNode(bool_1)
    none_type_0 = None
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.push(none_type_0)
    assert len(stack_4) == 1
    stack_node_6 = module_0.StackNode(var_4)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_7.push(stack_9)
    assert len(stack_7) == 1
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_7 = module_0.check_parenthesis(str_0)
    assert var_7 is False
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_8 = stack_10.__len__()
    assert var_8 == 0
    stack_node_8 = module_0.StackNode(var_8)
    assert stack_node_8.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_9 = stack_11.__len__()
    assert var_9 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_9 = module_0.StackNode(var_9)
    assert stack_node_9.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_10 = module_0.StackNode(stack_11)
    assert len(stack_node_10.data) == 0
    var_10 = stack_13.__len__()
    assert var_10 == 0
    module_0.postfix_eval(var_8)


@pytest.mark.xfail(strict=True)
def test_case_1825():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    dict_0 = {}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_3 = module_0.check_parenthesis(str_0)
    assert var_3 is False
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_1 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_4 = stack_2.push(tuple_1)
    assert len(stack_2) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    bool_1 = False
    stack_node_2 = module_0.StackNode(bool_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    module_0.check_parenthesis(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1826():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_node_1 = module_0.StackNode(none_type_1)
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data is True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    none_type_2 = None
    stack_node_9 = module_0.StackNode(none_type_2)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    var_7 = stack_9.__len__()
    assert var_7 == 0
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_8 = module_0.check_parenthesis(dict_2)
    assert var_8 is True
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    module_0.check_parenthesis(none_type_2)


def test_case_1827():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_node_6 = module_0.StackNode(stack_4)
    assert len(stack_node_6.data) == 0
    bool_1 = True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.push(bool_1)
    assert len(stack_5) == 1
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    stack_node_8 = module_0.StackNode(none_type_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_2 = None
    stack_node_9 = module_0.StackNode(none_type_2)
    stack_node_10 = module_0.StackNode(stack_7)
    assert len(stack_node_10.data) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_11 = module_0.StackNode(var_5)
    assert stack_node_11.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_12 = module_0.StackNode(stack_8)
    assert len(stack_node_12.data) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    none_type_3 = None
    stack_node_13 = module_0.StackNode(none_type_3)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_12.__len__()
    assert var_7 == 0
    with pytest.raises(ValueError):
        stack_8.peek()


@pytest.mark.xfail(strict=True)
def test_case_1828():
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    var_3 = stack_1.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_4)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(var_6)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_node_7 = module_0.StackNode(stack_10)
    assert len(stack_node_7.data) == 0
    var_7 = stack_10.push(none_type_0)
    assert len(stack_10) == 1
    assert len(stack_node_7.data) == 1
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_8 = stack_11.__len__()
    assert var_8 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_8 = module_0.StackNode(var_8)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_11)
    assert len(stack_node_11.data) == 0
    var_9 = stack_12.__len__()
    assert var_9 == 0
    var_1.pop()


def test_case_1829():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.push(tuple_1)
    assert len(stack_4) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_11)
    assert len(stack_node_8.data) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    var_6 = stack_11.push(stack_node_7)
    assert len(stack_11) == 1
    assert len(stack_node_8.data) == 1
    int_0 = -460
    stack_node_9 = module_0.StackNode(int_0)
    dict_0 = {}
    var_7 = module_0.check_parenthesis(dict_0)
    assert var_7 is True
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_10 = module_0.StackNode(var_8)
    assert stack_node_10.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_9 = stack_14.__len__()
    assert var_9 == 0
    var_10 = stack_14.__len__()
    assert var_10 == 0
    with pytest.raises(ValueError):
        stack_2.peek()


@pytest.mark.xfail(strict=True)
def test_case_1830():
    int_0 = -460
    stack_node_0 = module_0.StackNode(int_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_2.data) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_4 = module_0.StackNode(complex_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_7 = module_0.StackNode(float_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_9 = module_0.StackNode(stack_14)
    assert len(stack_node_9.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    none_type_1 = None
    stack_node_10 = module_0.StackNode(none_type_1)
    var_3.peek()


@pytest.mark.xfail(strict=True)
def test_case_1831():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    var_1 = stack_0.pop()
    assert len(stack_0) == 0
    bool_0 = True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.push(bool_0)
    assert len(stack_1) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_0 = module_0.StackNode(var_3)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_2 = module_0.StackNode(float_0)
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    bool_1 = False
    stack_node_4 = module_0.StackNode(bool_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    module_0.check_parenthesis(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1832():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_2 = module_0.check_parenthesis(str_0)
    assert var_2 is False
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data is False
    bool_1 = False
    stack_node_3 = module_0.StackNode(bool_1)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_4 = module_0.StackNode(float_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_4 = stack_2.push(var_0)
    assert len(stack_2) == 1
    var_4.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1833():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(none_type_0)
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.push(tuple_1)
    assert len(stack_1) == 1
    none_type_1 = None
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.push(none_type_1)
    assert len(stack_2) == 1
    var_3 = stack_2.pop()
    assert len(stack_2) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_3 = module_0.StackNode(complex_0)
    str_1 = ""
    var_4 = module_0.check_parenthesis(str_1)
    assert var_4 is True
    module_0.postfix_eval(var_2)


def test_case_1834():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_5 = module_0.StackNode(float_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_node_7 = module_0.StackNode(none_type_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    stack_node_8 = module_0.StackNode(stack_10)
    assert len(stack_node_8.data) == 0
    var_7 = stack_10.push(var_6)
    assert len(stack_10) == 1
    assert len(stack_node_8.data) == 1
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_8 = stack_11.__len__()
    assert var_8 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_9 = module_0.StackNode(var_8)
    assert stack_node_9.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_9 = stack_12.__len__()
    assert var_9 == 0
    var_10 = stack_12.__len__()
    assert var_10 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_11 = stack_16.__len__()
    assert var_11 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_10 = module_0.StackNode(var_11)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_16)
    assert len(stack_node_13.data) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_12 = stack_18.__len__()
    assert var_12 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    bool_0 = False
    stack_node_14 = module_0.StackNode(bool_0)
    stack_node_15 = module_0.StackNode(bool_0)
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_13 = stack_21.__len__()
    assert var_13 == 0
    stack_node_16 = module_0.StackNode(stack_node_15)
    with pytest.raises(ValueError):
        stack_8.pop()


def test_case_1835():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_2 = module_0.check_parenthesis(dict_1)
    assert var_2 is True
    stack_node_4 = module_0.StackNode(float_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    none_type_1 = None
    stack_node_8 = module_0.StackNode(none_type_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_6 = module_0.check_parenthesis(dict_2)
    assert var_6 is True
    var_7 = stack_6.__len__()
    assert var_7 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_8 = stack_7.__len__()
    assert var_8 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_9 = module_0.StackNode(var_8)
    assert stack_node_9.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_10 = module_0.StackNode(stack_8)
    assert len(stack_node_10.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0


@pytest.mark.xfail(strict=True)
def test_case_1836():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    int_0 = -460
    stack_node_4 = module_0.StackNode(int_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_2)
    assert len(stack_node_8.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_9 = module_0.StackNode(var_2)
    assert stack_node_9.data == 0
    bool_0 = False
    stack_node_10 = module_0.StackNode(bool_0)
    stack_node_11 = module_0.StackNode(bool_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    none_type_0 = None
    stack_node_13 = module_0.StackNode(none_type_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    none_type_1 = None
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.push(none_type_1)
    assert len(stack_7) == 1
    var_6 = stack_7.pop()
    assert len(stack_7) == 0
    module_0.postfix_eval(stack_node_10)


@pytest.mark.xfail(strict=True)
def test_case_1837():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_2 = module_0.StackNode(float_0)
    str_0 = ""
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is True
    int_0 = 2594
    stack_node_3 = module_0.StackNode(int_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_2 = stack_0.__len__()
    assert var_2 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_1.__len__()
    assert var_3 == 0
    module_0.check_parenthesis(stack_2)


def test_case_1838():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    str_0 = "o2EICU9\x0bp7"
    stack_node_2 = module_0.StackNode(str_0)
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_node_4 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.push(none_type_1)
    assert len(stack_1) == 1
    stack_node_5 = module_0.StackNode(var_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_6 = module_0.StackNode(stack_4)
    assert len(stack_node_6.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_7 = module_0.StackNode(stack_7)
    assert len(stack_node_7.data) == 0
    var_5 = stack_7.push(var_4)
    assert len(stack_7) == 1
    assert len(stack_node_7.data) == 1
    bool_1 = False
    set_0 = {bool_1, bool_1, bool_1, bool_1}
    tuple_0 = (bool_1, bool_1)
    str_1 = "B@kK%+yXf"
    tuple_1 = (bool_1, set_0, tuple_0, str_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.push(tuple_1)
    assert len(stack_8) == 1
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_8 = module_0.StackNode(complex_0)
    str_2 = ""
    var_7 = module_0.check_parenthesis(str_2)
    assert var_7 is True
    stack_node_9 = module_0.StackNode(var_7)
    assert stack_node_9.data is True
    with pytest.raises(ValueError):
        stack_9.pop()


@pytest.mark.xfail(strict=True)
def test_case_1839():
    str_0 = "o2EICU9\x0bp7"
    stack_node_0 = module_0.StackNode(str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1840():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.push(tuple_1)
    assert len(stack_8) == 1
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    bool_1 = False
    stack_node_4 = module_0.StackNode(bool_1)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    stack_node_5 = module_0.StackNode(float_1)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    dict_2 = {var_5: var_5, float_1: stack_node_4}
    stack_node_6 = module_0.StackNode(dict_2)
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    float_2 = 712.593
    dict_3 = {float_2: float_2, float_2: float_2}
    var_8 = module_0.check_parenthesis(dict_3)
    assert var_8 is True
    stack_node_8 = module_0.StackNode(stack_15)
    assert len(stack_node_8.data) == 0
    str_1 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_9 = module_0.check_parenthesis(str_1)
    assert var_9 is False
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_10 = stack_16.__len__()
    assert var_10 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_9 = module_0.StackNode(var_10)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_node_12 = module_0.StackNode(stack_16)
    assert len(stack_node_12.data) == 0
    var_11 = stack_17.__len__()
    assert var_11 == 0
    module_0.check_parenthesis(stack_node_12)


@pytest.mark.xfail(strict=True)
def test_case_1841():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_2 = module_0.StackNode(float_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    dict_1 = {var_1: var_1, float_0: stack_node_1}
    stack_node_3 = module_0.StackNode(dict_1)
    bool_1 = False
    stack_node_4 = module_0.StackNode(bool_1)
    stack_node_5 = module_0.StackNode(bool_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    int_0 = 2594
    stack_node_6 = module_0.StackNode(int_0)
    bool_2 = True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.push(bool_2)
    assert len(stack_4) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4.push(stack_7)


@pytest.mark.xfail(strict=True)
def test_case_1842():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    var_0.push(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1843():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    none_type_0 = None
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.push(none_type_0)
    assert len(stack_2) == 1
    var_2 = stack_2.pop()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_3 = module_0.StackNode(float_0)
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_6 = module_0.StackNode(bool_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_5 = stack_4.__len__()
    assert var_5 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_4)
    assert len(stack_node_10.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_11 = module_0.StackNode(var_5)
    assert stack_node_11.data == 0
    module_0.check_parenthesis(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1844():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_1.data) == 1
    str_0 = ""
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is True
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data is True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    dict_0 = {}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_node_6 = module_0.StackNode(bool_0)
    none_type_2 = None
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.push(none_type_2)
    assert len(stack_3) == 1
    stack_node_7 = module_0.StackNode(var_3)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_9 = module_0.StackNode(stack_6)
    assert len(stack_node_9.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    int_0 = 2594
    stack_node_10 = module_0.StackNode(int_0)
    bool_1 = True
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.push(bool_1)
    assert len(stack_10) == 1
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_3 = None
    stack_node_11 = module_0.StackNode(none_type_3)
    stack_node_12 = module_0.StackNode(none_type_3)
    complex_0 = -3711.3 - 806.2j
    stack_node_13 = module_0.StackNode(complex_0)
    var_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1845():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(stack_2)
    assert len(stack_node_3.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_3)
    assert len(stack_node_7.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_8 = module_0.StackNode(var_2)
    assert stack_node_8.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_9 = module_0.StackNode(stack_6)
    assert len(stack_node_9.data) == 0
    stack_node_10 = module_0.StackNode(stack_9)
    assert len(stack_node_10.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_11 = module_0.StackNode(var_3)
    assert stack_node_11.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_4 = stack_12.push(stack_14)
    assert len(stack_12) == 1
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_5 = stack_15.__len__()
    assert var_5 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_12 = module_0.StackNode(var_5)
    assert stack_node_12.data == 0
    dict_0 = {}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    var_7 = stack_16.__len__()
    assert var_7 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_8 = stack_17.__len__()
    assert var_8 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_9 = stack_19.__len__()
    assert var_9 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_13 = module_0.StackNode(var_9)
    assert stack_node_13.data == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_10 = stack_1.__len__()
    assert var_10 == 0
    var_10.push(stack_node_4)


def test_case_1846():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_5)
    assert len(stack_node_4.data) == 0
    with pytest.raises(ValueError):
        stack_6.pop()


@pytest.mark.xfail(strict=True)
def test_case_1847():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_5 = module_0.StackNode(stack_8)
    assert len(stack_node_5.data) == 0
    stack_node_6 = module_0.StackNode(stack_10)
    assert len(stack_node_6.data) == 0
    bool_0 = True
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.push(bool_0)
    assert len(stack_12) == 1
    stack_node_7 = module_0.StackNode(stack_12)
    assert len(stack_node_7.data) == 1
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    str_0 = ""
    var_7 = module_0.check_parenthesis(str_0)
    assert var_7 is True
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_8 = module_0.StackNode(stack_13)
    assert len(stack_node_8.data) == 0
    module_0.postfix_eval(stack_node_7)


@pytest.mark.xfail(strict=True)
def test_case_1848():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_0.__len__()
    assert var_2 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_1 = module_0.StackNode(none_type_1)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    var_3 = stack_1.__len__()
    assert var_3 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_4 = module_0.check_parenthesis(str_0)
    assert var_4 is False
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data is False
    var_2.push(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1849():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_0)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(stack_5)
    assert len(stack_node_4.data) == 0
    bool_1 = False
    stack_node_5 = module_0.StackNode(bool_1)
    stack_node_6 = module_0.StackNode(bool_1)
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.push(bool_1)
    assert len(stack_6) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_2 = None
    stack_node_8 = module_0.StackNode(none_type_2)
    stack_node_9 = module_0.StackNode(stack_7)
    assert len(stack_node_9.data) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_4 = module_0.check_parenthesis(str_0)
    assert var_4 is False
    stack_node_10 = module_0.StackNode(var_4)
    assert stack_node_10.data is False
    module_0.postfix_eval(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1850():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(tuple_1)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    bool_1 = False
    stack_node_6 = module_0.StackNode(bool_1)
    stack_node_7 = module_0.StackNode(bool_1)
    none_type_0 = None
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.push(none_type_0)
    assert len(stack_7) == 1
    stack_node_8 = module_0.StackNode(var_3)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_10 = module_0.StackNode(stack_8)
    assert len(stack_node_10.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_11 = module_0.StackNode(var_5)
    assert stack_node_11.data == 0
    none_type_1 = None
    stack_node_12 = module_0.StackNode(none_type_1)
    bool_2 = False
    stack_node_13 = module_0.StackNode(bool_2)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_6 = stack_15.__len__()
    assert var_6 == 0
    stack_node_14 = module_0.StackNode(var_6)
    assert stack_node_14.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_7 = stack_16.__len__()
    assert var_7 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_15 = module_0.StackNode(var_7)
    assert stack_node_15.data == 0
    stack_node_16 = module_0.StackNode(stack_node_15)
    stack_node_17 = module_0.StackNode(stack_16)
    assert len(stack_node_17.data) == 0
    var_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_1851():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_2.push(stack_4)
    assert len(stack_2) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(stack_6)
    assert len(stack_node_3.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_node_5 = module_0.StackNode(stack_9)
    assert len(stack_node_5.data) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_node_6 = module_0.StackNode(stack_9)
    assert len(stack_node_6.data) == 0
    module_0.postfix_eval(stack_node_6)


@pytest.mark.xfail(strict=True)
def test_case_1852():
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is False
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    dict_0 = {}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_5 = stack_7.__len__()
    assert var_5 == 0
    int_0 = 2594
    stack_node_6 = module_0.StackNode(int_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    stack_node_8 = module_0.StackNode(stack_8)
    assert len(stack_node_8.data) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_node_9 = module_0.StackNode(stack_8)
    assert len(stack_node_9.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_10 = module_0.StackNode(var_7)
    assert stack_node_10.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_11 = module_0.StackNode(stack_11)
    assert len(stack_node_11.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_8 = stack_15.__len__()
    assert var_8 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_12 = module_0.StackNode(var_8)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    module_0.postfix_eval(stack_node_6)


@pytest.mark.xfail(strict=True)
def test_case_1853():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_2 = module_0.check_parenthesis(str_0)
    assert var_2 is False
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data is False
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_1 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.push(tuple_1)
    assert len(stack_3) == 1
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data is True
    none_type_1 = None
    stack_node_8 = module_0.StackNode(none_type_1)
    module_0.check_parenthesis(bool_0)


def test_case_1854():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_0.__len__()
    assert var_2 == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_3 = stack_1.__len__()
    assert var_3 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_4 = stack_2.__len__()
    assert var_4 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_3.__len__()
    assert var_5 == 0
    var_6 = stack_3.__len__()
    assert var_6 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_7 = stack_7.__len__()
    assert var_7 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_7)
    assert stack_node_4.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_8 = stack_8.__len__()
    assert var_8 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_9 = stack_13.__len__()
    assert var_9 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_5 = module_0.StackNode(var_9)
    assert stack_node_5.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_6 = module_0.StackNode(stack_14)
    assert len(stack_node_6.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    bool_1 = False
    stack_node_7 = module_0.StackNode(bool_1)
    stack_node_8 = module_0.StackNode(bool_1)
    none_type_1 = None
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_10 = stack_18.push(none_type_1)
    assert len(stack_18) == 1
    stack_node_9 = module_0.StackNode(var_10)
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_11 = stack_19.__len__()
    assert var_11 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_11 = module_0.StackNode(var_11)
    assert stack_node_11.data == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_12 = module_0.StackNode(stack_19)
    assert len(stack_node_12.data) == 0
    stack_node_13 = module_0.StackNode(stack_22)
    assert len(stack_node_13.data) == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_12 = stack_23.__len__()
    assert var_12 == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    stack_node_14 = module_0.StackNode(var_12)
    assert stack_node_14.data == 0
    stack_node_15 = module_0.StackNode(stack_node_14)
    stack_node_16 = module_0.StackNode(stack_node_14)
    stack_node_17 = module_0.StackNode(stack_23)
    assert len(stack_node_17.data) == 0
    var_13 = stack_24.__len__()
    assert var_13 == 0
    with pytest.raises(ValueError):
        stack_12.pop()


def test_case_1855():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(stack_5)
    assert len(stack_node_3.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_node_6 = module_0.StackNode(stack_12)
    assert len(stack_node_6.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_8 = module_0.StackNode(stack_13)
    assert len(stack_node_8.data) == 0
    stack_node_9 = module_0.StackNode(stack_16)
    assert len(stack_node_9.data) == 0
    bool_0 = False
    stack_node_10 = module_0.StackNode(bool_0)
    int_0 = -460
    stack_node_11 = module_0.StackNode(int_0)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_6 = stack_17.__len__()
    assert var_6 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_12 = module_0.StackNode(var_6)
    assert stack_node_12.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_13 = module_0.StackNode(stack_18)
    assert len(stack_node_13.data) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_7 = stack_21.__len__()
    assert var_7 == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_14 = module_0.StackNode(var_7)
    assert stack_node_14.data == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    var_8 = stack_23.__len__()
    assert var_8 == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    with pytest.raises(ValueError):
        stack_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1856():
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is False
    str_1 = ""
    var_1 = module_0.check_parenthesis(str_1)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_2 = stack_0.__len__()
    assert var_2 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_4)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    bool_1 = True
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.push(bool_1)
    assert len(stack_7) == 1
    stack_node_7 = module_0.StackNode(var_5)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_7 = module_0.check_parenthesis(dict_0)
    assert var_7 is True
    stack_node_8 = module_0.StackNode(stack_10)
    assert len(stack_node_8.data) == 0
    var_8 = stack_10.push(var_7)
    assert len(stack_10) == 1
    assert len(stack_node_8.data) == 1
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_9 = stack_11.__len__()
    assert var_9 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_9 = module_0.StackNode(var_9)
    assert stack_node_9.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_10 = stack_13.__len__()
    assert var_10 == 0
    module_0.postfix_eval(stack_11)


@pytest.mark.xfail(strict=True)
def test_case_1857():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_3 = module_0.StackNode(stack_9)
    assert len(stack_node_3.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.push(tuple_1)
    assert len(stack_13) == 1
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    module_0.postfix_eval(stack_3)


def test_case_1858():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(stack_5)
    assert len(stack_node_7.data) == 0
    stack_node_8 = module_0.StackNode(stack_7)
    assert len(stack_node_8.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    dict_0 = {}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    var_7 = stack_10.__len__()
    assert var_7 == 0
    str_0 = "o2EICU9\x0bp7"
    stack_node_10 = module_0.StackNode(str_0)
    dict_1 = {}
    var_8 = module_0.check_parenthesis(dict_1)
    assert var_8 is True
    with pytest.raises(ValueError):
        stack_2.pop()


def test_case_1859():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    str_0 = ""
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is True
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_0 = module_0.StackNode(var_2)
    assert stack_node_0.data is True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(stack_4)
    assert len(stack_node_2.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_4 = module_0.StackNode(float_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    dict_2 = {var_4: var_4, float_1: stack_node_3}
    stack_node_5 = module_0.StackNode(dict_2)
    with pytest.raises(ValueError):
        stack_1.peek()


@pytest.mark.xfail(strict=True)
def test_case_1860():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_2 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    var_1 = stack_3.push(none_type_0)
    assert len(stack_3) == 1
    assert len(stack_node_5.data) == 1
    bool_0 = True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.push(bool_0)
    assert len(stack_4) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_2 = None
    stack_node_8 = module_0.StackNode(none_type_2)
    bool_1 = False
    stack_node_9 = module_0.StackNode(bool_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    int_0 = -460
    stack_node_10 = module_0.StackNode(int_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_11 = module_0.StackNode(var_4)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_13 = module_0.StackNode(var_5)
    assert stack_node_13.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    complex_1 = -3711.3 - 806.2j
    stack_node_14 = module_0.StackNode(complex_1)
    var_6.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1861():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(tuple_1)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(stack_8)
    assert len(stack_node_3.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_5 = stack_14.__len__()
    assert var_5 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    module_0.postfix_eval(stack_9)


def test_case_1862():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    with pytest.raises(ValueError):
        stack_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_1863():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_0.__len__()
    assert var_2 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_3 = stack_1.__len__()
    assert var_3 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    bool_0 = True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_5 = stack_4.push(bool_0)
    assert len(stack_4) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_6 = stack_5.__len__()
    assert var_6 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_5)
    assert len(stack_node_9.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    int_0 = -460
    stack_node_10 = module_0.StackNode(int_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_7 = stack_9.__len__()
    assert var_7 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_11 = module_0.StackNode(var_7)
    assert stack_node_11.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_8 = stack_11.__len__()
    assert var_8 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_2 = None
    stack_node_12 = module_0.StackNode(none_type_2)
    stack_node_13 = module_0.StackNode(stack_12)
    assert len(stack_node_13.data) == 0
    var_9 = stack_12.push(none_type_2)
    assert len(stack_12) == 1
    assert len(stack_node_13.data) == 1
    var_6.__len__()


def test_case_1864():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(stack_5)
    assert len(stack_node_4.data) == 0
    with pytest.raises(ValueError):
        stack_6.pop()


@pytest.mark.xfail(strict=True)
def test_case_1865():
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is False
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_1 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_1)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.push(tuple_1)
    assert len(stack_0) == 1
    var_1.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1866():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(stack_4)
    assert len(stack_node_3.data) == 0
    dict_0 = {}
    stack_node_4 = module_0.StackNode(dict_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_7)
    assert len(stack_node_8.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data is True
    bool_1 = False
    stack_node_10 = module_0.StackNode(bool_1)
    stack_node_11 = module_0.StackNode(bool_1)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_node_13 = module_0.StackNode(var_6)
    assert stack_node_13.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_14 = module_0.StackNode(var_7)
    assert stack_node_14.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    var_9 = stack_16.__len__()
    assert var_9 == 0
    bool_2 = False
    set_0 = {bool_2, bool_2, bool_2, bool_2}
    tuple_0 = (bool_2, bool_2)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_2, set_0, tuple_0, str_0)
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_10 = stack_18.push(tuple_1)
    assert len(stack_18) == 1
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    str_1 = ""
    var_11 = module_0.check_parenthesis(str_1)
    assert var_11 is True
    stack_node_15 = module_0.StackNode(var_11)
    assert stack_node_15.data is True
    module_0.check_parenthesis(stack_17)


def test_case_1867():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.push(none_type_0)
    assert len(stack_4) == 1
    stack_node_3 = module_0.StackNode(var_1)
    complex_0 = -3711.3 - 806.2j
    stack_node_4 = module_0.StackNode(complex_0)
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_2 = None
    stack_node_6 = module_0.StackNode(none_type_2)
    stack_node_7 = module_0.StackNode(stack_5)
    assert len(stack_node_7.data) == 0
    var_2 = stack_5.push(none_type_1)
    assert len(stack_5) == 1
    assert len(stack_node_7.data) == 1
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_6)
    assert len(stack_node_11.data) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    var_5 = stack_6.push(stack_node_10)
    assert len(stack_6) == 1
    assert len(stack_node_11.data) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_12 = module_0.StackNode(var_6)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_node_12)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_15 = module_0.StackNode(var_7)
    assert stack_node_15.data == 0
    stack_node_16 = module_0.StackNode(stack_node_15)
    stack_node_17 = module_0.StackNode(stack_10)
    assert len(stack_node_17.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_8 = stack_12.__len__()
    assert var_8 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_9 = module_0.check_parenthesis(dict_0)
    assert var_9 is True
    stack_node_18 = module_0.StackNode(stack_14)
    assert len(stack_node_18.data) == 0
    with pytest.raises(ValueError):
        stack_10.pop()


@pytest.mark.xfail(strict=True)
def test_case_1868():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    bool_0 = True
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.push(bool_0)
    assert len(stack_7) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    dict_0 = {}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    stack_node_8 = module_0.StackNode(stack_13)
    assert len(stack_node_8.data) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_8 = module_0.check_parenthesis(str_0)
    assert var_8 is False
    stack_node_9 = module_0.StackNode(var_8)
    assert stack_node_9.data is False
    var_5.push(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1869():
    object_0 = module_1.object()
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    none_type_1 = None
    module_0.postfix_eval(none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_1870():
    bool_0 = True
    module_0.check_parenthesis(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1871():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    module_0.postfix_eval(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1872():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is False
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_1.__len__()
    assert var_4 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_5 = stack_2.__len__()
    assert var_5 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_5)
    assert stack_node_2.data == 0
    none_type_1 = None
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_6 = stack_4.push(none_type_1)
    assert len(stack_4) == 1
    none_type_2 = None
    stack_node_3 = module_0.StackNode(none_type_2)
    bool_0 = True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_7 = stack_5.push(bool_0)
    assert len(stack_5) == 1
    bool_1 = False
    stack_node_4 = module_0.StackNode(bool_1)
    stack_node_5 = module_0.StackNode(bool_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_8 = stack_6.__len__()
    assert var_8 == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_9 = stack_7.__len__()
    assert var_9 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_9)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    none_type_3 = None
    stack_node_9 = module_0.StackNode(none_type_3)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_10 = stack_9.__len__()
    assert var_10 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_10 = module_0.StackNode(var_10)
    assert stack_node_10.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_4 = None
    stack_node_11 = module_0.StackNode(none_type_4)
    stack_node_12 = module_0.StackNode(stack_12)
    assert len(stack_node_12.data) == 0
    module_0.postfix_eval(none_type_3)


@pytest.mark.xfail(strict=True)
def test_case_1873():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_0.__len__()
    assert var_2 == 0
    str_0 = ""
    var_3 = module_0.check_parenthesis(str_0)
    assert var_3 is True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_4 = stack_1.__len__()
    assert var_4 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_4)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_node_6 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.push(none_type_1)
    assert len(stack_7) == 1
    stack_node_7 = module_0.StackNode(var_6)
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_7 = stack_8.__len__()
    assert var_7 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_9 = module_0.StackNode(var_7)
    assert stack_node_9.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_10 = module_0.StackNode(stack_8)
    assert len(stack_node_10.data) == 0
    var_8 = stack_10.__len__()
    assert var_8 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_9 = stack_12.__len__()
    assert var_9 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_11 = module_0.StackNode(var_9)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_13)
    assert len(stack_node_13.data) == 0
    none_type_2 = None
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_10 = stack_14.push(none_type_2)
    assert len(stack_14) == 1
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_11 = stack_15.__len__()
    assert var_11 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_14 = module_0.StackNode(var_11)
    assert stack_node_14.data == 0
    stack_node_15 = module_0.StackNode(stack_node_14)
    stack_node_16 = module_0.StackNode(stack_node_14)
    stack_node_17 = module_0.StackNode(stack_15)
    assert len(stack_node_17.data) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    module_0.postfix_eval(none_type_2)


def test_case_1874():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_2)
    assert len(stack_node_7.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    str_0 = ""
    var_2 = module_0.check_parenthesis(str_0)
    assert var_2 is True
    stack_node_8 = module_0.StackNode(var_2)
    assert stack_node_8.data is True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_9 = module_0.StackNode(var_3)
    assert stack_node_9.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_10 = module_0.StackNode(var_5)
    assert stack_node_10.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_6 = stack_12.push(stack_14)
    assert len(stack_12) == 1
    with pytest.raises(ValueError):
        stack_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_1875():
    int_0 = 2594
    stack_node_0 = module_0.StackNode(int_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    module_0.postfix_eval(stack_node_2)


@pytest.mark.xfail(strict=True)
def test_case_1876():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0.pop()


def test_case_1877():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_0 = stack_2.__len__()
    assert var_0 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_0)
    assert stack_node_2.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(stack_2)
    assert len(stack_node_3.data) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_3 = stack_11.__len__()
    assert var_3 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_7 = module_0.StackNode(stack_13)
    assert len(stack_node_7.data) == 0
    none_type_1 = None
    stack_node_8 = module_0.StackNode(none_type_1)
    bool_0 = False
    stack_node_9 = module_0.StackNode(bool_0)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    with pytest.raises(ValueError):
        stack_14.pop()


@pytest.mark.xfail(strict=True)
def test_case_1878():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    bool_0 = True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.push(bool_0)
    assert len(stack_1) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_0 = module_0.StackNode(var_2)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_node_4 = module_0.StackNode(stack_10)
    assert len(stack_node_4.data) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_node_5 = module_0.StackNode(stack_10)
    assert len(stack_node_5.data) == 0
    var_4.peek()


def test_case_1879():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    with pytest.raises(ValueError):
        stack_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1880():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    str_0 = ""
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is True
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data is True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_node_5 = module_0.StackNode(stack_10)
    assert len(stack_node_5.data) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_node_6 = module_0.StackNode(stack_10)
    assert len(stack_node_6.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    stack_node_8 = module_0.StackNode(stack_11)
    assert len(stack_node_8.data) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    str_1 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_6 = module_0.check_parenthesis(str_1)
    assert var_6 is False
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data is False
    module_0.check_parenthesis(stack_node_8)


@pytest.mark.xfail(strict=True)
def test_case_1881():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    module_0.postfix_eval(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1882():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    str_0 = "o2EICU9\x0bp7"
    stack_node_2 = module_0.StackNode(str_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_node_6 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.push(none_type_0)
    assert len(stack_6) == 1
    stack_node_7 = module_0.StackNode(var_2)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_7)
    assert len(stack_node_11.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_12 = module_0.StackNode(var_4)
    assert stack_node_12.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_13 = module_0.StackNode(var_6)
    assert stack_node_13.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    var_8 = stack_15.__len__()
    assert var_8 == 0
    bool_1 = False
    stack_node_14 = module_0.StackNode(bool_1)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_9 = module_0.check_parenthesis(dict_0)
    assert var_9 is True
    stack_node_15 = module_0.StackNode(float_0)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_1883():
    dict_0 = {}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    module_0.postfix_eval(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1884():
    str_0 = "o2EICU9\x0bp7"
    stack_node_0 = module_0.StackNode(str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    module_0.check_parenthesis(stack_4)


@pytest.mark.xfail(strict=True)
def test_case_1885():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_5)
    assert len(stack_node_10.data) == 0
    var_6 = stack_6.__len__()
    assert var_6 == 0
    var_7 = stack_5.push(stack_node_9)
    assert len(stack_5) == 1
    assert len(stack_node_10.data) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_1 = None
    stack_node_11 = module_0.StackNode(none_type_1)
    stack_node_12 = module_0.StackNode(stack_7)
    assert len(stack_node_12.data) == 0
    var_8 = stack_7.push(none_type_1)
    assert len(stack_7) == 1
    assert len(stack_node_12.data) == 1
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_9 = module_0.check_parenthesis(dict_1)
    assert var_9 is True
    stack_node_13 = module_0.StackNode(float_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_2 = None
    stack_node_14 = module_0.StackNode(none_type_2)
    stack_node_15 = module_0.StackNode(none_type_2)
    str_0 = ""
    var_10 = module_0.check_parenthesis(str_0)
    assert var_10 is True
    stack_node_16 = module_0.StackNode(var_10)
    assert stack_node_16.data is True
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_11 = stack_9.__len__()
    assert var_11 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_17 = module_0.StackNode(var_11)
    assert stack_node_17.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_12 = stack_10.__len__()
    assert var_12 == 0
    var_13 = stack_12.__len__()
    assert var_13 == 0
    var_12.pop()


@pytest.mark.xfail(strict=True)
def test_case_1886():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_6)
    assert len(stack_node_4.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    var_2.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1887():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    module_0.check_parenthesis(stack_0)


@pytest.mark.xfail(strict=True)
def test_case_1888():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_3 = module_0.StackNode(stack_10)
    assert len(stack_node_3.data) == 0
    var_5 = stack_10.push(var_4)
    assert len(stack_10) == 1
    assert len(stack_node_3.data) == 1
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_4 = module_0.StackNode(var_6)
    assert stack_node_4.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_7 = stack_12.__len__()
    assert var_7 == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    var_4.pop()


@pytest.mark.xfail(strict=True)
def test_case_1889():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    module_0.check_parenthesis(stack_node_0)


@pytest.mark.xfail(strict=True)
def test_case_1890():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(tuple_1)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    module_0.check_parenthesis(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1891():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_0)
    assert stack_node_4.data == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_5 = module_0.StackNode(float_0)
    var_1.peek()


@pytest.mark.xfail(strict=True)
def test_case_1892():
    str_0 = "o2EICU9\x0bp7"
    stack_node_0 = module_0.StackNode(str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    bool_0 = True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.push(bool_0)
    assert len(stack_5) == 1
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(var_4)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    bool_1 = False
    stack_node_5 = module_0.StackNode(bool_1)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_node_6 = module_0.StackNode(bool_1)
    bool_2 = False
    stack_node_7 = module_0.StackNode(bool_2)
    stack_node_8 = module_0.StackNode(bool_2)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    bool_3 = False
    stack_node_10 = module_0.StackNode(bool_3)
    var_1.push(stack_10)


@pytest.mark.xfail(strict=True)
def test_case_1893():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    str_0 = "o2EICU9\x0bp7"
    stack_node_4 = module_0.StackNode(str_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(var_1)
    assert stack_node_5.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_7 = module_0.StackNode(stack_9)
    assert len(stack_node_7.data) == 0
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_9 = module_0.StackNode(bool_0)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    bool_1 = True
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_4 = stack_13.push(bool_1)
    assert len(stack_13) == 1
    stack_node_10 = module_0.StackNode(var_4)
    bool_2 = True
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_5 = stack_14.push(bool_2)
    assert len(stack_14) == 1
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    none_type_1 = None
    stack_node_11 = module_0.StackNode(none_type_1)
    stack_node_12 = module_0.StackNode(none_type_1)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_6 = stack_16.__len__()
    assert var_6 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_13 = module_0.StackNode(var_6)
    assert stack_node_13.data == 0
    dict_0 = {}
    var_7 = module_0.check_parenthesis(dict_0)
    assert var_7 is True
    var_8 = stack_17.__len__()
    assert var_8 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    none_type_2 = None
    stack_node_14 = module_0.StackNode(none_type_2)
    stack_node_15 = module_0.StackNode(stack_18)
    assert len(stack_node_15.data) == 0
    var_9 = stack_18.__len__()
    assert var_9 == 0
    str_1 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_10 = module_0.check_parenthesis(str_1)
    assert var_10 is False
    stack_node_16 = module_0.StackNode(var_10)
    assert stack_node_16.data is False
    bool_3 = False
    set_0 = {bool_3, bool_3, bool_3, bool_3}
    tuple_0 = (bool_3, bool_3)
    str_2 = "B@kK%+yXf"
    tuple_1 = (bool_3, set_0, tuple_0, str_2)
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_11 = stack_19.push(tuple_1)
    assert len(stack_19) == 1
    var_1.peek()


def test_case_1894():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_7 = module_0.StackNode(stack_11)
    assert len(stack_node_7.data) == 0
    stack_node_8 = module_0.StackNode(stack_13)
    assert len(stack_node_8.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_5 = stack_15.__len__()
    assert var_5 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_6 = stack_17.__len__()
    assert var_6 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_7 = stack_18.__len__()
    assert var_7 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_10 = module_0.StackNode(var_7)
    assert stack_node_10.data == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_11 = module_0.StackNode(stack_19)
    assert len(stack_node_11.data) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    var_8 = stack_22.__len__()
    assert var_8 == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_9 = module_0.check_parenthesis(dict_0)
    assert var_9 is True
    stack_node_12 = module_0.StackNode(stack_24)
    assert len(stack_node_12.data) == 0
    var_10 = stack_24.push(var_9)
    assert len(stack_24) == 1
    assert len(stack_node_12.data) == 1
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_11 = module_0.check_parenthesis(dict_1)
    assert var_11 is True
    stack_node_13 = module_0.StackNode(float_1)
    stack_25 = module_0.Stack()
    assert len(stack_25) == 0
    var_12 = stack_25.__len__()
    assert var_12 == 0
    stack_26 = module_0.Stack()
    assert len(stack_26) == 0
    stack_node_14 = module_0.StackNode(var_12)
    assert stack_node_14.data == 0
    stack_node_15 = module_0.StackNode(stack_node_14)
    stack_node_16 = module_0.StackNode(stack_node_14)
    stack_node_17 = module_0.StackNode(stack_25)
    assert len(stack_node_17.data) == 0
    stack_27 = module_0.Stack()
    assert len(stack_27) == 0
    stack_node_18 = module_0.StackNode(var_12)
    assert stack_node_18.data == 0
    with pytest.raises(ValueError):
        stack_12.pop()


@pytest.mark.xfail(strict=True)
def test_case_1895():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    module_0.postfix_eval(stack_0)


def test_case_1896():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data is True
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is False
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    bool_1 = False
    set_0 = {bool_1, bool_1, bool_1, bool_1}
    tuple_0 = (bool_1, bool_1)
    str_1 = "B@kK%+yXf"
    tuple_1 = (bool_1, set_0, tuple_0, str_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.push(tuple_1)
    assert len(stack_1) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_3)
    assert len(stack_node_6.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    with pytest.raises(ValueError):
        stack_9.pop()


@pytest.mark.xfail(strict=True)
def test_case_1897():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_1.data) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    dict_0 = {}
    stack_node_2 = module_0.StackNode(dict_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_4)
    assert len(stack_node_6.data) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_8 = module_0.StackNode(stack_7)
    assert len(stack_node_8.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_6 = stack_15.__len__()
    assert var_6 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_15)
    assert len(stack_node_13.data) == 0
    var_7 = stack_16.__len__()
    assert var_7 == 0
    var_8 = stack_15.push(stack_node_12)
    assert len(stack_15) == 1
    assert len(stack_node_13.data) == 1
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_9 = stack_17.__len__()
    assert var_9 == 0
    stack_node_14 = module_0.StackNode(var_9)
    assert stack_node_14.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_10 = stack_18.__len__()
    assert var_10 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_15 = module_0.StackNode(var_10)
    assert stack_node_15.data == 0
    stack_node_16 = module_0.StackNode(stack_node_15)
    stack_node_17 = module_0.StackNode(stack_18)
    assert len(stack_node_17.data) == 0
    module_0.postfix_eval(stack_node_3)


@pytest.mark.xfail(strict=True)
def test_case_1898():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(stack_6)
    assert len(stack_node_3.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    module_0.check_parenthesis(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1899():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_2 = module_0.StackNode(bool_0)
    bool_1 = False
    stack_node_3 = module_0.StackNode(bool_1)
    stack_node_4 = module_0.StackNode(bool_1)
    none_type_1 = None
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.push(none_type_1)
    assert len(stack_1) == 1
    stack_node_5 = module_0.StackNode(var_1)
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_8 = module_0.StackNode(stack_3)
    assert len(stack_node_8.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_9 = module_0.StackNode(var_3)
    assert stack_node_9.data == 0
    dict_1 = {}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_8)
    assert len(stack_node_13.data) == 0
    none_type_2 = None
    stack_node_14 = module_0.StackNode(none_type_2)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_8 = stack_11.__len__()
    assert var_8 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_15 = module_0.StackNode(var_8)
    assert stack_node_15.data == 0
    stack_node_16 = module_0.StackNode(stack_node_15)
    stack_node_17 = module_0.StackNode(stack_node_15)
    none_type_3 = None
    stack_node_18 = module_0.StackNode(none_type_3)
    var_3.push(stack_1)


@pytest.mark.xfail(strict=True)
def test_case_1900():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    dict_1 = {var_0: var_0, float_0: stack_node_0}
    stack_node_2 = module_0.StackNode(dict_1)
    str_0 = ""
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is True
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data is True
    float_1 = 712.593
    dict_2 = {float_1: float_1, float_1: float_1}
    var_2 = module_0.check_parenthesis(dict_2)
    assert var_2 is True
    stack_node_4 = module_0.StackNode(float_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_8 = module_0.StackNode(stack_4)
    assert len(stack_node_8.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_1 = None
    stack_node_9 = module_0.StackNode(none_type_1)
    bool_1 = False
    stack_node_10 = module_0.StackNode(bool_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    bool_2 = True
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.push(bool_2)
    assert len(stack_9) == 1
    stack_node_11 = module_0.StackNode(var_4)
    module_0.postfix_eval(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1901():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_0.__len__()


def test_case_1902():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_1)
    assert len(stack_node_5.data) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    with pytest.raises(ValueError):
        stack_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1903():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(tuple_1)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    bool_1 = True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.push(bool_1)
    assert len(stack_2) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(none_type_0)
    module_0.postfix_eval(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1904():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(stack_4)
    assert len(stack_node_3.data) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    none_type_2 = None
    stack_node_8 = module_0.StackNode(none_type_2)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    var_7 = stack_7.__len__()
    assert var_7 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_8 = stack_8.__len__()
    assert var_8 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_9 = module_0.StackNode(var_8)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_9)
    assert len(stack_node_11.data) == 0
    module_0.postfix_eval(none_type_2)


@pytest.mark.xfail(strict=True)
def test_case_1905():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.push(none_type_0)
    assert len(stack_1) == 1
    stack_node_3 = module_0.StackNode(var_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    bool_1 = True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.push(bool_1)
    assert len(stack_3) == 1
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    module_0.postfix_eval(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1906():
    bool_0 = True
    module_0.postfix_eval(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1907():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(stack_2)
    assert len(stack_node_0.data) == 0
    var_2 = stack_2.push(var_1)
    assert len(stack_2) == 1
    assert len(stack_node_0.data) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_5.push(stack_7)
    assert len(stack_5) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_2 = module_0.StackNode(stack_8)
    assert len(stack_node_2.data) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    bool_1 = False
    stack_node_6 = module_0.StackNode(bool_1)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    stack_node_7 = module_0.StackNode(bool_1)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_7 = module_0.check_parenthesis(dict_2)
    assert var_7 is True
    stack_node_8 = module_0.StackNode(stack_13)
    assert len(stack_node_8.data) == 0
    bool_2 = False
    stack_node_9 = module_0.StackNode(bool_2)
    float_3 = 712.593
    dict_3 = {float_3: float_3, float_3: float_3}
    var_8 = module_0.check_parenthesis(dict_3)
    assert var_8 is True
    stack_node_10 = module_0.StackNode(float_3)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    dict_4 = {var_8: var_8, float_3: stack_node_9}
    stack_node_11 = module_0.StackNode(dict_4)
    module_0.check_parenthesis(float_2)


@pytest.mark.xfail(strict=True)
def test_case_1908():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_node_5 = module_0.StackNode(bool_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_1909():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_1)
    assert len(stack_node_6.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    bool_1 = False
    stack_node_10 = module_0.StackNode(bool_1)
    stack_node_11 = module_0.StackNode(bool_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_12 = module_0.StackNode(var_3)
    assert stack_node_12.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_13 = module_0.StackNode(stack_7)
    assert len(stack_node_13.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    int_0 = -460
    stack_node_14 = module_0.StackNode(int_0)
    module_0.check_parenthesis(stack_node_4)


def test_case_1910():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_0.__len__()
    assert var_2 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_3 = stack_1.__len__()
    assert var_3 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    with pytest.raises(ValueError):
        stack_1.peek()


@pytest.mark.xfail(strict=True)
def test_case_1911():
    dict_0 = {}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    var_0.pop()


def test_case_1912():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(tuple_1)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_6.push(stack_8)
    assert len(stack_6) == 1
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_node_7 = module_0.StackNode(stack_10)
    assert len(stack_node_7.data) == 0
    var_5 = stack_10.push(none_type_1)
    assert len(stack_10) == 1
    assert len(stack_node_7.data) == 1
    none_type_2 = None
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.push(none_type_2)
    assert len(stack_11) == 1
    var_7 = stack_11.pop()
    assert len(stack_11) == 0
    none_type_3 = None
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_8 = stack_12.push(none_type_3)
    assert len(stack_12) == 1
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_9 = module_0.check_parenthesis(dict_0)
    assert var_9 is True
    stack_node_8 = module_0.StackNode(var_9)
    assert stack_node_8.data is True
    complex_0 = -3711.3 - 806.2j
    stack_node_9 = module_0.StackNode(complex_0)
    none_type_4 = None
    stack_node_10 = module_0.StackNode(none_type_4)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    none_type_5 = None
    stack_node_11 = module_0.StackNode(none_type_5)
    stack_node_12 = module_0.StackNode(stack_14)
    assert len(stack_node_12.data) == 0
    var_10 = stack_14.push(none_type_4)
    assert len(stack_14) == 1
    assert len(stack_node_12.data) == 1
    with pytest.raises(ValueError):
        stack_7.peek()


@pytest.mark.xfail(strict=True)
def test_case_1913():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    bool_0 = True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.push(bool_0)
    assert len(stack_2) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_node_5 = module_0.StackNode(none_type_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_4.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1914():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_node_5 = module_0.StackNode(stack_1)
    assert len(stack_node_5.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    str_0 = "o2EICU9\x0bp7"
    stack_node_6 = module_0.StackNode(str_0)
    none_type_2 = None
    stack_node_7 = module_0.StackNode(none_type_2)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_8 = module_0.StackNode(var_2)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_6)
    assert len(stack_node_11.data) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_12 = module_0.StackNode(complex_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_13 = module_0.StackNode(var_4)
    assert stack_node_13.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_1915():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    module_0.postfix_eval(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1916():
    dict_0 = {}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    module_0.postfix_eval(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1917():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_2)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    stack_node_1 = module_0.StackNode(float_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_node_2 = module_0.StackNode(var_4)
    assert stack_node_2.data == 0
    str_0 = ""
    var_5 = module_0.check_parenthesis(str_0)
    assert var_5 is True
    var_1.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1918():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    var_3 = stack_3.push(var_2)
    assert len(stack_3) == 1
    assert len(stack_node_2.data) == 1
    str_0 = ""
    var_4 = module_0.check_parenthesis(str_0)
    assert var_4 is True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    var_5 = stack_4.__len__()
    assert var_5 == 0
    str_1 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_6 = module_0.check_parenthesis(str_1)
    assert var_6 is False
    stack_node_5 = module_0.StackNode(var_6)
    assert stack_node_5.data is False
    none_type_1 = None
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_7 = stack_5.push(none_type_1)
    assert len(stack_5) == 1
    var_8 = stack_5.pop()
    assert len(stack_5) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_9 = module_0.check_parenthesis(dict_1)
    assert var_9 is True
    stack_node_6 = module_0.StackNode(var_9)
    assert stack_node_6.data is True
    bool_1 = False
    set_0 = {bool_1, bool_1, bool_1, bool_1}
    tuple_0 = (bool_1, bool_1)
    str_2 = "B@kK%+yXf"
    tuple_1 = (bool_1, set_0, tuple_0, str_2)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_10 = stack_6.push(tuple_1)
    assert len(stack_6) == 1
    module_0.check_parenthesis(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1919():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    module_0.postfix_eval(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1920():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_node_0 = module_0.StackNode(stack_0)
    assert len(stack_node_0.data) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_3)
    assert len(stack_node_4.data) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    var_3 = stack_3.push(stack_node_3)
    assert len(stack_3) == 1
    assert len(stack_node_4.data) == 1
    module_0.check_parenthesis(stack_node_4)


def test_case_1921():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_4)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(stack_6)
    assert len(stack_node_2.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    with pytest.raises(ValueError):
        stack_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_1922():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    none_type_1 = None
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.push(none_type_1)
    assert len(stack_1) == 1
    var_3 = stack_1.pop()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_4 = stack_2.__len__()
    assert var_4 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data is True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_6 = stack_5.__len__()
    assert var_6 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_6)
    assert stack_node_5.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2.peek()


def test_case_1923():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(stack_4)
    assert len(stack_node_3.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.__len__()
    assert var_2 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_5 = module_0.StackNode(stack_8)
    assert len(stack_node_5.data) == 0
    bool_1 = True
    stack_node_6 = module_0.StackNode(bool_1)
    bool_2 = False
    stack_node_7 = module_0.StackNode(bool_2)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_8 = module_0.StackNode(float_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    bool_3 = False
    stack_node_10 = module_0.StackNode(bool_3)
    stack_node_11 = module_0.StackNode(bool_3)
    none_type_1 = None
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_5 = stack_16.push(none_type_1)
    assert len(stack_16) == 1
    stack_node_12 = module_0.StackNode(var_5)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    stack_node_13 = module_0.StackNode(float_1)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    none_type_2 = None
    stack_node_14 = module_0.StackNode(none_type_2)
    stack_node_15 = module_0.StackNode(none_type_2)
    none_type_3 = None
    stack_node_16 = module_0.StackNode(none_type_3)
    bool_4 = False
    stack_node_17 = module_0.StackNode(bool_4)
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    none_type_4 = None
    stack_node_18 = module_0.StackNode(none_type_4)
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_7 = stack_19.__len__()
    assert var_7 == 0
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_8 = module_0.check_parenthesis(dict_2)
    assert var_8 is True
    var_9 = stack_19.__len__()
    assert var_9 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    with pytest.raises(ValueError):
        stack_20.pop()


@pytest.mark.xfail(strict=True)
def test_case_1924():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_0 = None
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.push(none_type_0)
    assert len(stack_8) == 1
    var_4 = stack_8.pop()
    assert len(stack_8) == 0
    bool_0 = True
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.push(bool_0)
    assert len(stack_9) == 1
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_5 = module_0.StackNode(var_6)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_11)
    assert len(stack_node_8.data) == 0
    none_type_2 = None
    stack_node_9 = module_0.StackNode(none_type_2)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_9 = module_0.check_parenthesis(dict_0)
    assert var_9 is True
    stack_node_10 = module_0.StackNode(stack_16)
    assert len(stack_node_10.data) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_10 = stack_17.__len__()
    assert var_10 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_11 = module_0.StackNode(var_10)
    assert stack_node_11.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_12 = module_0.StackNode(stack_18)
    assert len(stack_node_12.data) == 0
    bool_1 = False
    set_0 = {bool_1, bool_1, bool_1, bool_1}
    tuple_0 = (bool_1, bool_1)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_1, set_0, tuple_0, str_0)
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_11 = stack_20.push(tuple_1)
    assert len(stack_20) == 1
    module_0.postfix_eval(none_type_2)


@pytest.mark.xfail(strict=True)
def test_case_1925():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    module_0.postfix_eval(stack_0)


@pytest.mark.xfail(strict=True)
def test_case_1926():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_5)
    assert len(stack_node_5.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data is True
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    bool_1 = False
    stack_node_8 = module_0.StackNode(bool_1)
    stack_node_9 = module_0.StackNode(bool_1)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    var_8 = stack_11.__len__()
    assert var_8 == 0
    bool_2 = False
    stack_node_11 = module_0.StackNode(bool_2)
    stack_node_12 = module_0.StackNode(bool_2)
    none_type_0 = None
    stack_node_13 = module_0.StackNode(none_type_0)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_9 = stack_15.push(bool_2)
    assert len(stack_15) == 1
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_10 = module_0.check_parenthesis(dict_1)
    assert var_10 is True
    stack_node_14 = module_0.StackNode(float_1)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    none_type_1 = None
    stack_node_15 = module_0.StackNode(none_type_1)
    stack_node_16 = module_0.StackNode(none_type_1)
    str_0 = ""
    var_11 = module_0.check_parenthesis(str_0)
    assert var_11 is True
    stack_node_17 = module_0.StackNode(var_11)
    assert stack_node_17.data is True
    module_0.postfix_eval(stack_10)


@pytest.mark.xfail(strict=True)
def test_case_1927():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(stack_6)
    assert len(stack_node_2.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_3 = module_0.StackNode(var_5)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_10)
    assert len(stack_node_5.data) == 0
    module_0.check_parenthesis(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1928():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_2 = module_0.StackNode(bool_0)
    var_0.push(bool_0)


def test_case_1929():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    complex_0 = -3711.3 - 806.2j
    stack_node_3 = module_0.StackNode(complex_0)
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_2 = None
    stack_node_5 = module_0.StackNode(none_type_2)
    stack_node_6 = module_0.StackNode(stack_1)
    assert len(stack_node_6.data) == 0
    var_1 = stack_1.push(none_type_1)
    assert len(stack_1) == 1
    assert len(stack_node_6.data) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_8 = module_0.StackNode(stack_3)
    assert len(stack_node_8.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    int_0 = 2594
    stack_node_10 = module_0.StackNode(int_0)
    none_type_3 = None
    stack_node_11 = module_0.StackNode(none_type_3)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_4 = None
    stack_node_12 = module_0.StackNode(none_type_4)
    bool_1 = False
    stack_node_13 = module_0.StackNode(bool_1)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_14 = module_0.StackNode(var_7)
    assert stack_node_14.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_15 = module_0.StackNode(var_8)
    assert stack_node_15.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_16 = module_0.StackNode(stack_14)
    assert len(stack_node_16.data) == 0
    stack_node_17 = module_0.StackNode(stack_17)
    assert len(stack_node_17.data) == 0
    with pytest.raises(ValueError):
        stack_6.peek()


@pytest.mark.xfail(strict=True)
def test_case_1930():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    bool_0 = True
    stack_node_2 = module_0.StackNode(bool_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    module_0.check_parenthesis(stack_6)


@pytest.mark.xfail(strict=True)
def test_case_1931():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_5 = stack_5.__len__()
    assert var_5 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_node_3 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_7 = stack_6.push(bool_0)
    assert len(stack_6) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_8 = stack_7.__len__()
    assert var_8 == 0
    stack_node_5 = module_0.StackNode(var_8)
    assert stack_node_5.data == 0
    none_type_2 = None
    stack_node_6 = module_0.StackNode(none_type_2)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_9 = stack_8.__len__()
    assert var_9 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_3 = None
    stack_node_7 = module_0.StackNode(none_type_3)
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_10 = module_0.check_parenthesis(dict_2)
    assert var_10 is True
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_11 = stack_11.__len__()
    assert var_11 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_8 = module_0.StackNode(var_11)
    assert stack_node_8.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    none_type_4 = None
    stack_node_9 = module_0.StackNode(none_type_4)
    stack_node_10 = module_0.StackNode(stack_14)
    assert len(stack_node_10.data) == 0
    module_0.postfix_eval(stack_9)


@pytest.mark.xfail(strict=True)
def test_case_1932():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    int_0 = 2594
    stack_node_3 = module_0.StackNode(int_0)
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_2 = module_0.check_parenthesis(str_0)
    assert var_2 is False
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_6)
    assert len(stack_node_6.data) == 0
    module_0.check_parenthesis(var_0)


def test_case_1933():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    with pytest.raises(ValueError):
        stack_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1934():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_0)
    assert stack_node_4.data == 0
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_6 = module_0.StackNode(float_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_8 = module_0.StackNode(stack_6)
    assert len(stack_node_8.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_9 = module_0.StackNode(var_3)
    assert stack_node_9.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_10 = module_0.StackNode(stack_8)
    assert len(stack_node_10.data) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    module_0.postfix_eval(stack_1)


def test_case_1935():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_node_3 = module_0.StackNode(stack_node_2)
    bool_1 = False
    set_0 = {bool_1, bool_1, bool_1, bool_1}
    tuple_0 = (bool_1, bool_1)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_1, set_0, tuple_0, str_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.push(tuple_1)
    assert len(stack_1) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    with pytest.raises(ValueError):
        stack_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_1936():
    tuple_0 = ()
    var_0 = module_0.check_parenthesis(tuple_0)
    assert var_0 is True
    module_1.object(**var_0)


@pytest.mark.xfail(strict=True)
def test_case_1937():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_0.__len__()
    assert var_2 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_3 = stack_1.__len__()
    assert var_3 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_2.__len__()
    assert var_4 == 0
    var_5 = stack_2.__len__()
    assert var_5 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_6 = stack_6.__len__()
    assert var_6 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(var_6)
    assert stack_node_2.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(stack_6)
    assert len(stack_node_3.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_7 = stack_9.__len__()
    assert var_7 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(var_7)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_9)
    assert len(stack_node_7.data) == 0
    var_8 = stack_10.__len__()
    assert var_8 == 0
    var_9 = stack_9.push(stack_node_6)
    assert len(stack_9) == 1
    assert len(stack_node_7.data) == 1
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_10 = stack_11.__len__()
    assert var_10 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_8 = module_0.StackNode(var_10)
    assert stack_node_8.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_11 = stack_12.__len__()
    assert var_11 == 0
    var_12 = stack_14.__len__()
    assert var_12 == 0
    module_0.check_parenthesis(stack_4)


@pytest.mark.xfail(strict=True)
def test_case_1938():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_2.data) == 1
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_node_4 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.push(none_type_1)
    assert len(stack_1) == 1
    stack_node_5 = module_0.StackNode(var_1)
    stack_node_6 = module_0.StackNode(stack_node_5)
    bool_1 = True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.push(bool_1)
    assert len(stack_2) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_2 = None
    stack_node_7 = module_0.StackNode(none_type_2)
    stack_node_8 = module_0.StackNode(none_type_2)
    bool_2 = True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.push(bool_2)
    assert len(stack_4) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_11 = module_0.StackNode(var_5)
    assert stack_node_11.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_12 = module_0.StackNode(stack_8)
    assert len(stack_node_12.data) == 0
    stack_node_13 = module_0.StackNode(stack_11)
    assert len(stack_node_13.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_14 = module_0.StackNode(var_6)
    assert stack_node_14.data == 0
    stack_node_15 = module_0.StackNode(stack_node_14)
    stack_node_16 = module_0.StackNode(stack_node_14)
    stack_node_17 = module_0.StackNode(stack_12)
    assert len(stack_node_17.data) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    var_8 = stack_12.push(stack_node_16)
    assert len(stack_12) == 1
    assert len(stack_node_17.data) == 1
    bool_3 = True
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_9 = stack_14.push(bool_3)
    assert len(stack_14) == 1
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_10 = stack_15.__len__()
    assert var_10 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_18 = module_0.StackNode(var_10)
    assert stack_node_18.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_11 = stack_16.__len__()
    assert var_11 == 0
    var_12 = stack_18.__len__()
    assert var_12 == 0
    none_type_3 = None
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_13 = stack_20.push(none_type_3)
    assert len(stack_20) == 1
    module_0.postfix_eval(stack_13)


def test_case_1939():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    with pytest.raises(ValueError):
        stack_0.peek()


def test_case_1940():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(stack_6)
    assert len(stack_node_2.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    bool_0 = True
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.push(bool_0)
    assert len(stack_9) == 1
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_node_5 = module_0.StackNode(stack_13)
    assert len(stack_node_5.data) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data is True
    with pytest.raises(ValueError):
        stack_7.pop()


@pytest.mark.xfail(strict=True)
def test_case_1941():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_5 = module_0.StackNode(stack_7)
    assert len(stack_node_5.data) == 0
    var_2.__len__()


def test_case_1942():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_5 = module_0.StackNode(complex_0)
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_2 = None
    stack_node_7 = module_0.StackNode(none_type_2)
    stack_node_8 = module_0.StackNode(stack_2)
    assert len(stack_node_8.data) == 0
    var_2 = stack_2.push(none_type_1)
    assert len(stack_2) == 1
    assert len(stack_node_8.data) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_9 = module_0.StackNode(var_3)
    assert stack_node_9.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_3 = None
    stack_node_10 = module_0.StackNode(none_type_3)
    stack_node_11 = module_0.StackNode(stack_6)
    assert len(stack_node_11.data) == 0
    bool_1 = False
    stack_node_12 = module_0.StackNode(bool_1)
    stack_node_13 = module_0.StackNode(bool_1)
    none_type_4 = None
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.push(none_type_4)
    assert len(stack_7) == 1
    stack_node_14 = module_0.StackNode(var_4)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_15 = module_0.StackNode(var_5)
    assert stack_node_15.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_16 = module_0.StackNode(stack_8)
    assert len(stack_node_16.data) == 0
    none_type_5 = None
    stack_node_17 = module_0.StackNode(none_type_5)
    bool_2 = False
    stack_node_18 = module_0.StackNode(bool_2)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    bool_3 = True
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.push(bool_3)
    assert len(stack_13) == 1
    stack_node_19 = module_0.StackNode(var_6)
    with pytest.raises(ValueError):
        stack_9.peek()


def test_case_1943():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    var_1 = stack_1.__len__()
    assert var_1 == 0
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_4 = module_0.StackNode(float_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    with pytest.raises(ValueError):
        stack_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_1944():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(stack_3)
    assert len(stack_node_4.data) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_node_6 = module_0.StackNode(stack_5)
    assert len(stack_node_6.data) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    bool_0 = False
    stack_node_7 = module_0.StackNode(bool_0)
    stack_node_8 = module_0.StackNode(bool_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    bool_1 = True
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.push(bool_1)
    assert len(stack_7) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_1 = None
    stack_node_10 = module_0.StackNode(none_type_1)
    stack_node_11 = module_0.StackNode(none_type_1)
    bool_2 = True
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.push(bool_2)
    assert len(stack_9) == 1
    stack_node_12 = module_0.StackNode(stack_9)
    assert len(stack_node_12.data) == 1
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1945():
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is False
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_2)
    assert len(stack_node_1.data) == 0
    none_type_1 = None
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.push(none_type_1)
    assert len(stack_3) == 1
    var_3 = stack_3.pop()
    assert len(stack_3) == 0
    none_type_2 = None
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.push(none_type_2)
    assert len(stack_4) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(var_5)
    assert stack_node_2.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_3 = module_0.StackNode(var_6)
    assert stack_node_3.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_4 = module_0.StackNode(stack_10)
    assert len(stack_node_4.data) == 0
    stack_node_5 = module_0.StackNode(stack_13)
    assert len(stack_node_5.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_7 = module_0.check_parenthesis(dict_0)
    assert var_7 is True
    stack_node_6 = module_0.StackNode(var_7)
    assert stack_node_6.data is True
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    none_type_3 = None
    stack_node_7 = module_0.StackNode(none_type_3)
    stack_node_8 = module_0.StackNode(stack_14)
    assert len(stack_node_8.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_1 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_1)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_8 = stack_16.push(tuple_1)
    assert len(stack_16) == 1
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_9 = stack_18.__len__()
    assert var_9 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_9 = module_0.StackNode(var_9)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_18)
    assert len(stack_node_11.data) == 0
    module_0.postfix_eval(stack_node_10)


@pytest.mark.xfail(strict=True)
def test_case_1946():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_2 = module_0.StackNode(float_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_node_6 = module_0.StackNode(stack_4)
    assert len(stack_node_6.data) == 0
    var_2 = stack_4.push(none_type_1)
    assert len(stack_4) == 1
    assert len(stack_node_6.data) == 1
    str_0 = "o2EICU9\x0bp7"
    stack_node_7 = module_0.StackNode(str_0)
    dict_1 = {}
    stack_node_8 = module_0.StackNode(dict_1)
    bool_0 = False
    stack_node_9 = module_0.StackNode(bool_0)
    stack_node_10 = module_0.StackNode(bool_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    dict_2 = {}
    var_4 = module_0.check_parenthesis(dict_2)
    assert var_4 is True
    bool_1 = False
    stack_node_11 = module_0.StackNode(bool_1)
    stack_node_12 = module_0.StackNode(bool_1)
    none_type_2 = None
    stack_node_13 = module_0.StackNode(none_type_2)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.push(bool_1)
    assert len(stack_6) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_3 = None
    stack_node_14 = module_0.StackNode(none_type_3)
    module_0.check_parenthesis(stack_0)


@pytest.mark.xfail(strict=True)
def test_case_1947():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(stack_3)
    assert len(stack_node_4.data) == 0
    stack_node_5 = module_0.StackNode(stack_5)
    assert len(stack_node_5.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_node_7 = module_0.StackNode(stack_7)
    assert len(stack_node_7.data) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    bool_0 = False
    stack_node_8 = module_0.StackNode(bool_0)
    stack_node_9 = module_0.StackNode(bool_0)
    none_type_2 = None
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.push(none_type_2)
    assert len(stack_10) == 1
    stack_node_10 = module_0.StackNode(var_4)
    stack_node_11 = module_0.StackNode(stack_node_10)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_3 = None
    stack_node_12 = module_0.StackNode(none_type_3)
    stack_node_13 = module_0.StackNode(stack_11)
    assert len(stack_node_13.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_node_14 = module_0.StackNode(var_6)
    assert stack_node_14.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_15 = module_0.StackNode(stack_14)
    assert len(stack_node_15.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_7 = stack_15.__len__()
    assert var_7 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_8 = module_0.check_parenthesis(dict_1)
    assert var_8 is True
    stack_node_16 = module_0.StackNode(stack_17)
    assert len(stack_node_16.data) == 0
    var_4.push(stack_node_14)


def test_case_1948():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    bool_1 = True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.push(bool_1)
    assert len(stack_1) == 1
    stack_node_2 = module_0.StackNode(var_0)
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_4 = module_0.StackNode(complex_0)
    none_type_2 = None
    stack_node_5 = module_0.StackNode(none_type_2)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_3 = None
    stack_node_6 = module_0.StackNode(none_type_3)
    stack_node_7 = module_0.StackNode(stack_3)
    assert len(stack_node_7.data) == 0
    var_1 = stack_3.push(none_type_2)
    assert len(stack_3) == 1
    assert len(stack_node_7.data) == 1
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_8 = module_0.StackNode(var_2)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_4)
    assert len(stack_node_11.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_12 = module_0.StackNode(var_2)
    assert stack_node_12.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_13 = module_0.StackNode(var_3)
    assert stack_node_13.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_14 = module_0.StackNode(var_5)
    assert stack_node_14.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_15 = module_0.StackNode(stack_14)
    assert len(stack_node_15.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_6 = stack_18.__len__()
    assert var_6 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_16 = module_0.StackNode(var_6)
    assert stack_node_16.data == 0
    stack_node_17 = module_0.StackNode(stack_node_16)
    stack_node_18 = module_0.StackNode(stack_node_16)
    stack_node_19 = module_0.StackNode(stack_18)
    assert len(stack_node_19.data) == 0
    var_7 = stack_19.__len__()
    assert var_7 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_8 = stack_20.__len__()
    assert var_8 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_20 = module_0.StackNode(var_8)
    assert stack_node_20.data == 0
    stack_node_21 = module_0.StackNode(stack_node_20)
    stack_node_22 = module_0.StackNode(stack_node_20)
    stack_node_23 = module_0.StackNode(stack_20)
    assert len(stack_node_23.data) == 0
    var_9 = stack_21.__len__()
    assert var_9 == 0
    var_10 = stack_20.push(stack_node_22)
    assert len(stack_20) == 1
    assert len(stack_node_23.data) == 1
    with pytest.raises(ValueError):
        stack_10.pop()


def test_case_1949():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.push(tuple_1)
    assert len(stack_1) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    with pytest.raises(ValueError):
        stack_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_1950():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    int_0 = 2594
    stack_node_1 = module_0.StackNode(int_0)
    module_0.postfix_eval(stack_2)


def test_case_1951():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_node_5 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.push(bool_0)
    assert len(stack_4) == 1
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_9 = module_0.StackNode(stack_6)
    assert len(stack_node_9.data) == 0
    stack_node_10 = module_0.StackNode(stack_8)
    assert len(stack_node_10.data) == 0
    none_type_2 = None
    stack_node_11 = module_0.StackNode(none_type_2)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_12 = module_0.StackNode(var_4)
    assert stack_node_12.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    int_0 = 2594
    stack_node_13 = module_0.StackNode(int_0)
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_7 = module_0.check_parenthesis(str_0)
    assert var_7 is False
    with pytest.raises(ValueError):
        stack_8.peek()


def test_case_1952():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    dict_0 = {}
    stack_node_1 = module_0.StackNode(dict_0)
    int_0 = -460
    stack_node_2 = module_0.StackNode(int_0)
    none_type_0 = None
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.push(none_type_0)
    assert len(stack_3) == 1
    var_2 = stack_3.pop()
    assert len(stack_3) == 0
    with pytest.raises(ValueError):
        stack_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1953():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(none_type_0)
    none_type_1 = None
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.push(none_type_1)
    assert len(stack_3) == 1
    module_0.postfix_eval(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1954():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    dict_1 = {}
    var_1 = module_0.check_parenthesis(dict_1)
    assert var_1 is True
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data is True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(stack_3)
    assert len(stack_node_4.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    var_5.push(var_5)


@pytest.mark.xfail(strict=True)
def test_case_1955():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_6 = module_0.StackNode(stack_8)
    assert len(stack_node_6.data) == 0
    var_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_1956():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    var_1.peek()


@pytest.mark.xfail(strict=True)
def test_case_1957():
    bool_0 = True
    module_0.postfix_eval(bool_0)


def test_case_1958():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    str_0 = ""
    var_2 = module_0.check_parenthesis(str_0)
    assert var_2 is True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    none_type_2 = None
    stack_node_7 = module_0.StackNode(none_type_2)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_10 = module_0.StackNode(stack_11)
    assert len(stack_node_10.data) == 0
    var_7 = stack_12.__len__()
    assert var_7 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_8 = module_0.check_parenthesis(dict_0)
    assert var_8 is True
    with pytest.raises(ValueError):
        stack_8.peek()


@pytest.mark.xfail(strict=True)
def test_case_1959():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    stack_node_4 = module_0.StackNode(stack_6)
    assert len(stack_node_4.data) == 0
    var_6 = stack_6.push(var_5)
    assert len(stack_6) == 1
    assert len(stack_node_4.data) == 1
    int_0 = -222
    set_0 = {int_0}
    stack_node_5 = module_0.StackNode(set_0)
    bool_1 = False
    stack_node_6 = module_0.StackNode(bool_1)
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    bool_2 = False
    stack_node_8 = module_0.StackNode(bool_2)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    bool_3 = True
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_7 = stack_8.push(bool_3)
    assert len(stack_8) == 1
    stack_node_9 = module_0.StackNode(var_7)
    none_type_2 = None
    stack_node_10 = module_0.StackNode(none_type_2)
    bool_4 = False
    set_1 = {bool_4, bool_4, bool_4, bool_4}
    tuple_0 = (bool_4, bool_4)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_4, set_1, tuple_0, str_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_8 = stack_9.push(tuple_1)
    assert len(stack_9) == 1
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_9 = stack_11.__len__()
    assert var_9 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_11 = module_0.StackNode(var_9)
    assert stack_node_11.data == 0
    var_5.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1960():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_4 = module_0.StackNode(float_0)
    dict_1 = {}
    var_2 = module_0.check_parenthesis(dict_1)
    assert var_2 is True
    bool_0 = True
    stack_node_5 = module_0.StackNode(bool_0)
    float_1 = 712.593
    dict_2 = {float_1: float_1, float_1: float_1}
    var_3 = module_0.check_parenthesis(dict_2)
    assert var_3 is True
    stack_node_6 = module_0.StackNode(float_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    stack_node_8 = module_0.StackNode(none_type_0)
    bool_1 = True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.push(bool_1)
    assert len(stack_4) == 1
    stack_node_9 = module_0.StackNode(stack_4)
    assert len(stack_node_9.data) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_10 = module_0.StackNode(var_5)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_6)
    assert len(stack_node_12.data) == 0
    module_0.postfix_eval(float_1)


def test_case_1961():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_2 = module_0.StackNode(stack_4)
    assert len(stack_node_2.data) == 0
    var_3 = stack_4.push(var_2)
    assert len(stack_4) == 1
    assert len(stack_node_2.data) == 1
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_5 = module_0.StackNode(bool_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(stack_7)
    assert len(stack_node_7.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_9 = module_0.StackNode(stack_10)
    assert len(stack_node_9.data) == 0
    bool_1 = False
    stack_node_10 = module_0.StackNode(bool_1)
    stack_node_11 = module_0.StackNode(bool_1)
    none_type_1 = None
    stack_node_12 = module_0.StackNode(none_type_1)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.push(bool_1)
    assert len(stack_13) == 1
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_9 = module_0.check_parenthesis(dict_2)
    assert var_9 is True
    stack_node_13 = module_0.StackNode(stack_16)
    assert len(stack_node_13.data) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_10 = stack_17.__len__()
    assert var_10 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_14 = module_0.StackNode(var_10)
    assert stack_node_14.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_11 = stack_18.__len__()
    assert var_11 == 0
    var_12 = stack_20.__len__()
    assert var_12 == 0
    with pytest.raises(ValueError):
        stack_5.peek()


@pytest.mark.xfail(strict=True)
def test_case_1962():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_2 = module_0.StackNode(bool_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    str_0 = ""
    var_2 = module_0.check_parenthesis(str_0)
    assert var_2 is True
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data is True
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_1963():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    bool_1 = True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.push(bool_1)
    assert len(stack_1) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(stack_3)
    assert len(stack_node_4.data) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    bool_2 = False
    stack_node_5 = module_0.StackNode(bool_2)
    stack_node_6 = module_0.StackNode(bool_2)
    none_type_1 = None
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.push(none_type_1)
    assert len(stack_5) == 1
    stack_node_7 = module_0.StackNode(var_3)
    dict_0 = {}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_1964():
    dict_0 = {}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    var_0.push(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1965():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    module_0.check_parenthesis(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1966():
    bool_0 = True
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    module_0.postfix_eval(var_0)


def test_case_1967():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_5 = module_0.StackNode(stack_9)
    assert len(stack_node_5.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_6 = module_0.StackNode(stack_12)
    assert len(stack_node_6.data) == 0
    with pytest.raises(ValueError):
        stack_2.peek()


@pytest.mark.xfail(strict=True)
def test_case_1968():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    module_0.postfix_eval(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1969():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(stack_3)
    assert len(stack_node_4.data) == 0
    module_0.postfix_eval(stack_6)


def test_case_1970():
    int_0 = -460
    stack_node_0 = module_0.StackNode(int_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    dict_0 = {}
    stack_node_3 = module_0.StackNode(dict_0)
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_1)
    assert var_1 is True
    stack_node_4 = module_0.StackNode(float_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    str_0 = "o2EICU9\x0bp7"
    stack_node_8 = module_0.StackNode(str_0)
    with pytest.raises(ValueError):
        stack_4.peek()


@pytest.mark.xfail(strict=True)
def test_case_1971():
    dict_0 = {}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(stack_6)
    assert len(stack_node_3.data) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_4 = module_0.StackNode(complex_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    str_0 = ""
    var_5 = module_0.check_parenthesis(str_0)
    assert var_5 is True
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_9)
    assert len(stack_node_11.data) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    str_1 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_8 = module_0.check_parenthesis(str_1)
    assert var_8 is False
    bool_0 = True
    module_0.check_parenthesis(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1972():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    bool_1 = False
    stack_node_3 = module_0.StackNode(bool_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    str_0 = ""
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is True
    var_0.push(stack_0)


@pytest.mark.xfail(strict=True)
def test_case_1973():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(stack_4)
    assert len(stack_node_2.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_1 = None
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.push(none_type_1)
    assert len(stack_7) == 1
    var_3 = stack_7.pop()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_2 = None
    stack_node_4 = module_0.StackNode(none_type_2)
    stack_node_5 = module_0.StackNode(none_type_2)
    var_3.peek()


@pytest.mark.xfail(strict=True)
def test_case_1974():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.push(tuple_1)
    assert len(stack_1) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_node_4 = module_0.StackNode(stack_3)
    assert len(stack_node_4.data) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    str_1 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_4 = module_0.check_parenthesis(str_1)
    assert var_4 is False
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data is False
    bool_1 = False
    stack_node_6 = module_0.StackNode(bool_1)
    stack_node_7 = module_0.StackNode(bool_1)
    none_type_2 = None
    stack_node_8 = module_0.StackNode(none_type_2)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_5 = stack_4.push(bool_1)
    assert len(stack_4) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_3 = None
    stack_node_9 = module_0.StackNode(none_type_3)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_6 = stack_6.__len__()
    assert var_6 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_7.__len__()
    assert var_7 == 0
    var_8 = stack_9.__len__()
    assert var_8 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_11 = module_0.StackNode(stack_11)
    assert len(stack_node_11.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_9 = stack_12.__len__()
    assert var_9 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_10 = stack_13.__len__()
    assert var_10 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_12 = module_0.StackNode(var_10)
    assert stack_node_12.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_13 = module_0.StackNode(stack_13)
    assert len(stack_node_13.data) == 0
    stack_node_14 = module_0.StackNode(stack_16)
    assert len(stack_node_14.data) == 0
    var_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1975():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_node_3 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.push(none_type_1)
    assert len(stack_2) == 1
    stack_node_4 = module_0.StackNode(var_2)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_5 = module_0.StackNode(stack_5)
    assert len(stack_node_5.data) == 0
    var_5 = stack_5.push(var_4)
    assert len(stack_5) == 1
    assert len(stack_node_5.data) == 1
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_2 = None
    stack_node_6 = module_0.StackNode(none_type_2)
    stack_node_7 = module_0.StackNode(stack_6)
    assert len(stack_node_7.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_7)
    assert len(stack_node_11.data) == 0
    var_7 = stack_8.__len__()
    assert var_7 == 0
    var_8 = stack_7.push(stack_node_10)
    assert len(stack_7) == 1
    assert len(stack_node_11.data) == 1
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_9 = stack_9.__len__()
    assert var_9 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_12 = module_0.StackNode(var_9)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_10 = stack_11.__len__()
    assert var_10 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_11 = module_0.check_parenthesis(dict_1)
    assert var_11 is True
    stack_node_14 = module_0.StackNode(stack_13)
    assert len(stack_node_14.data) == 0
    module_0.check_parenthesis(var_10)


@pytest.mark.xfail(strict=True)
def test_case_1976():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_7.push(stack_9)
    assert len(stack_7) == 1
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    module_0.check_parenthesis(var_5)


@pytest.mark.xfail(strict=True)
def test_case_1977():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(stack_6)
    assert len(stack_node_4.data) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_3 = module_0.check_parenthesis(str_0)
    assert var_3 is False
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data is False
    bool_0 = True
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.push(bool_0)
    assert len(stack_7) == 1
    module_0.check_parenthesis(stack_0)


@pytest.mark.xfail(strict=True)
def test_case_1978():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    var_0 = stack_1.push(none_type_1)
    assert len(stack_1) == 1
    assert len(stack_node_4.data) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_5 = module_0.StackNode(var_1)
    assert stack_node_5.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    module_0.postfix_eval(none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_1979():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data is True
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    stack_node_6 = module_0.StackNode(float_1)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_7 = module_0.StackNode(var_7)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    none_type_0 = None
    stack_node_9 = module_0.StackNode(none_type_0)
    stack_node_10 = module_0.StackNode(stack_13)
    assert len(stack_node_10.data) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    module_0.postfix_eval(stack_8)


@pytest.mark.xfail(strict=True)
def test_case_1980():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_3 = module_0.StackNode(bool_0)
    var_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_1981():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_1 = None
    stack_node_1 = module_0.StackNode(none_type_1)
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    stack_node_3 = module_0.StackNode(stack_node_1)
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_node_5 = module_0.StackNode(bool_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    bool_1 = False
    stack_node_8 = module_0.StackNode(bool_1)
    stack_node_9 = module_0.StackNode(bool_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_10 = module_0.StackNode(var_4)
    assert stack_node_10.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_11 = module_0.StackNode(var_5)
    assert stack_node_11.data == 0
    dict_0 = {}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    var_7 = stack_11.__len__()
    assert var_7 == 0
    bool_2 = True
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_8 = stack_12.push(bool_2)
    assert len(stack_12) == 1
    module_0.check_parenthesis(bool_2)


@pytest.mark.xfail(strict=True)
def test_case_1982():
    bytes_0 = b":\x90\xcb"
    bool_0 = False
    bytes_1 = b"\xa7S\x12\x9au\xfb)"
    tuple_0 = (bytes_0, bool_0, bytes_1)
    module_0.postfix_eval(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1983():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_5)
    assert len(stack_node_4.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    bool_0 = True
    stack_node_8 = module_0.StackNode(bool_0)
    int_0 = -222
    set_0 = {int_0}
    stack_node_9 = module_0.StackNode(set_0)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_10 = module_0.StackNode(var_7)
    assert stack_node_10.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_11 = module_0.StackNode(stack_14)
    assert len(stack_node_11.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_8 = stack_17.__len__()
    assert var_8 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_12 = module_0.StackNode(var_8)
    assert stack_node_12.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_13 = module_0.StackNode(stack_17)
    assert len(stack_node_13.data) == 0
    stack_node_14 = module_0.StackNode(stack_19)
    assert len(stack_node_14.data) == 0
    bool_1 = False
    stack_node_15 = module_0.StackNode(bool_1)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_9 = module_0.check_parenthesis(dict_0)
    assert var_9 is True
    stack_node_16 = module_0.StackNode(float_0)
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    module_0.check_parenthesis(stack_20)


@pytest.mark.xfail(strict=True)
def test_case_1984():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    bool_0 = True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.push(bool_0)
    assert len(stack_4) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    none_type_2 = None
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.push(none_type_2)
    assert len(stack_7) == 1
    var_4 = stack_7.pop()
    assert len(stack_7) == 0
    none_type_3 = None
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.push(none_type_3)
    assert len(stack_8) == 1
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    bool_1 = False
    stack_node_5 = module_0.StackNode(bool_1)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    stack_node_6 = module_0.StackNode(float_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    dict_1 = {var_6: var_6, float_0: stack_node_5}
    stack_node_7 = module_0.StackNode(dict_1)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_node_8 = module_0.StackNode(var_7)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    none_type_4 = None
    stack_node_10 = module_0.StackNode(none_type_4)
    bool_2 = False
    stack_node_11 = module_0.StackNode(bool_2)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    bool_3 = True
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.push(bool_3)
    assert len(stack_13) == 1
    stack_node_12 = module_0.StackNode(var_8)
    bool_4 = True
    stack_node_13 = module_0.StackNode(bool_4)
    module_0.postfix_eval(stack_9)


@pytest.mark.xfail(strict=True)
def test_case_1985():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    stack_node_8 = module_0.StackNode(stack_12)
    assert len(stack_node_8.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    bool_1 = False
    stack_node_9 = module_0.StackNode(bool_1)
    stack_node_10 = module_0.StackNode(bool_1)
    none_type_2 = None
    stack_node_11 = module_0.StackNode(none_type_2)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_4 = stack_14.push(bool_1)
    assert len(stack_14) == 1
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_5 = stack_15.__len__()
    assert var_5 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_12 = module_0.StackNode(var_5)
    assert stack_node_12.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_13 = module_0.StackNode(stack_16)
    assert len(stack_node_13.data) == 0
    var_6 = stack_17.__len__()
    assert var_6 == 0
    module_0.postfix_eval(stack_17)


def test_case_1986():
    pass


def test_case_1987():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_2)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_1 = stack_6.__len__()
    assert var_1 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(stack_7)
    assert len(stack_node_3.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_2 = stack_9.__len__()
    assert var_2 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_3 = stack_10.__len__()
    assert var_3 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_4 = stack_13.__len__()
    assert var_4 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_5 = stack_15.__len__()
    assert var_5 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_6 = stack_16.__len__()
    assert var_6 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_7 = module_0.check_parenthesis(dict_0)
    assert var_7 is True
    stack_node_5 = module_0.StackNode(stack_18)
    assert len(stack_node_5.data) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_8 = stack_19.__len__()
    assert var_8 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_6 = module_0.StackNode(var_8)
    assert stack_node_6.data == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_7 = module_0.StackNode(stack_19)
    assert len(stack_node_7.data) == 0
    with pytest.raises(ValueError):
        stack_20.peek()


@pytest.mark.xfail(strict=True)
def test_case_1988():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    dict_0 = {}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    int_0 = 2594
    stack_node_1 = module_0.StackNode(int_0)
    int_1 = -222
    set_0 = {int_1}
    stack_node_2 = module_0.StackNode(set_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_node_4 = module_0.StackNode(stack_0)
    assert len(stack_node_4.data) == 0
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_node_6 = module_0.StackNode(var_1)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    dict_1 = {}
    var_2 = module_0.check_parenthesis(dict_1)
    assert var_2 is True
    stack_node_8 = module_0.StackNode(var_2)
    assert stack_node_8.data is True
    none_type_2 = None
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.push(none_type_2)
    assert len(stack_2) == 1
    var_4 = stack_2.pop()
    assert len(stack_2) == 0
    none_type_3 = None
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_5 = stack_3.push(none_type_3)
    assert len(stack_3) == 1
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_6 = stack_5.__len__()
    assert var_6 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_7 = stack_8.__len__()
    assert var_7 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5.push(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1989():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    module_0.check_parenthesis(stack_2)


@pytest.mark.xfail(strict=True)
def test_case_1990():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_5 = stack_14.__len__()
    assert var_5 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_14)
    assert len(stack_node_7.data) == 0
    var_6 = stack_15.__len__()
    assert var_6 == 0
    var_7 = stack_14.push(stack_node_6)
    assert len(stack_14) == 1
    assert len(stack_node_7.data) == 1
    none_type_0 = None
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_8 = stack_16.push(none_type_0)
    assert len(stack_16) == 1
    var_9 = stack_16.pop()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_10 = stack_17.__len__()
    assert var_10 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_8 = module_0.StackNode(var_10)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_17)
    assert len(stack_node_11.data) == 0
    var_11 = stack_18.__len__()
    assert var_11 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    bool_0 = False
    stack_node_12 = module_0.StackNode(bool_0)
    stack_node_13 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_12 = stack_20.push(none_type_1)
    assert len(stack_20) == 1
    stack_node_14 = module_0.StackNode(var_12)
    stack_node_15 = module_0.StackNode(stack_node_14)
    var_10.push(stack_node_11)


def test_case_1991():
    bool_0 = True
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    dict_0 = {}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    with pytest.raises(ValueError):
        stack_0.pop()


def test_case_1992():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    with pytest.raises(ValueError):
        stack_0.pop()


def test_case_1993():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(tuple_1)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    bool_1 = False
    stack_node_1 = module_0.StackNode(bool_1)
    stack_node_2 = module_0.StackNode(bool_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    with pytest.raises(ValueError):
        stack_1.pop()


def test_case_1994():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    str_1 = ""
    var_1 = module_0.check_parenthesis(str_1)
    assert var_1 is True
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data is True
    stack_node_2 = module_0.StackNode(str_1)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_2 = stack_0.__len__()
    assert var_2 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    int_0 = 2594
    stack_node_5 = module_0.StackNode(int_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    with pytest.raises(ValueError):
        module_0.postfix_eval(str_1)


def test_case_1995():
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    stack_node_3 = module_0.StackNode(stack_3)
    assert len(stack_node_3.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_4 = module_0.StackNode(float_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_node_6 = module_0.StackNode(none_type_0)
    int_0 = -460
    stack_node_7 = module_0.StackNode(int_0)
    with pytest.raises(ValueError):
        stack_3.pop()


@pytest.mark.xfail(strict=True)
def test_case_1996():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_node_0 = module_0.StackNode(stack_0)
    assert len(stack_node_0.data) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    int_0 = -222
    set_0 = {int_0}
    stack_node_4 = module_0.StackNode(set_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_node_6 = module_0.StackNode(stack_8)
    assert len(stack_node_6.data) == 0
    var_3 = stack_8.push(none_type_0)
    assert len(stack_8) == 1
    assert len(stack_node_6.data) == 1
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_node_7 = module_0.StackNode(stack_11)
    assert len(stack_node_7.data) == 0
    var_6 = stack_11.push(var_5)
    assert len(stack_11) == 1
    assert len(stack_node_7.data) == 1
    module_0.check_parenthesis(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1997():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    int_0 = -222
    set_0 = {int_0}
    stack_node_6 = module_0.StackNode(set_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    var_4.push(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1998():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_2 = module_0.check_parenthesis(dict_1)
    assert var_2 is True
    stack_node_4 = module_0.StackNode(bool_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_4 = module_0.check_parenthesis(dict_2)
    assert var_4 is True
    stack_node_5 = module_0.StackNode(stack_6)
    assert len(stack_node_5.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_7)
    assert len(stack_node_8.data) == 0
    bool_1 = False
    stack_node_9 = module_0.StackNode(bool_1)
    stack_node_10 = module_0.StackNode(bool_1)
    none_type_1 = None
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.push(none_type_1)
    assert len(stack_9) == 1
    stack_node_11 = module_0.StackNode(var_6)
    dict_3 = {}
    var_7 = module_0.check_parenthesis(dict_3)
    assert var_7 is True
    stack_node_12 = module_0.StackNode(var_7)
    assert stack_node_12.data is True
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_8 = stack_10.__len__()
    assert var_8 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_13 = module_0.StackNode(var_8)
    assert stack_node_13.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_14 = module_0.StackNode(stack_10)
    assert len(stack_node_14.data) == 0
    stack_node_15 = module_0.StackNode(stack_13)
    assert len(stack_node_15.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_9 = stack_14.__len__()
    assert var_9 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_16 = module_0.StackNode(var_9)
    assert stack_node_16.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_10 = stack_16.__len__()
    assert var_10 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_11 = stack_17.__len__()
    assert var_11 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_17 = module_0.StackNode(var_11)
    assert stack_node_17.data == 0
    dict_4 = {}
    var_12 = module_0.check_parenthesis(dict_4)
    assert var_12 is True
    var_13 = stack_18.__len__()
    assert var_13 == 0
    var_11.__len__()


@pytest.mark.xfail(strict=True)
def test_case_1999():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_node_0 = module_0.StackNode(stack_0)
    assert len(stack_node_0.data) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    var_3 = stack_1.push(stack_node_3)
    assert len(stack_1) == 1
    assert len(stack_node_4.data) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(stack_5)
    assert len(stack_node_6.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_9 = module_0.check_parenthesis(dict_0)
    assert var_9 is True
    stack_node_10 = module_0.StackNode(stack_16)
    assert len(stack_node_10.data) == 0
    dict_1 = {}
    var_10 = module_0.check_parenthesis(dict_1)
    assert var_10 is True
    module_0.postfix_eval(var_2)


@pytest.mark.xfail(strict=True)
def test_case_2000():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    str_0 = ""
    var_2 = module_0.check_parenthesis(str_0)
    assert var_2 is True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_node_6 = module_0.StackNode(bool_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_12.__len__()
    assert var_7 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_8 = module_0.StackNode(var_7)
    assert stack_node_8.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    var_9 = stack_15.__len__()
    assert var_9 == 0
    module_0.postfix_eval(stack_3)


@pytest.mark.xfail(strict=True)
def test_case_2001():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    none_type_0 = None
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.push(none_type_0)
    assert len(stack_5) == 1
    none_type_1 = None
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.push(none_type_1)
    assert len(stack_6) == 1
    var_3 = stack_6.pop()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(stack_7)
    assert len(stack_node_4.data) == 0
    stack_node_5 = module_0.StackNode(stack_10)
    assert len(stack_node_5.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_7 = module_0.StackNode(stack_12)
    assert len(stack_node_7.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    module_0.postfix_eval(none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_2002():
    str_0 = "o2EICU9\x0bp7"
    stack_node_0 = module_0.StackNode(str_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    module_0.postfix_eval(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2003():
    int_0 = 3109
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(int_0)
    assert len(stack_0) == 1
    module_0.postfix_eval(stack_0)


@pytest.mark.xfail(strict=True)
def test_case_2004():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    dict_0 = {}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data is True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_4)
    assert stack_node_2.data == 0
    dict_1 = {}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    var_6 = stack_6.__len__()
    assert var_6 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_7 = stack_7.__len__()
    assert var_7 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_3 = module_0.StackNode(var_7)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    var_8 = stack_8.__len__()
    assert var_8 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_9 = stack_10.__len__()
    assert var_9 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_6 = module_0.StackNode(var_9)
    assert stack_node_6.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_10 = stack_12.__len__()
    assert var_10 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    int_0 = 2594
    stack_node_7 = module_0.StackNode(int_0)
    module_0.check_parenthesis(stack_node_1)


@pytest.mark.xfail(strict=True)
def test_case_2005():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    bool_1 = False
    stack_node_2 = module_0.StackNode(bool_1)
    stack_node_3 = module_0.StackNode(bool_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_4 = module_0.StackNode(complex_0)
    bool_2 = True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.push(bool_2)
    assert len(stack_2) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_6)
    assert len(stack_node_10.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_11 = module_0.StackNode(var_5)
    assert stack_node_11.data == 0
    module_0.postfix_eval(stack_node_11)


@pytest.mark.xfail(strict=True)
def test_case_2006():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    module_0.postfix_eval(none_type_0)


def test_case_2007():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    with pytest.raises(ValueError):
        stack_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_2008():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.push(none_type_1)
    assert len(stack_1) == 1
    stack_node_3 = module_0.StackNode(var_0)
    var_1 = stack_0.__len__()
    assert var_1 == 0
    var_1.push(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2009():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    var_1.peek()


def test_case_2010():
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data is True
    stack_node_1 = module_0.StackNode(str_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_0.__len__()
    assert var_3 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_4 = stack_1.__len__()
    assert var_4 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    stack_node_8 = module_0.StackNode(stack_8)
    assert len(stack_node_8.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_10 = module_0.StackNode(stack_9)
    assert len(stack_node_10.data) == 0
    bool_0 = False
    stack_node_11 = module_0.StackNode(bool_0)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    stack_node_12 = module_0.StackNode(float_1)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_8 = module_0.check_parenthesis(dict_2)
    assert var_8 is True
    stack_node_13 = module_0.StackNode(float_2)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    none_type_2 = None
    stack_node_14 = module_0.StackNode(none_type_2)
    stack_node_15 = module_0.StackNode(none_type_2)
    with pytest.raises(ValueError):
        stack_4.peek()


def test_case_2011():
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data is True
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_2 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    dict_1 = {var_1: var_1, float_0: stack_node_1}
    stack_node_3 = module_0.StackNode(dict_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_node_5 = module_0.StackNode(stack_1)
    assert len(stack_node_5.data) == 0
    with pytest.raises(ValueError):
        stack_0.pop()


def test_case_2012():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    dict_0 = {}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data is True
    stack_node_4 = module_0.StackNode(stack_node_3)
    bool_0 = True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.push(bool_0)
    assert len(stack_4) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(stack_6)
    assert len(stack_node_7.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_8 = module_0.StackNode(complex_0)
    none_type_2 = None
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.push(none_type_2)
    assert len(stack_7) == 1
    var_4 = stack_7.pop()
    assert len(stack_7) == 0
    none_type_3 = None
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.push(none_type_3)
    assert len(stack_8) == 1
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    var_8 = stack_11.__len__()
    assert var_8 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_9 = stack_13.__len__()
    assert var_9 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_10 = module_0.StackNode(var_9)
    assert stack_node_10.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_11 = module_0.StackNode(stack_13)
    assert len(stack_node_11.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    none_type_4 = None
    stack_node_12 = module_0.StackNode(none_type_4)
    stack_node_13 = module_0.StackNode(stack_16)
    assert len(stack_node_13.data) == 0
    stack_node_14 = module_0.StackNode(stack_node_12)
    with pytest.raises(ValueError):
        stack_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_2013():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    module_0.postfix_eval(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2014():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_7 = module_0.StackNode(stack_4)
    assert len(stack_node_7.data) == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    dict_0 = {}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_9 = module_0.StackNode(none_type_0)
    stack_node_10 = module_0.StackNode(stack_5)
    assert len(stack_node_10.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3.peek()


@pytest.mark.xfail(strict=True)
def test_case_2015():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    bool_0 = True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.push(bool_0)
    assert len(stack_5) == 1
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(none_type_0)
    bool_1 = True
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.push(bool_1)
    assert len(stack_7) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    bool_2 = False
    stack_node_5 = module_0.StackNode(bool_2)
    stack_node_6 = module_0.StackNode(bool_2)
    var_4.peek()


@pytest.mark.xfail(strict=True)
def test_case_2016():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_4 = module_0.StackNode(float_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    dict_1 = {var_1: var_1, float_0: stack_node_3}
    stack_node_5 = module_0.StackNode(dict_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_6)
    assert len(stack_node_9.data) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    var_4 = stack_6.push(stack_node_8)
    assert len(stack_6) == 1
    assert len(stack_node_9.data) == 1
    dict_2 = {}
    var_5 = module_0.check_parenthesis(dict_2)
    assert var_5 is True
    stack_node_10 = module_0.StackNode(var_5)
    assert stack_node_10.data is True
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    float_1 = 712.593
    dict_3 = {float_1: float_1, float_1: float_1}
    var_7 = module_0.check_parenthesis(dict_3)
    assert var_7 is True
    stack_node_12 = module_0.StackNode(stack_10)
    assert len(stack_node_12.data) == 0
    var_8 = stack_10.push(var_7)
    assert len(stack_10) == 1
    assert len(stack_node_12.data) == 1
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_9 = stack_11.__len__()
    assert var_9 == 0
    stack_node_13 = module_0.StackNode(var_9)
    assert stack_node_13.data == 0
    stack_node_14 = module_0.StackNode(stack_node_13)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_10 = stack_12.__len__()
    assert var_10 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_15 = module_0.StackNode(var_10)
    assert stack_node_15.data == 0
    dict_4 = {}
    var_11 = module_0.check_parenthesis(dict_4)
    assert var_11 is True
    var_12 = stack_13.__len__()
    assert var_12 == 0
    bool_1 = False
    stack_node_16 = module_0.StackNode(bool_1)
    stack_node_17 = module_0.StackNode(bool_1)
    none_type_1 = None
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_13 = stack_14.push(none_type_1)
    assert len(stack_14) == 1
    stack_node_18 = module_0.StackNode(var_13)
    module_0.check_parenthesis(var_2)


@pytest.mark.xfail(strict=True)
def test_case_2017():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_5 = module_0.StackNode(float_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_node_7 = module_0.StackNode(none_type_1)
    stack_node_8 = module_0.StackNode(stack_5)
    assert len(stack_node_8.data) == 0
    module_0.postfix_eval(stack_node_8)


def test_case_2018():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    complex_1 = -3711.3 - 806.2j
    stack_node_1 = module_0.StackNode(complex_1)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_node_4 = module_0.StackNode(stack_0)
    assert len(stack_node_4.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_4.data) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    bool_0 = True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.push(bool_0)
    assert len(stack_4) == 1
    stack_node_6 = module_0.StackNode(stack_4)
    assert len(stack_node_6.data) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_7 = module_0.StackNode(stack_5)
    assert len(stack_node_7.data) == 0
    with pytest.raises(ValueError):
        stack_3.pop()


@pytest.mark.xfail(strict=True)
def test_case_2019():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is False
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_4 = module_0.StackNode(float_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_node_7 = module_0.StackNode(stack_4)
    assert len(stack_node_7.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    dict_1 = {}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    bool_0 = False
    stack_node_11 = module_0.StackNode(bool_0)
    stack_node_12 = module_0.StackNode(bool_0)
    module_0.check_parenthesis(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2020():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    stack_node_4 = module_0.StackNode(stack_3)
    assert len(stack_node_4.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(stack_5)
    assert len(stack_node_6.data) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    int_0 = 3109
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.push(int_0)
    assert len(stack_9) == 1
    bool_1 = False
    stack_node_7 = module_0.StackNode(bool_1)
    stack_node_8 = module_0.StackNode(bool_1)
    none_type_0 = None
    stack_node_9 = module_0.StackNode(none_type_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.push(bool_1)
    assert len(stack_10) == 1
    str_0 = ""
    var_6 = module_0.check_parenthesis(str_0)
    assert var_6 is True
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data is True
    module_0.check_parenthesis(bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2021():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    bool_1 = False
    stack_node_3 = module_0.StackNode(bool_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    bool_2 = True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.push(bool_2)
    assert len(stack_2) == 1
    stack_node_4 = module_0.StackNode(var_1)
    dict_0 = {}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data is True
    stack_node_6 = module_0.StackNode(stack_node_5)
    bool_3 = True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.push(bool_3)
    assert len(stack_3) == 1
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    none_type_1 = None
    stack_node_8 = module_0.StackNode(none_type_1)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_2 = None
    stack_node_9 = module_0.StackNode(none_type_2)
    stack_node_10 = module_0.StackNode(stack_10)
    assert len(stack_node_10.data) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_node_11 = module_0.StackNode(stack_10)
    assert len(stack_node_11.data) == 0
    dict_1 = {}
    var_8 = module_0.check_parenthesis(dict_1)
    assert var_8 is True
    stack_node_12 = module_0.StackNode(var_8)
    assert stack_node_12.data is True
    bool_4 = False
    stack_node_13 = module_0.StackNode(bool_4)
    float_0 = 712.593
    dict_2 = {float_0: float_0, float_0: float_0}
    var_9 = module_0.check_parenthesis(dict_2)
    assert var_9 is True
    stack_node_14 = module_0.StackNode(float_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2022():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_2.push(stack_4)
    assert len(stack_2) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_2 = module_0.StackNode(float_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    dict_1 = {}
    stack_node_9 = module_0.StackNode(dict_1)
    module_0.check_parenthesis(var_5)


@pytest.mark.xfail(strict=True)
def test_case_2023():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    module_0.check_parenthesis(stack_2)


@pytest.mark.xfail(strict=True)
def test_case_2024():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_0 = stack_2.__len__()
    assert var_0 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_0)
    assert stack_node_2.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    int_0 = -1197
    module_0.check_parenthesis(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2025():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_2)
    assert len(stack_node_3.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    bool_0 = True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.push(bool_0)
    assert len(stack_5) == 1
    module_0.postfix_eval(var_1)


def test_case_2026():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    var_1 = stack_0.push(stack_0)
    assert len(stack_0) == 2
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_2)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    var_4 = stack_1.push(stack_node_2)
    assert len(stack_1) == 1
    assert len(stack_node_3.data) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_5 = stack_3.__len__()
    assert var_5 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    dict_0 = {}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    var_7 = stack_4.__len__()
    assert var_7 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_node_6 = module_0.StackNode(stack_5)
    assert len(stack_node_6.data) == 0
    var_8 = stack_5.__len__()
    assert var_8 == 0
    stack_node_7 = module_0.StackNode(stack_5)
    assert len(stack_node_7.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_9 = stack_6.__len__()
    assert var_9 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_8 = module_0.StackNode(var_9)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    var_10 = stack_7.__len__()
    assert var_10 == 0
    with pytest.raises(ValueError):
        stack_5.pop()


@pytest.mark.xfail(strict=True)
def test_case_2027():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_3)
    assert len(stack_node_1.data) == 0
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.push(tuple_1)
    assert len(stack_4) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    var_5.peek()


@pytest.mark.xfail(strict=True)
def test_case_2028():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(var_4)
    assert stack_node_2.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    stack_node_5 = module_0.StackNode(bool_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    module_0.postfix_eval(stack_11)


def test_case_2029():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    with pytest.raises(ValueError):
        stack_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_2030():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    dict_1 = {}
    stack_node_0 = module_0.StackNode(dict_1)
    str_0 = ""
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is True
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data is True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    float_1 = 712.593
    dict_2 = {float_1: float_1, float_1: float_1}
    var_2 = module_0.check_parenthesis(dict_2)
    assert var_2 is True
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data is True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(stack_2)
    assert len(stack_node_3.data) == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_3)
    assert len(stack_node_8.data) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    var_5 = stack_3.push(stack_node_7)
    assert len(stack_3) == 1
    assert len(stack_node_8.data) == 1
    bool_0 = False
    stack_node_9 = module_0.StackNode(bool_0)
    float_2 = 712.593
    dict_3 = {float_2: float_2, float_2: float_2}
    var_6 = module_0.check_parenthesis(dict_3)
    assert var_6 is True
    stack_node_10 = module_0.StackNode(float_2)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_0 = None
    stack_node_11 = module_0.StackNode(none_type_0)
    stack_node_12 = module_0.StackNode(stack_6)
    assert len(stack_node_12.data) == 0
    var_7 = stack_6.__len__()
    assert var_7 == 0
    stack_node_13 = module_0.StackNode(stack_6)
    assert len(stack_node_13.data) == 0
    bool_1 = False
    stack_node_14 = module_0.StackNode(bool_1)
    stack_node_15 = module_0.StackNode(bool_1)
    none_type_1 = None
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_8 = stack_7.push(none_type_1)
    assert len(stack_7) == 1
    stack_node_16 = module_0.StackNode(var_8)
    stack_node_17 = module_0.StackNode(stack_node_16)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_2 = None
    stack_node_18 = module_0.StackNode(none_type_2)
    stack_node_19 = module_0.StackNode(stack_8)
    assert len(stack_node_19.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2031():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_2 = module_0.check_parenthesis(str_0)
    assert var_2 is False
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data is False
    int_0 = 3109
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.push(int_0)
    assert len(stack_3) == 1
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_5 = stack_4.__len__()
    assert var_5 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_8 = module_0.StackNode(stack_5)
    assert len(stack_node_8.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    bool_0 = True
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_7 = stack_8.push(bool_0)
    assert len(stack_8) == 1
    stack_node_9 = module_0.StackNode(stack_8)
    assert len(stack_node_9.data) == 1
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_8 = stack_9.__len__()
    assert var_8 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_10 = module_0.StackNode(var_8)
    assert stack_node_10.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_11 = module_0.StackNode(stack_9)
    assert len(stack_node_11.data) == 0
    stack_node_12 = module_0.StackNode(stack_12)
    assert len(stack_node_12.data) == 0
    module_0.check_parenthesis(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2032():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(var_0)
    assert stack_node_2.data == 0
    bool_1 = False
    stack_node_3 = module_0.StackNode(bool_1)
    stack_node_4 = module_0.StackNode(bool_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_3)
    assert len(stack_node_8.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1.push(stack_node_1)


@pytest.mark.xfail(strict=True)
def test_case_2033():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    module_0.check_parenthesis(stack_0)


@pytest.mark.xfail(strict=True)
def test_case_2034():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    var_1 = stack_0.pop()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.push(none_type_1)
    assert len(stack_1) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    int_0 = 3109
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.push(int_0)
    assert len(stack_3) == 1
    str_0 = ""
    var_4 = module_0.check_parenthesis(str_0)
    assert var_4 is True
    stack_node_0 = module_0.StackNode(var_4)
    assert stack_node_0.data is True
    stack_node_1 = module_0.StackNode(str_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_5 = stack_4.__len__()
    assert var_5 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_5)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    var_6 = stack_5.__len__()
    assert var_6 == 0
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    stack_node_7 = module_0.StackNode(bool_0)
    none_type_2 = None
    stack_node_8 = module_0.StackNode(none_type_2)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_7 = stack_6.push(bool_0)
    assert len(stack_6) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_8 = stack_7.__len__()
    assert var_8 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_9 = module_0.check_parenthesis(dict_0)
    assert var_9 is True
    stack_node_9 = module_0.StackNode(stack_9)
    assert len(stack_node_9.data) == 0
    var_10 = stack_9.push(var_9)
    assert len(stack_9) == 1
    assert len(stack_node_9.data) == 1
    bool_1 = False
    set_0 = {bool_1, bool_1, bool_1, bool_1}
    tuple_0 = (bool_1, bool_1)
    str_1 = "B@kK%+yXf"
    tuple_1 = (bool_1, set_0, tuple_0, str_1)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_11 = stack_10.push(tuple_1)
    assert len(stack_10) == 1
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_12 = stack_11.__len__()
    assert var_12 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_10 = module_0.StackNode(var_12)
    assert stack_node_10.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_13 = stack_12.__len__()
    assert var_13 == 0
    var_14 = stack_14.__len__()
    assert var_14 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_15 = module_0.check_parenthesis(dict_1)
    assert var_15 is True
    stack_node_11 = module_0.StackNode(float_1)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    none_type_3 = None
    stack_node_12 = module_0.StackNode(none_type_3)
    stack_node_13 = module_0.StackNode(none_type_3)
    module_0.check_parenthesis(none_type_3)


@pytest.mark.xfail(strict=True)
def test_case_2035():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(tuple_1)
    assert len(stack_0) == 1
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2036():
    dict_0 = {}
    stack_node_0 = module_0.StackNode(dict_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_0)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(stack_2)
    assert len(stack_node_3.data) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_4)
    assert len(stack_node_7.data) == 0
    dict_1 = {}
    stack_node_8 = module_0.StackNode(dict_1)
    str_0 = ""
    var_3 = module_0.check_parenthesis(str_0)
    assert var_3 is True
    stack_node_9 = module_0.StackNode(var_3)
    assert stack_node_9.data is True
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_10 = module_0.StackNode(var_4)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_7)
    assert len(stack_node_13.data) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    var_6 = stack_7.push(stack_node_12)
    assert len(stack_7) == 1
    assert len(stack_node_13.data) == 1
    float_0 = 712.593
    dict_2 = {float_0: float_0, float_0: float_0}
    var_7 = module_0.check_parenthesis(dict_2)
    assert var_7 is True
    stack_node_14 = module_0.StackNode(float_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_8 = stack_9.__len__()
    assert var_8 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_15 = module_0.StackNode(var_8)
    assert stack_node_15.data == 0
    stack_node_16 = module_0.StackNode(stack_node_15)
    stack_node_17 = module_0.StackNode(stack_node_15)
    var_3.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2037():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    dict_0 = {}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(var_5)
    assert stack_node_2.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_3 = module_0.StackNode(stack_6)
    assert len(stack_node_3.data) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    module_0.postfix_eval(var_3)


@pytest.mark.xfail(strict=True)
def test_case_2038():
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is False
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is False
    module_0.check_parenthesis(var_1)


@pytest.mark.xfail(strict=True)
def test_case_2039():
    bool_0 = True
    bytes_0 = b"\x118a\x84\x08"
    tuple_0 = (bool_0, bool_0, bytes_0)
    module_0.postfix_eval(tuple_0)


def test_case_2040():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2041():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_2 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.push(none_type_0)
    assert len(stack_1) == 1
    var_2 = stack_1.push(stack_1)
    assert len(stack_1) == 2
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_node_7 = module_0.StackNode(stack_4)
    assert len(stack_node_7.data) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_5 = module_0.check_parenthesis(str_0)
    assert var_5 is False
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data is False
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_6 = stack_6.__len__()
    assert var_6 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_7 = stack_8.__len__()
    assert var_7 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    str_1 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_8 = module_0.check_parenthesis(str_1)
    assert var_8 is False
    var_3.peek()


@pytest.mark.xfail(strict=True)
def test_case_2042():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_1.data) == 1
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    stack_node_4 = module_0.StackNode(stack_7)
    assert len(stack_node_4.data) == 0
    var_6 = stack_7.push(var_5)
    assert len(stack_7) == 1
    assert len(stack_node_4.data) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_7 = stack_8.__len__()
    assert var_7 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_5 = module_0.StackNode(var_7)
    assert stack_node_5.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_8 = module_0.check_parenthesis(dict_2)
    assert var_8 is True
    var_9 = stack_9.__len__()
    assert var_9 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_node_7 = module_0.StackNode(stack_11)
    assert len(stack_node_7.data) == 0
    stack_node_8 = module_0.StackNode(stack_node_6)
    str_0 = "o2EICU9\x0bp7"
    stack_node_9 = module_0.StackNode(str_0)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_10 = stack_12.__len__()
    assert var_10 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_10 = module_0.StackNode(var_10)
    assert stack_node_10.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    none_type_2 = None
    stack_node_11 = module_0.StackNode(none_type_2)
    stack_node_12 = module_0.StackNode(none_type_2)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_11 = stack_15.__len__()
    assert var_11 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_13 = module_0.StackNode(var_11)
    assert stack_node_13.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_14 = module_0.StackNode(stack_15)
    assert len(stack_node_14.data) == 0
    module_0.postfix_eval(var_7)


def test_case_2043():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    with pytest.raises(ValueError):
        stack_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_2044():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    none_type_2 = None
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.push(none_type_2)
    assert len(stack_1) == 1
    none_type_3 = None
    stack_node_4 = module_0.StackNode(none_type_3)
    bool_1 = False
    stack_node_5 = module_0.StackNode(bool_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    bool_2 = True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.push(bool_2)
    assert len(stack_3) == 1
    stack_node_6 = module_0.StackNode(var_2)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    bool_3 = False
    stack_node_7 = module_0.StackNode(bool_3)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_10 = module_0.StackNode(stack_10)
    assert len(stack_node_10.data) == 0
    bool_4 = False
    stack_node_11 = module_0.StackNode(bool_4)
    stack_node_12 = module_0.StackNode(bool_4)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    var_0.push(var_1)


def test_case_2045():
    int_0 = 3109
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(int_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_2 = module_0.check_parenthesis(str_0)
    assert var_2 is False
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data is False
    with pytest.raises(ValueError):
        stack_1.peek()


@pytest.mark.xfail(strict=True)
def test_case_2046():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    stack_node_7 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_node_8 = module_0.StackNode(none_type_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.push(bool_0)
    assert len(stack_4) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_7.push(stack_9)
    assert len(stack_7) == 1
    module_0.check_parenthesis(stack_node_5)


def test_case_2047():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    none_type_0 = None
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.push(none_type_0)
    assert len(stack_2) == 1
    str_0 = ""
    var_2 = module_0.check_parenthesis(str_0)
    assert var_2 is True
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data is True
    stack_node_4 = module_0.StackNode(str_0)
    none_type_1 = None
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.push(none_type_1)
    assert len(stack_3) == 1
    var_4 = stack_3.pop()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_5 = stack_4.__len__()
    assert var_5 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_5.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_7 = stack_9.__len__()
    assert var_7 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_8 = module_0.check_parenthesis(dict_0)
    assert var_8 is True
    stack_node_6 = module_0.StackNode(stack_11)
    assert len(stack_node_6.data) == 0
    var_9 = stack_11.push(var_8)
    assert len(stack_11) == 1
    assert len(stack_node_6.data) == 1
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    with pytest.raises(ValueError):
        stack_12.pop()


@pytest.mark.xfail(strict=True)
def test_case_2048():
    dict_0 = {}
    stack_node_0 = module_0.StackNode(dict_0)
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_node_3 = module_0.StackNode(bool_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    str_1 = "o2EICU9\x0bp7"
    stack_node_4 = module_0.StackNode(str_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    bool_1 = False
    stack_node_5 = module_0.StackNode(bool_1)
    stack_node_6 = module_0.StackNode(bool_1)
    var_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_2049():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    bool_1 = False
    stack_node_3 = module_0.StackNode(bool_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    bool_2 = True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.push(bool_2)
    assert len(stack_4) == 1
    stack_node_4 = module_0.StackNode(var_2)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data is True
    bool_3 = False
    stack_node_7 = module_0.StackNode(bool_3)
    stack_node_8 = module_0.StackNode(bool_3)
    none_type_1 = None
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.push(none_type_1)
    assert len(stack_9) == 1
    stack_node_9 = module_0.StackNode(var_6)
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_11 = module_0.StackNode(var_7)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    module_0.postfix_eval(stack_0)


@pytest.mark.xfail(strict=True)
def test_case_2050():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    bool_1 = False
    stack_node_6 = module_0.StackNode(bool_1)
    stack_node_7 = module_0.StackNode(bool_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_8 = module_0.StackNode(var_2)
    assert stack_node_8.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_10 = module_0.StackNode(stack_10)
    assert len(stack_node_10.data) == 0
    stack_node_11 = module_0.StackNode(stack_12)
    assert len(stack_node_11.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    none_type_1 = None
    stack_node_12 = module_0.StackNode(none_type_1)
    stack_node_13 = module_0.StackNode(stack_14)
    assert len(stack_node_13.data) == 0
    var_6 = stack_14.push(none_type_1)
    assert len(stack_14) == 1
    assert len(stack_node_13.data) == 1
    int_0 = -222
    set_0 = {int_0}
    stack_node_14 = module_0.StackNode(set_0)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_8 = stack_16.__len__()
    assert var_8 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_15 = module_0.StackNode(var_8)
    assert stack_node_15.data == 0
    stack_node_16 = module_0.StackNode(stack_node_15)
    stack_node_17 = module_0.StackNode(stack_node_15)
    stack_node_18 = module_0.StackNode(stack_16)
    assert len(stack_node_18.data) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_4.peek()


@pytest.mark.xfail(strict=True)
def test_case_2051():
    str_0 = "o2EICU9\x0bp7"
    stack_node_0 = module_0.StackNode(str_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    dict_0 = {}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data is True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    bool_1 = False
    set_0 = {bool_1, bool_1, bool_1, bool_1}
    tuple_0 = (bool_1, bool_1)
    str_1 = "B@kK%+yXf"
    tuple_1 = (bool_1, set_0, tuple_0, str_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.push(tuple_1)
    assert len(stack_4) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    stack_node_8 = module_0.StackNode(stack_8)
    assert len(stack_node_8.data) == 0
    var_3.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2052():
    dict_0 = {}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    bool_1 = True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.push(bool_1)
    assert len(stack_1) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    dict_1 = {}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data is True
    bool_2 = False
    set_0 = {bool_2, bool_2, bool_2, bool_2}
    tuple_0 = (bool_2, bool_2)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_2, set_0, tuple_0, str_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.push(tuple_1)
    assert len(stack_5) == 1
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_node_7 = module_0.StackNode(none_type_0)
    module_0.check_parenthesis(stack_node_5)


@pytest.mark.xfail(strict=True)
def test_case_2053():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_node_5 = module_0.StackNode(bool_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_8 = module_0.StackNode(var_2)
    assert stack_node_8.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_1 = None
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.push(none_type_1)
    assert len(stack_7) == 1
    var_4 = stack_7.pop()
    assert len(stack_7) == 0
    none_type_2 = None
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.push(none_type_2)
    assert len(stack_8) == 1
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_10 = module_0.StackNode(stack_10)
    assert len(stack_node_10.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_11 = module_0.StackNode(var_7)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_14)
    assert len(stack_node_13.data) == 0
    var_3.push(none_type_2)


@pytest.mark.xfail(strict=True)
def test_case_2054():
    str_0 = "nOMQ\x0c"
    tuple_0 = (str_0,)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(tuple_0)
    assert len(stack_0) == 1
    var_0.peek()


def test_case_2055():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_3)
    assert len(stack_node_1.data) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_2 = module_0.check_parenthesis(str_0)
    assert var_2 is False
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data is False
    bool_0 = True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.push(bool_0)
    assert len(stack_4) == 1
    stack_node_3 = module_0.StackNode(stack_4)
    assert len(stack_node_3.data) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    var_6 = stack_6.__len__()
    assert var_6 == 0
    float_1 = -0.8
    stack_node_5 = module_0.StackNode(float_1)
    with pytest.raises(ValueError):
        stack_3.pop()


@pytest.mark.xfail(strict=True)
def test_case_2056():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is False
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_node_4 = module_0.StackNode(bool_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    bool_1 = False
    stack_node_5 = module_0.StackNode(bool_1)
    stack_node_6 = module_0.StackNode(bool_1)
    int_0 = 2594
    stack_node_7 = module_0.StackNode(int_0)
    dict_0 = {}
    stack_node_8 = module_0.StackNode(dict_0)
    str_1 = ""
    var_3 = module_0.check_parenthesis(str_1)
    assert var_3 is True
    stack_node_9 = module_0.StackNode(var_3)
    assert stack_node_9.data is True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_1 = None
    stack_node_10 = module_0.StackNode(none_type_1)
    stack_node_11 = module_0.StackNode(stack_4)
    assert len(stack_node_11.data) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    str_2 = "o2EICU9\x0bp7"
    stack_node_12 = module_0.StackNode(str_2)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_node_13 = module_0.StackNode(var_5)
    assert stack_node_13.data == 0
    stack_node_14 = module_0.StackNode(stack_node_13)
    dict_1 = {}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    stack_node_15 = module_0.StackNode(var_6)
    assert stack_node_15.data is True
    stack_node_16 = module_0.StackNode(stack_node_15)
    module_0.check_parenthesis(stack_node_8)


@pytest.mark.xfail(strict=True)
def test_case_2057():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    stack_node_6 = module_0.StackNode(stack_4)
    assert len(stack_node_6.data) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    stack_node_7 = module_0.StackNode(float_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_2 = None
    stack_node_8 = module_0.StackNode(none_type_2)
    stack_node_9 = module_0.StackNode(none_type_2)
    stack_node_10 = module_0.StackNode(stack_6)
    assert len(stack_node_10.data) == 0
    complex_1 = -3711.3 - 806.2j
    stack_node_11 = module_0.StackNode(complex_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_12 = module_0.StackNode(var_4)
    assert stack_node_12.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_3 = None
    stack_node_13 = module_0.StackNode(none_type_3)
    stack_node_14 = module_0.StackNode(none_type_3)
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_5 = module_0.check_parenthesis(dict_2)
    assert var_5 is True
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_15 = module_0.StackNode(var_6)
    assert stack_node_15.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_16 = module_0.StackNode(stack_13)
    assert len(stack_node_16.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_6.pop()


@pytest.mark.xfail(strict=True)
def test_case_2058():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    bool_1 = False
    stack_node_6 = module_0.StackNode(bool_1)
    stack_node_7 = module_0.StackNode(bool_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    str_0 = ""
    var_2 = module_0.check_parenthesis(str_0)
    assert var_2 is True
    stack_node_8 = module_0.StackNode(var_2)
    assert stack_node_8.data is True
    stack_node_9 = module_0.StackNode(str_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_10 = module_0.StackNode(var_3)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_12 = module_0.StackNode(var_4)
    assert stack_node_12.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_13 = module_0.StackNode(stack_5)
    assert len(stack_node_13.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_14 = module_0.StackNode(var_5)
    assert stack_node_14.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    bool_2 = False
    set_0 = {bool_2, bool_2, bool_2, bool_2}
    tuple_0 = (bool_2, bool_2)
    str_1 = "B@kK%+yXf"
    tuple_1 = (bool_2, set_0, tuple_0, str_1)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_14.push(tuple_1)
    assert len(stack_14) == 1
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    bool_3 = False
    stack_node_15 = module_0.StackNode(bool_3)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_8 = module_0.check_parenthesis(dict_0)
    assert var_8 is True
    stack_node_16 = module_0.StackNode(float_0)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_6.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2059():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(stack_4)
    assert len(stack_node_3.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    module_0.check_parenthesis(stack_3)


@pytest.mark.xfail(strict=True)
def test_case_2060():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.push(none_type_0)
    assert len(stack_4) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_5)
    assert len(stack_node_5.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    var_3.pop()


@pytest.mark.xfail(strict=True)
def test_case_2061():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_8 = module_0.StackNode(float_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_1 = None
    stack_node_9 = module_0.StackNode(none_type_1)
    stack_node_10 = module_0.StackNode(none_type_1)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_11 = module_0.StackNode(float_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_2 = None
    stack_node_12 = module_0.StackNode(none_type_2)
    stack_node_13 = module_0.StackNode(none_type_2)
    stack_node_14 = module_0.StackNode(stack_8)
    assert len(stack_node_14.data) == 0
    module_0.check_parenthesis(stack_node_12)


def test_case_2062():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    bool_1 = True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.push(bool_1)
    assert len(stack_3) == 1
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_5 = module_0.StackNode(stack_7)
    assert len(stack_node_5.data) == 0
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_2 = None
    stack_node_7 = module_0.StackNode(none_type_2)
    stack_node_8 = module_0.StackNode(stack_11)
    assert len(stack_node_8.data) == 0
    var_4 = stack_11.__len__()
    assert var_4 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_5 = module_0.check_parenthesis(str_0)
    assert var_5 is False
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data is False
    with pytest.raises(ValueError):
        stack_1.peek()


@pytest.mark.xfail(strict=True)
def test_case_2063():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(stack_5)
    assert len(stack_node_7.data) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    stack_node_9 = module_0.StackNode(stack_9)
    assert len(stack_node_9.data) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_6 = module_0.check_parenthesis(str_0)
    assert var_6 is False
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data is False
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_7 = module_0.check_parenthesis(dict_0)
    assert var_7 is True
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_8 = module_0.check_parenthesis(dict_1)
    assert var_8 is True
    stack_node_11 = module_0.StackNode(var_8)
    assert stack_node_11.data is True
    int_0 = -460
    stack_node_12 = module_0.StackNode(int_0)
    none_type_1 = None
    stack_node_13 = module_0.StackNode(none_type_1)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    module_0.postfix_eval(none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_2064():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_node_3 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.push(none_type_0)
    assert len(stack_3) == 1
    stack_node_4 = module_0.StackNode(var_1)
    bool_1 = True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.push(bool_1)
    assert len(stack_4) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    none_type_1 = None
    stack_node_10 = module_0.StackNode(none_type_1)
    bool_2 = False
    stack_node_11 = module_0.StackNode(bool_2)
    stack_node_12 = module_0.StackNode(bool_2)
    none_type_2 = None
    stack_node_13 = module_0.StackNode(none_type_2)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.push(bool_2)
    assert len(stack_11) == 1
    complex_0 = -3711.3 - 806.2j
    stack_node_14 = module_0.StackNode(complex_0)
    none_type_3 = None
    stack_node_15 = module_0.StackNode(none_type_3)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_4 = None
    stack_node_16 = module_0.StackNode(none_type_4)
    stack_node_17 = module_0.StackNode(stack_12)
    assert len(stack_node_17.data) == 0
    var_7 = stack_12.push(none_type_3)
    assert len(stack_12) == 1
    assert len(stack_node_17.data) == 1
    var_6.peek()


@pytest.mark.xfail(strict=True)
def test_case_2065():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(tuple_1)
    assert len(stack_0) == 1
    bool_1 = False
    stack_node_0 = module_0.StackNode(bool_1)
    stack_node_1 = module_0.StackNode(bool_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    dict_0 = {}
    stack_node_2 = module_0.StackNode(dict_0)
    str_1 = ""
    var_2 = module_0.check_parenthesis(str_1)
    assert var_2 is True
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data is True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    bool_2 = False
    stack_node_4 = module_0.StackNode(bool_2)
    stack_node_5 = module_0.StackNode(bool_2)
    none_type_0 = None
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.push(none_type_0)
    assert len(stack_3) == 1
    stack_node_6 = module_0.StackNode(var_3)
    dict_1 = {}
    stack_node_7 = module_0.StackNode(dict_1)
    str_2 = ""
    var_4 = module_0.check_parenthesis(str_2)
    assert var_4 is True
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data is True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2066():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_node_0)
    dict_0 = {}
    stack_node_3 = module_0.StackNode(dict_0)
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    stack_node_4 = module_0.StackNode(var_0)
    assert stack_node_4.data is True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_node_6 = module_0.StackNode(stack_3)
    assert len(stack_node_6.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(var_1)
    assert stack_node_7.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    bool_0 = False
    stack_node_8 = module_0.StackNode(bool_0)
    stack_node_9 = module_0.StackNode(bool_0)
    none_type_2 = None
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_4 = stack_11.push(none_type_2)
    assert len(stack_11) == 1
    stack_node_10 = module_0.StackNode(var_4)
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.__len__()
    assert var_5 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_12 = module_0.StackNode(var_5)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_node_12)
    stack_node_15 = module_0.StackNode(stack_12)
    assert len(stack_node_15.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    bool_1 = False
    module_0.postfix_eval(bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2067():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2068():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_2)
    assert len(stack_0) == 1
    assert len(stack_node_3.data) == 1
    var_2.push(stack_node_3)


@pytest.mark.xfail(strict=True)
def test_case_2069():
    tuple_0 = ()
    module_0.postfix_eval(tuple_0)


def test_case_2070():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    str_0 = ""
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_2)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_3.push(stack_5)
    assert len(stack_3) == 1
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_1 = module_0.StackNode(var_4)
    assert stack_node_1.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_2 = module_0.StackNode(stack_6)
    assert len(stack_node_2.data) == 0
    int_0 = 3109
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.push(int_0)
    assert len(stack_10) == 1
    with pytest.raises(ValueError):
        stack_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_2071():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_2)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_1 = stack_6.__len__()
    assert var_1 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.__len__()
    assert var_2 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_3 = module_0.StackNode(complex_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_5 = module_0.StackNode(stack_10)
    assert len(stack_node_5.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    stack_node_7 = module_0.StackNode(bool_0)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_10 = module_0.StackNode(stack_15)
    assert len(stack_node_10.data) == 0
    bool_1 = False
    stack_node_11 = module_0.StackNode(bool_1)
    none_type_0 = None
    stack_node_12 = module_0.StackNode(none_type_0)
    bool_2 = False
    stack_node_13 = module_0.StackNode(bool_2)
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    bool_3 = False
    stack_node_14 = module_0.StackNode(bool_3)
    stack_node_15 = module_0.StackNode(bool_3)
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_5.peek()


@pytest.mark.xfail(strict=True)
def test_case_2072():
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    float_0 = -0.8
    stack_node_0 = module_0.StackNode(float_0)
    float_1 = 712.593
    dict_0 = {float_1: float_1, float_1: float_1}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_1 = module_0.StackNode(float_1)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(none_type_0)
    float_2 = 712.593
    dict_1 = {float_2: float_2, float_2: float_2}
    var_2 = module_0.check_parenthesis(dict_1)
    assert var_2 is True
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data is True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_3 = stack_1.__len__()
    assert var_3 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_1)
    assert len(stack_node_7.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_9 = module_0.StackNode(stack_4)
    assert len(stack_node_9.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    module_0.postfix_eval(var_2)


@pytest.mark.xfail(strict=True)
def test_case_2073():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(stack_2)
    assert len(stack_node_0.data) == 0
    var_2 = stack_2.push(var_1)
    assert len(stack_2) == 1
    assert len(stack_node_0.data) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    dict_1 = {}
    stack_node_3 = module_0.StackNode(dict_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_node_5 = module_0.StackNode(stack_7)
    assert len(stack_node_5.data) == 0
    var_5 = stack_7.push(none_type_0)
    assert len(stack_7) == 1
    assert len(stack_node_5.data) == 1
    var_6 = stack_7.push(stack_node_3)
    assert len(stack_7) == 2
    assert len(stack_node_5.data) == 2
    int_0 = -222
    set_0 = {int_0}
    stack_node_6 = module_0.StackNode(set_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_7 = stack_8.__len__()
    assert var_7 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_8 = stack_11.__len__()
    assert var_8 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_7 = module_0.StackNode(var_8)
    assert stack_node_7.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    str_0 = ""
    var_9 = module_0.check_parenthesis(str_0)
    assert var_9 is True
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_10 = stack_16.__len__()
    assert var_10 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_8 = module_0.StackNode(var_10)
    assert stack_node_8.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_11 = stack_17.__len__()
    assert var_11 == 0
    var_12 = stack_17.__len__()
    assert var_12 == 0
    bool_0 = True
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_13 = stack_21.push(bool_0)
    assert len(stack_21) == 1
    stack_node_9 = module_0.StackNode(stack_21)
    assert len(stack_node_9.data) == 1
    var_3.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2074():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_8 = module_0.StackNode(var_7)
    assert stack_node_8.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    none_type_0 = None
    stack_node_9 = module_0.StackNode(none_type_0)
    stack_node_10 = module_0.StackNode(stack_17)
    assert len(stack_node_10.data) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    none_type_1 = None
    stack_node_11 = module_0.StackNode(none_type_1)
    stack_node_12 = module_0.StackNode(stack_18)
    assert len(stack_node_12.data) == 0
    var_8 = stack_18.push(none_type_1)
    assert len(stack_18) == 1
    assert len(stack_node_12.data) == 1
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_9 = stack_19.__len__()
    assert var_9 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_13 = module_0.StackNode(var_9)
    assert stack_node_13.data == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_14 = module_0.StackNode(stack_20)
    assert len(stack_node_14.data) == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    var_10 = stack_22.__len__()
    assert var_10 == 0
    var_1.push(none_type_0)


def test_case_2075():
    int_0 = -460
    stack_node_0 = module_0.StackNode(int_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_node_3 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.push(none_type_1)
    assert len(stack_1) == 1
    stack_node_4 = module_0.StackNode(var_1)
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    int_1 = -222
    set_0 = {int_1}
    stack_node_7 = module_0.StackNode(set_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_7)
    assert len(stack_node_11.data) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_2 = None
    stack_node_12 = module_0.StackNode(none_type_2)
    float_0 = -0.8
    stack_node_13 = module_0.StackNode(float_0)
    float_1 = 712.593
    dict_0 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    stack_node_14 = module_0.StackNode(var_6)
    assert stack_node_14.data is True
    none_type_3 = None
    stack_node_15 = module_0.StackNode(none_type_3)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    with pytest.raises(ValueError):
        stack_7.peek()


@pytest.mark.xfail(strict=True)
def test_case_2076():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(none_type_0)
    dict_0 = {}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data is True
    stack_node_5 = module_0.StackNode(stack_node_4)
    bool_0 = True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.push(bool_0)
    assert len(stack_3) == 1
    stack_node_6 = module_0.StackNode(stack_3)
    assert len(stack_node_6.data) == 1
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_7 = module_0.StackNode(stack_6)
    assert len(stack_node_7.data) == 0
    int_0 = -222
    set_0 = {int_0}
    stack_node_8 = module_0.StackNode(set_0)
    dict_2 = {}
    stack_node_9 = module_0.StackNode(dict_2)
    str_0 = ""
    var_5 = module_0.check_parenthesis(str_0)
    assert var_5 is True
    stack_node_10 = module_0.StackNode(var_5)
    assert stack_node_10.data is True
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_1 = None
    stack_node_11 = module_0.StackNode(none_type_1)
    stack_node_12 = module_0.StackNode(stack_9)
    assert len(stack_node_12.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_13 = module_0.StackNode(var_6)
    assert stack_node_13.data == 0
    stack_node_14 = module_0.StackNode(stack_node_13)
    stack_node_15 = module_0.StackNode(stack_node_13)
    stack_node_16 = module_0.StackNode(stack_11)
    assert len(stack_node_16.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    module_0.postfix_eval(var_2)


@pytest.mark.xfail(strict=True)
def test_case_2077():
    bytes_0 = b"\xc8O Mo\x00y\xde\xb4\xde\x8c\xa0\xe0d\x9f+\xdf\x92\xc0o"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2078():
    bool_0 = False
    module_0.check_parenthesis(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2079():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_4 = module_0.StackNode(float_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    dict_1 = {var_1: var_1, float_0: stack_node_3}
    stack_node_5 = module_0.StackNode(dict_1)
    dict_2 = {}
    stack_node_6 = module_0.StackNode(dict_2)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_4)
    assert len(stack_node_9.data) == 0
    bool_1 = True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.push(bool_1)
    assert len(stack_5) == 1
    stack_node_10 = module_0.StackNode(stack_5)
    assert len(stack_node_10.data) == 1
    bool_2 = False
    stack_node_11 = module_0.StackNode(bool_2)
    stack_node_12 = module_0.StackNode(bool_2)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    bool_3 = True
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.push(bool_3)
    assert len(stack_7) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_13 = module_0.StackNode(var_6)
    assert stack_node_13.data == 0
    stack_node_14 = module_0.StackNode(stack_node_13)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_0 = None
    stack_node_15 = module_0.StackNode(none_type_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    float_1 = 712.593
    dict_3 = {float_1: float_1, float_1: float_1}
    var_8 = module_0.check_parenthesis(dict_3)
    assert var_8 is True
    stack_node_16 = module_0.StackNode(float_1)
    var_2.push(var_8)


@pytest.mark.xfail(strict=True)
def test_case_2080():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_4)
    assert len(stack_node_7.data) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    var_3 = stack_4.push(stack_node_6)
    assert len(stack_4) == 1
    assert len(stack_node_7.data) == 1
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_8 = module_0.StackNode(var_4)
    assert stack_node_8.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_9 = module_0.StackNode(stack_7)
    assert len(stack_node_9.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    dict_0 = {}
    stack_node_10 = module_0.StackNode(dict_0)
    str_0 = ""
    var_6 = module_0.check_parenthesis(str_0)
    assert var_6 is True
    stack_node_11 = module_0.StackNode(var_6)
    assert stack_node_11.data is True
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    bool_0 = True
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.push(bool_0)
    assert len(stack_11) == 1
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_1 = None
    stack_node_12 = module_0.StackNode(none_type_1)
    stack_node_13 = module_0.StackNode(none_type_1)
    bool_1 = False
    stack_node_14 = module_0.StackNode(bool_1)
    stack_node_15 = module_0.StackNode(bool_1)
    none_type_2 = None
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.push(none_type_2)
    assert len(stack_13) == 1
    stack_node_16 = module_0.StackNode(var_8)
    none_type_3 = None
    stack_node_17 = module_0.StackNode(none_type_3)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_9 = stack_14.__len__()
    assert var_9 == 0
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_10 = module_0.check_parenthesis(dict_1)
    assert var_10 is True
    var_11 = stack_14.__len__()
    assert var_11 == 0
    none_type_4 = None
    stack_node_18 = module_0.StackNode(none_type_4)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_12 = stack_15.__len__()
    assert var_12 == 0
    var_5.pop()


@pytest.mark.xfail(strict=True)
def test_case_2081():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    stack_node_6 = module_0.StackNode(stack_node_4)
    bool_1 = False
    set_0 = {bool_1, bool_1, bool_1, bool_1}
    tuple_0 = (bool_1, bool_1)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_1, set_0, tuple_0, str_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_0 = stack_3.push(tuple_1)
    assert len(stack_3) == 1
    str_1 = ""
    var_1 = module_0.check_parenthesis(str_1)
    assert var_1 is True
    stack_node_7 = module_0.StackNode(var_1)
    assert stack_node_7.data is True
    stack_node_8 = module_0.StackNode(str_1)
    complex_0 = -3711.3 - 806.2j
    stack_node_9 = module_0.StackNode(complex_0)
    none_type_2 = None
    stack_node_10 = module_0.StackNode(none_type_2)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_3 = None
    stack_node_11 = module_0.StackNode(none_type_3)
    stack_node_12 = module_0.StackNode(stack_4)
    assert len(stack_node_12.data) == 0
    var_2 = stack_4.push(none_type_2)
    assert len(stack_4) == 1
    assert len(stack_node_12.data) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_13 = module_0.StackNode(var_3)
    assert stack_node_13.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_14 = module_0.StackNode(stack_5)
    assert len(stack_node_14.data) == 0
    stack_node_15 = module_0.StackNode(stack_7)
    assert len(stack_node_15.data) == 0
    module_0.check_parenthesis(var_2)


@pytest.mark.xfail(strict=True)
def test_case_2082():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    bool_0 = True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.push(bool_0)
    assert len(stack_3) == 1
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 1
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_6 = module_0.StackNode(float_0)
    bool_1 = True
    stack_node_7 = module_0.StackNode(bool_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    stack_node_9 = module_0.StackNode(stack_7)
    assert len(stack_node_9.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    stack_node_10 = module_0.StackNode(float_1)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_1 = None
    stack_node_11 = module_0.StackNode(none_type_1)
    stack_node_12 = module_0.StackNode(none_type_1)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_0.push(stack_0)


def test_case_2083():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is False
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data is False
    dict_0 = {}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data is True
    stack_node_4 = module_0.StackNode(stack_node_3)
    bool_0 = True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_3 = stack_1.push(bool_0)
    assert len(stack_1) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_4 = stack_2.__len__()
    assert var_4 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    stack_node_8 = module_0.StackNode(stack_5)
    assert len(stack_node_8.data) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    dict_1 = {}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data is True
    int_0 = 3109
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_7 = stack_6.push(int_0)
    assert len(stack_6) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_8 = stack_7.__len__()
    assert var_8 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_10 = module_0.StackNode(var_8)
    assert stack_node_10.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_9 = stack_8.__len__()
    assert var_9 == 0
    var_10 = stack_10.__len__()
    assert var_10 == 0
    float_0 = -0.8
    stack_node_11 = module_0.StackNode(float_0)
    bool_1 = False
    stack_node_12 = module_0.StackNode(bool_1)
    with pytest.raises(ValueError):
        stack_9.peek()


def test_case_2084():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_1 = module_0.StackNode(none_type_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(stack_4)
    assert len(stack_node_6.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data is True
    with pytest.raises(ValueError):
        stack_2.peek()


@pytest.mark.xfail(strict=True)
def test_case_2085():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(stack_2)
    assert len(stack_node_0.data) == 0
    var_2 = stack_2.push(var_1)
    assert len(stack_2) == 1
    assert len(stack_node_0.data) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_2 = module_0.StackNode(var_5)
    assert stack_node_2.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_3 = module_0.StackNode(var_6)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    var_7 = stack_14.__len__()
    assert var_7 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_8 = stack_15.__len__()
    assert var_8 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_6 = module_0.StackNode(var_8)
    assert stack_node_6.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_7 = module_0.StackNode(stack_16)
    assert len(stack_node_7.data) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_9 = stack_18.__len__()
    assert var_9 == 0
    dict_1 = {}
    stack_node_8 = module_0.StackNode(dict_1)
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    none_type_0 = None
    stack_node_9 = module_0.StackNode(none_type_0)
    stack_node_10 = module_0.StackNode(stack_19)
    assert len(stack_node_10.data) == 0
    var_10 = stack_19.push(none_type_0)
    assert len(stack_19) == 1
    assert len(stack_node_10.data) == 1
    var_11 = stack_19.push(stack_node_8)
    assert len(stack_19) == 2
    assert len(stack_node_10.data) == 2
    none_type_1 = None
    stack_node_11 = module_0.StackNode(none_type_1)
    bool_0 = False
    stack_node_12 = module_0.StackNode(bool_0)
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    bool_1 = True
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_12 = stack_21.push(bool_1)
    assert len(stack_21) == 1
    stack_node_13 = module_0.StackNode(stack_21)
    assert len(stack_node_13.data) == 1
    var_8.peek()


@pytest.mark.xfail(strict=True)
def test_case_2086():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    var_1 = stack_1.push(none_type_0)
    assert len(stack_1) == 1
    assert len(stack_node_1.data) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_3)
    assert len(stack_node_4.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_node_6 = module_0.StackNode(stack_4)
    assert len(stack_node_6.data) == 0
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    none_type_2 = None
    stack_node_9 = module_0.StackNode(none_type_2)
    bool_0 = False
    module_0.check_parenthesis(bool_0)


def test_case_2087():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    with pytest.raises(ValueError):
        stack_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_2088():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    dict_0 = {}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data is True
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(stack_5)
    assert len(stack_node_4.data) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    var_1.push(stack_5)


def test_case_2089():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    bool_1 = True
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.push(bool_1)
    assert len(stack_6) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    stack_node_5 = module_0.StackNode(stack_10)
    assert len(stack_node_5.data) == 0
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_6 = module_0.check_parenthesis(dict_2)
    assert var_6 is True
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data is True
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_7 = module_0.StackNode(var_7)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    var_8 = stack_12.__len__()
    assert var_8 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_9 = stack_13.__len__()
    assert var_9 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_10 = module_0.StackNode(var_9)
    assert stack_node_10.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_10 = stack_16.__len__()
    assert var_10 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    none_type_1 = None
    stack_node_11 = module_0.StackNode(none_type_1)
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_11 = stack_18.__len__()
    assert var_11 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_12 = module_0.StackNode(var_11)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    none_type_2 = None
    stack_node_14 = module_0.StackNode(none_type_2)
    with pytest.raises(ValueError):
        stack_16.peek()


def test_case_2090():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    with pytest.raises(ValueError):
        stack_0.peek()


def test_case_2091():
    dict_0 = {}
    stack_node_0 = module_0.StackNode(dict_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    with pytest.raises(ValueError):
        stack_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_2092():
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    bool_1 = True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.push(bool_1)
    assert len(stack_5) == 1
    stack_node_4 = module_0.StackNode(var_2)
    str_1 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_3 = module_0.check_parenthesis(str_1)
    assert var_3 is False
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(stack_7)
    assert len(stack_node_6.data) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    module_0.postfix_eval(var_4)


@pytest.mark.xfail(strict=True)
def test_case_2093():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_0)
    assert stack_node_4.data == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_5 = module_0.StackNode(complex_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_node_7 = module_0.StackNode(stack_3)
    assert len(stack_node_7.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_1 = None
    stack_node_8 = module_0.StackNode(none_type_1)
    stack_node_9 = module_0.StackNode(stack_5)
    assert len(stack_node_9.data) == 0
    stack_node_10 = module_0.StackNode(stack_node_8)
    module_0.postfix_eval(stack_node_7)


def test_case_2094():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_9 = module_0.StackNode(var_3)
    assert stack_node_9.data is True
    with pytest.raises(ValueError):
        stack_1.pop()


def test_case_2095():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_0)
    assert len(stack_node_4.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_0.push(stack_node_3)
    assert len(stack_0) == 1
    assert len(stack_node_4.data) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_2)
    assert len(stack_node_8.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_10 = module_0.StackNode(stack_8)
    assert len(stack_node_10.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    int_0 = 2594
    stack_node_11 = module_0.StackNode(int_0)
    bool_1 = True
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_12.push(bool_1)
    assert len(stack_12) == 1
    with pytest.raises(ValueError):
        stack_6.peek()


@pytest.mark.xfail(strict=True)
def test_case_2096():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    module_0.check_parenthesis(var_0)


def test_case_2097():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_node_3 = module_0.StackNode(stack_node_2)
    none_type_1 = None
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.push(none_type_1)
    assert len(stack_1) == 1
    var_2 = stack_1.pop()
    assert len(stack_1) == 0
    none_type_2 = None
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.push(none_type_2)
    assert len(stack_2) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    var_6 = stack_5.__len__()
    assert var_6 == 0
    dict_0 = {}
    stack_node_5 = module_0.StackNode(dict_0)
    str_0 = ""
    var_7 = module_0.check_parenthesis(str_0)
    assert var_7 is True
    stack_node_6 = module_0.StackNode(var_7)
    assert stack_node_6.data is True
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    bool_1 = False
    stack_node_7 = module_0.StackNode(bool_1)
    stack_node_8 = module_0.StackNode(bool_1)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_3 = None
    stack_node_9 = module_0.StackNode(none_type_3)
    bool_2 = False
    stack_node_10 = module_0.StackNode(bool_2)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    bool_3 = True
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.push(bool_3)
    assert len(stack_13) == 1
    stack_node_11 = module_0.StackNode(var_8)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_12 = module_0.StackNode(stack_14)
    assert len(stack_node_12.data) == 0
    dict_1 = {}
    stack_node_13 = module_0.StackNode(dict_1)
    str_1 = ""
    var_9 = module_0.check_parenthesis(str_1)
    assert var_9 is True
    stack_node_14 = module_0.StackNode(var_9)
    assert stack_node_14.data is True
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    none_type_4 = None
    stack_node_15 = module_0.StackNode(none_type_4)
    bool_4 = False
    stack_node_16 = module_0.StackNode(bool_4)
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    str_2 = "o2EICU9\x0bp7"
    stack_node_17 = module_0.StackNode(str_2)
    with pytest.raises(ValueError):
        stack_12.pop()


@pytest.mark.xfail(strict=True)
def test_case_2098():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    var_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_2099():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_2100():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_2)
    assert len(stack_node_3.data) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    dict_0 = {}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    var_5 = stack_5.__len__()
    assert var_5 == 0
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_node_6 = module_0.StackNode(bool_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_8)
    assert len(stack_node_9.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_7 = stack_9.__len__()
    assert var_7 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_10 = module_0.StackNode(var_7)
    assert stack_node_10.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_0 = None
    stack_node_11 = module_0.StackNode(none_type_0)
    stack_node_12 = module_0.StackNode(stack_11)
    assert len(stack_node_12.data) == 0
    stack_node_13 = module_0.StackNode(stack_node_11)
    var_7.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2101():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    dict_0 = {}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    dict_1 = {}
    stack_node_1 = module_0.StackNode(dict_1)
    str_0 = ""
    var_3 = module_0.check_parenthesis(str_0)
    assert var_3 is True
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data is True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    bool_0 = False
    stack_node_7 = module_0.StackNode(bool_0)
    stack_node_8 = module_0.StackNode(bool_0)
    dict_2 = {}
    stack_node_9 = module_0.StackNode(dict_2)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_0 = None
    stack_node_10 = module_0.StackNode(none_type_0)
    stack_node_11 = module_0.StackNode(stack_9)
    assert len(stack_node_11.data) == 0
    var_6 = stack_9.push(none_type_0)
    assert len(stack_9) == 1
    assert len(stack_node_11.data) == 1
    var_7 = stack_9.push(stack_node_9)
    assert len(stack_9) == 2
    assert len(stack_node_11.data) == 2
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_1 = None
    stack_node_12 = module_0.StackNode(none_type_1)
    stack_node_13 = module_0.StackNode(stack_10)
    assert len(stack_node_13.data) == 0
    var_8 = stack_10.push(none_type_1)
    assert len(stack_10) == 1
    assert len(stack_node_13.data) == 1
    bool_1 = True
    stack_node_14 = module_0.StackNode(bool_1)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_9 = stack_11.__len__()
    assert var_9 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_15 = module_0.StackNode(var_9)
    assert stack_node_15.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    float_0 = 712.593
    dict_3 = {float_0: float_0, float_0: float_0}
    var_10 = module_0.check_parenthesis(dict_3)
    assert var_10 is True
    var_11 = stack_12.__len__()
    assert var_11 == 0
    var_11.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2102():
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_1 = module_0.StackNode(stack_2)
    assert len(stack_node_1.data) == 0
    var_3 = stack_2.push(var_2)
    assert len(stack_2) == 1
    assert len(stack_node_1.data) == 1
    var_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_2103():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_6)
    assert len(stack_node_6.data) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    dict_0 = {}
    stack_node_7 = module_0.StackNode(dict_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    stack_node_9 = module_0.StackNode(stack_8)
    assert len(stack_node_9.data) == 0
    var_4 = stack_8.push(none_type_0)
    assert len(stack_8) == 1
    assert len(stack_node_9.data) == 1
    var_5 = stack_8.push(stack_node_7)
    assert len(stack_8) == 2
    assert len(stack_node_9.data) == 2
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data is True
    str_0 = "b= "
    var_5.push(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2104():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_node_5 = module_0.StackNode(stack_5)
    assert len(stack_node_5.data) == 0
    var_4 = stack_5.push(none_type_0)
    assert len(stack_5) == 1
    assert len(stack_node_5.data) == 1
    str_0 = ""
    var_5 = module_0.check_parenthesis(str_0)
    assert var_5 is True
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data is True
    stack_node_7 = module_0.StackNode(str_0)
    none_type_1 = None
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_6 = stack_6.push(none_type_1)
    assert len(stack_6) == 1
    var_7 = stack_6.pop()
    assert len(stack_6) == 0
    dict_1 = {}
    var_8 = module_0.check_parenthesis(dict_1)
    assert var_8 is True
    var_7.peek()


def test_case_2105():
    float_0 = -0.8
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_0)
    assert len(stack_node_4.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_1 = 712.593
    dict_0 = {float_1: float_1, float_1: float_1}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    var_4 = stack_4.push(var_3)
    assert len(stack_4) == 1
    assert len(stack_node_5.data) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_6.__len__()
    assert var_6 == 0
    dict_1 = {}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_8 = stack_10.__len__()
    assert var_8 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_7 = module_0.StackNode(var_8)
    assert stack_node_7.data == 0
    dict_2 = {}
    var_9 = module_0.check_parenthesis(dict_2)
    assert var_9 is True
    var_10 = stack_11.__len__()
    assert var_10 == 0
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_11 = stack_12.__len__()
    assert var_11 == 0
    float_2 = 712.593
    dict_3 = {float_2: float_2, float_2: float_2}
    var_12 = module_0.check_parenthesis(dict_3)
    assert var_12 is True
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    str_0 = ""
    var_13 = module_0.check_parenthesis(str_0)
    assert var_13 is True
    stack_node_9 = module_0.StackNode(var_13)
    assert stack_node_9.data is True
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_14 = stack_14.__len__()
    assert var_14 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_10 = module_0.StackNode(var_14)
    assert stack_node_10.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_11 = module_0.StackNode(stack_14)
    assert len(stack_node_11.data) == 0
    var_15 = stack_16.__len__()
    assert var_15 == 0
    with pytest.raises(ValueError):
        stack_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_2106():
    dict_0 = {}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_0.push(var_0)
    assert len(stack_0) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(stack_4)
    assert len(stack_node_2.data) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(var_5)
    assert stack_node_3.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_4 = module_0.StackNode(stack_6)
    assert len(stack_node_4.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_5 = module_0.StackNode(var_6)
    assert stack_node_5.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_12.__len__()
    assert var_7 == 0
    str_0 = ""
    var_8 = module_0.check_parenthesis(str_0)
    assert var_8 is True
    stack_node_6 = module_0.StackNode(var_8)
    assert stack_node_6.data is True
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_9 = stack_13.__len__()
    assert var_9 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_10 = stack_14.__len__()
    assert var_10 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_7 = module_0.StackNode(var_10)
    assert stack_node_7.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    dict_1 = {}
    var_11 = module_0.check_parenthesis(dict_1)
    assert var_11 is True
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_12 = stack_19.__len__()
    assert var_12 == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    stack_node_8 = module_0.StackNode(var_12)
    assert stack_node_8.data == 0
    dict_2 = {}
    var_13 = module_0.check_parenthesis(dict_2)
    assert var_13 is True
    var_14 = stack_20.__len__()
    assert var_14 == 0
    module_0.postfix_eval(stack_node_1)


@pytest.mark.xfail(strict=True)
def test_case_2107():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    var_2 = stack_1.__len__()
    assert var_2 == 0
    var_1.push(var_1)


def test_case_2108():
    int_0 = 2594
    stack_node_0 = module_0.StackNode(int_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(stack_3)
    assert len(stack_node_4.data) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    dict_0 = {}
    stack_node_5 = module_0.StackNode(dict_0)
    str_0 = ""
    var_4 = module_0.check_parenthesis(str_0)
    assert var_4 is True
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data is True
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    with pytest.raises(ValueError):
        stack_8.pop()


def test_case_2109():
    float_0 = -0.8
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    dict_0 = {}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_5)
    assert len(stack_node_5.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    bool_0 = False
    stack_node_7 = module_0.StackNode(bool_0)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    stack_node_8 = module_0.StackNode(float_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    str_0 = "o2EICU9\x0bp7"
    stack_node_9 = module_0.StackNode(str_0)
    none_type_0 = None
    stack_node_10 = module_0.StackNode(none_type_0)
    bool_1 = False
    stack_node_11 = module_0.StackNode(bool_1)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_4 = module_0.check_parenthesis(dict_2)
    assert var_4 is True
    stack_node_12 = module_0.StackNode(bool_1)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_13 = module_0.StackNode(var_5)
    assert stack_node_13.data == 0
    stack_node_14 = module_0.StackNode(stack_node_13)
    stack_node_15 = module_0.StackNode(stack_node_13)
    stack_node_16 = module_0.StackNode(stack_10)
    assert len(stack_node_16.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    with pytest.raises(ValueError):
        stack_0.pop()


def test_case_2110():
    complex_0 = -3711.3 - 806.2j
    stack_node_0 = module_0.StackNode(complex_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    bool_0 = True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.push(bool_0)
    assert len(stack_3) == 1
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 1
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    bool_1 = False
    stack_node_4 = module_0.StackNode(bool_1)
    str_0 = ""
    var_6 = module_0.check_parenthesis(str_0)
    assert var_6 is True
    stack_node_5 = module_0.StackNode(var_6)
    assert stack_node_5.data is True
    stack_node_6 = module_0.StackNode(str_0)
    float_1 = -0.8
    stack_node_7 = module_0.StackNode(float_1)
    with pytest.raises(ValueError):
        stack_5.peek()


@pytest.mark.xfail(strict=True)
def test_case_2111():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    str_0 = ""
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is True
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data is True
    stack_node_4 = module_0.StackNode(str_0)
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_6 = module_0.StackNode(float_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    dict_1 = {var_2: var_2, float_0: stack_node_5}
    stack_node_7 = module_0.StackNode(dict_1)
    module_0.postfix_eval(dict_1)


@pytest.mark.xfail(strict=True)
def test_case_2112():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_1 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_node_4 = module_0.StackNode(stack_5)
    assert len(stack_node_4.data) == 0
    var_3 = stack_5.push(none_type_0)
    assert len(stack_5) == 1
    assert len(stack_node_4.data) == 1
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    dict_0 = {}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    var_6 = stack_7.__len__()
    assert var_6 == 0
    var_6.peek()


@pytest.mark.xfail(strict=True)
def test_case_2113():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    dict_0 = {}
    stack_node_0 = module_0.StackNode(dict_0)
    str_0 = ""
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is True
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data is True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(stack_5)
    assert len(stack_node_6.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    stack_node_10 = module_0.StackNode(stack_8)
    assert len(stack_node_10.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_11 = module_0.StackNode(var_5)
    assert stack_node_11.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_12 = module_0.StackNode(stack_10)
    assert len(stack_node_12.data) == 0
    stack_node_13 = module_0.StackNode(stack_12)
    assert len(stack_node_13.data) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    stack_node_14 = module_0.StackNode(stack_16)
    assert len(stack_node_14.data) == 0
    int_0 = -222
    set_0 = {int_0}
    stack_node_15 = module_0.StackNode(set_0)
    module_0.check_parenthesis(stack_11)


@pytest.mark.xfail(strict=True)
def test_case_2114():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    module_0.postfix_eval(stack_node_0)


def test_case_2115():
    dict_0 = {}
    stack_node_0 = module_0.StackNode(dict_0)
    dict_1 = {}
    var_0 = module_0.check_parenthesis(dict_1)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_0.push(var_0)
    assert len(stack_0) == 1
    with pytest.raises(ValueError):
        stack_1.peek()


@pytest.mark.xfail(strict=True)
def test_case_2116():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    module_0.check_parenthesis(stack_0)


@pytest.mark.xfail(strict=True)
def test_case_2117():
    dict_0 = {}
    stack_node_0 = module_0.StackNode(dict_0)
    dict_1 = {}
    var_0 = module_0.check_parenthesis(dict_1)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_2 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_2)
    assert var_2 is True
    stack_node_5 = module_0.StackNode(float_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_node_7 = module_0.StackNode(stack_5)
    assert len(stack_node_7.data) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_node_8 = module_0.StackNode(stack_5)
    assert len(stack_node_8.data) == 0
    bool_1 = False
    stack_node_9 = module_0.StackNode(bool_1)
    stack_node_10 = module_0.StackNode(bool_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    float_1 = 712.593
    dict_3 = {float_1: float_1, float_1: float_1}
    var_5 = module_0.check_parenthesis(dict_3)
    assert var_5 is True
    module_0.check_parenthesis(stack_6)


@pytest.mark.xfail(strict=True)
def test_case_2118():
    bytes_0 = b"\xb4\xa8\xdb"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    set_1 = set()
    tuple_0 = (bytes_0, set_0, set_1)
    module_0.check_parenthesis(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2119():
    dict_0 = {}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_4.push(stack_6)
    assert len(stack_4) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    module_0.check_parenthesis(var_4)


@pytest.mark.xfail(strict=True)
def test_case_2120():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_6)
    assert len(stack_node_5.data) == 0
    module_0.postfix_eval(var_2)


def test_case_2121():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0


@pytest.mark.xfail(strict=True)
def test_case_2122():
    float_0 = -0.8
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_2 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_node_5 = module_0.StackNode(stack_1)
    assert len(stack_node_5.data) == 0
    var_1 = stack_1.push(none_type_0)
    assert len(stack_1) == 1
    assert len(stack_node_5.data) == 1
    none_type_2 = None
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.push(none_type_2)
    assert len(stack_2) == 1
    var_3 = stack_2.pop()
    assert len(stack_2) == 0
    none_type_3 = None
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_3.push(none_type_3)
    assert len(stack_3) == 1
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    module_0.postfix_eval(stack_node_0)


def test_case_2123():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_3 = module_0.StackNode(bool_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_3)
    assert len(stack_node_6.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_10 = module_0.StackNode(stack_7)
    assert len(stack_node_10.data) == 0
    with pytest.raises(ValueError):
        stack_5.peek()


@pytest.mark.xfail(strict=True)
def test_case_2124():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    int_0 = 2594
    stack_node_1 = module_0.StackNode(int_0)
    none_type_0 = None
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.push(none_type_0)
    assert len(stack_5) == 1
    var_3 = stack_5.push(stack_5)
    assert len(stack_5) == 2
    var_4 = stack_5.peek()
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "stack1.Stack"
    assert len(var_4) == 2
    int_1 = 3109
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.push(int_1)
    assert len(stack_6) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_2 = module_0.StackNode(var_6)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_7)
    assert len(stack_node_5.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data == 0
    var_7 = stack_8.push(var_0)
    assert len(stack_8) == 1
    var_7.pop()


@pytest.mark.xfail(strict=True)
def test_case_2125():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2126():
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is False
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_6)
    assert len(stack_node_6.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    bool_0 = False
    stack_node_7 = module_0.StackNode(bool_0)
    stack_node_8 = module_0.StackNode(bool_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    bool_1 = False
    stack_node_9 = module_0.StackNode(bool_1)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_node_10 = module_0.StackNode(float_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    bool_2 = False
    stack_node_11 = module_0.StackNode(bool_2)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_12 = module_0.StackNode(var_6)
    assert stack_node_12.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_7 = stack_13.push(stack_15)
    assert len(stack_13) == 1
    var_2.peek()


@pytest.mark.xfail(strict=True)
def test_case_2127():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    module_0.postfix_eval(stack_node_1)


def test_case_2128():
    int_0 = -222
    set_0 = {int_0}
    stack_node_0 = module_0.StackNode(set_0)
    dict_0 = {}
    stack_node_1 = module_0.StackNode(dict_0)
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    stack_node_2 = module_0.StackNode(var_0)
    assert stack_node_2.data is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    dict_1 = {}
    var_1 = module_0.check_parenthesis(dict_1)
    assert var_1 is True
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data is True
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    with pytest.raises(ValueError):
        stack_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_2129():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    dict_0 = {}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_1)
    assert var_2 is True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_2 = module_0.StackNode(stack_9)
    assert len(stack_node_2.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    var_6 = stack_12.__len__()
    assert var_6 == 0
    var_1.peek()


@pytest.mark.xfail(strict=True)
def test_case_2130():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(stack_3)
    assert len(stack_node_7.data) == 0
    stack_node_8 = module_0.StackNode(stack_5)
    assert len(stack_node_8.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_1 = None
    stack_node_9 = module_0.StackNode(none_type_1)
    var_3 = stack_7.push(none_type_1)
    assert len(stack_7) == 1
    bool_1 = False
    set_0 = {bool_1, bool_1, bool_1, bool_1}
    tuple_0 = (bool_1, bool_1)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_1, set_0, tuple_0, str_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.push(tuple_1)
    assert len(stack_8) == 1
    dict_0 = {}
    stack_node_10 = module_0.StackNode(dict_0)
    int_0 = -688
    module_0.postfix_eval(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2131():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_1.__len__()
    assert var_3 == 0
    bool_1 = False
    stack_node_1 = module_0.StackNode(bool_1)
    stack_node_2 = module_0.StackNode(bool_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_4 = stack_2.__len__()
    assert var_4 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_5 = stack_3.__len__()
    assert var_5 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_5)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_3)
    assert len(stack_node_6.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    stack_node_8 = module_0.StackNode(stack_6)
    assert len(stack_node_8.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    bool_2 = False
    stack_node_9 = module_0.StackNode(bool_2)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    stack_node_10 = module_0.StackNode(float_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    dict_2 = {var_6: var_6, float_1: stack_node_9}
    stack_node_11 = module_0.StackNode(dict_2)
    int_0 = -460
    stack_node_12 = module_0.StackNode(int_0)
    dict_3 = {}
    stack_node_13 = module_0.StackNode(dict_3)
    none_type_2 = None
    stack_node_14 = module_0.StackNode(none_type_2)
    bool_3 = False
    stack_node_15 = module_0.StackNode(bool_3)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    bool_4 = True
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.push(bool_4)
    assert len(stack_10) == 1
    stack_node_16 = module_0.StackNode(var_7)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_8 = stack_11.__len__()
    assert var_8 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_17 = module_0.StackNode(var_8)
    assert stack_node_17.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_18 = module_0.StackNode(stack_11)
    assert len(stack_node_18.data) == 0
    stack_node_19 = module_0.StackNode(stack_14)
    assert len(stack_node_19.data) == 0
    var_4.peek()


def test_case_2132():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_4)
    assert stack_node_3.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_6 = module_0.StackNode(stack_7)
    assert len(stack_node_6.data) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    dict_1 = {}
    stack_node_7 = module_0.StackNode(dict_1)
    str_0 = ""
    var_7 = module_0.check_parenthesis(str_0)
    assert var_7 is True
    stack_node_8 = module_0.StackNode(var_7)
    assert stack_node_8.data is True
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_8 = module_0.check_parenthesis(str_0)
    assert var_8 is True
    with pytest.raises(ValueError):
        stack_8.peek()


def test_case_2133():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(stack_6)
    assert len(stack_node_4.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    var_4 = stack_10.push(none_type_1)
    assert len(stack_10) == 1
    complex_0 = -3711.3 - 806.2j
    stack_node_6 = module_0.StackNode(complex_0)
    none_type_2 = None
    stack_node_7 = module_0.StackNode(none_type_2)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_3 = None
    stack_node_8 = module_0.StackNode(none_type_3)
    stack_node_9 = module_0.StackNode(stack_11)
    assert len(stack_node_9.data) == 0
    var_5 = stack_11.push(none_type_2)
    assert len(stack_11) == 1
    assert len(stack_node_9.data) == 1
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    stack_node_10 = module_0.StackNode(float_1)
    with pytest.raises(ValueError):
        stack_6.pop()


@pytest.mark.xfail(strict=True)
def test_case_2134():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_5 = module_0.StackNode(stack_6)
    assert len(stack_node_5.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_7 = module_0.StackNode(stack_9)
    assert len(stack_node_7.data) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    none_type_1 = None
    stack_node_8 = module_0.StackNode(none_type_1)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    none_type_2 = None
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_9 = stack_14.push(none_type_2)
    assert len(stack_14) == 1
    var_10 = stack_14.push(stack_14)
    assert len(stack_14) == 2
    module_0.postfix_eval(var_8)


@pytest.mark.xfail(strict=True)
def test_case_2135():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(none_type_0)
    int_0 = -222
    set_0 = {int_0}
    stack_node_3 = module_0.StackNode(set_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    dict_1 = {}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_7)
    assert len(stack_node_9.data) == 0
    var_7 = stack_8.__len__()
    assert var_7 == 0
    bool_0 = False
    set_1 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_1, tuple_0, str_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_8 = stack_9.push(tuple_1)
    assert len(stack_9) == 1
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    bool_1 = True
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_9 = stack_11.push(bool_1)
    assert len(stack_11) == 1
    stack_node_10 = module_0.StackNode(stack_11)
    assert len(stack_node_10.data) == 1
    str_1 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_10 = module_0.check_parenthesis(str_1)
    assert var_10 is False
    var_8.push(stack_node_9)


@pytest.mark.xfail(strict=True)
def test_case_2136():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    bool_1 = True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.push(bool_1)
    assert len(stack_1) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_2)
    assert len(stack_node_6.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_8 = module_0.StackNode(float_0)
    bool_2 = False
    stack_node_9 = module_0.StackNode(bool_2)
    stack_node_10 = module_0.StackNode(bool_2)
    none_type_1 = None
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.push(none_type_1)
    assert len(stack_9) == 1
    stack_node_11 = module_0.StackNode(var_5)
    dict_1 = {}
    stack_node_12 = module_0.StackNode(dict_1)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_2 = None
    stack_node_13 = module_0.StackNode(none_type_2)
    stack_node_14 = module_0.StackNode(stack_10)
    assert len(stack_node_14.data) == 0
    var_6 = stack_10.push(none_type_2)
    assert len(stack_10) == 1
    assert len(stack_node_14.data) == 1
    var_7 = stack_10.push(stack_node_12)
    assert len(stack_10) == 2
    assert len(stack_node_14.data) == 2
    module_0.postfix_eval(var_7)


@pytest.mark.xfail(strict=True)
def test_case_2137():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(none_type_0)
    str_0 = ""
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is True
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_2 = module_0.StackNode(float_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    int_0 = -222
    set_0 = {int_0}
    stack_node_6 = module_0.StackNode(set_0)
    dict_1 = {}
    stack_node_7 = module_0.StackNode(dict_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    bool_1 = False
    stack_node_9 = module_0.StackNode(bool_1)
    float_1 = 712.593
    dict_2 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_2)
    assert var_4 is True
    stack_node_10 = module_0.StackNode(float_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_11 = module_0.StackNode(var_5)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_node_11)
    stack_node_14 = module_0.StackNode(stack_6)
    assert len(stack_node_14.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_15 = module_0.StackNode(var_5)
    assert stack_node_15.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_16 = module_0.StackNode(var_6)
    assert stack_node_16.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_11.push(stack_13)
    assert len(stack_11) == 1
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_17 = module_0.StackNode(var_8)
    assert stack_node_17.data == 0
    stack_node_18 = module_0.StackNode(stack_node_17)
    var_1.peek()


@pytest.mark.xfail(strict=True)
def test_case_2138():
    none_type_0 = None
    module_0.check_parenthesis(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2139():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    dict_0 = {}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data is True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_5.push(var_2)
    assert len(stack_5) == 1
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    bool_1 = True
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.push(bool_1)
    assert len(stack_9) == 1
    stack_node_5 = module_0.StackNode(var_5)
    dict_1 = {}
    stack_node_6 = module_0.StackNode(dict_1)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    stack_node_8 = module_0.StackNode(stack_10)
    assert len(stack_node_8.data) == 0
    var_6 = stack_10.push(none_type_1)
    assert len(stack_10) == 1
    assert len(stack_node_8.data) == 1
    var_7 = stack_10.push(stack_node_6)
    assert len(stack_10) == 2
    assert len(stack_node_8.data) == 2
    none_type_2 = None
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_8 = stack_11.push(none_type_2)
    assert len(stack_11) == 1
    var_9 = stack_11.pop()
    assert len(stack_11) == 0
    none_type_3 = None
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_10 = stack_12.push(none_type_3)
    assert len(stack_12) == 1
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_11 = stack_14.__len__()
    assert var_11 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_9 = module_0.StackNode(var_11)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_14)
    assert len(stack_node_11.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_12 = stack_16.__len__()
    assert var_12 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_12 = module_0.StackNode(var_12)
    assert stack_node_12.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_13 = stack_17.__len__()
    assert var_13 == 0
    var_14 = stack_17.__len__()
    assert var_14 == 0
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_2140():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_1 = module_0.StackNode(float_0)
    float_1 = -0.8
    stack_node_2 = module_0.StackNode(float_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_1)
    assert len(stack_node_6.data) == 0
    var_3 = stack_2.__len__()
    assert var_3 == 0
    var_4 = stack_1.push(stack_node_5)
    assert len(stack_1) == 1
    assert len(stack_node_6.data) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    stack_node_8 = module_0.StackNode(stack_3)
    assert len(stack_node_8.data) == 0
    var_5 = stack_3.__len__()
    assert var_5 == 0
    float_2 = 712.593
    dict_1 = {float_2: float_2, float_2: float_2}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_7 = stack_4.__len__()
    assert var_7 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_9 = module_0.StackNode(var_7)
    assert stack_node_9.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    dict_2 = {}
    var_8 = module_0.check_parenthesis(dict_2)
    assert var_8 is True
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    str_0 = ""
    var_9 = module_0.check_parenthesis(str_0)
    assert var_9 is True
    stack_node_10 = module_0.StackNode(var_9)
    assert stack_node_10.data is True
    none_type_1 = None
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_10 = stack_9.push(none_type_1)
    assert len(stack_9) == 1
    module_0.postfix_eval(stack_node_5)


@pytest.mark.xfail(strict=True)
def test_case_2141():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    var_1 = stack_1.push(none_type_0)
    assert len(stack_1) == 1
    assert len(stack_node_2.data) == 1
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_node_4 = module_0.StackNode(bool_0)
    var_2 = stack_0.push(var_0)
    assert len(stack_0) == 1
    var_2.peek()


@pytest.mark.xfail(strict=True)
def test_case_2142():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    bool_0 = True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.push(bool_0)
    assert len(stack_1) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(none_type_0)
    var_0.push(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2143():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_6 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_7 = module_0.StackNode(none_type_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_1 = None
    stack_node_8 = module_0.StackNode(none_type_1)
    stack_node_9 = module_0.StackNode(stack_9)
    assert len(stack_node_9.data) == 0
    var_4 = stack_9.push(none_type_0)
    assert len(stack_9) == 1
    assert len(stack_node_9.data) == 1
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    stack_node_10 = module_0.StackNode(float_1)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_2 = None
    stack_node_11 = module_0.StackNode(none_type_2)
    stack_node_12 = module_0.StackNode(none_type_2)
    stack_node_13 = module_0.StackNode(stack_10)
    assert len(stack_node_13.data) == 0
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_6 = module_0.check_parenthesis(dict_2)
    assert var_6 is True
    stack_node_14 = module_0.StackNode(float_2)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_3 = None
    stack_node_15 = module_0.StackNode(none_type_3)
    stack_node_16 = module_0.StackNode(none_type_3)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_7 = stack_12.__len__()
    assert var_7 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_17 = module_0.StackNode(var_7)
    assert stack_node_17.data == 0
    stack_node_18 = module_0.StackNode(stack_node_17)
    none_type_4 = None
    stack_node_19 = module_0.StackNode(none_type_4)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_20 = module_0.StackNode(var_8)
    assert stack_node_20.data == 0
    module_0.postfix_eval(stack_node_4)


@pytest.mark.xfail(strict=True)
def test_case_2144():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    stack_node_6 = module_0.StackNode(stack_node_4)
    bool_0 = True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.push(bool_0)
    assert len(stack_5) == 1
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.__len__()
    assert var_2 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    bool_1 = False
    stack_node_9 = module_0.StackNode(bool_1)
    stack_node_10 = module_0.StackNode(bool_1)
    none_type_1 = None
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.push(none_type_1)
    assert len(stack_9) == 1
    stack_node_11 = module_0.StackNode(var_3)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.__len__()
    assert var_4 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_12 = module_0.StackNode(var_4)
    assert stack_node_12.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_13 = module_0.StackNode(stack_11)
    assert len(stack_node_13.data) == 0
    int_0 = -222
    set_0 = {int_0}
    stack_node_14 = module_0.StackNode(set_0)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_15 = module_0.StackNode(var_6)
    assert stack_node_15.data == 0
    module_0.check_parenthesis(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2145():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    bool_1 = True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.push(bool_1)
    assert len(stack_1) == 1
    stack_node_2 = module_0.StackNode(var_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    stack_node_5 = module_0.StackNode(stack_5)
    assert len(stack_node_5.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_6 = module_0.StackNode(float_0)
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_9 = module_0.StackNode(stack_8)
    assert len(stack_node_9.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_node_10 = module_0.StackNode(var_7)
    assert stack_node_10.data == 0
    none_type_2 = None
    stack_node_11 = module_0.StackNode(none_type_2)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    module_0.postfix_eval(stack_6)


@pytest.mark.xfail(strict=True)
def test_case_2146():
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data is True
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    dict_0 = {}
    stack_node_3 = module_0.StackNode(dict_0)
    str_1 = ""
    var_1 = module_0.check_parenthesis(str_1)
    assert var_1 is True
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data is True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    bool_1 = False
    stack_node_5 = module_0.StackNode(bool_1)
    stack_node_6 = module_0.StackNode(bool_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    module_0.postfix_eval(var_0)


def test_case_2147():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.push(bool_0)
    assert len(stack_5) == 1
    var_3 = stack_5.push(none_type_0)
    assert len(stack_5) == 2
    none_type_1 = None
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.push(none_type_1)
    assert len(stack_6) == 1
    var_5 = stack_6.pop()
    assert len(stack_6) == 0
    with pytest.raises(ValueError):
        stack_1.peek()


def test_case_2148():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    bool_0 = True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.push(bool_0)
    assert len(stack_3) == 1
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(none_type_0)
    dict_1 = {}
    stack_node_3 = module_0.StackNode(dict_1)
    str_0 = ""
    var_4 = module_0.check_parenthesis(str_0)
    assert var_4 is True
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data is True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_5 = module_0.check_parenthesis(str_0)
    assert var_5 is True
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_6 = stack_6.__len__()
    assert var_6 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_6)
    assert stack_node_5.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(stack_7)
    assert len(stack_node_6.data) == 0
    var_7 = stack_8.__len__()
    assert var_7 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_8 = stack_9.__len__()
    assert var_8 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_7 = module_0.StackNode(var_8)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    int_0 = -460
    stack_node_10 = module_0.StackNode(int_0)
    with pytest.raises(ValueError):
        stack_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_2149():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_0.__len__()
    assert var_2 == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_3 = stack_1.__len__()
    assert var_3 == 0
    str_0 = "o2EICU9\x0bp7"
    stack_node_3 = module_0.StackNode(str_0)
    dict_1 = {}
    stack_node_4 = module_0.StackNode(dict_1)
    str_1 = ""
    var_4 = module_0.check_parenthesis(str_1)
    assert var_4 is True
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data is True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2150():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    var_6 = stack_10.__len__()
    assert var_6 == 0
    module_0.check_parenthesis(var_5)


def test_case_2151():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_1 = module_0.StackNode(none_type_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_0 = stack_2.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(var_0)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    float_0 = -0.8
    stack_node_4 = module_0.StackNode(float_0)
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.push(tuple_1)
    assert len(stack_3) == 1
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    dict_0 = {}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data is True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_5.push(var_2)
    assert len(stack_5) == 1
    dict_1 = {}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data is True
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_8 = module_0.StackNode(var_6)
    assert stack_node_8.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    dict_2 = {}
    var_7 = module_0.check_parenthesis(dict_2)
    assert var_7 is True
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    stack_node_9 = module_0.StackNode(var_8)
    assert stack_node_9.data == 0
    with pytest.raises(ValueError):
        stack_4.peek()


@pytest.mark.xfail(strict=True)
def test_case_2152():
    dict_0 = {}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    var_3 = stack_1.__len__()
    assert var_3 == 0
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_3 = module_0.StackNode(float_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    dict_2 = {var_4: var_4, float_0: stack_node_2}
    stack_node_4 = module_0.StackNode(dict_2)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_5)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_6)
    assert len(stack_node_7.data) == 0
    bool_1 = False
    stack_node_8 = module_0.StackNode(bool_1)
    stack_node_9 = module_0.StackNode(bool_1)
    none_type_0 = None
    stack_node_10 = module_0.StackNode(none_type_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.push(bool_1)
    assert len(stack_8) == 1
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_7 = stack_9.__len__()
    assert var_7 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_11 = module_0.StackNode(var_7)
    assert stack_node_11.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_12 = module_0.StackNode(stack_9)
    assert len(stack_node_12.data) == 0
    stack_node_13 = module_0.StackNode(stack_12)
    assert len(stack_node_13.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_14 = module_0.StackNode(var_8)
    assert stack_node_14.data == 0
    dict_3 = {}
    var_9 = module_0.check_parenthesis(dict_3)
    assert var_9 is True
    var_10 = stack_14.__len__()
    assert var_10 == 0
    dict_4 = {}
    var_11 = module_0.check_parenthesis(dict_4)
    assert var_11 is True
    module_0.postfix_eval(var_5)


@pytest.mark.xfail(strict=True)
def test_case_2153():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    var_1 = stack_0.pop()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.push(none_type_1)
    assert len(stack_1) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_2 = None
    stack_node_0 = module_0.StackNode(none_type_2)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    int_0 = 2594
    stack_node_1 = module_0.StackNode(int_0)
    none_type_3 = None
    stack_node_2 = module_0.StackNode(none_type_3)
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    bool_1 = True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.push(bool_1)
    assert len(stack_5) == 1
    stack_node_4 = module_0.StackNode(var_3)
    none_type_4 = None
    stack_node_5 = module_0.StackNode(none_type_4)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    int_1 = 2594
    stack_node_8 = module_0.StackNode(int_1)
    none_type_5 = None
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.push(none_type_5)
    assert len(stack_8) == 1
    var_7 = stack_8.push(stack_8)
    assert len(stack_8) == 2
    var_8 = stack_8.peek()
    assert f"{type(var_8).__module__}.{type(var_8).__qualname__}" == "stack1.Stack"
    assert len(var_8) == 2
    dict_0 = {}
    var_9 = module_0.check_parenthesis(dict_0)
    assert var_9 is True
    stack_node_9 = module_0.StackNode(var_9)
    assert stack_node_9.data is True
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    module_0.check_parenthesis(none_type_4)


@pytest.mark.xfail(strict=True)
def test_case_2154():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    var_1 = stack_0.push(none_type_0)
    assert len(stack_0) == 2
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_1)
    assert len(stack_node_6.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    bool_1 = False
    stack_node_8 = module_0.StackNode(bool_1)
    stack_node_9 = module_0.StackNode(bool_1)
    none_type_1 = None
    stack_node_10 = module_0.StackNode(none_type_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.push(bool_1)
    assert len(stack_4) == 1
    bool_2 = False
    stack_node_11 = module_0.StackNode(bool_2)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_12 = module_0.StackNode(float_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    dict_1 = {var_4: var_4, float_0: stack_node_11}
    stack_node_13 = module_0.StackNode(dict_1)
    dict_2 = {}
    var_5 = module_0.check_parenthesis(dict_2)
    assert var_5 is True
    stack_node_14 = module_0.StackNode(var_5)
    assert stack_node_14.data is True
    module_0.check_parenthesis(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2155():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_2 = module_0.StackNode(bool_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_3 = module_0.StackNode(bool_0)
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_3 = module_0.check_parenthesis(str_0)
    assert var_3 is False
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_2156():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(tuple_1)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    module_0.postfix_eval(var_0)


def test_case_2157():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_0)
    assert stack_node_4.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_1)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_3)
    assert len(stack_node_8.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    bool_0 = False
    stack_node_9 = module_0.StackNode(bool_0)
    stack_node_10 = module_0.StackNode(bool_0)
    bool_1 = False
    stack_node_11 = module_0.StackNode(bool_1)
    stack_node_12 = module_0.StackNode(bool_1)
    none_type_0 = None
    stack_node_13 = module_0.StackNode(none_type_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.push(bool_1)
    assert len(stack_6) == 1
    var_3 = stack_6.push(none_type_0)
    assert len(stack_6) == 2
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_1 = None
    stack_node_14 = module_0.StackNode(none_type_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_15 = module_0.StackNode(var_4)
    assert stack_node_15.data == 0
    with pytest.raises(ValueError):
        stack_3.pop()


@pytest.mark.xfail(strict=True)
def test_case_2158():
    dict_0 = {}
    stack_node_0 = module_0.StackNode(dict_0)
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(stack_5)
    assert len(stack_node_4.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_2 = None
    stack_node_7 = module_0.StackNode(none_type_2)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_3 = None
    stack_node_8 = module_0.StackNode(none_type_3)
    stack_node_9 = module_0.StackNode(stack_9)
    assert len(stack_node_9.data) == 0
    var_4 = stack_9.push(none_type_3)
    assert len(stack_9) == 1
    assert len(stack_node_9.data) == 1
    dict_1 = {}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    module_0.postfix_eval(none_type_2)


def test_case_2159():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is False
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data is False
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    dict_1 = {}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data is True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_5.push(var_4)
    assert len(stack_5) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_7 = stack_8.__len__()
    assert var_7 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_7 = module_0.StackNode(var_7)
    assert stack_node_7.data == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_node_9 = module_0.StackNode(stack_node_7)
    var_8 = stack_9.__len__()
    assert var_8 == 0
    none_type_1 = None
    stack_node_10 = module_0.StackNode(none_type_1)
    bool_0 = False
    stack_node_11 = module_0.StackNode(bool_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_9 = stack_11.__len__()
    assert var_9 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_12 = module_0.StackNode(var_9)
    assert stack_node_12.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_10 = stack_14.__len__()
    assert var_10 == 0
    with pytest.raises(ValueError):
        stack_12.peek()


@pytest.mark.xfail(strict=True)
def test_case_2160():
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data is True
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    stack_node_3 = module_0.StackNode(var_1)
    dict_0 = {}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_4 = module_0.StackNode(var_2)
    assert stack_node_4.data is True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_3 = stack_1.__len__()
    assert var_3 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_1.push(var_2)
    assert len(stack_1) == 1
    dict_1 = {}
    stack_node_5 = module_0.StackNode(dict_1)
    str_1 = ""
    var_5 = module_0.check_parenthesis(str_1)
    assert var_5 is True
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data is True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_6 = stack_5.__len__()
    assert var_6 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    dict_2 = {}
    var_7 = module_0.check_parenthesis(dict_2)
    assert var_7 is True
    var_8 = stack_6.__len__()
    assert var_8 == 0
    var_7.push(str_1)


@pytest.mark.xfail(strict=True)
def test_case_2161():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(tuple_1)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_0.push(var_0)
    assert len(stack_0) == 2
    var_1.peek()


@pytest.mark.xfail(strict=True)
def test_case_2162():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_node_4 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.push(none_type_0)
    assert len(stack_7) == 1
    stack_node_5 = module_0.StackNode(var_3)
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    dict_0 = {}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    bool_1 = False
    stack_node_7 = module_0.StackNode(bool_1)
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    stack_node_8 = module_0.StackNode(float_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    dict_2 = {var_5: var_5, float_0: stack_node_7}
    stack_node_9 = module_0.StackNode(dict_2)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_6 = stack_10.__len__()
    assert var_6 == 0
    stack_node_10 = module_0.StackNode(var_6)
    assert stack_node_10.data == 0
    module_0.check_parenthesis(stack_node_5)


@pytest.mark.xfail(strict=True)
def test_case_2163():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_0.__len__()
    assert var_2 == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    str_0 = ""
    var_3 = module_0.check_parenthesis(str_0)
    assert var_3 is True
    dict_1 = {stack_node_0: str_0, stack_0: stack_node_1}
    module_0.postfix_eval(dict_1)


@pytest.mark.xfail(strict=True)
def test_case_2164():
    int_0 = -460
    stack_node_0 = module_0.StackNode(int_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    bool_0 = True
    stack_node_1 = module_0.StackNode(bool_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(stack_2)
    assert len(stack_node_3.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(stack_5)
    assert len(stack_node_5.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    module_0.postfix_eval(stack_5)


@pytest.mark.xfail(strict=True)
def test_case_2165():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    var_1 = stack_0.pop()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.push(none_type_1)
    assert len(stack_1) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_2 = None
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.push(none_type_2)
    assert len(stack_3) == 1
    dict_0 = {}
    stack_node_0 = module_0.StackNode(dict_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_3 = None
    stack_node_1 = module_0.StackNode(none_type_3)
    stack_node_2 = module_0.StackNode(stack_4)
    assert len(stack_node_2.data) == 0
    var_4 = stack_4.push(none_type_3)
    assert len(stack_4) == 1
    assert len(stack_node_2.data) == 1
    var_5 = stack_4.push(stack_node_0)
    assert len(stack_4) == 2
    assert len(stack_node_2.data) == 2
    int_0 = 2594
    stack_node_3 = module_0.StackNode(int_0)
    none_type_4 = None
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_6 = stack_5.push(none_type_4)
    assert len(stack_5) == 1
    var_7 = stack_5.push(stack_5)
    assert len(stack_5) == 2
    var_8 = stack_5.peek()
    assert f"{type(var_8).__module__}.{type(var_8).__qualname__}" == "stack1.Stack"
    assert len(var_8) == 2
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_9 = stack_6.__len__()
    assert var_9 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_9)
    assert stack_node_4.data == 0
    dict_1 = {}
    var_10 = module_0.check_parenthesis(dict_1)
    assert var_10 is True
    var_11 = stack_7.__len__()
    assert var_11 == 0
    float_0 = 712.593
    dict_2 = {float_0: float_0, float_0: float_0}
    var_12 = module_0.check_parenthesis(dict_2)
    assert var_12 is True
    stack_node_5 = module_0.StackNode(float_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_5 = None
    stack_node_6 = module_0.StackNode(none_type_5)
    stack_node_7 = module_0.StackNode(none_type_5)
    stack_node_8 = module_0.StackNode(stack_8)
    assert len(stack_node_8.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_6 = None
    stack_node_9 = module_0.StackNode(none_type_6)
    bytes_0 = b"[+\x04A\xbe\x87>/P\x80\x97\x1c\x96\xdeU\x1fbW"
    stack_node_10 = module_0.StackNode(bytes_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_13 = stack_10.__len__()
    assert var_13 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_11 = module_0.StackNode(var_13)
    assert stack_node_11.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_14 = stack_11.__len__()
    assert var_14 == 0
    var_15 = stack_11.__len__()
    assert var_15 == 0
    module_0.postfix_eval(var_8)


@pytest.mark.xfail(strict=True)
def test_case_2166():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_5 = module_0.StackNode(stack_5)
    assert len(stack_node_5.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_2 = stack_7.__len__()
    assert var_2 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_7 = module_0.StackNode(stack_10)
    assert len(stack_node_7.data) == 0
    bool_0 = False
    stack_node_8 = module_0.StackNode(bool_0)
    stack_node_9 = module_0.StackNode(bool_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_3 = stack_11.__len__()
    assert var_3 == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_0 = None
    stack_node_11 = module_0.StackNode(none_type_0)
    stack_node_12 = module_0.StackNode(stack_12)
    assert len(stack_node_12.data) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    stack_node_13 = module_0.StackNode(stack_12)
    assert len(stack_node_13.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    none_type_1 = None
    stack_node_14 = module_0.StackNode(none_type_1)
    stack_node_15 = module_0.StackNode(stack_13)
    assert len(stack_node_15.data) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_6 = module_0.check_parenthesis(str_0)
    assert var_6 is False
    stack_node_16 = module_0.StackNode(var_6)
    assert stack_node_16.data is False
    var_3.peek()


@pytest.mark.xfail(strict=True)
def test_case_2167():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.__len__()
    assert var_3 == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_3 = module_0.StackNode(complex_0)
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_2 = None
    stack_node_5 = module_0.StackNode(none_type_2)
    stack_node_6 = module_0.StackNode(stack_10)
    assert len(stack_node_6.data) == 0
    var_5 = stack_10.push(none_type_1)
    assert len(stack_10) == 1
    assert len(stack_node_6.data) == 1
    none_type_3 = None
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.push(none_type_3)
    assert len(stack_11) == 1
    var_5.pop()


@pytest.mark.xfail(strict=True)
def test_case_2168():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    module_0.check_parenthesis(stack_node_0)


def test_case_2169():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    int_0 = -222
    set_0 = {int_0}
    stack_node_4 = module_0.StackNode(set_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_node_6 = module_0.StackNode(stack_2)
    assert len(stack_node_6.data) == 0
    var_2 = stack_2.push(none_type_0)
    assert len(stack_2) == 1
    assert len(stack_node_6.data) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_7 = module_0.StackNode(stack_3)
    assert len(stack_node_7.data) == 0
    stack_node_8 = module_0.StackNode(stack_node_7)
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_1 = None
    stack_node_9 = module_0.StackNode(none_type_1)
    var_4 = stack_4.push(none_type_1)
    assert len(stack_4) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_10 = module_0.StackNode(var_5)
    assert stack_node_10.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.__len__()
    assert var_6 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_11 = module_0.StackNode(var_6)
    assert stack_node_11.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_9.push(stack_11)
    assert len(stack_9) == 1
    dict_0 = {}
    stack_node_12 = module_0.StackNode(dict_0)
    str_0 = ""
    var_8 = module_0.check_parenthesis(str_0)
    assert var_8 is True
    stack_node_13 = module_0.StackNode(var_8)
    assert stack_node_13.data is True
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_14 = module_0.StackNode(stack_14)
    assert len(stack_node_14.data) == 0
    stack_node_15 = module_0.StackNode(stack_node_14)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_9 = stack_15.__len__()
    assert var_9 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_16 = module_0.StackNode(var_9)
    assert stack_node_16.data == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_17 = module_0.StackNode(stack_16)
    assert len(stack_node_17.data) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_10 = stack_18.__len__()
    assert var_10 == 0
    with pytest.raises(ValueError):
        stack_6.pop()


def test_case_2170():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_2 = module_0.StackNode(float_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    dict_1 = {var_3: var_3, float_0: stack_node_1}
    stack_node_3 = module_0.StackNode(dict_1)
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    bool_1 = False
    stack_node_5 = module_0.StackNode(bool_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    float_1 = 712.593
    dict_2 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_2)
    assert var_4 is True
    stack_node_6 = module_0.StackNode(bool_1)
    dict_3 = {}
    var_5 = module_0.check_parenthesis(dict_3)
    assert var_5 is True
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data is True
    complex_0 = -3711.3 - 806.2j
    stack_node_8 = module_0.StackNode(complex_0)
    none_type_1 = None
    stack_node_9 = module_0.StackNode(none_type_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_2 = None
    stack_node_10 = module_0.StackNode(none_type_2)
    stack_node_11 = module_0.StackNode(stack_7)
    assert len(stack_node_11.data) == 0
    var_6 = stack_7.push(none_type_1)
    assert len(stack_7) == 1
    assert len(stack_node_11.data) == 1
    dict_4 = {}
    stack_node_12 = module_0.StackNode(dict_4)
    str_0 = ""
    var_7 = module_0.check_parenthesis(str_0)
    assert var_7 is True
    stack_node_13 = module_0.StackNode(var_7)
    assert stack_node_13.data is True
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_8 = module_0.check_parenthesis(str_0)
    assert var_8 is True
    complex_1 = -3711.3 - 806.2j
    stack_node_14 = module_0.StackNode(complex_1)
    with pytest.raises(ValueError):
        stack_6.pop()


@pytest.mark.xfail(strict=True)
def test_case_2171():
    str_0 = "o2EICU9\x0bp7"
    stack_node_0 = module_0.StackNode(str_0)
    module_0.check_parenthesis(stack_node_0)


@pytest.mark.xfail(strict=True)
def test_case_2172():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_0.__len__()
    assert var_2 == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    module_0.check_parenthesis(stack_node_1)


@pytest.mark.xfail(strict=True)
def test_case_2173():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    dict_0 = {}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.push(tuple_1)
    assert len(stack_2) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_4)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_node_2 = module_0.StackNode(stack_4)
    assert len(stack_node_2.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(stack_9)
    assert len(stack_node_4.data) == 0
    var_6 = stack_9.push(none_type_0)
    assert len(stack_9) == 1
    assert len(stack_node_4.data) == 1
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_5 = module_0.StackNode(var_7)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    var_8 = stack_11.__len__()
    assert var_8 == 0
    bool_1 = False
    stack_node_8 = module_0.StackNode(bool_1)
    stack_node_9 = module_0.StackNode(bool_1)
    none_type_1 = None
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_9 = stack_12.push(none_type_1)
    assert len(stack_12) == 1
    stack_node_10 = module_0.StackNode(var_9)
    dict_1 = {}
    var_10 = module_0.check_parenthesis(dict_1)
    assert var_10 is True
    stack_node_11 = module_0.StackNode(var_10)
    assert stack_node_11.data is True
    stack_node_12 = module_0.StackNode(stack_node_11)
    var_7.pop()


@pytest.mark.xfail(strict=True)
def test_case_2174():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    bool_1 = False
    stack_node_5 = module_0.StackNode(bool_1)
    stack_node_6 = module_0.StackNode(bool_1)
    none_type_1 = None
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.push(none_type_1)
    assert len(stack_9) == 1
    stack_node_7 = module_0.StackNode(var_4)
    stack_node_8 = module_0.StackNode(stack_node_7)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_9 = module_0.StackNode(var_5)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_11)
    assert len(stack_node_11.data) == 0
    module_0.postfix_eval(var_5)


@pytest.mark.xfail(strict=True)
def test_case_2175():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_5 = module_0.StackNode(stack_9)
    assert len(stack_node_5.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    dict_0 = {}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    none_type_0 = None
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_7 = stack_18.push(none_type_0)
    assert len(stack_18) == 1
    var_8 = stack_18.pop()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_9 = stack_20.__len__()
    assert var_9 == 0
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    stack_node_7 = module_0.StackNode(var_9)
    assert stack_node_7.data == 0
    stack_22 = module_0.Stack()
    assert len(stack_22) == 0
    stack_node_8 = module_0.StackNode(stack_21)
    assert len(stack_node_8.data) == 0
    stack_23 = module_0.Stack()
    assert len(stack_23) == 0
    stack_24 = module_0.Stack()
    assert len(stack_24) == 0
    var_3.peek()


@pytest.mark.xfail(strict=True)
def test_case_2176():
    object_0 = module_1.object()
    module_0.postfix_eval(object_0)


def test_case_2177():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_2)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    with pytest.raises(ValueError):
        stack_2.pop()


@pytest.mark.xfail(strict=True)
def test_case_2178():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    none_type_0 = None
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.push(none_type_0)
    assert len(stack_4) == 1
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    dict_0 = {}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    bool_0 = True
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_5 = stack_10.push(bool_0)
    assert len(stack_10) == 1
    str_0 = ""
    var_6 = module_0.check_parenthesis(str_0)
    assert var_6 is True
    stack_node_3 = module_0.StackNode(var_6)
    assert stack_node_3.data is True
    stack_node_4 = module_0.StackNode(str_0)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_5 = module_0.StackNode(var_7)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_11)
    assert len(stack_node_8.data) == 0
    var_8 = stack_12.__len__()
    assert var_8 == 0
    var_9 = stack_11.push(stack_node_7)
    assert len(stack_11) == 1
    assert len(stack_node_8.data) == 1
    str_1 = ""
    var_10 = module_0.check_parenthesis(str_1)
    assert var_10 is True
    var_5.peek()


@pytest.mark.xfail(strict=True)
def test_case_2179():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_3)
    assert len(stack_node_4.data) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    bytes_0 = b"[+\x04A\xbe\x87>/P\x80\x97\x1c\x96\xdeU\x1fbW"
    stack_node_5 = module_0.StackNode(bytes_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_5)
    assert len(stack_node_8.data) == 0
    var_2.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2180():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_4)
    assert stack_node_5.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(stack_7)
    assert len(stack_node_6.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_7 = module_0.StackNode(var_5)
    assert stack_node_7.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_8 = module_0.StackNode(stack_12)
    assert len(stack_node_8.data) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_14.__len__()
    assert var_7 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_9 = module_0.StackNode(var_7)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_node_12 = module_0.StackNode(stack_14)
    assert len(stack_node_12.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_8 = stack_16.__len__()
    assert var_8 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_13 = module_0.StackNode(var_8)
    assert stack_node_13.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_9 = stack_20.push(tuple_1)
    assert len(stack_20) == 1
    var_4.__len__()


def test_case_2181():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    dict_0 = {}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_4)
    assert stack_node_4.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    dict_1 = {}
    var_6 = module_0.check_parenthesis(dict_1)
    assert var_6 is True
    stack_node_5 = module_0.StackNode(var_6)
    assert stack_node_5.data is True
    stack_node_6 = module_0.StackNode(stack_node_5)
    float_0 = 712.593
    dict_2 = {float_0: float_0, float_0: float_0}
    var_7 = module_0.check_parenthesis(dict_2)
    assert var_7 is True
    stack_node_7 = module_0.StackNode(var_7)
    assert stack_node_7.data is True
    with pytest.raises(ValueError):
        stack_3.peek()


@pytest.mark.xfail(strict=True)
def test_case_2182():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    var_6 = stack_7.__len__()
    assert var_6 == 0
    stack_node_5 = module_0.StackNode(stack_7)
    assert len(stack_node_5.data) == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_7 = module_0.check_parenthesis(dict_1)
    assert var_7 is True
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_8 = stack_9.__len__()
    assert var_8 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_6 = module_0.StackNode(var_8)
    assert stack_node_6.data == 0
    dict_2 = {}
    var_9 = module_0.check_parenthesis(dict_2)
    assert var_9 is True
    var_10 = stack_10.__len__()
    assert var_10 == 0
    none_type_2 = None
    stack_node_7 = module_0.StackNode(none_type_2)
    bool_1 = False
    stack_node_8 = module_0.StackNode(bool_1)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    float_2 = 712.593
    dict_3 = {float_2: float_2, float_2: float_2}
    var_11 = module_0.check_parenthesis(dict_3)
    assert var_11 is True
    stack_node_9 = module_0.StackNode(bool_1)
    var_5.push(stack_9)


@pytest.mark.xfail(strict=True)
def test_case_2183():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    var_0.__len__()


def test_case_2184():
    int_0 = 2594
    stack_node_0 = module_0.StackNode(int_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(none_type_0)
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    dict_0 = {}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    with pytest.raises(ValueError):
        stack_2.peek()


@pytest.mark.xfail(strict=True)
def test_case_2185():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(stack_3)
    assert len(stack_node_3.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    bool_1 = False
    stack_node_4 = module_0.StackNode(bool_1)
    stack_node_5 = module_0.StackNode(bool_1)
    none_type_1 = None
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.push(none_type_1)
    assert len(stack_6) == 1
    stack_node_6 = module_0.StackNode(var_2)
    stack_node_7 = module_0.StackNode(stack_node_6)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    module_0.check_parenthesis(var_1)


@pytest.mark.xfail(strict=True)
def test_case_2186():
    bytes_0 = b"\x97"
    var_0 = module_0.check_parenthesis(bytes_0)
    assert var_0 is True
    var_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_2187():
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is False
    module_0.check_parenthesis(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2188():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_2)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    bool_0 = True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.push(bool_0)
    assert len(stack_5) == 1
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(none_type_0)
    bool_1 = False
    set_0 = {bool_1, bool_1, bool_1, bool_1}
    tuple_0 = (bool_1, bool_1)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_1, set_0, tuple_0, str_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.push(tuple_1)
    assert len(stack_7) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_4 = module_0.StackNode(var_5)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    var_2.peek()


def test_case_2189():
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    bool_0 = False
    stack_node_4 = module_0.StackNode(bool_0)
    stack_node_5 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.push(none_type_0)
    assert len(stack_2) == 1
    stack_node_6 = module_0.StackNode(var_3)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_4 = stack_3.__len__()
    assert var_4 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_0)
    assert var_5 is True
    stack_node_7 = module_0.StackNode(stack_5)
    assert len(stack_node_7.data) == 0
    bool_1 = True
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_6 = stack_6.push(bool_1)
    assert len(stack_6) == 1
    none_type_1 = None
    stack_node_8 = module_0.StackNode(none_type_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_7 = stack_7.__len__()
    assert var_7 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_8 = module_0.check_parenthesis(dict_1)
    assert var_8 is True
    var_9 = stack_7.__len__()
    assert var_9 == 0
    stack_node_9 = module_0.StackNode(stack_7)
    assert len(stack_node_9.data) == 0
    with pytest.raises(ValueError):
        stack_1.peek()


@pytest.mark.xfail(strict=True)
def test_case_2190():
    dict_0 = {}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    int_0 = 2594
    stack_node_0 = module_0.StackNode(int_0)
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_4)
    assert len(stack_node_6.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    module_0.check_parenthesis(stack_node_1)


@pytest.mark.xfail(strict=True)
def test_case_2191():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_3)
    assert len(stack_node_5.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_node_8 = module_0.StackNode(var_7)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    bool_0 = False
    stack_node_10 = module_0.StackNode(bool_0)
    stack_node_11 = module_0.StackNode(bool_0)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_8 = stack_14.__len__()
    assert var_8 == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_9 = stack_15.__len__()
    assert var_9 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_10 = module_0.check_parenthesis(dict_0)
    assert var_10 is True
    stack_node_13 = module_0.StackNode(stack_17)
    assert len(stack_node_13.data) == 0
    var_11 = stack_17.push(var_10)
    assert len(stack_17) == 1
    assert len(stack_node_13.data) == 1
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    module_0.check_parenthesis(stack_18)


@pytest.mark.xfail(strict=True)
def test_case_2192():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    var_1 = stack_0.push(none_type_0)
    assert len(stack_0) == 2
    bool_1 = False
    stack_node_3 = module_0.StackNode(bool_1)
    stack_node_4 = module_0.StackNode(bool_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    int_0 = 2594
    stack_node_5 = module_0.StackNode(int_0)
    none_type_1 = None
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.push(none_type_1)
    assert len(stack_2) == 1
    var_3 = stack_2.push(stack_2)
    assert len(stack_2) == 2
    var_4 = stack_2.peek()
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "stack1.Stack"
    assert len(var_4) == 2
    int_1 = 3109
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_5 = stack_3.push(int_1)
    assert len(stack_3) == 1
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_6 = stack_4.__len__()
    assert var_6 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_4)
    assert len(stack_node_9.data) == 0
    var_7 = stack_5.__len__()
    assert var_7 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_2 = None
    stack_node_10 = module_0.StackNode(none_type_2)
    stack_node_11 = module_0.StackNode(stack_6)
    assert len(stack_node_11.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_8 = module_0.check_parenthesis(str_0)
    assert var_8 is False
    var_8.pop()


@pytest.mark.xfail(strict=True)
def test_case_2193():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    bool_0 = True
    module_0.check_parenthesis(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2194():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_3)
    assert len(stack_node_2.data) == 0
    dict_0 = {}
    stack_node_3 = module_0.StackNode(dict_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_6 = module_0.StackNode(stack_10)
    assert len(stack_node_6.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_4 = stack_12.__len__()
    assert var_4 == 0
    var_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_2195():
    bool_0 = True
    stack_node_0 = module_0.StackNode(bool_0)
    bool_1 = False
    set_0 = {bool_1, bool_1, bool_1, bool_1}
    tuple_0 = (bool_1, bool_1)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_1, set_0, tuple_0, str_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(tuple_1)
    assert len(stack_0) == 1
    complex_0 = -3711.3 - 806.2j
    stack_node_1 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_3 = module_0.StackNode(none_type_1)
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    var_1 = stack_1.push(none_type_0)
    assert len(stack_1) == 1
    assert len(stack_node_4.data) == 1
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2196():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_2 = module_0.StackNode(stack_6)
    assert len(stack_node_2.data) == 0
    var_3 = stack_6.push(var_2)
    assert len(stack_6) == 1
    assert len(stack_node_2.data) == 1
    str_0 = "O"
    stack_node_3 = module_0.StackNode(str_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    var_4 = stack_7.push(none_type_0)
    assert len(stack_7) == 1
    module_0.check_parenthesis(stack_4)


@pytest.mark.xfail(strict=True)
def test_case_2197():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    var_1 = stack_0.pop()
    assert len(stack_0) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    bool_0 = True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_3 = stack_1.push(bool_0)
    assert len(stack_1) == 1
    stack_node_0 = module_0.StackNode(stack_1)
    assert len(stack_node_0.data) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_4 = stack_2.__len__()
    assert var_4 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(var_4)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    var_5 = stack_3.__len__()
    assert var_5 == 0
    var_6 = stack_2.push(stack_node_3)
    assert len(stack_2) == 1
    assert len(stack_node_4.data) == 1
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_7 = stack_4.__len__()
    assert var_7 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_5 = module_0.StackNode(var_7)
    assert stack_node_5.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_8 = stack_7.__len__()
    assert var_8 == 0
    bool_1 = True
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_9 = stack_8.push(bool_1)
    assert len(stack_8) == 1
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_10 = stack_9.__len__()
    assert var_10 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_6 = module_0.StackNode(var_10)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_11 = stack_13.__len__()
    assert var_11 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_8 = module_0.StackNode(var_11)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_13)
    assert len(stack_node_11.data) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    none_type_1 = None
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_12 = stack_16.push(none_type_1)
    assert len(stack_16) == 1
    var_13 = stack_16.pop()
    assert len(stack_16) == 0
    none_type_2 = None
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_14 = stack_17.push(none_type_2)
    assert len(stack_17) == 1
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    bool_2 = True
    stack_node_12 = module_0.StackNode(bool_2)
    module_0.check_parenthesis(stack_15)


@pytest.mark.xfail(strict=True)
def test_case_2198():
    bytes_0 = b"*\xecP\xe48r\x8e\x9cX\x18\xfe\xfe)R\xf4U|\xbc>"
    module_0.postfix_eval(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2199():
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data is True
    stack_node_1 = module_0.StackNode(str_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_1)
    assert len(stack_node_5.data) == 0
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_7 = module_0.StackNode(float_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    dict_1 = {var_2: var_2, float_0: stack_node_6}
    stack_node_8 = module_0.StackNode(dict_1)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_1 = None
    stack_node_9 = module_0.StackNode(none_type_1)
    var_3 = stack_3.push(none_type_1)
    assert len(stack_3) == 1
    var_1.push(stack_node_7)


def test_case_2200():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    str_0 = ""
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is True
    with pytest.raises(ValueError):
        stack_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_2201():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    stack_node_5 = module_0.StackNode(stack_node_3)
    stack_node_6 = module_0.StackNode(stack_2)
    assert len(stack_node_6.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    bool_1 = False
    stack_node_8 = module_0.StackNode(bool_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_9 = module_0.StackNode(bool_1)
    module_0.check_parenthesis(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2202():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_2.push(stack_4)
    assert len(stack_2) == 1
    module_0.check_parenthesis(var_1)


@pytest.mark.xfail(strict=True)
def test_case_2203():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_node_0 = module_0.StackNode(stack_0)
    assert len(stack_node_0.data) == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    int_0 = -460
    stack_node_2 = module_0.StackNode(int_0)
    module_0.check_parenthesis(stack_0)


@pytest.mark.xfail(strict=True)
def test_case_2204():
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    var_0.push(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2205():
    dict_0 = {}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data is True
    stack_node_1 = module_0.StackNode(stack_node_0)
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 1
    dict_1 = {}
    var_2 = module_0.check_parenthesis(dict_1)
    assert var_2 is True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_3 = stack_1.__len__()
    assert var_3 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_3)
    assert stack_node_3.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    bool_1 = False
    stack_node_4 = module_0.StackNode(bool_1)
    stack_node_5 = module_0.StackNode(bool_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    bool_2 = False
    stack_node_7 = module_0.StackNode(bool_2)
    stack_node_8 = module_0.StackNode(bool_2)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_7 = stack_9.__len__()
    assert var_7 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_9 = module_0.StackNode(var_7)
    assert stack_node_9.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_10.__len__()
    assert var_8 == 0
    stack_node_10 = module_0.StackNode(stack_9)
    assert len(stack_node_10.data) == 0
    module_0.check_parenthesis(var_8)


@pytest.mark.xfail(strict=True)
def test_case_2206():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(stack_3)
    assert len(stack_node_3.data) == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    var_1 = stack_3.__len__()
    assert var_1 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data is True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_node_7 = module_0.StackNode(stack_4)
    assert len(stack_node_7.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_8 = module_0.StackNode(stack_5)
    assert len(stack_node_8.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_9 = module_0.StackNode(var_3)
    assert stack_node_9.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_10 = module_0.StackNode(var_5)
    assert stack_node_10.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_11 = module_0.StackNode(stack_11)
    assert len(stack_node_11.data) == 0
    var_6 = stack_13.__len__()
    assert var_6 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_7 = stack_15.__len__()
    assert var_7 == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_12 = module_0.StackNode(var_7)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_node_12)
    stack_node_15 = module_0.StackNode(stack_15)
    assert len(stack_node_15.data) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    module_0.postfix_eval(stack_node_11)


@pytest.mark.xfail(strict=True)
def test_case_2207():
    dict_0 = {}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_1)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    var_2 = stack_1.__len__()
    assert var_2 == 0
    int_0 = 2594
    stack_node_4 = module_0.StackNode(int_0)
    none_type_0 = None
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_3 = stack_2.push(none_type_0)
    assert len(stack_2) == 1
    var_4 = stack_2.push(stack_2)
    assert len(stack_2) == 2
    var_5 = stack_2.peek()
    assert f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "stack1.Stack"
    assert len(var_5) == 2
    var_3.pop()


@pytest.mark.xfail(strict=True)
def test_case_2208():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_2)
    assert len(stack_node_2.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    str_0 = "O"
    stack_node_3 = module_0.StackNode(str_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    var_5 = stack_8.__len__()
    assert var_5 == 0
    dict_1 = {}
    stack_node_5 = module_0.StackNode(dict_1)
    str_1 = ""
    var_6 = module_0.check_parenthesis(str_1)
    assert var_6 is True
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data is True
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_0.pop()


def test_case_2209():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2210():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_0 = module_0.StackNode(stack_2)
    assert len(stack_node_0.data) == 0
    none_type_0 = None
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.push(none_type_0)
    assert len(stack_3) == 1
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(stack_5)
    assert len(stack_node_2.data) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    str_0 = "O"
    stack_node_3 = module_0.StackNode(str_0)
    module_0.postfix_eval(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2211():
    bool_0 = True
    stack_node_0 = module_0.StackNode(bool_0)
    complex_0 = -3711.3 - 806.2j
    stack_node_1 = module_0.StackNode(complex_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2212():
    dict_0 = {}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data is True
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(none_type_0)
    dict_1 = {}
    stack_node_5 = module_0.StackNode(dict_1)
    str_0 = ""
    var_2 = module_0.check_parenthesis(str_0)
    assert var_2 is True
    stack_node_6 = module_0.StackNode(var_2)
    assert stack_node_6.data is True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    bool_0 = False
    stack_node_7 = module_0.StackNode(bool_0)
    stack_node_8 = module_0.StackNode(bool_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    int_0 = 2594
    stack_node_9 = module_0.StackNode(int_0)
    none_type_1 = None
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.push(none_type_1)
    assert len(stack_6) == 1
    var_5 = stack_6.push(stack_6)
    assert len(stack_6) == 2
    var_6 = stack_6.peek()
    assert f"{type(var_6).__module__}.{type(var_6).__qualname__}" == "stack1.Stack"
    assert len(var_6) == 2
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_7 = stack_8.__len__()
    assert var_7 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_10 = module_0.StackNode(var_7)
    assert stack_node_10.data == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_11 = module_0.StackNode(stack_9)
    assert len(stack_node_11.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_12 = module_0.StackNode(var_8)
    assert stack_node_12.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_node_13 = module_0.StackNode(stack_13)
    assert len(stack_node_13.data) == 0
    var_9 = stack_15.__len__()
    assert var_9 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_10 = stack_17.__len__()
    assert var_10 == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_14 = module_0.StackNode(var_10)
    assert stack_node_14.data == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_11 = stack_20.__len__()
    assert var_11 == 0
    module_0.check_parenthesis(stack_16)


def test_case_2213():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_2 = module_0.StackNode(var_3)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_6)
    assert len(stack_node_5.data) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_1 = None
    stack_node_6 = module_0.StackNode(none_type_1)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_2 = None
    stack_node_7 = module_0.StackNode(none_type_2)
    stack_node_8 = module_0.StackNode(stack_10)
    assert len(stack_node_8.data) == 0
    var_5 = stack_10.__len__()
    assert var_5 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_6 = module_0.check_parenthesis(str_0)
    assert var_6 is False
    stack_node_9 = module_0.StackNode(var_6)
    assert stack_node_9.data is False
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_7 = stack_11.__len__()
    assert var_7 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_10 = module_0.StackNode(var_7)
    assert stack_node_10.data == 0
    stack_node_11 = module_0.StackNode(stack_node_10)
    stack_node_12 = module_0.StackNode(stack_node_10)
    stack_node_13 = module_0.StackNode(stack_11)
    assert len(stack_node_13.data) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_14 = module_0.StackNode(var_7)
    assert stack_node_14.data == 0
    none_type_3 = None
    stack_node_15 = module_0.StackNode(none_type_3)
    bool_0 = False
    stack_node_16 = module_0.StackNode(bool_0)
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    bool_1 = True
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    var_8 = stack_15.push(bool_1)
    assert len(stack_15) == 1
    stack_node_17 = module_0.StackNode(var_8)
    str_1 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_9 = module_0.check_parenthesis(str_1)
    assert var_9 is False
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_10 = stack_16.__len__()
    assert var_10 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_node_18 = module_0.StackNode(var_10)
    assert stack_node_18.data == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    stack_node_19 = module_0.StackNode(stack_17)
    assert len(stack_node_19.data) == 0
    var_11 = stack_18.__len__()
    assert var_11 == 0
    with pytest.raises(ValueError):
        stack_11.peek()


@pytest.mark.xfail(strict=True)
def test_case_2214():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_2 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_1 = None
    stack_node_4 = module_0.StackNode(none_type_1)
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    var_2 = stack_4.push(none_type_0)
    assert len(stack_4) == 1
    assert len(stack_node_5.data) == 1
    var_1.__len__()


def test_case_2215():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_4.__len__()
    assert var_1 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    with pytest.raises(ValueError):
        stack_2.pop()


def test_case_2216():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_node_3 = module_0.StackNode(stack_4)
    assert len(stack_node_3.data) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_node_4 = module_0.StackNode(stack_4)
    assert len(stack_node_4.data) == 0
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_node_6 = module_0.StackNode(bool_0)
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.push(bool_0)
    assert len(stack_5) == 1
    var_4 = stack_5.push(none_type_1)
    assert len(stack_5) == 2
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.__len__()
    assert var_5 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_9 = module_0.StackNode(stack_7)
    assert len(stack_node_9.data) == 0
    var_6 = stack_8.__len__()
    assert var_6 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_7 = stack_9.__len__()
    assert var_7 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_8 = module_0.check_parenthesis(dict_0)
    assert var_8 is True
    stack_node_10 = module_0.StackNode(stack_11)
    assert len(stack_node_10.data) == 0
    complex_0 = -3711.3 - 806.2j
    stack_node_11 = module_0.StackNode(complex_0)
    bool_1 = True
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_9 = stack_12.push(bool_1)
    assert len(stack_12) == 1
    stack_node_12 = module_0.StackNode(stack_12)
    assert len(stack_node_12.data) == 1
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_10 = stack_13.__len__()
    assert var_10 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_13 = module_0.StackNode(var_10)
    assert stack_node_13.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_11 = stack_14.__len__()
    assert var_11 == 0
    stack_node_14 = module_0.StackNode(stack_13)
    assert len(stack_node_14.data) == 0
    none_type_2 = None
    stack_node_15 = module_0.StackNode(none_type_2)
    str_0 = "o2EICU9\x0bp7"
    stack_node_16 = module_0.StackNode(str_0)
    with pytest.raises(ValueError):
        stack_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_2217():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    var_1 = stack_0.push(stack_0)
    assert len(stack_0) == 2
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_2)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_1)
    assert len(stack_node_3.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_4 = module_0.StackNode(var_3)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    int_0 = -460
    stack_node_6 = module_0.StackNode(int_0)
    dict_0 = {}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_7 = module_0.StackNode(var_4)
    assert stack_node_7.data is True
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_1 = None
    stack_node_8 = module_0.StackNode(none_type_1)
    var_5 = stack_6.push(none_type_1)
    assert len(stack_6) == 1
    stack_node_9 = module_0.StackNode(var_5)
    int_1 = 3109
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_6 = stack_7.push(int_1)
    assert len(stack_7) == 1
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_7 = stack_8.__len__()
    assert var_7 == 0
    var_6.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2218():
    int_0 = 2594
    stack_node_0 = module_0.StackNode(int_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    var_1 = stack_0.push(stack_0)
    assert len(stack_0) == 2
    var_2 = stack_0.peek()
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "stack1.Stack"
    assert len(var_2) == 2
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_3 = stack_1.__len__()
    assert var_3 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    stack_node_4 = module_0.StackNode(stack_1)
    assert len(stack_node_4.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_4 = stack_4.__len__()
    assert var_4 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_6 = module_0.StackNode(var_4)
    assert stack_node_6.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_5 = stack_7.__len__()
    assert var_5 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    module_0.check_parenthesis(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2219():
    int_0 = 3109
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(int_0)
    assert len(stack_0) == 1
    bool_0 = True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.push(bool_0)
    assert len(stack_1) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_2)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(stack_3)
    assert len(stack_node_3.data) == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    var_2 = stack_3.__len__()
    assert var_2 == 0
    int_1 = 2594
    stack_node_5 = module_0.StackNode(int_1)
    none_type_1 = None
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.push(none_type_1)
    assert len(stack_4) == 1
    var_4 = stack_4.push(stack_4)
    assert len(stack_4) == 2
    var_5 = stack_4.peek()
    assert f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "stack1.Stack"
    assert len(var_5) == 2
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_6 = stack_5.__len__()
    assert var_6 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_6 = module_0.StackNode(var_6)
    assert stack_node_6.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_7 = module_0.StackNode(stack_5)
    assert len(stack_node_7.data) == 0
    stack_node_8 = module_0.StackNode(stack_8)
    assert len(stack_node_8.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_2 = None
    stack_node_9 = module_0.StackNode(none_type_2)
    var_7 = stack_9.push(none_type_2)
    assert len(stack_9) == 1
    stack_node_10 = module_0.StackNode(var_7)
    module_0.postfix_eval(var_2)


@pytest.mark.xfail(strict=True)
def test_case_2220():
    object_0 = module_1.object()
    module_0.check_parenthesis(object_0)


@pytest.mark.xfail(strict=True)
def test_case_2221():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    str_0 = ""
    var_1 = module_0.check_parenthesis(str_0)
    assert var_1 is True
    dict_0 = {}
    stack_node_4 = module_0.StackNode(dict_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_node_6 = module_0.StackNode(stack_2)
    assert len(stack_node_6.data) == 0
    var_2 = stack_2.push(none_type_0)
    assert len(stack_2) == 1
    assert len(stack_node_6.data) == 1
    var_3 = stack_2.push(stack_node_4)
    assert len(stack_2) == 2
    assert len(stack_node_6.data) == 2
    str_1 = "o2EICU9\x0bp7"
    stack_node_7 = module_0.StackNode(str_1)
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_8 = module_0.StackNode(float_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_1 = None
    stack_node_9 = module_0.StackNode(none_type_1)
    stack_node_10 = module_0.StackNode(none_type_1)
    dict_2 = {}
    var_5 = module_0.check_parenthesis(dict_2)
    assert var_5 is True
    stack_node_11 = module_0.StackNode(var_5)
    assert stack_node_11.data is True
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_6 = stack_4.__len__()
    assert var_6 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_7 = stack_4.push(var_5)
    assert len(stack_4) == 1
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_8 = stack_7.__len__()
    assert var_8 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_12 = module_0.StackNode(var_8)
    assert stack_node_12.data == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    float_1 = 712.593
    dict_3 = {float_1: float_1, float_1: float_1}
    var_9 = module_0.check_parenthesis(dict_3)
    assert var_9 is True
    var_10 = stack_8.__len__()
    assert var_10 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_11 = stack_10.__len__()
    assert var_11 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_13 = module_0.StackNode(var_11)
    assert stack_node_13.data == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_12 = stack_12.push(stack_14)
    assert len(stack_12) == 1
    var_4.pop()


@pytest.mark.xfail(strict=True)
def test_case_2222():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    dict_0 = {}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data is True
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_3 = module_0.StackNode(stack_5)
    assert len(stack_node_3.data) == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_5 = module_0.check_parenthesis(str_0)
    assert var_5 is False
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_6 = stack_6.__len__()
    assert var_6 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_4 = module_0.StackNode(var_6)
    assert stack_node_4.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_5 = module_0.StackNode(stack_6)
    assert len(stack_node_5.data) == 0
    var_7 = stack_8.__len__()
    assert var_7 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_8 = stack_10.__len__()
    assert var_8 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_6 = module_0.StackNode(var_8)
    assert stack_node_6.data == 0
    stack_node_7 = module_0.StackNode(stack_node_6)
    stack_node_8 = module_0.StackNode(stack_node_6)
    stack_node_9 = module_0.StackNode(stack_10)
    assert len(stack_node_9.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_10 = module_0.StackNode(var_8)
    assert stack_node_10.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_9 = stack_13.__len__()
    assert var_9 == 0
    stack_node_11 = module_0.StackNode(var_9)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    var_2.pop()


def test_case_2223():
    bool_0 = True
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_1 = stack_0.__len__()
    assert var_1 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_node_6 = module_0.StackNode(stack_2)
    assert len(stack_node_6.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    bool_1 = False
    stack_node_8 = module_0.StackNode(bool_1)
    stack_node_9 = module_0.StackNode(bool_1)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    with pytest.raises(ValueError):
        stack_5.peek()


@pytest.mark.xfail(strict=True)
def test_case_2224():
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_2 = module_0.StackNode(bool_0)
    dict_1 = {}
    stack_node_3 = module_0.StackNode(dict_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_node_6 = module_0.StackNode(stack_4)
    assert len(stack_node_6.data) == 0
    none_type_2 = None
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.push(none_type_2)
    assert len(stack_5) == 1
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data == 0
    int_0 = 3109
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.push(int_0)
    assert len(stack_8) == 1
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(var_5)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_9)
    assert len(stack_node_11.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    module_0.postfix_eval(stack_12)


@pytest.mark.xfail(strict=True)
def test_case_2225():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    var_1 = stack_0.push(stack_0)
    assert len(stack_0) == 2
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_0, set_0, tuple_0, str_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.push(tuple_1)
    assert len(stack_1) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_1 = None
    stack_node_0 = module_0.StackNode(none_type_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_node_2 = module_0.StackNode(stack_4)
    assert len(stack_node_2.data) == 0
    none_type_2 = None
    stack_node_3 = module_0.StackNode(none_type_2)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_5 = stack_9.__len__()
    assert var_5 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_6 = module_0.check_parenthesis(dict_0)
    assert var_6 is True
    var_7 = stack_9.__len__()
    assert var_7 == 0
    stack_node_4 = module_0.StackNode(stack_9)
    assert len(stack_node_4.data) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_3 = None
    stack_node_5 = module_0.StackNode(none_type_3)
    stack_node_6 = module_0.StackNode(stack_10)
    assert len(stack_node_6.data) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    none_type_4 = None
    stack_node_7 = module_0.StackNode(none_type_4)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_8 = stack_12.__len__()
    assert var_8 == 0
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_9 = module_0.check_parenthesis(dict_1)
    assert var_9 is True
    var_10 = stack_12.__len__()
    assert var_10 == 0
    var_9.peek()


@pytest.mark.xfail(strict=True)
def test_case_2226():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_node_3 = module_0.StackNode(stack_0)
    assert len(stack_node_3.data) == 0
    module_0.postfix_eval(stack_1)


@pytest.mark.xfail(strict=True)
def test_case_2227():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    none_type_0 = None
    stack_node_0 = module_0.StackNode(none_type_0)
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    stack_node_2 = module_0.StackNode(stack_node_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_3 = module_0.StackNode(var_0)
    assert stack_node_3.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_1 = stack_5.__len__()
    assert var_1 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_4 = module_0.StackNode(var_1)
    assert stack_node_4.data == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    stack_node_6 = module_0.StackNode(stack_node_4)
    stack_node_7 = module_0.StackNode(stack_5)
    assert len(stack_node_7.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    bool_0 = True
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_2 = stack_8.push(bool_0)
    assert len(stack_8) == 1
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_3 = stack_9.__len__()
    assert var_3 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    bool_1 = False
    stack_node_10 = module_0.StackNode(bool_1)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_11 = module_0.StackNode(float_0)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    dict_1 = {var_4: var_4, float_0: stack_node_10}
    stack_node_12 = module_0.StackNode(dict_1)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_5 = stack_13.__len__()
    assert var_5 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_13 = module_0.StackNode(var_5)
    assert stack_node_13.data == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_14 = module_0.StackNode(stack_14)
    assert len(stack_node_14.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_6 = stack_16.__len__()
    assert var_6 == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    none_type_1 = None
    stack_node_15 = module_0.StackNode(none_type_1)
    stack_node_16 = module_0.StackNode(stack_17)
    assert len(stack_node_16.data) == 0
    var_7 = stack_17.__len__()
    assert var_7 == 0
    stack_node_17 = module_0.StackNode(stack_17)
    assert len(stack_node_17.data) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    none_type_2 = None
    stack_node_18 = module_0.StackNode(none_type_2)
    stack_node_19 = module_0.StackNode(stack_18)
    assert len(stack_node_19.data) == 0
    var_8 = stack_18.__len__()
    assert var_8 == 0
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    stack_node_20 = module_0.StackNode(stack_19)
    assert len(stack_node_20.data) == 0
    bool_2 = False
    set_0 = {bool_2, bool_2, bool_2, bool_2}
    tuple_0 = (bool_2, bool_2)
    str_0 = "B@kK%+yXf"
    tuple_1 = (bool_2, set_0, tuple_0, str_0)
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    var_9 = stack_20.push(tuple_1)
    assert len(stack_20) == 1
    stack_21 = module_0.Stack()
    assert len(stack_21) == 0
    var_2.peek()


def test_case_2228():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data is True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.__len__()
    assert var_4 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(var_4)
    assert stack_node_2.data == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    with pytest.raises(ValueError):
        stack_9.peek()


@pytest.mark.xfail(strict=True)
def test_case_2229():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    module_0.check_parenthesis(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2230():
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data is True
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_node_2 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    bool_1 = False
    stack_node_3 = module_0.StackNode(bool_1)
    stack_node_4 = module_0.StackNode(bool_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_node_5 = module_0.StackNode(stack_node_4)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    var_2.push(stack_node_2)


@pytest.mark.xfail(strict=True)
def test_case_2231():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_2 = module_0.check_parenthesis(str_0)
    assert var_2 is False
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.__len__()
    assert var_3 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_1 = module_0.StackNode(var_3)
    assert stack_node_1.data == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    stack_node_3 = module_0.StackNode(stack_node_1)
    var_4 = stack_4.__len__()
    assert var_4 == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_5 = module_0.StackNode(bool_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    bool_1 = True
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_5 = stack_6.push(bool_1)
    assert len(stack_6) == 1
    stack_node_6 = module_0.StackNode(var_5)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_1 = None
    stack_node_7 = module_0.StackNode(none_type_1)
    stack_node_8 = module_0.StackNode(stack_7)
    assert len(stack_node_8.data) == 0
    var_6 = stack_7.push(none_type_1)
    assert len(stack_7) == 1
    assert len(stack_node_8.data) == 1
    none_type_2 = None
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_7 = stack_8.push(none_type_2)
    assert len(stack_8) == 1
    var_8 = stack_8.pop()
    assert len(stack_8) == 0
    module_0.check_parenthesis(var_2)


def test_case_2232():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    bool_1 = False
    stack_node_2 = module_0.StackNode(bool_1)
    stack_node_3 = module_0.StackNode(bool_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_node_5 = module_0.StackNode(stack_2)
    assert len(stack_node_5.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_node_6 = module_0.StackNode(stack_2)
    assert len(stack_node_6.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_8 = module_0.StackNode(stack_4)
    assert len(stack_node_8.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_4 = stack_7.__len__()
    assert var_4 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_9 = module_0.StackNode(var_4)
    assert stack_node_9.data == 0
    stack_node_10 = module_0.StackNode(stack_node_9)
    stack_node_11 = module_0.StackNode(stack_node_9)
    stack_node_12 = module_0.StackNode(stack_7)
    assert len(stack_node_12.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_13 = module_0.StackNode(var_5)
    assert stack_node_13.data == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_6 = stack_14.__len__()
    assert var_6 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_14 = module_0.StackNode(var_6)
    assert stack_node_14.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    bool_2 = False
    stack_node_15 = module_0.StackNode(bool_2)
    stack_node_16 = module_0.StackNode(bool_2)
    none_type_1 = None
    stack_node_17 = module_0.StackNode(none_type_1)
    stack_19 = module_0.Stack()
    assert len(stack_19) == 0
    var_7 = stack_19.push(bool_2)
    assert len(stack_19) == 1
    var_8 = stack_19.push(none_type_1)
    assert len(stack_19) == 2
    none_type_2 = None
    stack_node_18 = module_0.StackNode(none_type_2)
    bool_3 = False
    stack_node_19 = module_0.StackNode(bool_3)
    stack_20 = module_0.Stack()
    assert len(stack_20) == 0
    with pytest.raises(ValueError):
        stack_2.peek()


@pytest.mark.xfail(strict=True)
def test_case_2233():
    str_0 = ""
    var_0 = module_0.check_parenthesis(str_0)
    assert var_0 is True
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    dict_0 = {}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_2 = module_0.StackNode(var_1)
    assert stack_node_2.data is True
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_2 = stack_1.__len__()
    assert var_2 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_1.push(var_1)
    assert len(stack_1) == 1
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    bool_1 = False
    stack_node_4 = module_0.StackNode(bool_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    bool_2 = True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_4 = stack_5.push(bool_2)
    assert len(stack_5) == 1
    stack_node_5 = module_0.StackNode(var_4)
    bool_3 = False
    stack_node_6 = module_0.StackNode(bool_3)
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    stack_node_7 = module_0.StackNode(float_0)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    dict_2 = {var_5: var_5, float_0: stack_node_6}
    stack_node_8 = module_0.StackNode(dict_2)
    float_1 = 712.593
    dict_3 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_3)
    assert var_6 is True
    stack_node_9 = module_0.StackNode(float_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_1 = None
    stack_node_10 = module_0.StackNode(none_type_1)
    stack_node_11 = module_0.StackNode(none_type_1)
    stack_node_12 = module_0.StackNode(stack_7)
    assert len(stack_node_12.data) == 0
    float_2 = -0.8
    stack_node_13 = module_0.StackNode(float_2)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_7 = stack_8.__len__()
    assert var_7 == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_node_14 = module_0.StackNode(var_7)
    assert stack_node_14.data == 0
    stack_node_15 = module_0.StackNode(stack_node_14)
    stack_node_16 = module_0.StackNode(stack_8)
    assert len(stack_node_16.data) == 0
    var_3.peek()


def test_case_2234():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_0)
    assert len(stack_node_2.data) == 0
    int_0 = 2594
    stack_node_3 = module_0.StackNode(int_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_4 = module_0.StackNode(float_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_node_6 = module_0.StackNode(none_type_0)
    stack_node_7 = module_0.StackNode(stack_2)
    assert len(stack_node_7.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_1 = None
    stack_node_8 = module_0.StackNode(none_type_1)
    stack_node_9 = module_0.StackNode(stack_3)
    assert len(stack_node_9.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    none_type_2 = None
    stack_node_10 = module_0.StackNode(none_type_2)
    bool_0 = False
    stack_node_11 = module_0.StackNode(bool_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    bool_1 = True
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_2 = stack_6.push(bool_1)
    assert len(stack_6) == 1
    stack_node_12 = module_0.StackNode(var_2)
    bool_2 = False
    stack_node_13 = module_0.StackNode(bool_2)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_3 = module_0.check_parenthesis(dict_1)
    assert var_3 is True
    stack_node_14 = module_0.StackNode(float_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_3 = None
    stack_node_15 = module_0.StackNode(none_type_3)
    stack_node_16 = module_0.StackNode(stack_8)
    assert len(stack_node_16.data) == 0
    var_4 = stack_8.__len__()
    assert var_4 == 0
    str_0 = "UbV2bCf,[PX\\\n`Lj\\L"
    var_5 = module_0.check_parenthesis(str_0)
    assert var_5 is False
    stack_node_17 = module_0.StackNode(var_5)
    assert stack_node_17.data is False
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_7 = module_0.check_parenthesis(dict_2)
    assert var_7 is True
    stack_node_18 = module_0.StackNode(stack_11)
    assert len(stack_node_18.data) == 0
    var_8 = stack_11.push(var_7)
    assert len(stack_11) == 1
    assert len(stack_node_18.data) == 1
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_9 = stack_12.__len__()
    assert var_9 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_19 = module_0.StackNode(var_9)
    assert stack_node_19.data == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    var_10 = stack_13.__len__()
    assert var_10 == 0
    with pytest.raises(ValueError):
        stack_2.peek()


@pytest.mark.xfail(strict=True)
def test_case_2235():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    dict_1 = {var_0: var_0, float_0: stack_node_0}
    stack_node_2 = module_0.StackNode(dict_1)
    complex_0 = -3711.3 - 806.2j
    stack_node_3 = module_0.StackNode(complex_0)
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    stack_node_6 = module_0.StackNode(stack_1)
    assert len(stack_node_6.data) == 0
    var_1 = stack_1.push(none_type_0)
    assert len(stack_1) == 1
    assert len(stack_node_6.data) == 1
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_7 = module_0.StackNode(var_2)
    assert stack_node_7.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_8 = module_0.StackNode(stack_3)
    assert len(stack_node_8.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_9 = module_0.StackNode(var_3)
    assert stack_node_9.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    none_type_2 = None
    stack_node_10 = module_0.StackNode(none_type_2)
    stack_node_11 = module_0.StackNode(stack_9)
    assert len(stack_node_11.data) == 0
    none_type_3 = None
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_4 = stack_10.push(none_type_3)
    assert len(stack_10) == 1
    var_5 = stack_10.pop()
    assert len(stack_10) == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_6 = stack_11.__len__()
    assert var_6 == 0
    stack_node_12 = module_0.StackNode(var_6)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    float_1 = 712.593
    dict_2 = {float_1: float_1, float_1: float_1}
    var_7 = module_0.check_parenthesis(dict_2)
    assert var_7 is True
    stack_node_14 = module_0.StackNode(float_1)
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    none_type_4 = None
    stack_node_15 = module_0.StackNode(none_type_4)
    stack_node_16 = module_0.StackNode(none_type_4)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_8 = stack_13.__len__()
    assert var_8 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    float_2 = 712.593
    dict_3 = {float_2: float_2, float_2: float_2}
    var_9 = module_0.check_parenthesis(dict_3)
    assert var_9 is True
    stack_node_17 = module_0.StackNode(stack_15)
    assert len(stack_node_17.data) == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    none_type_5 = None
    stack_node_18 = module_0.StackNode(none_type_5)
    var_10 = stack_16.push(none_type_5)
    assert len(stack_16) == 1
    stack_node_19 = module_0.StackNode(var_10)
    bool_1 = True
    var_0.push(bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2236():
    int_0 = 3109
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(int_0)
    assert len(stack_0) == 1
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_1 = module_0.StackNode(float_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    dict_1 = {var_1: var_1, float_0: stack_node_0}
    stack_node_2 = module_0.StackNode(dict_1)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_3 = module_0.StackNode(var_2)
    assert stack_node_3.data == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_4 = module_0.StackNode(stack_2)
    assert len(stack_node_4.data) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    none_type_0 = None
    stack_node_5 = module_0.StackNode(none_type_0)
    stack_node_6 = module_0.StackNode(stack_5)
    assert len(stack_node_6.data) == 0
    var_3 = stack_5.push(none_type_0)
    assert len(stack_5) == 1
    assert len(stack_node_6.data) == 1
    float_1 = -0.8
    stack_node_7 = module_0.StackNode(float_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_5 = module_0.check_parenthesis(dict_2)
    assert var_5 is True
    stack_node_8 = module_0.StackNode(stack_8)
    assert len(stack_node_8.data) == 0
    var_6 = stack_8.push(var_5)
    assert len(stack_8) == 1
    assert len(stack_node_8.data) == 1
    int_1 = -460
    stack_node_9 = module_0.StackNode(int_1)
    none_type_1 = None
    stack_node_10 = module_0.StackNode(none_type_1)
    dict_3 = {stack_node_10: stack_node_10}
    list_0 = [dict_3, stack_node_10]
    stack_node_11 = module_0.StackNode(list_0)
    float_3 = 712.593
    dict_4 = {float_3: float_3, float_3: float_3}
    var_7 = module_0.check_parenthesis(dict_4)
    assert var_7 is True
    module_0.postfix_eval(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2237():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_0)
    assert len(stack_node_1.data) == 0
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2238():
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.check_parenthesis(dict_0)
    assert var_0 is True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    bool_1 = True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.push(bool_1)
    assert len(stack_5) == 1
    stack_node_4 = module_0.StackNode(var_2)
    dict_1 = {}
    stack_node_5 = module_0.StackNode(dict_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    float_1 = 712.593
    dict_2 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_2)
    assert var_4 is True
    stack_node_6 = module_0.StackNode(stack_8)
    assert len(stack_node_6.data) == 0
    var_5 = stack_8.push(var_4)
    assert len(stack_8) == 1
    assert len(stack_node_6.data) == 1
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_6 = stack_9.__len__()
    assert var_6 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_7 = module_0.StackNode(var_6)
    assert stack_node_7.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    stack_node_8 = module_0.StackNode(stack_9)
    assert len(stack_node_8.data) == 0
    bool_2 = False
    stack_node_9 = module_0.StackNode(bool_2)
    stack_node_10 = module_0.StackNode(bool_2)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    var_7 = stack_13.__len__()
    assert var_7 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    stack_node_11 = module_0.StackNode(var_7)
    assert stack_node_11.data == 0
    stack_node_12 = module_0.StackNode(stack_node_11)
    stack_node_13 = module_0.StackNode(stack_node_11)
    stack_node_14 = module_0.StackNode(stack_13)
    assert len(stack_node_14.data) == 0
    var_2.peek()


@pytest.mark.xfail(strict=True)
def test_case_2239():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    dict_0 = {}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_3 = stack_4.__len__()
    assert var_3 == 0
    float_0 = 712.593
    dict_1 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    var_5 = stack_4.__len__()
    assert var_5 == 0
    none_type_1 = None
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_6 = stack_5.push(none_type_1)
    assert len(stack_5) == 1
    float_1 = 712.593
    dict_2 = {float_1: float_1, float_1: float_1}
    var_7 = module_0.check_parenthesis(dict_2)
    assert var_7 is True
    stack_node_3 = module_0.StackNode(float_1)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_2 = None
    stack_node_4 = module_0.StackNode(none_type_2)
    stack_node_5 = module_0.StackNode(none_type_2)
    stack_node_6 = module_0.StackNode(stack_6)
    assert len(stack_node_6.data) == 0
    int_0 = -222
    set_0 = {int_0}
    stack_node_7 = module_0.StackNode(set_0)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_8 = stack_7.__len__()
    assert var_8 == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_8 = module_0.StackNode(var_8)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_7)
    assert len(stack_node_11.data) == 0
    bool_0 = False
    stack_node_12 = module_0.StackNode(bool_0)
    stack_node_13 = module_0.StackNode(bool_0)
    none_type_3 = None
    stack_node_14 = module_0.StackNode(none_type_3)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_9 = stack_9.push(bool_0)
    assert len(stack_9) == 1
    var_10 = stack_9.push(none_type_3)
    assert len(stack_9) == 2
    var_2.__len__()


def test_case_2240():
    int_0 = -460
    stack_node_0 = module_0.StackNode(int_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_2 = module_0.StackNode(stack_1)
    assert len(stack_node_2.data) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    stack_node_4 = module_0.StackNode(stack_3)
    assert len(stack_node_4.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.__len__()
    assert var_2 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    bool_0 = True
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_3 = stack_8.push(bool_0)
    assert len(stack_8) == 1
    none_type_1 = None
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.push(none_type_1)
    assert len(stack_9) == 1
    none_type_2 = None
    stack_node_5 = module_0.StackNode(none_type_2)
    bool_1 = False
    stack_node_6 = module_0.StackNode(bool_1)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    with pytest.raises(ValueError):
        stack_1.peek()


def test_case_2241():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0


def test_case_2242():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    var_1 = stack_0.push(none_type_0)
    assert len(stack_0) == 2
    bool_1 = False
    stack_node_3 = module_0.StackNode(bool_1)
    stack_node_4 = module_0.StackNode(bool_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.__len__()
    assert var_2 == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_node_7 = module_0.StackNode(stack_node_5)
    stack_node_8 = module_0.StackNode(stack_2)
    assert len(stack_node_8.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    bool_2 = False
    stack_node_9 = module_0.StackNode(bool_2)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_10 = module_0.StackNode(float_0)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    dict_1 = {var_3: var_3, float_0: stack_node_9}
    stack_node_11 = module_0.StackNode(dict_1)
    with pytest.raises(ValueError):
        stack_4.pop()


@pytest.mark.xfail(strict=True)
def test_case_2243():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_1 = module_0.StackNode(stack_1)
    assert len(stack_node_1.data) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_node_5 = module_0.StackNode(stack_4)
    assert len(stack_node_5.data) == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_6 = module_0.StackNode(var_3)
    assert stack_node_6.data is True
    dict_1 = {}
    stack_node_7 = module_0.StackNode(dict_1)
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    stack_node_9 = module_0.StackNode(stack_7)
    assert len(stack_node_9.data) == 0
    var_4 = stack_7.push(none_type_0)
    assert len(stack_7) == 1
    assert len(stack_node_9.data) == 1
    var_5 = stack_7.push(stack_node_7)
    assert len(stack_7) == 2
    assert len(stack_node_9.data) == 2
    none_type_1 = None
    stack_node_10 = module_0.StackNode(none_type_1)
    bool_0 = False
    stack_node_11 = module_0.StackNode(bool_0)
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    float_1 = 712.593
    dict_2 = {float_1: float_1, float_1: float_1}
    var_6 = module_0.check_parenthesis(dict_2)
    assert var_6 is True
    stack_node_12 = module_0.StackNode(bool_0)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_7 = stack_9.__len__()
    assert var_7 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_13 = module_0.StackNode(var_7)
    assert stack_node_13.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_14 = module_0.StackNode(stack_9)
    assert len(stack_node_14.data) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_8 = stack_12.__len__()
    assert var_8 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_15 = module_0.StackNode(var_8)
    assert stack_node_15.data == 0
    stack_node_16 = module_0.StackNode(stack_node_15)
    stack_node_17 = module_0.StackNode(stack_node_15)
    stack_node_18 = module_0.StackNode(stack_12)
    assert len(stack_node_18.data) == 0
    var_9 = stack_13.__len__()
    assert var_9 == 0
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_10 = stack_14.__len__()
    assert var_10 == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    stack_node_19 = module_0.StackNode(var_10)
    assert stack_node_19.data == 0
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    stack_17 = module_0.Stack()
    assert len(stack_17) == 0
    var_11 = stack_17.__len__()
    assert var_11 == 0
    bool_1 = True
    stack_18 = module_0.Stack()
    assert len(stack_18) == 0
    var_12 = stack_18.push(bool_1)
    assert len(stack_18) == 1
    module_0.check_parenthesis(stack_node_9)


@pytest.mark.xfail(strict=True)
def test_case_2244():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_1 = module_0.check_parenthesis(dict_0)
    assert var_1 is True
    stack_node_3 = module_0.StackNode(float_0)
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_4 = module_0.StackNode(none_type_0)
    stack_node_5 = module_0.StackNode(none_type_0)
    none_type_1 = None
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.push(none_type_1)
    assert len(stack_3) == 1
    var_3 = stack_3.push(stack_3)
    assert len(stack_3) == 2
    bool_0 = False
    stack_node_6 = module_0.StackNode(bool_0)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_4 = module_0.check_parenthesis(dict_1)
    assert var_4 is True
    stack_node_7 = module_0.StackNode(float_1)
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    dict_2 = {var_4: var_4, float_1: stack_node_6}
    stack_node_8 = module_0.StackNode(dict_2)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_5 = stack_5.__len__()
    assert var_5 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    float_2 = 712.593
    dict_3 = {float_2: float_2, float_2: float_2}
    var_6 = module_0.check_parenthesis(dict_3)
    assert var_6 is True
    stack_node_9 = module_0.StackNode(stack_7)
    assert len(stack_node_9.data) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    none_type_2 = None
    stack_node_10 = module_0.StackNode(none_type_2)
    stack_node_11 = module_0.StackNode(stack_8)
    assert len(stack_node_11.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    var_7 = stack_10.__len__()
    assert var_7 == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_node_12 = module_0.StackNode(var_7)
    assert stack_node_12.data == 0
    stack_node_13 = module_0.StackNode(stack_node_12)
    stack_node_14 = module_0.StackNode(stack_node_12)
    stack_node_15 = module_0.StackNode(stack_10)
    assert len(stack_node_15.data) == 0
    var_8 = stack_11.__len__()
    assert var_8 == 0
    var_9 = stack_10.push(stack_node_14)
    assert len(stack_10) == 1
    assert len(stack_node_15.data) == 1
    var_9.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2245():
    none_type_0 = None
    module_0.check_parenthesis(none_type_0)


def test_case_2246():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    var_1 = stack_0.pop()
    assert len(stack_0) == 0
    str_0 = "o2EICU9\x0bp7"
    stack_node_1 = module_0.StackNode(str_0)
    none_type_1 = None
    stack_node_2 = module_0.StackNode(none_type_1)
    bool_1 = False
    stack_node_3 = module_0.StackNode(bool_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    bool_2 = True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_2 = stack_2.push(bool_2)
    assert len(stack_2) == 1
    stack_node_4 = module_0.StackNode(var_2)
    dict_0 = {}
    stack_node_5 = module_0.StackNode(dict_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    none_type_2 = None
    stack_node_6 = module_0.StackNode(none_type_2)
    stack_node_7 = module_0.StackNode(stack_3)
    assert len(stack_node_7.data) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_3 = stack_5.__len__()
    assert var_3 == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_8 = module_0.StackNode(var_3)
    assert stack_node_8.data == 0
    stack_node_9 = module_0.StackNode(stack_node_8)
    stack_node_10 = module_0.StackNode(stack_node_8)
    stack_node_11 = module_0.StackNode(stack_5)
    assert len(stack_node_11.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    str_1 = "O"
    stack_node_12 = module_0.StackNode(str_1)
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    var_4 = stack_9.__len__()
    assert var_4 == 0
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    stack_node_13 = module_0.StackNode(var_4)
    assert stack_node_13.data == 0
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    var_5 = stack_11.__len__()
    assert var_5 == 0
    bool_3 = False
    stack_node_14 = module_0.StackNode(bool_3)
    stack_node_15 = module_0.StackNode(bool_3)
    none_type_3 = None
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.push(none_type_3)
    assert len(stack_12) == 1
    stack_node_16 = module_0.StackNode(var_6)
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    with pytest.raises(ValueError):
        stack_13.peek()


def test_case_2247():
    none_type_0 = None
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(none_type_0)
    assert len(stack_0) == 1
    var_1 = stack_0.pop()
    assert len(stack_0) == 0
    none_type_1 = None
    stack_node_0 = module_0.StackNode(none_type_1)
    bool_0 = False
    stack_node_1 = module_0.StackNode(bool_0)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    with pytest.raises(ValueError):
        stack_2.pop()


def test_case_2248():
    bool_0 = True
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.push(bool_0)
    assert len(stack_0) == 1
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_1 = stack_1.__len__()
    assert var_1 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_1)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_2 = module_0.StackNode(var_2)
    assert stack_node_2.data == 0
    stack_node_3 = module_0.StackNode(stack_node_2)
    stack_node_4 = module_0.StackNode(stack_node_2)
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_3 = stack_6.__len__()
    assert var_3 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_node_5 = module_0.StackNode(var_3)
    assert stack_node_5.data == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    stack_node_6 = module_0.StackNode(stack_7)
    assert len(stack_node_6.data) == 0
    stack_9 = module_0.Stack()
    assert len(stack_9) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_4 = module_0.check_parenthesis(dict_0)
    assert var_4 is True
    stack_node_7 = module_0.StackNode(float_0)
    stack_10 = module_0.Stack()
    assert len(stack_10) == 0
    none_type_0 = None
    stack_node_8 = module_0.StackNode(none_type_0)
    stack_node_9 = module_0.StackNode(none_type_0)
    stack_node_10 = module_0.StackNode(stack_10)
    assert len(stack_node_10.data) == 0
    bool_1 = False
    stack_node_11 = module_0.StackNode(bool_1)
    float_1 = 712.593
    dict_1 = {float_1: float_1, float_1: float_1}
    var_5 = module_0.check_parenthesis(dict_1)
    assert var_5 is True
    stack_node_12 = module_0.StackNode(float_1)
    stack_11 = module_0.Stack()
    assert len(stack_11) == 0
    stack_12 = module_0.Stack()
    assert len(stack_12) == 0
    var_6 = stack_12.__len__()
    assert var_6 == 0
    stack_13 = module_0.Stack()
    assert len(stack_13) == 0
    stack_node_13 = module_0.StackNode(var_6)
    assert stack_node_13.data == 0
    stack_node_14 = module_0.StackNode(stack_node_13)
    stack_node_15 = module_0.StackNode(stack_node_13)
    stack_node_16 = module_0.StackNode(stack_12)
    assert len(stack_node_16.data) == 0
    none_type_1 = None
    stack_14 = module_0.Stack()
    assert len(stack_14) == 0
    var_7 = stack_14.push(none_type_1)
    assert len(stack_14) == 1
    var_8 = stack_14.pop()
    assert len(stack_14) == 0
    stack_15 = module_0.Stack()
    assert len(stack_15) == 0
    none_type_2 = None
    stack_node_17 = module_0.StackNode(none_type_2)
    stack_node_18 = module_0.StackNode(stack_15)
    assert len(stack_node_18.data) == 0
    float_2 = 712.593
    dict_2 = {float_2: float_2, float_2: float_2}
    var_9 = module_0.check_parenthesis(dict_2)
    assert var_9 is True
    stack_16 = module_0.Stack()
    assert len(stack_16) == 0
    with pytest.raises(ValueError):
        stack_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_2249():
    bool_0 = False
    stack_node_0 = module_0.StackNode(bool_0)
    stack_node_1 = module_0.StackNode(bool_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_node_2 = module_0.StackNode(stack_node_1)
    none_type_0 = None
    stack_node_3 = module_0.StackNode(none_type_0)
    bool_1 = False
    stack_node_4 = module_0.StackNode(bool_1)
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    bool_2 = True
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.push(bool_2)
    assert len(stack_2) == 1
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_2 = stack_3.__len__()
    assert var_2 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_5 = module_0.StackNode(var_2)
    assert stack_node_5.data == 0
    stack_node_6 = module_0.StackNode(stack_node_5)
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    dict_0 = {}
    var_3 = module_0.check_parenthesis(dict_0)
    assert var_3 is True
    stack_node_7 = module_0.StackNode(var_3)
    assert stack_node_7.data is True
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    var_4 = stack_6.__len__()
    assert var_4 == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_5 = stack_6.push(var_3)
    assert len(stack_6) == 1
    var_1.peek()


def test_case_2250():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    var_2 = stack_4.__len__()
    assert var_2 == 0
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    stack_node_1 = module_0.StackNode(var_2)
    assert stack_node_1.data == 0
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    stack_node_2 = module_0.StackNode(stack_4)
    assert len(stack_node_2.data) == 0
    stack_7 = module_0.Stack()
    assert len(stack_7) == 0
    var_3 = stack_7.__len__()
    assert var_3 == 0
    bool_0 = False
    stack_node_3 = module_0.StackNode(bool_0)
    stack_node_4 = module_0.StackNode(bool_0)
    none_type_0 = None
    stack_8 = module_0.Stack()
    assert len(stack_8) == 0
    var_4 = stack_8.push(none_type_0)
    assert len(stack_8) == 1
    stack_node_5 = module_0.StackNode(var_4)
    str_0 = ""
    var_5 = module_0.check_parenthesis(str_0)
    assert var_5 is True
    stack_node_6 = module_0.StackNode(var_5)
    assert stack_node_6.data is True
    stack_node_7 = module_0.StackNode(str_0)
    with pytest.raises(ValueError):
        stack_2.peek()


def test_case_2251():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    none_type_0 = None
    stack_node_1 = module_0.StackNode(none_type_0)
    stack_node_2 = module_0.StackNode(none_type_0)
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    stack_node_3 = module_0.StackNode(var_1)
    assert stack_node_3.data == 0
    stack_node_4 = module_0.StackNode(stack_node_3)
    none_type_1 = None
    stack_node_5 = module_0.StackNode(none_type_1)
    bool_0 = True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    var_2 = stack_5.push(bool_0)
    assert len(stack_5) == 1
    stack_node_6 = module_0.StackNode(stack_5)
    assert len(stack_node_6.data) == 1
    stack_6 = module_0.Stack()
    assert len(stack_6) == 0
    none_type_2 = None
    stack_node_7 = module_0.StackNode(none_type_2)
    with pytest.raises(ValueError):
        stack_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_2252():
    int_0 = 2594
    stack_node_0 = module_0.StackNode(int_0)
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_1 = module_0.StackNode(var_0)
    assert stack_node_1.data == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    var_1 = stack_2.__len__()
    assert var_1 == 0
    none_type_0 = None
    stack_node_2 = module_0.StackNode(none_type_0)
    dict_0 = {}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    int_1 = 2594
    stack_node_3 = module_0.StackNode(int_1)
    none_type_1 = None
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_3 = stack_3.push(none_type_1)
    assert len(stack_3) == 1
    var_4 = stack_3.push(stack_3)
    assert len(stack_3) == 2
    var_5 = stack_3.peek()
    assert f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "stack1.Stack"
    assert len(var_5) == 2
    var_2.pop()


def test_case_2253():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    var_0 = stack_1.__len__()
    assert var_0 == 0
    stack_2 = module_0.Stack()
    assert len(stack_2) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_3 = module_0.Stack()
    assert len(stack_3) == 0
    var_1 = stack_3.__len__()
    assert var_1 == 0
    stack_4 = module_0.Stack()
    assert len(stack_4) == 0
    float_0 = 712.593
    dict_0 = {float_0: float_0, float_0: float_0}
    var_2 = module_0.check_parenthesis(dict_0)
    assert var_2 is True
    stack_5 = module_0.Stack()
    assert len(stack_5) == 0
    with pytest.raises(ValueError):
        stack_3.pop()


@pytest.mark.xfail(strict=True)
def test_case_2254():
    stack_0 = module_0.Stack()
    assert len(stack_0) == 0
    var_0 = stack_0.__len__()
    assert var_0 == 0
    stack_1 = module_0.Stack()
    assert len(stack_1) == 0
    stack_node_0 = module_0.StackNode(var_0)
    assert stack_node_0.data == 0
    stack_node_1 = module_0.StackNode(stack_node_0)
    stack_node_2 = module_0.StackNode(stack_node_0)
    module_0.postfix_eval(stack_node_0)
