[*] Start mutation process:
   - targets: linkedList4.py
   - tests: ./RANDOM
[*] 2167 tests passed:
   - test_linkedList4_RANDOM [2.84654 s]
[*] Start mutants generation and execution:
   - [#   1] AOD linkedList4: 
--------------------------------------------------------------------------------
  83:         display = '('
  84:         while curr:
  85:             display += str(curr.data) + ', '
  86:             curr = curr.next
- 87:         return display[:-2] + ')'
+ 87:         return display[:2] + ')'
--------------------------------------------------------------------------------
[5.13287 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_5

def test_case_5():
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        none_type_1 = None
        linked_list_2 = module_0.LinkedList(none_type_1)
        assert linked_list_2.head is None
        var_1 = linked_list_2.size()
        assert var_1 == 0
        var_2 = linked_list_0.display()
>       assert var_2 == ')'
E       AssertionError

RANDOM/test_linkedList4_RANDOM.py:75: AssertionError
   - [#   2] AOR linkedList4: 
--------------------------------------------------------------------------------
  81:         '''Display list as a tuple.'''
  82:         curr = self.head
  83:         display = '('
  84:         while curr:
- 85:             display += str(curr.data) + ', '
+ 85:             display += str(curr.data) - ', '
  86:             curr = curr.next
  87:         return display[:-2] + ')'
--------------------------------------------------------------------------------
[5.22286 s] incompetent

TypeError: linkedList4:85: TypeError: unsupported operand type(s) for -: 'str' and 'str'

   - [#   3] AOR linkedList4: 
--------------------------------------------------------------------------------
  83:         display = '('
  84:         while curr:
  85:             display += str(curr.data) + ', '
  86:             curr = curr.next
- 87:         return display[:-2] + ')'
+ 87:         return display[:+2] + ')'
--------------------------------------------------------------------------------
[5.21022 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_5

def test_case_5():
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        none_type_1 = None
        linked_list_2 = module_0.LinkedList(none_type_1)
        assert linked_list_2.head is None
        var_1 = linked_list_2.size()
        assert var_1 == 0
        var_2 = linked_list_0.display()
>       assert var_2 == ')'
E       AssertionError

RANDOM/test_linkedList4_RANDOM.py:75: AssertionError
   - [#   4] AOR linkedList4: 
--------------------------------------------------------------------------------
  83:         display = '('
  84:         while curr:
  85:             display += str(curr.data) + ', '
  86:             curr = curr.next
- 87:         return display[:-2] + ')'
+ 87:         return display[:-2] - ')'
--------------------------------------------------------------------------------
[5.06477 s] incompetent

TypeError: linkedList4:87: TypeError: unsupported operand type(s) for -: 'str' and 'str'

   - [#   5] ASR linkedList4: 
--------------------------------------------------------------------------------
  41:     def push(self, val):
  42:         '''Insert a value at the head of the list.'''
  43:         old_head = self.head
  44:         self.head = Node(val, old_head)
- 45:         self._length += 1
+ 45:         self._length -= 1
  46:     
  47:     def pop(self):
  48:         '''Remove the first value and return it.'''
  49:         if not (self.head):
--------------------------------------------------------------------------------
[5.41833 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_32

def test_case_32():
        bool_0 = True
        node_0 = module_0.Node(bool_0)
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        linked_list_1 = module_0.LinkedList(node_1)
        assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
        var_1 = linked_list_1.remove(none_type_1)
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
        linked_list_2 = module_0.LinkedList(node_2)
        assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
        var_2 = linked_list_2.remove(none_type_2)
        linked_list_3 = module_0.LinkedList(none_type_2)
        assert linked_list_3.head is None
        none_type_3 = None
        linked_list_4 = module_0.LinkedList(none_type_3)
        assert linked_list_4.head is None
        var_3 = linked_list_4.size()
        assert var_3 == 0
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        none_type_4 = None
        linked_list_6 = module_0.LinkedList(none_type_4)
        assert linked_list_6.head is None
        var_4 = linked_list_6.size()
        assert var_4 == 0
        var_5 = linked_list_4.display()
        assert var_5 == ')'
        none_type_5 = None
        node_3 = module_0.Node(none_type_5)
        none_type_6 = None
        linked_list_7 = module_0.LinkedList(none_type_6)
        assert linked_list_7.head is None
        var_6 = linked_list_7.size()
        assert var_6 == 0
        linked_list_8 = module_0.LinkedList()
        assert linked_list_8.head is None
        none_type_7 = None
        node_4 = module_0.Node(none_type_7)
        linked_list_9 = module_0.LinkedList(node_4)
        assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
        var_7 = linked_list_9.remove(none_type_7)
        none_type_8 = None
        linked_list_10 = module_0.LinkedList(none_type_8)
        assert linked_list_10.head is None
        var_8 = linked_list_10.size()
        assert var_8 == 0
        linked_list_11 = module_0.LinkedList()
        assert linked_list_11.head is None
        var_9 = linked_list_11.push(var_8)
        var_10 = linked_list_1.size()
>       assert var_10 == 1
E       AssertionError

RANDOM/test_linkedList4_RANDOM.py:1072: AssertionError
   - [#   6] ASR linkedList4: 
--------------------------------------------------------------------------------
  49:         if not (self.head):
  50:             raise IndexError('Cannot pop from an empty list')
  51:         to_return = self.head
  52:         self.head = self.head.next
- 53:         self._length -= 1
+ 53:         self._length += 1
  54:         return to_return.data
  55:     
  56:     def size(self):
  57:         '''Return the length of the list.'''
--------------------------------------------------------------------------------
[5.81425 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_524

def test_case_524():
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        none_type_1 = None
        linked_list_2 = module_0.LinkedList()
        assert linked_list_2.head is None
        var_1 = linked_list_2.remove(none_type_1)
        linked_list_3 = module_0.LinkedList(var_1)
        assert linked_list_3.head is None
        linked_list_4 = module_0.LinkedList()
        assert linked_list_4.head is None
        none_type_2 = None
        node_0 = module_0.Node(none_type_2)
        linked_list_5 = module_0.LinkedList(node_0)
        assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
        var_2 = linked_list_5.remove(none_type_2)
        linked_list_6 = module_0.LinkedList(none_type_2)
        assert linked_list_6.head is None
        var_3 = linked_list_5.display()
        var_4 = linked_list_5.pop()
        assert linked_list_5.head is None
        assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'linkedList4.Node'
        assert var_4.data is None
        assert var_4.next is None
        float_0 = -2869.0
        linked_list_7 = module_0.LinkedList()
        var_5 = linked_list_7.push(float_0)
        bool_0 = True
        node_1 = module_0.Node(bool_0)
        node_2 = module_0.Node(node_1)
        node_3 = module_0.Node(bool_0)
        var_6 = linked_list_7.display()
        assert var_6 == '(-2869.0)'
        bool_1 = True
        node_4 = module_0.Node(bool_1)
        none_type_3 = None
        linked_list_8 = module_0.LinkedList(none_type_3)
        var_7 = linked_list_8.size()
        assert var_7 == 0
        linked_list_9 = module_0.LinkedList()
        node_5 = module_0.Node(var_7)
        assert node_5.data == 0
        var_8 = linked_list_9.display()
        assert var_8 == ')'
        linked_list_10 = module_0.LinkedList()
        var_9 = linked_list_5.size()
>       assert var_9 == 0
E       AssertionError

RANDOM/test_linkedList4_RANDOM.py:22661: AssertionError
   - [#   7] ASR linkedList4: 
--------------------------------------------------------------------------------
  69:         '''Remove node from list if exists.'''
  70:         curr = self.head
  71:         if (curr and val is self.head.data):
  72:             self.head = self.head.next
- 73:             self._length -= 1
+ 73:             self._length += 1
  74:         while curr:
  75:             if (curr.next and curr.next.data == val):
  76:                 curr.next = curr.next.next
  77:                 self._length -= 1
--------------------------------------------------------------------------------
[2.91631 s] survived
   - [#   8] ASR linkedList4: 
--------------------------------------------------------------------------------
  73:             self._length -= 1
  74:         while curr:
  75:             if (curr.next and curr.next.data == val):
  76:                 curr.next = curr.next.next
- 77:                 self._length -= 1
+ 77:                 self._length += 1
  78:             curr = curr.next
  79:     
  80:     def display(self):
  81:         '''Display list as a tuple.'''
--------------------------------------------------------------------------------
[2.89331 s] survived
   - [#   9] ASR linkedList4: 
--------------------------------------------------------------------------------
  81:         '''Display list as a tuple.'''
  82:         curr = self.head
  83:         display = '('
  84:         while curr:
- 85:             display += str(curr.data) + ', '
+ 85:             display -= str(curr.data) + ', '
  86:             curr = curr.next
  87:         return display[:-2] + ')'
--------------------------------------------------------------------------------
[5.32287 s] incompetent

TypeError: linkedList4:85: TypeError: unsupported operand type(s) for -=: 'str' and 'str'

   - [#  10] CDI linkedList4: 
--------------------------------------------------------------------------------
   6: 
   7:     Data attribute for data storage and Next for pointer to next node.
   8:     '''
   9:     
- 10:     def __init__(self, data, next_node=None):
- 11:         '''Attribute data and next_node.'''
- 12:         self.data = data
- 13:         self.next = next_node
- 14: 
+ 10:     @classmethod
+ 11:     def __init__(self, data, next_node=None):
+ 12:         '''Attribute data and next_node.'''
+ 13:         self.data = data
+ 14:         self.next = next_node
  15: 
  16: class LinkedList(object):
  17:     '''Method for linked list.
  18: 
--------------------------------------------------------------------------------
[5.13171 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_121

def test_case_121():
        complex_0 = -2363.678516 + 1356.37j
        node_0 = module_0.Node(complex_0)
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        var_1 = linked_list_0.display()
        assert var_1 == ')'
        var_2 = linked_list_0.search(none_type_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        linked_list_1 = module_0.LinkedList(node_1)
        assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
        var_3 = linked_list_1.remove(none_type_1)
        linked_list_2 = module_0.LinkedList(none_type_1)
        assert linked_list_2.head is None
        none_type_2 = None
        linked_list_3 = module_0.LinkedList(none_type_2)
        assert linked_list_3.head is None
        var_4 = linked_list_3.size()
        assert var_4 == 0
        linked_list_4 = module_0.LinkedList()
        assert linked_list_4.head is None
        none_type_3 = None
        linked_list_5 = module_0.LinkedList(none_type_3)
        assert linked_list_5.head is None
        var_5 = linked_list_5.size()
        assert var_5 == 0
        var_6 = linked_list_3.display()
        assert var_6 == ')'
        bool_0 = True
        node_2 = module_0.Node(bool_0)
        none_type_4 = None
        linked_list_6 = module_0.LinkedList(none_type_4)
        assert linked_list_6.head is None
        var_7 = linked_list_6.size()
        assert var_7 == 0
        linked_list_7 = module_0.LinkedList()
        assert linked_list_7.head is None
        node_3 = module_0.Node(var_7)
        assert node_3.data == 0
        var_8 = linked_list_7.display()
        assert var_8 == ')'
        none_type_5 = None
        node_4 = module_0.Node(none_type_5)
        linked_list_8 = module_0.LinkedList(node_4)
        assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
        var_9 = linked_list_8.remove(none_type_5)
        linked_list_9 = module_0.LinkedList(none_type_5)
        assert linked_list_9.head is None
        var_10 = linked_list_8.display()
        linked_list_10 = module_0.LinkedList()
        assert linked_list_10.head is None
        none_type_6 = None
        node_5 = module_0.Node(none_type_6)
        linked_list_11 = module_0.LinkedList(node_5)
        assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
        var_11 = linked_list_11.remove(none_type_6)
        none_type_7 = None
        linked_list_12 = module_0.LinkedList(none_type_7)
        assert linked_list_12.head is None
        var_12 = linked_list_12.size()
        assert var_12 == 0
        linked_list_13 = module_0.LinkedList()
        assert linked_list_13.head is None
        var_13 = linked_list_13.push(var_12)
        bool_1 = True
        node_6 = module_0.Node(bool_1)
        node_7 = module_0.Node(bool_1)
        none_type_8 = None
        linked_list_14 = module_0.LinkedList(none_type_8)
        assert linked_list_14.head is None
        var_14 = linked_list_14.size()
        assert var_14 == 0
        linked_list_15 = module_0.LinkedList()
        assert linked_list_15.head is None
        node_8 = module_0.Node(var_14)
        assert node_8.data == 0
        var_15 = linked_list_1.pop()
        assert linked_list_1.head is None
>       assert f'{type(var_15).__module__}.{type(var_15).__qualname__}' == 'linkedList4.Node'
E       AssertionError

RANDOM/test_linkedList4_RANDOM.py:5142: AssertionError
   - [#  11] CDI linkedList4: 
--------------------------------------------------------------------------------
  26:     display() - will return a unicode string representing the list as
  27:     if it were a Python tuple literal: "(12, \'sam\', 37, \'tango\')"
  28:     '''
  29:     
- 30:     def __init__(self, data=None):
- 31:         '''Linked list initialized with head.'''
- 32:         self._length = 0
- 33:         self.head = None
- 34:         try:
- 35:             for val in data:
- 36:                 self.push(val)
- 37:         except TypeError:
- 38:             if data:
- 39:                 self.push(data)
- 40:     
+ 30:     @classmethod
+ 31:     def __init__(self, data=None):
+ 32:         '''Linked list initialized with head.'''
+ 33:         self._length = 0
+ 34:         self.head = None
+ 35:         try:
+ 36:             for val in data:
+ 37:                 self.push(val)
+ 38:         except TypeError:
+ 39:             if data:
+ 40:                 self.push(data)
  41:     def push(self, val):
  42:         '''Insert a value at the head of the list.'''
  43:         old_head = self.head
  44:         self.head = Node(val, old_head)
--------------------------------------------------------------------------------
[5.19098 s] incompetent

TypeError: linkedList4:40: TypeError: LinkedList.push() missing 1 required positional argument: 'val'

   - [#  12] CDI linkedList4: 
--------------------------------------------------------------------------------
  37:         except TypeError:
  38:             if data:
  39:                 self.push(data)
  40:     
- 41:     def push(self, val):
- 42:         '''Insert a value at the head of the list.'''
- 43:         old_head = self.head
- 44:         self.head = Node(val, old_head)
- 45:         self._length += 1
- 46:     
+ 41:     @classmethod
+ 42:     def push(self, val):
+ 43:         '''Insert a value at the head of the list.'''
+ 44:         old_head = self.head
+ 45:         self.head = Node(val, old_head)
+ 46:         self._length += 1
  47:     def pop(self):
  48:         '''Remove the first value and return it.'''
  49:         if not (self.head):
  50:             raise IndexError('Cannot pop from an empty list')
--------------------------------------------------------------------------------
[5.03050 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_9

self = <linkedList4.LinkedList object at 0x7eff4c812110>
data = <linkedList4.Node object at 0x7eff4c811e40>

>   ???
E   TypeError: 'Node' object is not iterable

linkedList4:35: TypeError

During handling of the above exception, another exception occurred:

    def test_case_9():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
>       linked_list_0 = module_0.LinkedList(node_0)

RANDOM/test_linkedList4_RANDOM.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
linkedList4:39: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linkedList4.LinkedList'>
val = <linkedList4.Node object at 0x7eff4c811e40>

>   ???
E   AttributeError: type object 'LinkedList' has no attribute 'head'

linkedList4:44: AttributeError
   - [#  13] CDI linkedList4: 
--------------------------------------------------------------------------------
  43:         old_head = self.head
  44:         self.head = Node(val, old_head)
  45:         self._length += 1
  46:     
- 47:     def pop(self):
- 48:         '''Remove the first value and return it.'''
- 49:         if not (self.head):
- 50:             raise IndexError('Cannot pop from an empty list')
- 51:         to_return = self.head
- 52:         self.head = self.head.next
- 53:         self._length -= 1
- 54:         return to_return.data
- 55:     
+ 47:     @classmethod
+ 48:     def pop(self):
+ 49:         '''Remove the first value and return it.'''
+ 50:         if not (self.head):
+ 51:             raise IndexError('Cannot pop from an empty list')
+ 52:         to_return = self.head
+ 53:         self.head = self.head.next
+ 54:         self._length -= 1
+ 55:         return to_return.data
  56:     def size(self):
  57:         '''Return the length of the list.'''
  58:         return self._length
  59:     
--------------------------------------------------------------------------------
[5.12696 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_121

def test_case_121():
        complex_0 = -2363.678516 + 1356.37j
        node_0 = module_0.Node(complex_0)
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        var_1 = linked_list_0.display()
        assert var_1 == ')'
        var_2 = linked_list_0.search(none_type_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        linked_list_1 = module_0.LinkedList(node_1)
        assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
        var_3 = linked_list_1.remove(none_type_1)
        linked_list_2 = module_0.LinkedList(none_type_1)
        assert linked_list_2.head is None
        none_type_2 = None
        linked_list_3 = module_0.LinkedList(none_type_2)
        assert linked_list_3.head is None
        var_4 = linked_list_3.size()
        assert var_4 == 0
        linked_list_4 = module_0.LinkedList()
        assert linked_list_4.head is None
        none_type_3 = None
        linked_list_5 = module_0.LinkedList(none_type_3)
        assert linked_list_5.head is None
        var_5 = linked_list_5.size()
        assert var_5 == 0
        var_6 = linked_list_3.display()
        assert var_6 == ')'
        bool_0 = True
        node_2 = module_0.Node(bool_0)
        none_type_4 = None
        linked_list_6 = module_0.LinkedList(none_type_4)
        assert linked_list_6.head is None
        var_7 = linked_list_6.size()
        assert var_7 == 0
        linked_list_7 = module_0.LinkedList()
        assert linked_list_7.head is None
        node_3 = module_0.Node(var_7)
        assert node_3.data == 0
        var_8 = linked_list_7.display()
        assert var_8 == ')'
        none_type_5 = None
        node_4 = module_0.Node(none_type_5)
        linked_list_8 = module_0.LinkedList(node_4)
        assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
        var_9 = linked_list_8.remove(none_type_5)
        linked_list_9 = module_0.LinkedList(none_type_5)
        assert linked_list_9.head is None
        var_10 = linked_list_8.display()
        linked_list_10 = module_0.LinkedList()
        assert linked_list_10.head is None
        none_type_6 = None
        node_5 = module_0.Node(none_type_6)
        linked_list_11 = module_0.LinkedList(node_5)
        assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
        var_11 = linked_list_11.remove(none_type_6)
        none_type_7 = None
        linked_list_12 = module_0.LinkedList(none_type_7)
        assert linked_list_12.head is None
        var_12 = linked_list_12.size()
        assert var_12 == 0
        linked_list_13 = module_0.LinkedList()
        assert linked_list_13.head is None
        var_13 = linked_list_13.push(var_12)
        bool_1 = True
        node_6 = module_0.Node(bool_1)
        node_7 = module_0.Node(bool_1)
        none_type_8 = None
        linked_list_14 = module_0.LinkedList(none_type_8)
        assert linked_list_14.head is None
        var_14 = linked_list_14.size()
        assert var_14 == 0
        linked_list_15 = module_0.LinkedList()
        assert linked_list_15.head is None
        node_8 = module_0.Node(var_14)
        assert node_8.data == 0
>       var_15 = linked_list_1.pop()

RANDOM/test_linkedList4_RANDOM.py:5140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linkedList4.LinkedList'>

>   ???
E   AttributeError: type object 'LinkedList' has no attribute 'head'

linkedList4:50: AttributeError
   - [#  14] CDI linkedList4: 
--------------------------------------------------------------------------------
  52:         self.head = self.head.next
  53:         self._length -= 1
  54:         return to_return.data
  55:     
- 56:     def size(self):
- 57:         '''Return the length of the list.'''
- 58:         return self._length
- 59:     
+ 56:     @classmethod
+ 57:     def size(self):
+ 58:         '''Return the length of the list.'''
+ 59:         return self._length
  60:     def search(self, val):
  61:         '''Return the node containing val.'''
  62:         curr = self.head
  63:         while curr:
--------------------------------------------------------------------------------
[5.05275 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_0

def test_case_0():
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
>       var_0 = linked_list_0.size()

RANDOM/test_linkedList4_RANDOM.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linkedList4.LinkedList'>

>   ???
E   AttributeError: type object 'LinkedList' has no attribute '_length'

linkedList4:59: AttributeError
   - [#  15] CDI linkedList4: 
--------------------------------------------------------------------------------
  56:     def size(self):
  57:         '''Return the length of the list.'''
  58:         return self._length
  59:     
- 60:     def search(self, val):
- 61:         '''Return the node containing val.'''
- 62:         curr = self.head
- 63:         while curr:
- 64:             if curr.data == val:
- 65:                 return curr
- 66:             curr = curr.next
- 67:     
+ 60:     @classmethod
+ 61:     def search(self, val):
+ 62:         '''Return the node containing val.'''
+ 63:         curr = self.head
+ 64:         while curr:
+ 65:             if curr.data == val:
+ 66:                 return curr
+ 67:             curr = curr.next
  68:     def remove(self, val):
  69:         '''Remove node from list if exists.'''
  70:         curr = self.head
  71:         if (curr and val is self.head.data):
--------------------------------------------------------------------------------
[4.97157 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_8

def test_case_8():
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        none_type_1 = None
        linked_list_2 = module_0.LinkedList(none_type_1)
        assert linked_list_2.head is None
        var_1 = linked_list_2.size()
        assert var_1 == 0
        var_2 = linked_list_0.display()
        assert var_2 == ')'
>       var_3 = linked_list_0.search(var_2)

RANDOM/test_linkedList4_RANDOM.py:150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linkedList4.LinkedList'>, val = ')'

>   ???
E   AttributeError: type object 'LinkedList' has no attribute 'head'

linkedList4:63: AttributeError
   - [#  16] CDI linkedList4: 
--------------------------------------------------------------------------------
  64:             if curr.data == val:
  65:                 return curr
  66:             curr = curr.next
  67:     
- 68:     def remove(self, val):
- 69:         '''Remove node from list if exists.'''
- 70:         curr = self.head
- 71:         if (curr and val is self.head.data):
- 72:             self.head = self.head.next
- 73:             self._length -= 1
- 74:         while curr:
- 75:             if (curr.next and curr.next.data == val):
- 76:                 curr.next = curr.next.next
- 77:                 self._length -= 1
- 78:             curr = curr.next
- 79:     
+ 68:     @classmethod
+ 69:     def remove(self, val):
+ 70:         '''Remove node from list if exists.'''
+ 71:         curr = self.head
+ 72:         if (curr and val is self.head.data):
+ 73:             self.head = self.head.next
+ 74:             self._length -= 1
+ 75:         while curr:
+ 76:             if (curr.next and curr.next.data == val):
+ 77:                 curr.next = curr.next.next
+ 78:                 self._length -= 1
+ 79:             curr = curr.next
  80:     def display(self):
  81:         '''Display list as a tuple.'''
  82:         curr = self.head
  83:         display = '('
--------------------------------------------------------------------------------
[5.09057 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_9

def test_case_9():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        linked_list_0 = module_0.LinkedList(node_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
>       var_0 = linked_list_0.remove(none_type_0)

RANDOM/test_linkedList4_RANDOM.py:158: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linkedList4.LinkedList'>, val = None

>   ???
E   AttributeError: type object 'LinkedList' has no attribute 'head'

linkedList4:71: AttributeError
   - [#  17] CDI linkedList4: 
--------------------------------------------------------------------------------
  76:                 curr.next = curr.next.next
  77:                 self._length -= 1
  78:             curr = curr.next
  79:     
- 80:     def display(self):
- 81:         '''Display list as a tuple.'''
- 82:         curr = self.head
- 83:         display = '('
- 84:         while curr:
- 85:             display += str(curr.data) + ', '
- 86:             curr = curr.next
- 87:         return display[:-2] + ')'
+ 80:     @classmethod
+ 81:     def display(self):
+ 82:         '''Display list as a tuple.'''
+ 83:         curr = self.head
+ 84:         display = '('
+ 85:         while curr:
+ 86:             display += str(curr.data) + ', '
+ 87:             curr = curr.next
+ 88:         return display[:-2] + ')'
--------------------------------------------------------------------------------
[5.34334 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_5

def test_case_5():
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        none_type_1 = None
        linked_list_2 = module_0.LinkedList(none_type_1)
        assert linked_list_2.head is None
        var_1 = linked_list_2.size()
        assert var_1 == 0
>       var_2 = linked_list_0.display()

RANDOM/test_linkedList4_RANDOM.py:74: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linkedList4.LinkedList'>

>   ???
E   AttributeError: type object 'LinkedList' has no attribute 'head'

linkedList4:83: AttributeError
   - [#  18] COD linkedList4: 
--------------------------------------------------------------------------------
  45:         self._length += 1
  46:     
  47:     def pop(self):
  48:         '''Remove the first value and return it.'''
- 49:         if not (self.head):
+ 49:         if self.head:
  50:             raise IndexError('Cannot pop from an empty list')
  51:         to_return = self.head
  52:         self.head = self.head.next
  53:         self._length -= 1
--------------------------------------------------------------------------------
[5.35840 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_121

def test_case_121():
        complex_0 = -2363.678516 + 1356.37j
        node_0 = module_0.Node(complex_0)
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        var_1 = linked_list_0.display()
        assert var_1 == ')'
        var_2 = linked_list_0.search(none_type_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        linked_list_1 = module_0.LinkedList(node_1)
        assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
        var_3 = linked_list_1.remove(none_type_1)
        linked_list_2 = module_0.LinkedList(none_type_1)
        assert linked_list_2.head is None
        none_type_2 = None
        linked_list_3 = module_0.LinkedList(none_type_2)
        assert linked_list_3.head is None
        var_4 = linked_list_3.size()
        assert var_4 == 0
        linked_list_4 = module_0.LinkedList()
        assert linked_list_4.head is None
        none_type_3 = None
        linked_list_5 = module_0.LinkedList(none_type_3)
        assert linked_list_5.head is None
        var_5 = linked_list_5.size()
        assert var_5 == 0
        var_6 = linked_list_3.display()
        assert var_6 == ')'
        bool_0 = True
        node_2 = module_0.Node(bool_0)
        none_type_4 = None
        linked_list_6 = module_0.LinkedList(none_type_4)
        assert linked_list_6.head is None
        var_7 = linked_list_6.size()
        assert var_7 == 0
        linked_list_7 = module_0.LinkedList()
        assert linked_list_7.head is None
        node_3 = module_0.Node(var_7)
        assert node_3.data == 0
        var_8 = linked_list_7.display()
        assert var_8 == ')'
        none_type_5 = None
        node_4 = module_0.Node(none_type_5)
        linked_list_8 = module_0.LinkedList(node_4)
        assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
        var_9 = linked_list_8.remove(none_type_5)
        linked_list_9 = module_0.LinkedList(none_type_5)
        assert linked_list_9.head is None
        var_10 = linked_list_8.display()
        linked_list_10 = module_0.LinkedList()
        assert linked_list_10.head is None
        none_type_6 = None
        node_5 = module_0.Node(none_type_6)
        linked_list_11 = module_0.LinkedList(node_5)
        assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
        var_11 = linked_list_11.remove(none_type_6)
        none_type_7 = None
        linked_list_12 = module_0.LinkedList(none_type_7)
        assert linked_list_12.head is None
        var_12 = linked_list_12.size()
        assert var_12 == 0
        linked_list_13 = module_0.LinkedList()
        assert linked_list_13.head is None
        var_13 = linked_list_13.push(var_12)
        bool_1 = True
        node_6 = module_0.Node(bool_1)
        node_7 = module_0.Node(bool_1)
        none_type_8 = None
        linked_list_14 = module_0.LinkedList(none_type_8)
        assert linked_list_14.head is None
        var_14 = linked_list_14.size()
        assert var_14 == 0
        linked_list_15 = module_0.LinkedList()
        assert linked_list_15.head is None
        node_8 = module_0.Node(var_14)
        assert node_8.data == 0
>       var_15 = linked_list_1.pop()

RANDOM/test_linkedList4_RANDOM.py:5140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList4.LinkedList object at 0x7eff50285ff0>

>   ???
E   IndexError: Cannot pop from an empty list

linkedList4:50: IndexError
   - [#  19] COI linkedList4: 
--------------------------------------------------------------------------------
  34:         try:
  35:             for val in data:
  36:                 self.push(val)
  37:         except TypeError:
- 38:             if data:
+ 38:             if not data:
  39:                 self.push(data)
  40:     
  41:     def push(self, val):
  42:         '''Insert a value at the head of the list.'''
--------------------------------------------------------------------------------
[5.21204 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_0

def test_case_0():
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
>       assert linked_list_0.head is None
E       AssertionError

RANDOM/test_linkedList4_RANDOM.py:10: AssertionError
   - [#  20] COI linkedList4: 
--------------------------------------------------------------------------------
  45:         self._length += 1
  46:     
  47:     def pop(self):
  48:         '''Remove the first value and return it.'''
- 49:         if not (self.head):
+ 49:         if not ((not (self.head))):
  50:             raise IndexError('Cannot pop from an empty list')
  51:         to_return = self.head
  52:         self.head = self.head.next
  53:         self._length -= 1
--------------------------------------------------------------------------------
[5.16625 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_121

def test_case_121():
        complex_0 = -2363.678516 + 1356.37j
        node_0 = module_0.Node(complex_0)
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        var_1 = linked_list_0.display()
        assert var_1 == ')'
        var_2 = linked_list_0.search(none_type_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        linked_list_1 = module_0.LinkedList(node_1)
        assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
        var_3 = linked_list_1.remove(none_type_1)
        linked_list_2 = module_0.LinkedList(none_type_1)
        assert linked_list_2.head is None
        none_type_2 = None
        linked_list_3 = module_0.LinkedList(none_type_2)
        assert linked_list_3.head is None
        var_4 = linked_list_3.size()
        assert var_4 == 0
        linked_list_4 = module_0.LinkedList()
        assert linked_list_4.head is None
        none_type_3 = None
        linked_list_5 = module_0.LinkedList(none_type_3)
        assert linked_list_5.head is None
        var_5 = linked_list_5.size()
        assert var_5 == 0
        var_6 = linked_list_3.display()
        assert var_6 == ')'
        bool_0 = True
        node_2 = module_0.Node(bool_0)
        none_type_4 = None
        linked_list_6 = module_0.LinkedList(none_type_4)
        assert linked_list_6.head is None
        var_7 = linked_list_6.size()
        assert var_7 == 0
        linked_list_7 = module_0.LinkedList()
        assert linked_list_7.head is None
        node_3 = module_0.Node(var_7)
        assert node_3.data == 0
        var_8 = linked_list_7.display()
        assert var_8 == ')'
        none_type_5 = None
        node_4 = module_0.Node(none_type_5)
        linked_list_8 = module_0.LinkedList(node_4)
        assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
        var_9 = linked_list_8.remove(none_type_5)
        linked_list_9 = module_0.LinkedList(none_type_5)
        assert linked_list_9.head is None
        var_10 = linked_list_8.display()
        linked_list_10 = module_0.LinkedList()
        assert linked_list_10.head is None
        none_type_6 = None
        node_5 = module_0.Node(none_type_6)
        linked_list_11 = module_0.LinkedList(node_5)
        assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
        var_11 = linked_list_11.remove(none_type_6)
        none_type_7 = None
        linked_list_12 = module_0.LinkedList(none_type_7)
        assert linked_list_12.head is None
        var_12 = linked_list_12.size()
        assert var_12 == 0
        linked_list_13 = module_0.LinkedList()
        assert linked_list_13.head is None
        var_13 = linked_list_13.push(var_12)
        bool_1 = True
        node_6 = module_0.Node(bool_1)
        node_7 = module_0.Node(bool_1)
        none_type_8 = None
        linked_list_14 = module_0.LinkedList(none_type_8)
        assert linked_list_14.head is None
        var_14 = linked_list_14.size()
        assert var_14 == 0
        linked_list_15 = module_0.LinkedList()
        assert linked_list_15.head is None
        node_8 = module_0.Node(var_14)
        assert node_8.data == 0
>       var_15 = linked_list_1.pop()

RANDOM/test_linkedList4_RANDOM.py:5140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList4.LinkedList object at 0x7eff51877880>

>   ???
E   IndexError: Cannot pop from an empty list

linkedList4:50: IndexError
   - [#  21] COI linkedList4: 
--------------------------------------------------------------------------------
  59:     
  60:     def search(self, val):
  61:         '''Return the node containing val.'''
  62:         curr = self.head
- 63:         while curr:
+ 63:         while not curr:
  64:             if curr.data == val:
  65:                 return curr
  66:             curr = curr.next
  67:     
--------------------------------------------------------------------------------
[5.43884 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_8

def test_case_8():
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        none_type_1 = None
        linked_list_2 = module_0.LinkedList(none_type_1)
        assert linked_list_2.head is None
        var_1 = linked_list_2.size()
        assert var_1 == 0
        var_2 = linked_list_0.display()
        assert var_2 == ')'
>       var_3 = linked_list_0.search(var_2)

RANDOM/test_linkedList4_RANDOM.py:150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList4.LinkedList object at 0x7eff51876a10>, val = ')'

>   ???
E   AttributeError: 'NoneType' object has no attribute 'data'

linkedList4:64: AttributeError
   - [#  22] COI linkedList4: 
--------------------------------------------------------------------------------
  60:     def search(self, val):
  61:         '''Return the node containing val.'''
  62:         curr = self.head
  63:         while curr:
- 64:             if curr.data == val:
+ 64:             if not (curr.data == val):
  65:                 return curr
  66:             curr = curr.next
  67:     
  68:     def remove(self, val):
--------------------------------------------------------------------------------
[5.78616 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_365

def test_case_365():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        linked_list_0 = module_0.LinkedList(node_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
        var_0 = linked_list_0.remove(none_type_0)
        linked_list_1 = module_0.LinkedList(none_type_0)
        assert linked_list_1.head is None
        var_1 = linked_list_0.display()
        int_0 = 1454
        linked_list_2 = module_0.LinkedList()
        assert linked_list_2.head is None
        var_2 = linked_list_2.search(int_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        linked_list_3 = module_0.LinkedList(node_1)
        assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
        var_3 = linked_list_3.remove(none_type_1)
        linked_list_4 = module_0.LinkedList()
        assert linked_list_4.head is None
        node_2 = module_0.Node(linked_list_3, linked_list_2)
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        none_type_2 = None
        node_3 = module_0.Node(none_type_2)
        linked_list_6 = module_0.LinkedList(node_3)
        assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
        var_4 = linked_list_6.remove(none_type_2)
        var_5 = linked_list_6.push(none_type_2)
        bool_0 = True
        node_4 = module_0.Node(bool_0)
        none_type_3 = None
        linked_list_7 = module_0.LinkedList(none_type_3)
        assert linked_list_7.head is None
        var_6 = linked_list_7.size()
        assert var_6 == 0
        var_7 = linked_list_7.display()
        assert var_7 == ')'
        linked_list_8 = module_0.LinkedList()
        assert linked_list_8.head is None
        none_type_4 = None
        node_5 = module_0.Node(none_type_4)
        linked_list_9 = module_0.LinkedList(node_5)
        assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
        var_8 = linked_list_9.remove(none_type_4)
        none_type_5 = None
        linked_list_10 = module_0.LinkedList(none_type_5)
        assert linked_list_10.head is None
        var_9 = linked_list_10.size()
        assert var_9 == 0
        linked_list_11 = module_0.LinkedList()
        assert linked_list_11.head is None
        var_10 = linked_list_11.push(var_9)
        float_0 = 2634.854
        dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
        bool_1 = True
        list_0 = [dict_0]
        list_1 = [bool_1, float_0]
        tuple_0 = (list_1,)
        tuple_1 = (dict_0, bool_1, list_0, tuple_0)
        node_6 = module_0.Node(tuple_1)
        int_1 = 1454
        linked_list_12 = module_0.LinkedList()
        assert linked_list_12.head is None
        var_11 = linked_list_12.search(int_1)
        complex_0 = -2363.678516 + 1356.37j
        node_7 = module_0.Node(complex_0)
        node_8 = module_0.Node(node_7)
        var_12 = linked_list_6.search(var_0)
        assert f'{type(var_12).__module__}.{type(var_12).__qualname__}' == 'linkedList4.Node'
>       assert var_12.data is None
E       AssertionError

RANDOM/test_linkedList4_RANDOM.py:15505: AssertionError
   - [#  23] COI linkedList4: 
--------------------------------------------------------------------------------
  67:     
  68:     def remove(self, val):
  69:         '''Remove node from list if exists.'''
  70:         curr = self.head
- 71:         if (curr and val is self.head.data):
+ 71:         if not ((curr and val is self.head.data)):
  72:             self.head = self.head.next
  73:             self._length -= 1
  74:         while curr:
  75:             if (curr.next and curr.next.data == val):
--------------------------------------------------------------------------------
[5.23758 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_12

def test_case_12():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        linked_list_0 = module_0.LinkedList(node_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
        var_0 = linked_list_0.remove(none_type_1)
        none_type_2 = None
        linked_list_1 = module_0.LinkedList(none_type_2)
        assert linked_list_1.head is None
        var_1 = linked_list_1.size()
        assert var_1 == 0
        linked_list_2 = module_0.LinkedList()
        assert linked_list_2.head is None
        none_type_3 = None
        linked_list_3 = module_0.LinkedList(none_type_3)
        assert linked_list_3.head is None
        var_2 = linked_list_3.size()
        assert var_2 == 0
        var_3 = linked_list_1.display()
        assert var_3 == ')'
        none_type_4 = None
        linked_list_4 = module_0.LinkedList(none_type_4)
        assert linked_list_4.head is None
        var_4 = linked_list_4.size()
        assert var_4 == 0
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        none_type_5 = None
        node_2 = module_0.Node(none_type_5)
        none_type_6 = None
        linked_list_6 = module_0.LinkedList(none_type_6)
        assert linked_list_6.head is None
        var_5 = linked_list_6.size()
        assert var_5 == 0
        var_6 = linked_list_6.size()
        assert var_6 == 0
>       var_7 = linked_list_0.remove(node_1)

RANDOM/test_linkedList4_RANDOM.py:304: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList4.LinkedList object at 0x7eff5033ae00>
val = <linkedList4.Node object at 0x7eff5033a530>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

linkedList4:72: AttributeError
   - [#  24] COI linkedList4: 
--------------------------------------------------------------------------------
  70:         curr = self.head
  71:         if (curr and val is self.head.data):
  72:             self.head = self.head.next
  73:             self._length -= 1
- 74:         while curr:
+ 74:         while not curr:
  75:             if (curr.next and curr.next.data == val):
  76:                 curr.next = curr.next.next
  77:                 self._length -= 1
  78:             curr = curr.next
--------------------------------------------------------------------------------
[5.06740 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_19

def test_case_19():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        linked_list_0 = module_0.LinkedList(node_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
        var_0 = linked_list_0.remove(none_type_0)
        linked_list_1 = module_0.LinkedList(none_type_0)
        assert linked_list_1.head is None
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        linked_list_2 = module_0.LinkedList(node_1)
        assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
        var_1 = linked_list_2.remove(none_type_1)
        none_type_2 = None
        linked_list_3 = module_0.LinkedList(none_type_2)
        assert linked_list_3.head is None
        var_2 = linked_list_3.size()
        assert var_2 == 0
        linked_list_4 = module_0.LinkedList()
        assert linked_list_4.head is None
        none_type_3 = None
        linked_list_5 = module_0.LinkedList(none_type_3)
        assert linked_list_5.head is None
        var_3 = linked_list_5.size()
        assert var_3 == 0
        var_4 = linked_list_3.display()
        assert var_4 == ')'
        none_type_4 = None
        linked_list_6 = module_0.LinkedList(none_type_4)
        assert linked_list_6.head is None
        var_5 = linked_list_6.size()
        assert var_5 == 0
        linked_list_7 = module_0.LinkedList()
        assert linked_list_7.head is None
        none_type_5 = None
        linked_list_8 = module_0.LinkedList(none_type_5)
        assert linked_list_8.head is None
        var_6 = linked_list_8.size()
        assert var_6 == 0
        var_7 = linked_list_6.display()
        assert var_7 == ')'
        var_8 = linked_list_6.search(var_7)
        none_type_6 = None
        linked_list_9 = module_0.LinkedList(none_type_6)
        assert linked_list_9.head is None
        var_9 = linked_list_9.size()
        assert var_9 == 0
        linked_list_10 = module_0.LinkedList()
        assert linked_list_10.head is None
        none_type_7 = None
        node_2 = module_0.Node(none_type_7)
>       var_10 = linked_list_6.remove(var_8)

RANDOM/test_linkedList4_RANDOM.py:551: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList4.LinkedList object at 0x7eff4ebbd1b0>, val = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

linkedList4:75: AttributeError
   - [#  25] COI linkedList4: 
--------------------------------------------------------------------------------
  71:         if (curr and val is self.head.data):
  72:             self.head = self.head.next
  73:             self._length -= 1
  74:         while curr:
- 75:             if (curr.next and curr.next.data == val):
+ 75:             if not ((curr.next and curr.next.data == val)):
  76:                 curr.next = curr.next.next
  77:                 self._length -= 1
  78:             curr = curr.next
  79:     
--------------------------------------------------------------------------------
[5.20120 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_9

def test_case_9():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        linked_list_0 = module_0.LinkedList(node_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
>       var_0 = linked_list_0.remove(none_type_0)

RANDOM/test_linkedList4_RANDOM.py:158: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList4.LinkedList object at 0x7eff5033b3a0>, val = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

linkedList4:76: AttributeError
   - [#  26] COI linkedList4: 
--------------------------------------------------------------------------------
  80:     def display(self):
  81:         '''Display list as a tuple.'''
  82:         curr = self.head
  83:         display = '('
- 84:         while curr:
+ 84:         while not curr:
  85:             display += str(curr.data) + ', '
  86:             curr = curr.next
  87:         return display[:-2] + ')'
--------------------------------------------------------------------------------
[5.13297 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_5

def test_case_5():
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        none_type_1 = None
        linked_list_2 = module_0.LinkedList(none_type_1)
        assert linked_list_2.head is None
        var_1 = linked_list_2.size()
        assert var_1 == 0
>       var_2 = linked_list_0.display()

RANDOM/test_linkedList4_RANDOM.py:74: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList4.LinkedList object at 0x7eff4ebbee30>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'data'

linkedList4:85: AttributeError
   - [#  27] CRP linkedList4: 
--------------------------------------------------------------------------------
  28:     '''
  29:     
  30:     def __init__(self, data=None):
  31:         '''Linked list initialized with head.'''
- 32:         self._length = 0
+ 32:         self._length = 1
  33:         self.head = None
  34:         try:
  35:             for val in data:
  36:                 self.push(val)
--------------------------------------------------------------------------------
[5.26636 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_0

def test_case_0():
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
>       assert var_0 == 0
E       AssertionError

RANDOM/test_linkedList4_RANDOM.py:12: AssertionError
   - [#  28] CRP linkedList4: 
--------------------------------------------------------------------------------
  41:     def push(self, val):
  42:         '''Insert a value at the head of the list.'''
  43:         old_head = self.head
  44:         self.head = Node(val, old_head)
- 45:         self._length += 1
+ 45:         self._length += 2
  46:     
  47:     def pop(self):
  48:         '''Remove the first value and return it.'''
  49:         if not (self.head):
--------------------------------------------------------------------------------
[5.73571 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_32

def test_case_32():
        bool_0 = True
        node_0 = module_0.Node(bool_0)
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        linked_list_1 = module_0.LinkedList(node_1)
        assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
        var_1 = linked_list_1.remove(none_type_1)
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
        linked_list_2 = module_0.LinkedList(node_2)
        assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
        var_2 = linked_list_2.remove(none_type_2)
        linked_list_3 = module_0.LinkedList(none_type_2)
        assert linked_list_3.head is None
        none_type_3 = None
        linked_list_4 = module_0.LinkedList(none_type_3)
        assert linked_list_4.head is None
        var_3 = linked_list_4.size()
        assert var_3 == 0
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        none_type_4 = None
        linked_list_6 = module_0.LinkedList(none_type_4)
        assert linked_list_6.head is None
        var_4 = linked_list_6.size()
        assert var_4 == 0
        var_5 = linked_list_4.display()
        assert var_5 == ')'
        none_type_5 = None
        node_3 = module_0.Node(none_type_5)
        none_type_6 = None
        linked_list_7 = module_0.LinkedList(none_type_6)
        assert linked_list_7.head is None
        var_6 = linked_list_7.size()
        assert var_6 == 0
        linked_list_8 = module_0.LinkedList()
        assert linked_list_8.head is None
        none_type_7 = None
        node_4 = module_0.Node(none_type_7)
        linked_list_9 = module_0.LinkedList(node_4)
        assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
        var_7 = linked_list_9.remove(none_type_7)
        none_type_8 = None
        linked_list_10 = module_0.LinkedList(none_type_8)
        assert linked_list_10.head is None
        var_8 = linked_list_10.size()
        assert var_8 == 0
        linked_list_11 = module_0.LinkedList()
        assert linked_list_11.head is None
        var_9 = linked_list_11.push(var_8)
        var_10 = linked_list_1.size()
>       assert var_10 == 1
E       AssertionError

RANDOM/test_linkedList4_RANDOM.py:1072: AssertionError
   - [#  29] CRP linkedList4: 
--------------------------------------------------------------------------------
  46:     
  47:     def pop(self):
  48:         '''Remove the first value and return it.'''
  49:         if not (self.head):
- 50:             raise IndexError('Cannot pop from an empty list')
+ 50:             raise IndexError('mutpy')
  51:         to_return = self.head
  52:         self.head = self.head.next
  53:         self._length -= 1
  54:         return to_return.data
--------------------------------------------------------------------------------
[2.77271 s] survived
   - [#  30] CRP linkedList4: 
--------------------------------------------------------------------------------
  46:     
  47:     def pop(self):
  48:         '''Remove the first value and return it.'''
  49:         if not (self.head):
- 50:             raise IndexError('Cannot pop from an empty list')
+ 50:             raise IndexError('')
  51:         to_return = self.head
  52:         self.head = self.head.next
  53:         self._length -= 1
  54:         return to_return.data
--------------------------------------------------------------------------------
[2.84986 s] survived
   - [#  31] CRP linkedList4: 
--------------------------------------------------------------------------------
  49:         if not (self.head):
  50:             raise IndexError('Cannot pop from an empty list')
  51:         to_return = self.head
  52:         self.head = self.head.next
- 53:         self._length -= 1
+ 53:         self._length -= 2
  54:         return to_return.data
  55:     
  56:     def size(self):
  57:         '''Return the length of the list.'''
--------------------------------------------------------------------------------
[5.66331 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_524

def test_case_524():
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        none_type_1 = None
        linked_list_2 = module_0.LinkedList()
        assert linked_list_2.head is None
        var_1 = linked_list_2.remove(none_type_1)
        linked_list_3 = module_0.LinkedList(var_1)
        assert linked_list_3.head is None
        linked_list_4 = module_0.LinkedList()
        assert linked_list_4.head is None
        none_type_2 = None
        node_0 = module_0.Node(none_type_2)
        linked_list_5 = module_0.LinkedList(node_0)
        assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
        var_2 = linked_list_5.remove(none_type_2)
        linked_list_6 = module_0.LinkedList(none_type_2)
        assert linked_list_6.head is None
        var_3 = linked_list_5.display()
        var_4 = linked_list_5.pop()
        assert linked_list_5.head is None
        assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'linkedList4.Node'
        assert var_4.data is None
        assert var_4.next is None
        float_0 = -2869.0
        linked_list_7 = module_0.LinkedList()
        var_5 = linked_list_7.push(float_0)
        bool_0 = True
        node_1 = module_0.Node(bool_0)
        node_2 = module_0.Node(node_1)
        node_3 = module_0.Node(bool_0)
        var_6 = linked_list_7.display()
        assert var_6 == '(-2869.0)'
        bool_1 = True
        node_4 = module_0.Node(bool_1)
        none_type_3 = None
        linked_list_8 = module_0.LinkedList(none_type_3)
        var_7 = linked_list_8.size()
        assert var_7 == 0
        linked_list_9 = module_0.LinkedList()
        node_5 = module_0.Node(var_7)
        assert node_5.data == 0
        var_8 = linked_list_9.display()
        assert var_8 == ')'
        linked_list_10 = module_0.LinkedList()
        var_9 = linked_list_5.size()
>       assert var_9 == 0
E       AssertionError

RANDOM/test_linkedList4_RANDOM.py:22661: AssertionError
   - [#  32] CRP linkedList4: 
--------------------------------------------------------------------------------
  69:         '''Remove node from list if exists.'''
  70:         curr = self.head
  71:         if (curr and val is self.head.data):
  72:             self.head = self.head.next
- 73:             self._length -= 1
+ 73:             self._length -= 2
  74:         while curr:
  75:             if (curr.next and curr.next.data == val):
  76:                 curr.next = curr.next.next
  77:                 self._length -= 1
--------------------------------------------------------------------------------
[2.83434 s] survived
   - [#  33] CRP linkedList4: 
--------------------------------------------------------------------------------
  73:             self._length -= 1
  74:         while curr:
  75:             if (curr.next and curr.next.data == val):
  76:                 curr.next = curr.next.next
- 77:                 self._length -= 1
+ 77:                 self._length -= 2
  78:             curr = curr.next
  79:     
  80:     def display(self):
  81:         '''Display list as a tuple.'''
--------------------------------------------------------------------------------
[2.69742 s] survived
   - [#  34] CRP linkedList4: 
--------------------------------------------------------------------------------
  79:     
  80:     def display(self):
  81:         '''Display list as a tuple.'''
  82:         curr = self.head
- 83:         display = '('
+ 83:         display = 'mutpy'
  84:         while curr:
  85:             display += str(curr.data) + ', '
  86:             curr = curr.next
  87:         return display[:-2] + ')'
--------------------------------------------------------------------------------
[5.16874 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_5

def test_case_5():
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        none_type_1 = None
        linked_list_2 = module_0.LinkedList(none_type_1)
        assert linked_list_2.head is None
        var_1 = linked_list_2.size()
        assert var_1 == 0
        var_2 = linked_list_0.display()
>       assert var_2 == ')'
E       AssertionError

RANDOM/test_linkedList4_RANDOM.py:75: AssertionError
   - [#  35] CRP linkedList4: 
--------------------------------------------------------------------------------
  79:     
  80:     def display(self):
  81:         '''Display list as a tuple.'''
  82:         curr = self.head
- 83:         display = '('
+ 83:         display = ''
  84:         while curr:
  85:             display += str(curr.data) + ', '
  86:             curr = curr.next
  87:         return display[:-2] + ')'
--------------------------------------------------------------------------------
[5.28204 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_199

def test_case_199():
        complex_0 = -2363.678516 + 1356.37j
        node_0 = module_0.Node(complex_0)
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        var_1 = linked_list_0.display()
        assert var_1 == ')'
        var_2 = linked_list_0.search(none_type_0)
        int_0 = 1454
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        var_3 = linked_list_1.search(int_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        linked_list_2 = module_0.LinkedList(node_1)
        assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
        var_4 = linked_list_2.remove(none_type_1)
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
        node_2 = module_0.Node(linked_list_2, linked_list_1)
        none_type_2 = None
        node_3 = module_0.Node(none_type_2)
        none_type_3 = None
        linked_list_4 = module_0.LinkedList(none_type_3)
        assert linked_list_4.head is None
        var_5 = linked_list_4.size()
        assert var_5 == 0
        var_6 = linked_list_4.size()
        assert var_6 == 0
        complex_1 = -2363.678516 + 1356.37j
        node_4 = module_0.Node(complex_1)
        str_0 = '#p1jIXa}Q?(h'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, str_0, dict_0]
        node_5 = module_0.Node(list_0)
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        none_type_4 = None
        node_6 = module_0.Node(none_type_4)
        linked_list_6 = module_0.LinkedList()
        assert linked_list_6.head is None
        linked_list_7 = module_0.LinkedList()
        assert linked_list_7.head is None
        str_1 = '#p1jIXa}Q?(h'
        dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
        list_1 = [dict_1, dict_1, str_1, dict_1]
        node_7 = module_0.Node(list_1)
        node_8 = module_0.Node(node_7, list_1)
        none_type_5 = None
        node_9 = module_0.Node(none_type_5)
        linked_list_8 = module_0.LinkedList()
        assert linked_list_8.head is None
        var_7 = linked_list_8.remove(none_type_5)
        var_8 = linked_list_8.search(node_9)
        int_1 = -1061
        linked_list_9 = module_0.LinkedList()
        assert linked_list_9.head is None
        var_9 = linked_list_9.push(int_1)
        var_10 = linked_list_9.display()
>       assert var_10 == '(-1061)'
E       AssertionError

RANDOM/test_linkedList4_RANDOM.py:8396: AssertionError
   - [#  36] CRP linkedList4: 
--------------------------------------------------------------------------------
  81:         '''Display list as a tuple.'''
  82:         curr = self.head
  83:         display = '('
  84:         while curr:
- 85:             display += str(curr.data) + ', '
+ 85:             display += str(curr.data) + 'mutpy'
  86:             curr = curr.next
  87:         return display[:-2] + ')'
--------------------------------------------------------------------------------
[5.71458 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_199

def test_case_199():
        complex_0 = -2363.678516 + 1356.37j
        node_0 = module_0.Node(complex_0)
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        var_1 = linked_list_0.display()
        assert var_1 == ')'
        var_2 = linked_list_0.search(none_type_0)
        int_0 = 1454
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        var_3 = linked_list_1.search(int_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        linked_list_2 = module_0.LinkedList(node_1)
        assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
        var_4 = linked_list_2.remove(none_type_1)
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
        node_2 = module_0.Node(linked_list_2, linked_list_1)
        none_type_2 = None
        node_3 = module_0.Node(none_type_2)
        none_type_3 = None
        linked_list_4 = module_0.LinkedList(none_type_3)
        assert linked_list_4.head is None
        var_5 = linked_list_4.size()
        assert var_5 == 0
        var_6 = linked_list_4.size()
        assert var_6 == 0
        complex_1 = -2363.678516 + 1356.37j
        node_4 = module_0.Node(complex_1)
        str_0 = '#p1jIXa}Q?(h'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, str_0, dict_0]
        node_5 = module_0.Node(list_0)
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        none_type_4 = None
        node_6 = module_0.Node(none_type_4)
        linked_list_6 = module_0.LinkedList()
        assert linked_list_6.head is None
        linked_list_7 = module_0.LinkedList()
        assert linked_list_7.head is None
        str_1 = '#p1jIXa}Q?(h'
        dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
        list_1 = [dict_1, dict_1, str_1, dict_1]
        node_7 = module_0.Node(list_1)
        node_8 = module_0.Node(node_7, list_1)
        none_type_5 = None
        node_9 = module_0.Node(none_type_5)
        linked_list_8 = module_0.LinkedList()
        assert linked_list_8.head is None
        var_7 = linked_list_8.remove(none_type_5)
        var_8 = linked_list_8.search(node_9)
        int_1 = -1061
        linked_list_9 = module_0.LinkedList()
        assert linked_list_9.head is None
        var_9 = linked_list_9.push(int_1)
        var_10 = linked_list_9.display()
>       assert var_10 == '(-1061)'
E       AssertionError

RANDOM/test_linkedList4_RANDOM.py:8396: AssertionError
   - [#  37] CRP linkedList4: 
--------------------------------------------------------------------------------
  81:         '''Display list as a tuple.'''
  82:         curr = self.head
  83:         display = '('
  84:         while curr:
- 85:             display += str(curr.data) + ', '
+ 85:             display += str(curr.data) + ''
  86:             curr = curr.next
  87:         return display[:-2] + ')'
--------------------------------------------------------------------------------
[5.40182 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_199

def test_case_199():
        complex_0 = -2363.678516 + 1356.37j
        node_0 = module_0.Node(complex_0)
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        var_1 = linked_list_0.display()
        assert var_1 == ')'
        var_2 = linked_list_0.search(none_type_0)
        int_0 = 1454
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        var_3 = linked_list_1.search(int_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        linked_list_2 = module_0.LinkedList(node_1)
        assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
        var_4 = linked_list_2.remove(none_type_1)
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
        node_2 = module_0.Node(linked_list_2, linked_list_1)
        none_type_2 = None
        node_3 = module_0.Node(none_type_2)
        none_type_3 = None
        linked_list_4 = module_0.LinkedList(none_type_3)
        assert linked_list_4.head is None
        var_5 = linked_list_4.size()
        assert var_5 == 0
        var_6 = linked_list_4.size()
        assert var_6 == 0
        complex_1 = -2363.678516 + 1356.37j
        node_4 = module_0.Node(complex_1)
        str_0 = '#p1jIXa}Q?(h'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, str_0, dict_0]
        node_5 = module_0.Node(list_0)
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        none_type_4 = None
        node_6 = module_0.Node(none_type_4)
        linked_list_6 = module_0.LinkedList()
        assert linked_list_6.head is None
        linked_list_7 = module_0.LinkedList()
        assert linked_list_7.head is None
        str_1 = '#p1jIXa}Q?(h'
        dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
        list_1 = [dict_1, dict_1, str_1, dict_1]
        node_7 = module_0.Node(list_1)
        node_8 = module_0.Node(node_7, list_1)
        none_type_5 = None
        node_9 = module_0.Node(none_type_5)
        linked_list_8 = module_0.LinkedList()
        assert linked_list_8.head is None
        var_7 = linked_list_8.remove(none_type_5)
        var_8 = linked_list_8.search(node_9)
        int_1 = -1061
        linked_list_9 = module_0.LinkedList()
        assert linked_list_9.head is None
        var_9 = linked_list_9.push(int_1)
        var_10 = linked_list_9.display()
>       assert var_10 == '(-1061)'
E       AssertionError

RANDOM/test_linkedList4_RANDOM.py:8396: AssertionError
   - [#  38] CRP linkedList4: 
--------------------------------------------------------------------------------
  83:         display = '('
  84:         while curr:
  85:             display += str(curr.data) + ', '
  86:             curr = curr.next
- 87:         return display[:-2] + ')'
+ 87:         return display[:-3] + ')'
--------------------------------------------------------------------------------
[5.35049 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_199

def test_case_199():
        complex_0 = -2363.678516 + 1356.37j
        node_0 = module_0.Node(complex_0)
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        var_1 = linked_list_0.display()
        assert var_1 == ')'
        var_2 = linked_list_0.search(none_type_0)
        int_0 = 1454
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        var_3 = linked_list_1.search(int_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        linked_list_2 = module_0.LinkedList(node_1)
        assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
        var_4 = linked_list_2.remove(none_type_1)
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
        node_2 = module_0.Node(linked_list_2, linked_list_1)
        none_type_2 = None
        node_3 = module_0.Node(none_type_2)
        none_type_3 = None
        linked_list_4 = module_0.LinkedList(none_type_3)
        assert linked_list_4.head is None
        var_5 = linked_list_4.size()
        assert var_5 == 0
        var_6 = linked_list_4.size()
        assert var_6 == 0
        complex_1 = -2363.678516 + 1356.37j
        node_4 = module_0.Node(complex_1)
        str_0 = '#p1jIXa}Q?(h'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, str_0, dict_0]
        node_5 = module_0.Node(list_0)
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        none_type_4 = None
        node_6 = module_0.Node(none_type_4)
        linked_list_6 = module_0.LinkedList()
        assert linked_list_6.head is None
        linked_list_7 = module_0.LinkedList()
        assert linked_list_7.head is None
        str_1 = '#p1jIXa}Q?(h'
        dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
        list_1 = [dict_1, dict_1, str_1, dict_1]
        node_7 = module_0.Node(list_1)
        node_8 = module_0.Node(node_7, list_1)
        none_type_5 = None
        node_9 = module_0.Node(none_type_5)
        linked_list_8 = module_0.LinkedList()
        assert linked_list_8.head is None
        var_7 = linked_list_8.remove(none_type_5)
        var_8 = linked_list_8.search(node_9)
        int_1 = -1061
        linked_list_9 = module_0.LinkedList()
        assert linked_list_9.head is None
        var_9 = linked_list_9.push(int_1)
        var_10 = linked_list_9.display()
>       assert var_10 == '(-1061)'
E       AssertionError

RANDOM/test_linkedList4_RANDOM.py:8396: AssertionError
   - [#  39] CRP linkedList4: 
--------------------------------------------------------------------------------
  83:         display = '('
  84:         while curr:
  85:             display += str(curr.data) + ', '
  86:             curr = curr.next
- 87:         return display[:-2] + ')'
+ 87:         return display[:-2] + 'mutpy'
--------------------------------------------------------------------------------
[5.20838 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_5

def test_case_5():
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        none_type_1 = None
        linked_list_2 = module_0.LinkedList(none_type_1)
        assert linked_list_2.head is None
        var_1 = linked_list_2.size()
        assert var_1 == 0
        var_2 = linked_list_0.display()
>       assert var_2 == ')'
E       AssertionError

RANDOM/test_linkedList4_RANDOM.py:75: AssertionError
   - [#  40] CRP linkedList4: 
--------------------------------------------------------------------------------
  83:         display = '('
  84:         while curr:
  85:             display += str(curr.data) + ', '
  86:             curr = curr.next
- 87:         return display[:-2] + ')'
+ 87:         return display[:-2] + ''
--------------------------------------------------------------------------------
[5.18276 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_5

def test_case_5():
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        none_type_1 = None
        linked_list_2 = module_0.LinkedList(none_type_1)
        assert linked_list_2.head is None
        var_1 = linked_list_2.size()
        assert var_1 == 0
        var_2 = linked_list_0.display()
>       assert var_2 == ')'
E       AssertionError

RANDOM/test_linkedList4_RANDOM.py:75: AssertionError
   - [#  41] EHD linkedList4: 
--------------------------------------------------------------------------------
  34:         try:
  35:             for val in data:
  36:                 self.push(val)
  37:         except TypeError:
- 38:             if data:
- 39:                 self.push(data)
+ 38:             raise
+ 39:     
  40:     
  41:     def push(self, val):
  42:         '''Insert a value at the head of the list.'''
  43:         old_head = self.head
--------------------------------------------------------------------------------
[5.25464 s] incompetent

TypeError: linkedList4:35: TypeError: 'NoneType' object is not iterable

   - [#  42] EXS linkedList4: 
--------------------------------------------------------------------------------
  34:         try:
  35:             for val in data:
  36:                 self.push(val)
  37:         except TypeError:
- 38:             if data:
- 39:                 self.push(data)
+ 38:             pass
+ 39:     
  40:     
  41:     def push(self, val):
  42:         '''Insert a value at the head of the list.'''
  43:         old_head = self.head
--------------------------------------------------------------------------------
[5.14856 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_9

def test_case_9():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        linked_list_0 = module_0.LinkedList(node_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
>       assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
E       AssertionError

RANDOM/test_linkedList4_RANDOM.py:157: AssertionError
   - [#  43] LCR linkedList4: 
--------------------------------------------------------------------------------
  67:     
  68:     def remove(self, val):
  69:         '''Remove node from list if exists.'''
  70:         curr = self.head
- 71:         if (curr and val is self.head.data):
+ 71:         if (curr or val is self.head.data):
  72:             self.head = self.head.next
  73:             self._length -= 1
  74:         while curr:
  75:             if (curr.next and curr.next.data == val):
--------------------------------------------------------------------------------
[5.17249 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_12

def test_case_12():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        linked_list_0 = module_0.LinkedList(node_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
        var_0 = linked_list_0.remove(none_type_1)
        none_type_2 = None
        linked_list_1 = module_0.LinkedList(none_type_2)
        assert linked_list_1.head is None
        var_1 = linked_list_1.size()
        assert var_1 == 0
        linked_list_2 = module_0.LinkedList()
        assert linked_list_2.head is None
        none_type_3 = None
        linked_list_3 = module_0.LinkedList(none_type_3)
        assert linked_list_3.head is None
        var_2 = linked_list_3.size()
        assert var_2 == 0
        var_3 = linked_list_1.display()
        assert var_3 == ')'
        none_type_4 = None
        linked_list_4 = module_0.LinkedList(none_type_4)
        assert linked_list_4.head is None
        var_4 = linked_list_4.size()
        assert var_4 == 0
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        none_type_5 = None
        node_2 = module_0.Node(none_type_5)
        none_type_6 = None
        linked_list_6 = module_0.LinkedList(none_type_6)
        assert linked_list_6.head is None
        var_5 = linked_list_6.size()
        assert var_5 == 0
        var_6 = linked_list_6.size()
        assert var_6 == 0
>       var_7 = linked_list_0.remove(node_1)

RANDOM/test_linkedList4_RANDOM.py:304: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList4.LinkedList object at 0x7eff50307580>
val = <linkedList4.Node object at 0x7eff503068c0>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'data'

linkedList4:71: AttributeError
   - [#  44] LCR linkedList4: 
--------------------------------------------------------------------------------
  71:         if (curr and val is self.head.data):
  72:             self.head = self.head.next
  73:             self._length -= 1
  74:         while curr:
- 75:             if (curr.next and curr.next.data == val):
+ 75:             if (curr.next or curr.next.data == val):
  76:                 curr.next = curr.next.next
  77:                 self._length -= 1
  78:             curr = curr.next
  79:     
--------------------------------------------------------------------------------
[5.26346 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_9

def test_case_9():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        linked_list_0 = module_0.LinkedList(node_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
>       var_0 = linked_list_0.remove(none_type_0)

RANDOM/test_linkedList4_RANDOM.py:158: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList4.LinkedList object at 0x7eff50306530>, val = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'data'

linkedList4:75: AttributeError
   - [#  45] OIL linkedList4: 
--------------------------------------------------------------------------------
  33:         self.head = None
  34:         try:
  35:             for val in data:
  36:                 self.push(val)
- 37:         except TypeError:
+ 37:                 breakexcept TypeError:
  38:             if data:
  39:                 self.push(data)
  40:     
  41:     def push(self, val):
--------------------------------------------------------------------------------
[5.31849 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_290

def test_case_290():
        bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
        linked_list_0 = module_0.LinkedList(bytes_0)
        assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
        var_0 = linked_list_0.display()
>       assert var_0 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
E       AssertionError

RANDOM/test_linkedList4_RANDOM.py:12108: AssertionError
   - [#  46] OIL linkedList4: 
--------------------------------------------------------------------------------
  63:         while curr:
  64:             if curr.data == val:
  65:                 return curr
  66:             curr = curr.next
- 67:     
+ 67:             break
  68:     def remove(self, val):
  69:         '''Remove node from list if exists.'''
  70:         curr = self.head
  71:         if (curr and val is self.head.data):
--------------------------------------------------------------------------------
[2.73943 s] survived
   - [#  47] OIL linkedList4: 
--------------------------------------------------------------------------------
  75:             if (curr.next and curr.next.data == val):
  76:                 curr.next = curr.next.next
  77:                 self._length -= 1
  78:             curr = curr.next
- 79:     
+ 79:             break
  80:     def display(self):
  81:         '''Display list as a tuple.'''
  82:         curr = self.head
  83:         display = '('
--------------------------------------------------------------------------------
[2.69610 s] survived
   - [#  48] OIL linkedList4: 
--------------------------------------------------------------------------------
  83:         display = '('
  84:         while curr:
  85:             display += str(curr.data) + ', '
  86:             curr = curr.next
- 87:         return display[:-2] + ')'
+ 87:             break
+ 88:         return display[:-2] + ')'
--------------------------------------------------------------------------------
[5.30933 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_290

def test_case_290():
        bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
        linked_list_0 = module_0.LinkedList(bytes_0)
        assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
        var_0 = linked_list_0.display()
>       assert var_0 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
E       AssertionError

RANDOM/test_linkedList4_RANDOM.py:12108: AssertionError
   - [#  49] RIL linkedList4: 
--------------------------------------------------------------------------------
  31:         '''Linked list initialized with head.'''
  32:         self._length = 0
  33:         self.head = None
  34:         try:
- 35:             for val in data:
+ 35:             for val in reversed(data):
  36:                 self.push(val)
  37:         except TypeError:
  38:             if data:
  39:                 self.push(data)
--------------------------------------------------------------------------------
[5.30802 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_290

def test_case_290():
        bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
        linked_list_0 = module_0.LinkedList(bytes_0)
        assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
        var_0 = linked_list_0.display()
>       assert var_0 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
E       AssertionError

RANDOM/test_linkedList4_RANDOM.py:12108: AssertionError
   - [#  50] ROR linkedList4: 
--------------------------------------------------------------------------------
  60:     def search(self, val):
  61:         '''Return the node containing val.'''
  62:         curr = self.head
  63:         while curr:
- 64:             if curr.data == val:
+ 64:             if curr.data != val:
  65:                 return curr
  66:             curr = curr.next
  67:     
  68:     def remove(self, val):
--------------------------------------------------------------------------------
[5.50512 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_365

def test_case_365():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        linked_list_0 = module_0.LinkedList(node_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
        var_0 = linked_list_0.remove(none_type_0)
        linked_list_1 = module_0.LinkedList(none_type_0)
        assert linked_list_1.head is None
        var_1 = linked_list_0.display()
        int_0 = 1454
        linked_list_2 = module_0.LinkedList()
        assert linked_list_2.head is None
        var_2 = linked_list_2.search(int_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        linked_list_3 = module_0.LinkedList(node_1)
        assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
        var_3 = linked_list_3.remove(none_type_1)
        linked_list_4 = module_0.LinkedList()
        assert linked_list_4.head is None
        node_2 = module_0.Node(linked_list_3, linked_list_2)
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        none_type_2 = None
        node_3 = module_0.Node(none_type_2)
        linked_list_6 = module_0.LinkedList(node_3)
        assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
        var_4 = linked_list_6.remove(none_type_2)
        var_5 = linked_list_6.push(none_type_2)
        bool_0 = True
        node_4 = module_0.Node(bool_0)
        none_type_3 = None
        linked_list_7 = module_0.LinkedList(none_type_3)
        assert linked_list_7.head is None
        var_6 = linked_list_7.size()
        assert var_6 == 0
        var_7 = linked_list_7.display()
        assert var_7 == ')'
        linked_list_8 = module_0.LinkedList()
        assert linked_list_8.head is None
        none_type_4 = None
        node_5 = module_0.Node(none_type_4)
        linked_list_9 = module_0.LinkedList(node_5)
        assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
        var_8 = linked_list_9.remove(none_type_4)
        none_type_5 = None
        linked_list_10 = module_0.LinkedList(none_type_5)
        assert linked_list_10.head is None
        var_9 = linked_list_10.size()
        assert var_9 == 0
        linked_list_11 = module_0.LinkedList()
        assert linked_list_11.head is None
        var_10 = linked_list_11.push(var_9)
        float_0 = 2634.854
        dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
        bool_1 = True
        list_0 = [dict_0]
        list_1 = [bool_1, float_0]
        tuple_0 = (list_1,)
        tuple_1 = (dict_0, bool_1, list_0, tuple_0)
        node_6 = module_0.Node(tuple_1)
        int_1 = 1454
        linked_list_12 = module_0.LinkedList()
        assert linked_list_12.head is None
        var_11 = linked_list_12.search(int_1)
        complex_0 = -2363.678516 + 1356.37j
        node_7 = module_0.Node(complex_0)
        node_8 = module_0.Node(node_7)
        var_12 = linked_list_6.search(var_0)
        assert f'{type(var_12).__module__}.{type(var_12).__qualname__}' == 'linkedList4.Node'
>       assert var_12.data is None
E       AssertionError

RANDOM/test_linkedList4_RANDOM.py:15505: AssertionError
   - [#  51] ROR linkedList4: 
--------------------------------------------------------------------------------
  71:         if (curr and val is self.head.data):
  72:             self.head = self.head.next
  73:             self._length -= 1
  74:         while curr:
- 75:             if (curr.next and curr.next.data == val):
+ 75:             if (curr.next and curr.next.data != val):
  76:                 curr.next = curr.next.next
  77:                 self._length -= 1
  78:             curr = curr.next
  79:     
--------------------------------------------------------------------------------
[2.85332 s] survived
   - [#  52] SDI linkedList4: 
--------------------------------------------------------------------------------
   6: 
   7:     Data attribute for data storage and Next for pointer to next node.
   8:     '''
   9:     
- 10:     def __init__(self, data, next_node=None):
- 11:         '''Attribute data and next_node.'''
- 12:         self.data = data
- 13:         self.next = next_node
- 14: 
+ 10:     @staticmethod
+ 11:     def __init__(self, data, next_node=None):
+ 12:         '''Attribute data and next_node.'''
+ 13:         self.data = data
+ 14:         self.next = next_node
  15: 
  16: class LinkedList(object):
  17:     '''Method for linked list.
  18: 
--------------------------------------------------------------------------------
[5.41143 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/linkedList4/RANDOM/test_linkedList4_RANDOM.py:16: TypeError: Node.__init__() missing 1 required positional argument: 'data'

   - [#  53] SDI linkedList4: 
--------------------------------------------------------------------------------
  26:     display() - will return a unicode string representing the list as
  27:     if it were a Python tuple literal: "(12, \'sam\', 37, \'tango\')"
  28:     '''
  29:     
- 30:     def __init__(self, data=None):
- 31:         '''Linked list initialized with head.'''
- 32:         self._length = 0
- 33:         self.head = None
- 34:         try:
- 35:             for val in data:
- 36:                 self.push(val)
- 37:         except TypeError:
- 38:             if data:
- 39:                 self.push(data)
- 40:     
+ 30:     @staticmethod
+ 31:     def __init__(self, data=None):
+ 32:         '''Linked list initialized with head.'''
+ 33:         self._length = 0
+ 34:         self.head = None
+ 35:         try:
+ 36:             for val in data:
+ 37:                 self.push(val)
+ 38:         except TypeError:
+ 39:             if data:
+ 40:                 self.push(data)
  41:     def push(self, val):
  42:         '''Insert a value at the head of the list.'''
  43:         old_head = self.head
  44:         self.head = Node(val, old_head)
--------------------------------------------------------------------------------
[5.30432 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_0

def test_case_0():
        none_type_0 = None
>       linked_list_0 = module_0.LinkedList(none_type_0)

RANDOM/test_linkedList4_RANDOM.py:8: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = None, data = None

>   ???
E   AttributeError: 'NoneType' object has no attribute '_length'

linkedList4:33: AttributeError
   - [#  54] SDI linkedList4: 
--------------------------------------------------------------------------------
  37:         except TypeError:
  38:             if data:
  39:                 self.push(data)
  40:     
- 41:     def push(self, val):
- 42:         '''Insert a value at the head of the list.'''
- 43:         old_head = self.head
- 44:         self.head = Node(val, old_head)
- 45:         self._length += 1
- 46:     
+ 41:     @staticmethod
+ 42:     def push(self, val):
+ 43:         '''Insert a value at the head of the list.'''
+ 44:         old_head = self.head
+ 45:         self.head = Node(val, old_head)
+ 46:         self._length += 1
  47:     def pop(self):
  48:         '''Remove the first value and return it.'''
  49:         if not (self.head):
  50:             raise IndexError('Cannot pop from an empty list')
--------------------------------------------------------------------------------
[5.35076 s] incompetent

TypeError: linkedList4:39: TypeError: LinkedList.push() missing 1 required positional argument: 'val'

   - [#  55] SDI linkedList4: 
--------------------------------------------------------------------------------
  43:         old_head = self.head
  44:         self.head = Node(val, old_head)
  45:         self._length += 1
  46:     
- 47:     def pop(self):
- 48:         '''Remove the first value and return it.'''
- 49:         if not (self.head):
- 50:             raise IndexError('Cannot pop from an empty list')
- 51:         to_return = self.head
- 52:         self.head = self.head.next
- 53:         self._length -= 1
- 54:         return to_return.data
- 55:     
+ 47:     @staticmethod
+ 48:     def pop(self):
+ 49:         '''Remove the first value and return it.'''
+ 50:         if not (self.head):
+ 51:             raise IndexError('Cannot pop from an empty list')
+ 52:         to_return = self.head
+ 53:         self.head = self.head.next
+ 54:         self._length -= 1
+ 55:         return to_return.data
  56:     def size(self):
  57:         '''Return the length of the list.'''
  58:         return self._length
  59:     
--------------------------------------------------------------------------------
[5.37848 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/linkedList4/RANDOM/test_linkedList4_RANDOM.py:5140: TypeError: LinkedList.pop() missing 1 required positional argument: 'self'

   - [#  56] SDI linkedList4: 
--------------------------------------------------------------------------------
  52:         self.head = self.head.next
  53:         self._length -= 1
  54:         return to_return.data
  55:     
- 56:     def size(self):
- 57:         '''Return the length of the list.'''
- 58:         return self._length
- 59:     
+ 56:     @staticmethod
+ 57:     def size(self):
+ 58:         '''Return the length of the list.'''
+ 59:         return self._length
  60:     def search(self, val):
  61:         '''Return the node containing val.'''
  62:         curr = self.head
  63:         while curr:
--------------------------------------------------------------------------------
[5.31765 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/linkedList4/RANDOM/test_linkedList4_RANDOM.py:11: TypeError: LinkedList.size() missing 1 required positional argument: 'self'

   - [#  57] SDI linkedList4: 
--------------------------------------------------------------------------------
  56:     def size(self):
  57:         '''Return the length of the list.'''
  58:         return self._length
  59:     
- 60:     def search(self, val):
- 61:         '''Return the node containing val.'''
- 62:         curr = self.head
- 63:         while curr:
- 64:             if curr.data == val:
- 65:                 return curr
- 66:             curr = curr.next
- 67:     
+ 60:     @staticmethod
+ 61:     def search(self, val):
+ 62:         '''Return the node containing val.'''
+ 63:         curr = self.head
+ 64:         while curr:
+ 65:             if curr.data == val:
+ 66:                 return curr
+ 67:             curr = curr.next
  68:     def remove(self, val):
  69:         '''Remove node from list if exists.'''
  70:         curr = self.head
  71:         if (curr and val is self.head.data):
--------------------------------------------------------------------------------
[5.28208 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/linkedList4/RANDOM/test_linkedList4_RANDOM.py:150: TypeError: LinkedList.search() missing 1 required positional argument: 'val'

   - [#  58] SDI linkedList4: 
--------------------------------------------------------------------------------
  64:             if curr.data == val:
  65:                 return curr
  66:             curr = curr.next
  67:     
- 68:     def remove(self, val):
- 69:         '''Remove node from list if exists.'''
- 70:         curr = self.head
- 71:         if (curr and val is self.head.data):
- 72:             self.head = self.head.next
- 73:             self._length -= 1
- 74:         while curr:
- 75:             if (curr.next and curr.next.data == val):
- 76:                 curr.next = curr.next.next
- 77:                 self._length -= 1
- 78:             curr = curr.next
- 79:     
+ 68:     @staticmethod
+ 69:     def remove(self, val):
+ 70:         '''Remove node from list if exists.'''
+ 71:         curr = self.head
+ 72:         if (curr and val is self.head.data):
+ 73:             self.head = self.head.next
+ 74:             self._length -= 1
+ 75:         while curr:
+ 76:             if (curr.next and curr.next.data == val):
+ 77:                 curr.next = curr.next.next
+ 78:                 self._length -= 1
+ 79:             curr = curr.next
  80:     def display(self):
  81:         '''Display list as a tuple.'''
  82:         curr = self.head
  83:         display = '('
--------------------------------------------------------------------------------
[5.26922 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/linkedList4/RANDOM/test_linkedList4_RANDOM.py:158: TypeError: LinkedList.remove() missing 1 required positional argument: 'val'

   - [#  59] SDI linkedList4: 
--------------------------------------------------------------------------------
  76:                 curr.next = curr.next.next
  77:                 self._length -= 1
  78:             curr = curr.next
  79:     
- 80:     def display(self):
- 81:         '''Display list as a tuple.'''
- 82:         curr = self.head
- 83:         display = '('
- 84:         while curr:
- 85:             display += str(curr.data) + ', '
- 86:             curr = curr.next
- 87:         return display[:-2] + ')'
+ 80:     @staticmethod
+ 81:     def display(self):
+ 82:         '''Display list as a tuple.'''
+ 83:         curr = self.head
+ 84:         display = '('
+ 85:         while curr:
+ 86:             display += str(curr.data) + ', '
+ 87:             curr = curr.next
+ 88:         return display[:-2] + ')'
--------------------------------------------------------------------------------
[5.19341 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/linkedList4/RANDOM/test_linkedList4_RANDOM.py:74: TypeError: LinkedList.display() missing 1 required positional argument: 'self'

   - [#  60] SDL linkedList4: 
--------------------------------------------------------------------------------
   8:     '''
   9:     
  10:     def __init__(self, data, next_node=None):
  11:         '''Attribute data and next_node.'''
- 12:         self.data = data
+ 12:         pass
  13:         self.next = next_node
  14: 
  15: 
  16: class LinkedList(object):
--------------------------------------------------------------------------------
[5.15847 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_6

def test_case_6():
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        none_type_1 = None
        node_0 = module_0.Node(none_type_1)
        none_type_2 = None
        linked_list_2 = module_0.LinkedList(none_type_2)
        assert linked_list_2.head is None
        var_1 = linked_list_2.size()
        assert var_1 == 0
        var_2 = linked_list_2.size()
        assert var_2 == 0
        none_type_3 = None
        node_1 = module_0.Node(none_type_3)
        none_type_4 = None
        linked_list_3 = module_0.LinkedList(none_type_4)
        assert linked_list_3.head is None
        var_3 = linked_list_3.size()
        assert var_3 == 0
        linked_list_4 = module_0.LinkedList()
        assert linked_list_4.head is None
        none_type_5 = None
        linked_list_5 = module_0.LinkedList(none_type_5)
        assert linked_list_5.head is None
        var_4 = linked_list_5.size()
        assert var_4 == 0
        var_5 = linked_list_3.display()
        assert var_5 == ')'
        node_2 = module_0.Node(var_5, var_3)
>       assert node_2.data == ')'
E       AttributeError: 'Node' object has no attribute 'data'

RANDOM/test_linkedList4_RANDOM.py:112: AttributeError
   - [#  61] SDL linkedList4: 
--------------------------------------------------------------------------------
   9:     
  10:     def __init__(self, data, next_node=None):
  11:         '''Attribute data and next_node.'''
  12:         self.data = data
- 13:         self.next = next_node
+ 13:         pass
  14: 
  15: 
  16: class LinkedList(object):
  17:     '''Method for linked list.
--------------------------------------------------------------------------------
[5.33429 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_6

def test_case_6():
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        none_type_1 = None
        node_0 = module_0.Node(none_type_1)
        none_type_2 = None
        linked_list_2 = module_0.LinkedList(none_type_2)
        assert linked_list_2.head is None
        var_1 = linked_list_2.size()
        assert var_1 == 0
        var_2 = linked_list_2.size()
        assert var_2 == 0
        none_type_3 = None
        node_1 = module_0.Node(none_type_3)
        none_type_4 = None
        linked_list_3 = module_0.LinkedList(none_type_4)
        assert linked_list_3.head is None
        var_3 = linked_list_3.size()
        assert var_3 == 0
        linked_list_4 = module_0.LinkedList()
        assert linked_list_4.head is None
        none_type_5 = None
        linked_list_5 = module_0.LinkedList(none_type_5)
        assert linked_list_5.head is None
        var_4 = linked_list_5.size()
        assert var_4 == 0
        var_5 = linked_list_3.display()
        assert var_5 == ')'
        node_2 = module_0.Node(var_5, var_3)
        assert node_2.data == ')'
>       assert node_2.next == 0
E       AttributeError: 'Node' object has no attribute 'next'

RANDOM/test_linkedList4_RANDOM.py:113: AttributeError
   - [#  62] SDL linkedList4: 
--------------------------------------------------------------------------------
  28:     '''
  29:     
  30:     def __init__(self, data=None):
  31:         '''Linked list initialized with head.'''
- 32:         self._length = 0
+ 32:         pass
  33:         self.head = None
  34:         try:
  35:             for val in data:
  36:                 self.push(val)
--------------------------------------------------------------------------------
[5.17308 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_0

def test_case_0():
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
>       var_0 = linked_list_0.size()

RANDOM/test_linkedList4_RANDOM.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList4.LinkedList object at 0x7eff503065f0>

>   ???
E   AttributeError: 'LinkedList' object has no attribute '_length'

linkedList4:58: AttributeError
   - [#  63] SDL linkedList4: 
--------------------------------------------------------------------------------
  29:     
  30:     def __init__(self, data=None):
  31:         '''Linked list initialized with head.'''
  32:         self._length = 0
- 33:         self.head = None
+ 33:         pass
  34:         try:
  35:             for val in data:
  36:                 self.push(val)
  37:         except TypeError:
--------------------------------------------------------------------------------
[5.13598 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_0

def test_case_0():
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
>       assert linked_list_0.head is None
E       AttributeError: 'LinkedList' object has no attribute 'head'

RANDOM/test_linkedList4_RANDOM.py:10: AttributeError
   - [#  64] SDL linkedList4: 
--------------------------------------------------------------------------------
  32:         self._length = 0
  33:         self.head = None
  34:         try:
  35:             for val in data:
- 36:                 self.push(val)
+ 36:                 pass
  37:         except TypeError:
  38:             if data:
  39:                 self.push(data)
  40:     
--------------------------------------------------------------------------------
[5.28744 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_123

def test_case_123():
        str_0 = '#p1jIXa}Q?(h'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, str_0, dict_0]
        node_0 = module_0.Node(list_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        linked_list_0 = module_0.LinkedList()
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.remove(none_type_0)
        none_type_1 = None
        node_2 = module_0.Node(none_type_1)
        linked_list_1 = module_0.LinkedList(node_2)
        assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
        var_1 = linked_list_1.remove(none_type_1)
        linked_list_2 = module_0.LinkedList(none_type_1)
        assert linked_list_2.head is None
        var_2 = linked_list_1.display()
        bool_0 = True
        node_3 = module_0.Node(bool_0)
        node_4 = module_0.Node(bool_0)
        none_type_2 = None
        node_5 = module_0.Node(none_type_2)
        linked_list_3 = module_0.LinkedList(node_5)
        assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
        var_3 = linked_list_3.remove(none_type_2)
        none_type_3 = None
        node_6 = module_0.Node(none_type_3)
        none_type_4 = None
        linked_list_4 = module_0.LinkedList(none_type_4)
        assert linked_list_4.head is None
        var_4 = linked_list_4.size()
        assert var_4 == 0
        var_5 = linked_list_4.size()
        assert var_5 == 0
        none_type_5 = None
        linked_list_5 = module_0.LinkedList(none_type_5)
        assert linked_list_5.head is None
        var_6 = linked_list_5.size()
        assert var_6 == 0
        bool_1 = True
        node_7 = module_0.Node(bool_1)
        none_type_6 = None
        linked_list_6 = module_0.LinkedList(none_type_6)
        assert linked_list_6.head is None
        var_7 = linked_list_6.size()
        assert var_7 == 0
        linked_list_7 = module_0.LinkedList()
        assert linked_list_7.head is None
        node_8 = module_0.Node(var_7)
        assert node_8.data == 0
        var_8 = linked_list_7.display()
        assert var_8 == ')'
        int_0 = 903
        dict_1 = {none_type_0: list_0, var_5: int_0, bool_1: str_0, none_type_5: linked_list_3}
        linked_list_8 = module_0.LinkedList(dict_1)
>       assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
E       AssertionError

RANDOM/test_linkedList4_RANDOM.py:5211: AssertionError
   - [#  65] SDL linkedList4: 
--------------------------------------------------------------------------------
  35:             for val in data:
  36:                 self.push(val)
  37:         except TypeError:
  38:             if data:
- 39:                 self.push(data)
+ 39:                 pass
  40:     
  41:     def push(self, val):
  42:         '''Insert a value at the head of the list.'''
  43:         old_head = self.head
--------------------------------------------------------------------------------
[5.22368 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_9

def test_case_9():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        linked_list_0 = module_0.LinkedList(node_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
>       assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
E       AssertionError

RANDOM/test_linkedList4_RANDOM.py:157: AssertionError
   - [#  66] SDL linkedList4: 
--------------------------------------------------------------------------------
  39:                 self.push(data)
  40:     
  41:     def push(self, val):
  42:         '''Insert a value at the head of the list.'''
- 43:         old_head = self.head
+ 43:         pass
  44:         self.head = Node(val, old_head)
  45:         self._length += 1
  46:     
  47:     def pop(self):
--------------------------------------------------------------------------------
[5.16520 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_9

self = <linkedList4.LinkedList object at 0x7eff516f1a80>
data = <linkedList4.Node object at 0x7eff516f1b70>

>   ???
E   TypeError: 'Node' object is not iterable

linkedList4:35: TypeError

During handling of the above exception, another exception occurred:

    def test_case_9():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
>       linked_list_0 = module_0.LinkedList(node_0)

RANDOM/test_linkedList4_RANDOM.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
linkedList4:39: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList4.LinkedList object at 0x7eff516f1a80>
val = <linkedList4.Node object at 0x7eff516f1b70>

>   ???
E   NameError: name 'old_head' is not defined

linkedList4:44: NameError
   - [#  67] SDL linkedList4: 
--------------------------------------------------------------------------------
  40:     
  41:     def push(self, val):
  42:         '''Insert a value at the head of the list.'''
  43:         old_head = self.head
- 44:         self.head = Node(val, old_head)
+ 44:         pass
  45:         self._length += 1
  46:     
  47:     def pop(self):
  48:         '''Remove the first value and return it.'''
--------------------------------------------------------------------------------
[5.18707 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_9

def test_case_9():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        linked_list_0 = module_0.LinkedList(node_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
>       assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
E       AssertionError

RANDOM/test_linkedList4_RANDOM.py:157: AssertionError
   - [#  68] SDL linkedList4: 
--------------------------------------------------------------------------------
  47:     def pop(self):
  48:         '''Remove the first value and return it.'''
  49:         if not (self.head):
  50:             raise IndexError('Cannot pop from an empty list')
- 51:         to_return = self.head
+ 51:         pass
  52:         self.head = self.head.next
  53:         self._length -= 1
  54:         return to_return.data
  55:     
--------------------------------------------------------------------------------
[5.47398 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_121

def test_case_121():
        complex_0 = -2363.678516 + 1356.37j
        node_0 = module_0.Node(complex_0)
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        var_1 = linked_list_0.display()
        assert var_1 == ')'
        var_2 = linked_list_0.search(none_type_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        linked_list_1 = module_0.LinkedList(node_1)
        assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
        var_3 = linked_list_1.remove(none_type_1)
        linked_list_2 = module_0.LinkedList(none_type_1)
        assert linked_list_2.head is None
        none_type_2 = None
        linked_list_3 = module_0.LinkedList(none_type_2)
        assert linked_list_3.head is None
        var_4 = linked_list_3.size()
        assert var_4 == 0
        linked_list_4 = module_0.LinkedList()
        assert linked_list_4.head is None
        none_type_3 = None
        linked_list_5 = module_0.LinkedList(none_type_3)
        assert linked_list_5.head is None
        var_5 = linked_list_5.size()
        assert var_5 == 0
        var_6 = linked_list_3.display()
        assert var_6 == ')'
        bool_0 = True
        node_2 = module_0.Node(bool_0)
        none_type_4 = None
        linked_list_6 = module_0.LinkedList(none_type_4)
        assert linked_list_6.head is None
        var_7 = linked_list_6.size()
        assert var_7 == 0
        linked_list_7 = module_0.LinkedList()
        assert linked_list_7.head is None
        node_3 = module_0.Node(var_7)
        assert node_3.data == 0
        var_8 = linked_list_7.display()
        assert var_8 == ')'
        none_type_5 = None
        node_4 = module_0.Node(none_type_5)
        linked_list_8 = module_0.LinkedList(node_4)
        assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
        var_9 = linked_list_8.remove(none_type_5)
        linked_list_9 = module_0.LinkedList(none_type_5)
        assert linked_list_9.head is None
        var_10 = linked_list_8.display()
        linked_list_10 = module_0.LinkedList()
        assert linked_list_10.head is None
        none_type_6 = None
        node_5 = module_0.Node(none_type_6)
        linked_list_11 = module_0.LinkedList(node_5)
        assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
        var_11 = linked_list_11.remove(none_type_6)
        none_type_7 = None
        linked_list_12 = module_0.LinkedList(none_type_7)
        assert linked_list_12.head is None
        var_12 = linked_list_12.size()
        assert var_12 == 0
        linked_list_13 = module_0.LinkedList()
        assert linked_list_13.head is None
        var_13 = linked_list_13.push(var_12)
        bool_1 = True
        node_6 = module_0.Node(bool_1)
        node_7 = module_0.Node(bool_1)
        none_type_8 = None
        linked_list_14 = module_0.LinkedList(none_type_8)
        assert linked_list_14.head is None
        var_14 = linked_list_14.size()
        assert var_14 == 0
        linked_list_15 = module_0.LinkedList()
        assert linked_list_15.head is None
        node_8 = module_0.Node(var_14)
        assert node_8.data == 0
>       var_15 = linked_list_1.pop()

RANDOM/test_linkedList4_RANDOM.py:5140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList4.LinkedList object at 0x7eff51a23970>

>   ???
E   NameError: name 'to_return' is not defined

linkedList4:54: NameError
   - [#  69] SDL linkedList4: 
--------------------------------------------------------------------------------
  48:         '''Remove the first value and return it.'''
  49:         if not (self.head):
  50:             raise IndexError('Cannot pop from an empty list')
  51:         to_return = self.head
- 52:         self.head = self.head.next
+ 52:         pass
  53:         self._length -= 1
  54:         return to_return.data
  55:     
  56:     def size(self):
--------------------------------------------------------------------------------
[5.54432 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_121

def test_case_121():
        complex_0 = -2363.678516 + 1356.37j
        node_0 = module_0.Node(complex_0)
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        var_1 = linked_list_0.display()
        assert var_1 == ')'
        var_2 = linked_list_0.search(none_type_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        linked_list_1 = module_0.LinkedList(node_1)
        assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
        var_3 = linked_list_1.remove(none_type_1)
        linked_list_2 = module_0.LinkedList(none_type_1)
        assert linked_list_2.head is None
        none_type_2 = None
        linked_list_3 = module_0.LinkedList(none_type_2)
        assert linked_list_3.head is None
        var_4 = linked_list_3.size()
        assert var_4 == 0
        linked_list_4 = module_0.LinkedList()
        assert linked_list_4.head is None
        none_type_3 = None
        linked_list_5 = module_0.LinkedList(none_type_3)
        assert linked_list_5.head is None
        var_5 = linked_list_5.size()
        assert var_5 == 0
        var_6 = linked_list_3.display()
        assert var_6 == ')'
        bool_0 = True
        node_2 = module_0.Node(bool_0)
        none_type_4 = None
        linked_list_6 = module_0.LinkedList(none_type_4)
        assert linked_list_6.head is None
        var_7 = linked_list_6.size()
        assert var_7 == 0
        linked_list_7 = module_0.LinkedList()
        assert linked_list_7.head is None
        node_3 = module_0.Node(var_7)
        assert node_3.data == 0
        var_8 = linked_list_7.display()
        assert var_8 == ')'
        none_type_5 = None
        node_4 = module_0.Node(none_type_5)
        linked_list_8 = module_0.LinkedList(node_4)
        assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
        var_9 = linked_list_8.remove(none_type_5)
        linked_list_9 = module_0.LinkedList(none_type_5)
        assert linked_list_9.head is None
        var_10 = linked_list_8.display()
        linked_list_10 = module_0.LinkedList()
        assert linked_list_10.head is None
        none_type_6 = None
        node_5 = module_0.Node(none_type_6)
        linked_list_11 = module_0.LinkedList(node_5)
        assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
        var_11 = linked_list_11.remove(none_type_6)
        none_type_7 = None
        linked_list_12 = module_0.LinkedList(none_type_7)
        assert linked_list_12.head is None
        var_12 = linked_list_12.size()
        assert var_12 == 0
        linked_list_13 = module_0.LinkedList()
        assert linked_list_13.head is None
        var_13 = linked_list_13.push(var_12)
        bool_1 = True
        node_6 = module_0.Node(bool_1)
        node_7 = module_0.Node(bool_1)
        none_type_8 = None
        linked_list_14 = module_0.LinkedList(none_type_8)
        assert linked_list_14.head is None
        var_14 = linked_list_14.size()
        assert var_14 == 0
        linked_list_15 = module_0.LinkedList()
        assert linked_list_15.head is None
        node_8 = module_0.Node(var_14)
        assert node_8.data == 0
        var_15 = linked_list_1.pop()
>       assert linked_list_1.head is None
E       AssertionError

RANDOM/test_linkedList4_RANDOM.py:5141: AssertionError
   - [#  70] SDL linkedList4: 
--------------------------------------------------------------------------------
  50:             raise IndexError('Cannot pop from an empty list')
  51:         to_return = self.head
  52:         self.head = self.head.next
  53:         self._length -= 1
- 54:         return to_return.data
+ 54:         pass
  55:     
  56:     def size(self):
  57:         '''Return the length of the list.'''
  58:         return self._length
--------------------------------------------------------------------------------
[5.64638 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_121

def test_case_121():
        complex_0 = -2363.678516 + 1356.37j
        node_0 = module_0.Node(complex_0)
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        var_1 = linked_list_0.display()
        assert var_1 == ')'
        var_2 = linked_list_0.search(none_type_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        linked_list_1 = module_0.LinkedList(node_1)
        assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
        var_3 = linked_list_1.remove(none_type_1)
        linked_list_2 = module_0.LinkedList(none_type_1)
        assert linked_list_2.head is None
        none_type_2 = None
        linked_list_3 = module_0.LinkedList(none_type_2)
        assert linked_list_3.head is None
        var_4 = linked_list_3.size()
        assert var_4 == 0
        linked_list_4 = module_0.LinkedList()
        assert linked_list_4.head is None
        none_type_3 = None
        linked_list_5 = module_0.LinkedList(none_type_3)
        assert linked_list_5.head is None
        var_5 = linked_list_5.size()
        assert var_5 == 0
        var_6 = linked_list_3.display()
        assert var_6 == ')'
        bool_0 = True
        node_2 = module_0.Node(bool_0)
        none_type_4 = None
        linked_list_6 = module_0.LinkedList(none_type_4)
        assert linked_list_6.head is None
        var_7 = linked_list_6.size()
        assert var_7 == 0
        linked_list_7 = module_0.LinkedList()
        assert linked_list_7.head is None
        node_3 = module_0.Node(var_7)
        assert node_3.data == 0
        var_8 = linked_list_7.display()
        assert var_8 == ')'
        none_type_5 = None
        node_4 = module_0.Node(none_type_5)
        linked_list_8 = module_0.LinkedList(node_4)
        assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
        var_9 = linked_list_8.remove(none_type_5)
        linked_list_9 = module_0.LinkedList(none_type_5)
        assert linked_list_9.head is None
        var_10 = linked_list_8.display()
        linked_list_10 = module_0.LinkedList()
        assert linked_list_10.head is None
        none_type_6 = None
        node_5 = module_0.Node(none_type_6)
        linked_list_11 = module_0.LinkedList(node_5)
        assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
        var_11 = linked_list_11.remove(none_type_6)
        none_type_7 = None
        linked_list_12 = module_0.LinkedList(none_type_7)
        assert linked_list_12.head is None
        var_12 = linked_list_12.size()
        assert var_12 == 0
        linked_list_13 = module_0.LinkedList()
        assert linked_list_13.head is None
        var_13 = linked_list_13.push(var_12)
        bool_1 = True
        node_6 = module_0.Node(bool_1)
        node_7 = module_0.Node(bool_1)
        none_type_8 = None
        linked_list_14 = module_0.LinkedList(none_type_8)
        assert linked_list_14.head is None
        var_14 = linked_list_14.size()
        assert var_14 == 0
        linked_list_15 = module_0.LinkedList()
        assert linked_list_15.head is None
        node_8 = module_0.Node(var_14)
        assert node_8.data == 0
        var_15 = linked_list_1.pop()
        assert linked_list_1.head is None
>       assert f'{type(var_15).__module__}.{type(var_15).__qualname__}' == 'linkedList4.Node'
E       AssertionError

RANDOM/test_linkedList4_RANDOM.py:5142: AssertionError
   - [#  71] SDL linkedList4: 
--------------------------------------------------------------------------------
  54:         return to_return.data
  55:     
  56:     def size(self):
  57:         '''Return the length of the list.'''
- 58:         return self._length
+ 58:         pass
  59:     
  60:     def search(self, val):
  61:         '''Return the node containing val.'''
  62:         curr = self.head
--------------------------------------------------------------------------------
[5.39423 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_0

def test_case_0():
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
>       assert var_0 == 0
E       AssertionError

RANDOM/test_linkedList4_RANDOM.py:12: AssertionError
   - [#  72] SDL linkedList4: 
--------------------------------------------------------------------------------
  58:         return self._length
  59:     
  60:     def search(self, val):
  61:         '''Return the node containing val.'''
- 62:         curr = self.head
+ 62:         pass
  63:         while curr:
  64:             if curr.data == val:
  65:                 return curr
  66:             curr = curr.next
--------------------------------------------------------------------------------
[5.50427 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_8

def test_case_8():
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        none_type_1 = None
        linked_list_2 = module_0.LinkedList(none_type_1)
        assert linked_list_2.head is None
        var_1 = linked_list_2.size()
        assert var_1 == 0
        var_2 = linked_list_0.display()
        assert var_2 == ')'
>       var_3 = linked_list_0.search(var_2)

RANDOM/test_linkedList4_RANDOM.py:150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList4.LinkedList object at 0x7eff4f172230>, val = ')'

>   ???
E   UnboundLocalError: local variable 'curr' referenced before assignment

linkedList4:63: UnboundLocalError
   - [#  73] SDL linkedList4: 
--------------------------------------------------------------------------------
  61:         '''Return the node containing val.'''
  62:         curr = self.head
  63:         while curr:
  64:             if curr.data == val:
- 65:                 return curr
+ 65:                 pass
  66:             curr = curr.next
  67:     
  68:     def remove(self, val):
  69:         '''Remove node from list if exists.'''
--------------------------------------------------------------------------------
[5.79472 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_365

def test_case_365():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        linked_list_0 = module_0.LinkedList(node_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
        var_0 = linked_list_0.remove(none_type_0)
        linked_list_1 = module_0.LinkedList(none_type_0)
        assert linked_list_1.head is None
        var_1 = linked_list_0.display()
        int_0 = 1454
        linked_list_2 = module_0.LinkedList()
        assert linked_list_2.head is None
        var_2 = linked_list_2.search(int_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        linked_list_3 = module_0.LinkedList(node_1)
        assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
        var_3 = linked_list_3.remove(none_type_1)
        linked_list_4 = module_0.LinkedList()
        assert linked_list_4.head is None
        node_2 = module_0.Node(linked_list_3, linked_list_2)
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        none_type_2 = None
        node_3 = module_0.Node(none_type_2)
        linked_list_6 = module_0.LinkedList(node_3)
        assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
        var_4 = linked_list_6.remove(none_type_2)
        var_5 = linked_list_6.push(none_type_2)
        bool_0 = True
        node_4 = module_0.Node(bool_0)
        none_type_3 = None
        linked_list_7 = module_0.LinkedList(none_type_3)
        assert linked_list_7.head is None
        var_6 = linked_list_7.size()
        assert var_6 == 0
        var_7 = linked_list_7.display()
        assert var_7 == ')'
        linked_list_8 = module_0.LinkedList()
        assert linked_list_8.head is None
        none_type_4 = None
        node_5 = module_0.Node(none_type_4)
        linked_list_9 = module_0.LinkedList(node_5)
        assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
        var_8 = linked_list_9.remove(none_type_4)
        none_type_5 = None
        linked_list_10 = module_0.LinkedList(none_type_5)
        assert linked_list_10.head is None
        var_9 = linked_list_10.size()
        assert var_9 == 0
        linked_list_11 = module_0.LinkedList()
        assert linked_list_11.head is None
        var_10 = linked_list_11.push(var_9)
        float_0 = 2634.854
        dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
        bool_1 = True
        list_0 = [dict_0]
        list_1 = [bool_1, float_0]
        tuple_0 = (list_1,)
        tuple_1 = (dict_0, bool_1, list_0, tuple_0)
        node_6 = module_0.Node(tuple_1)
        int_1 = 1454
        linked_list_12 = module_0.LinkedList()
        assert linked_list_12.head is None
        var_11 = linked_list_12.search(int_1)
        complex_0 = -2363.678516 + 1356.37j
        node_7 = module_0.Node(complex_0)
        node_8 = module_0.Node(node_7)
        var_12 = linked_list_6.search(var_0)
>       assert f'{type(var_12).__module__}.{type(var_12).__qualname__}' == 'linkedList4.Node'
E       AssertionError

RANDOM/test_linkedList4_RANDOM.py:15504: AssertionError
   - [#  74] SDL linkedList4: 
--------------------------------------------------------------------------------
  62:         curr = self.head
  63:         while curr:
  64:             if curr.data == val:
  65:                 return curr
- 66:             curr = curr.next
+ 66:             pass
  67:     
  68:     def remove(self, val):
  69:         '''Remove node from list if exists.'''
  70:         curr = self.head
--------------------------------------------------------------------------------
[14.24112 s] timeout
   - [#  75] SDL linkedList4: 
--------------------------------------------------------------------------------
  66:             curr = curr.next
  67:     
  68:     def remove(self, val):
  69:         '''Remove node from list if exists.'''
- 70:         curr = self.head
+ 70:         pass
  71:         if (curr and val is self.head.data):
  72:             self.head = self.head.next
  73:             self._length -= 1
  74:         while curr:
--------------------------------------------------------------------------------
[5.18974 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_9

def test_case_9():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        linked_list_0 = module_0.LinkedList(node_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
>       var_0 = linked_list_0.remove(none_type_0)

RANDOM/test_linkedList4_RANDOM.py:158: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList4.LinkedList object at 0x7eff50305240>, val = None

>   ???
E   UnboundLocalError: local variable 'curr' referenced before assignment

linkedList4:71: UnboundLocalError
   - [#  76] SDL linkedList4: 
--------------------------------------------------------------------------------
  68:     def remove(self, val):
  69:         '''Remove node from list if exists.'''
  70:         curr = self.head
  71:         if (curr and val is self.head.data):
- 72:             self.head = self.head.next
+ 72:             pass
  73:             self._length -= 1
  74:         while curr:
  75:             if (curr.next and curr.next.data == val):
  76:                 curr.next = curr.next.next
--------------------------------------------------------------------------------
[6.42470 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_1215

def test_case_1215():
        bytes_0 = b'\xc3\xc2\xb3\x80\xf1b_\xad\xc6\x00Z\xff(~\x07>\x94t'
        node_0 = module_0.Node(bytes_0, bytes_0)
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.push(linked_list_0)
        bool_0 = True
        node_1 = module_0.Node(bool_0)
        node_2 = module_0.Node(node_1)
        node_3 = module_0.Node(bool_0)
        complex_0 = -1265.460815 + 1056.434j
        node_4 = module_0.Node(node_3, complex_0)
        var_1 = linked_list_0.remove(linked_list_0)
>       assert linked_list_0.head is None
E       AssertionError

RANDOM/test_linkedList4_RANDOM.py:54736: AssertionError
   - [#  77] SDL linkedList4: 
--------------------------------------------------------------------------------
  72:             self.head = self.head.next
  73:             self._length -= 1
  74:         while curr:
  75:             if (curr.next and curr.next.data == val):
- 76:                 curr.next = curr.next.next
+ 76:                 pass
  77:                 self._length -= 1
  78:             curr = curr.next
  79:     
  80:     def display(self):
--------------------------------------------------------------------------------
[2.96818 s] survived
   - [#  78] SDL linkedList4: 
--------------------------------------------------------------------------------
  74:         while curr:
  75:             if (curr.next and curr.next.data == val):
  76:                 curr.next = curr.next.next
  77:                 self._length -= 1
- 78:             curr = curr.next
+ 78:             pass
  79:     
  80:     def display(self):
  81:         '''Display list as a tuple.'''
  82:         curr = self.head
--------------------------------------------------------------------------------
[14.25382 s] timeout
   - [#  79] SDL linkedList4: 
--------------------------------------------------------------------------------
  78:             curr = curr.next
  79:     
  80:     def display(self):
  81:         '''Display list as a tuple.'''
- 82:         curr = self.head
+ 82:         pass
  83:         display = '('
  84:         while curr:
  85:             display += str(curr.data) + ', '
  86:             curr = curr.next
--------------------------------------------------------------------------------
[5.49979 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_5

def test_case_5():
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        none_type_1 = None
        linked_list_2 = module_0.LinkedList(none_type_1)
        assert linked_list_2.head is None
        var_1 = linked_list_2.size()
        assert var_1 == 0
>       var_2 = linked_list_0.display()

RANDOM/test_linkedList4_RANDOM.py:74: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList4.LinkedList object at 0x7eff503076d0>

>   ???
E   UnboundLocalError: local variable 'curr' referenced before assignment

linkedList4:84: UnboundLocalError
   - [#  80] SDL linkedList4: 
--------------------------------------------------------------------------------
  79:     
  80:     def display(self):
  81:         '''Display list as a tuple.'''
  82:         curr = self.head
- 83:         display = '('
+ 83:         pass
  84:         while curr:
  85:             display += str(curr.data) + ', '
  86:             curr = curr.next
  87:         return display[:-2] + ')'
--------------------------------------------------------------------------------
[5.42220 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_5

def test_case_5():
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        none_type_1 = None
        linked_list_2 = module_0.LinkedList(none_type_1)
        assert linked_list_2.head is None
        var_1 = linked_list_2.size()
        assert var_1 == 0
>       var_2 = linked_list_0.display()

RANDOM/test_linkedList4_RANDOM.py:74: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList4.LinkedList object at 0x7eff50305a80>

>   ???
E   UnboundLocalError: local variable 'display' referenced before assignment

linkedList4:87: UnboundLocalError
   - [#  81] SDL linkedList4: 
--------------------------------------------------------------------------------
  82:         curr = self.head
  83:         display = '('
  84:         while curr:
  85:             display += str(curr.data) + ', '
- 86:             curr = curr.next
+ 86:             pass
  87:         return display[:-2] + ')'
--------------------------------------------------------------------------------
[14.25333 s] timeout
   - [#  82] SDL linkedList4: 
--------------------------------------------------------------------------------
  83:         display = '('
  84:         while curr:
  85:             display += str(curr.data) + ', '
  86:             curr = curr.next
- 87:         return display[:-2] + ')'
+ 87:         pass
--------------------------------------------------------------------------------
[5.09892 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_5

def test_case_5():
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        none_type_1 = None
        linked_list_2 = module_0.LinkedList(none_type_1)
        assert linked_list_2.head is None
        var_1 = linked_list_2.size()
        assert var_1 == 0
        var_2 = linked_list_0.display()
>       assert var_2 == ')'
E       AssertionError

RANDOM/test_linkedList4_RANDOM.py:75: AssertionError
   - [#  83] SIR linkedList4: 
--------------------------------------------------------------------------------
  83:         display = '('
  84:         while curr:
  85:             display += str(curr.data) + ', '
  86:             curr = curr.next
- 87:         return display[:-2] + ')'
+ 87:         return display[:] + ')'
--------------------------------------------------------------------------------
[5.03466 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_5

def test_case_5():
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        none_type_1 = None
        linked_list_2 = module_0.LinkedList(none_type_1)
        assert linked_list_2.head is None
        var_1 = linked_list_2.size()
        assert var_1 == 0
        var_2 = linked_list_0.display()
>       assert var_2 == ')'
E       AssertionError

RANDOM/test_linkedList4_RANDOM.py:75: AssertionError
   - [#  84] SVD linkedList4: 
--------------------------------------------------------------------------------
   8:     '''
   9:     
  10:     def __init__(self, data, next_node=None):
  11:         '''Attribute data and next_node.'''
- 12:         self.data = data
+ 12:         data = data
  13:         self.next = next_node
  14: 
  15: 
  16: class LinkedList(object):
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [#  85] SVD linkedList4: 
--------------------------------------------------------------------------------
   9:     
  10:     def __init__(self, data, next_node=None):
  11:         '''Attribute data and next_node.'''
  12:         self.data = data
- 13:         self.next = next_node
+ 13:         next = next_node
  14: 
  15: 
  16: class LinkedList(object):
  17:     '''Method for linked list.
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [#  86] SVD linkedList4: 
--------------------------------------------------------------------------------
  28:     '''
  29:     
  30:     def __init__(self, data=None):
  31:         '''Linked list initialized with head.'''
- 32:         self._length = 0
+ 32:         _length = 0
  33:         self.head = None
  34:         try:
  35:             for val in data:
  36:                 self.push(val)
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [#  87] SVD linkedList4: 
--------------------------------------------------------------------------------
  29:     
  30:     def __init__(self, data=None):
  31:         '''Linked list initialized with head.'''
  32:         self._length = 0
- 33:         self.head = None
+ 33:         head = None
  34:         try:
  35:             for val in data:
  36:                 self.push(val)
  37:         except TypeError:
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [#  88] SVD linkedList4: 
--------------------------------------------------------------------------------
  32:         self._length = 0
  33:         self.head = None
  34:         try:
  35:             for val in data:
- 36:                 self.push(val)
+ 36:                 push(val)
  37:         except TypeError:
  38:             if data:
  39:                 self.push(data)
  40:     
--------------------------------------------------------------------------------
[5.29645 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_123

def test_case_123():
        str_0 = '#p1jIXa}Q?(h'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, str_0, dict_0]
        node_0 = module_0.Node(list_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        linked_list_0 = module_0.LinkedList()
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.remove(none_type_0)
        none_type_1 = None
        node_2 = module_0.Node(none_type_1)
        linked_list_1 = module_0.LinkedList(node_2)
        assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
        var_1 = linked_list_1.remove(none_type_1)
        linked_list_2 = module_0.LinkedList(none_type_1)
        assert linked_list_2.head is None
        var_2 = linked_list_1.display()
        bool_0 = True
        node_3 = module_0.Node(bool_0)
        node_4 = module_0.Node(bool_0)
        none_type_2 = None
        node_5 = module_0.Node(none_type_2)
        linked_list_3 = module_0.LinkedList(node_5)
        assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
        var_3 = linked_list_3.remove(none_type_2)
        none_type_3 = None
        node_6 = module_0.Node(none_type_3)
        none_type_4 = None
        linked_list_4 = module_0.LinkedList(none_type_4)
        assert linked_list_4.head is None
        var_4 = linked_list_4.size()
        assert var_4 == 0
        var_5 = linked_list_4.size()
        assert var_5 == 0
        none_type_5 = None
        linked_list_5 = module_0.LinkedList(none_type_5)
        assert linked_list_5.head is None
        var_6 = linked_list_5.size()
        assert var_6 == 0
        bool_1 = True
        node_7 = module_0.Node(bool_1)
        none_type_6 = None
        linked_list_6 = module_0.LinkedList(none_type_6)
        assert linked_list_6.head is None
        var_7 = linked_list_6.size()
        assert var_7 == 0
        linked_list_7 = module_0.LinkedList()
        assert linked_list_7.head is None
        node_8 = module_0.Node(var_7)
        assert node_8.data == 0
        var_8 = linked_list_7.display()
        assert var_8 == ')'
        int_0 = 903
        dict_1 = {none_type_0: list_0, var_5: int_0, bool_1: str_0, none_type_5: linked_list_3}
>       linked_list_8 = module_0.LinkedList(dict_1)

RANDOM/test_linkedList4_RANDOM.py:5210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList4.LinkedList object at 0x7eff50304370>
data = {None: <linkedList4.LinkedList object at 0x7eff50307c70>, 0: 903, True: '#p1jIXa}Q?(h'}

>   ???
E   NameError: name 'push' is not defined

linkedList4:36: NameError
   - [#  89] SVD linkedList4: 
--------------------------------------------------------------------------------
  35:             for val in data:
  36:                 self.push(val)
  37:         except TypeError:
  38:             if data:
- 39:                 self.push(data)
+ 39:                 push(data)
  40:     
  41:     def push(self, val):
  42:         '''Insert a value at the head of the list.'''
  43:         old_head = self.head
--------------------------------------------------------------------------------
[5.13827 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_9

self = <linkedList4.LinkedList object at 0x7eff50305ab0>
data = <linkedList4.Node object at 0x7eff50305a80>

>   ???
E   TypeError: 'Node' object is not iterable

linkedList4:35: TypeError

During handling of the above exception, another exception occurred:

    def test_case_9():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
>       linked_list_0 = module_0.LinkedList(node_0)

RANDOM/test_linkedList4_RANDOM.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList4.LinkedList object at 0x7eff50305ab0>
data = <linkedList4.Node object at 0x7eff50305a80>

>   ???
E   NameError: name 'push' is not defined

linkedList4:39: NameError
   - [#  90] SVD linkedList4: 
--------------------------------------------------------------------------------
  39:                 self.push(data)
  40:     
  41:     def push(self, val):
  42:         '''Insert a value at the head of the list.'''
- 43:         old_head = self.head
+ 43:         old_head = head
  44:         self.head = Node(val, old_head)
  45:         self._length += 1
  46:     
  47:     def pop(self):
--------------------------------------------------------------------------------
[5.16567 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_9

self = <linkedList4.LinkedList object at 0x7eff50306ad0>
data = <linkedList4.Node object at 0x7eff50307790>

>   ???
E   TypeError: 'Node' object is not iterable

linkedList4:35: TypeError

During handling of the above exception, another exception occurred:

    def test_case_9():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
>       linked_list_0 = module_0.LinkedList(node_0)

RANDOM/test_linkedList4_RANDOM.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
linkedList4:39: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList4.LinkedList object at 0x7eff50306ad0>
val = <linkedList4.Node object at 0x7eff50307790>

>   ???
E   NameError: name 'head' is not defined

linkedList4:43: NameError
   - [#  91] SVD linkedList4: 
--------------------------------------------------------------------------------
  40:     
  41:     def push(self, val):
  42:         '''Insert a value at the head of the list.'''
  43:         old_head = self.head
- 44:         self.head = Node(val, old_head)
+ 44:         head = Node(val, old_head)
  45:         self._length += 1
  46:     
  47:     def pop(self):
  48:         '''Remove the first value and return it.'''
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [#  92] SVD linkedList4: 
--------------------------------------------------------------------------------
  41:     def push(self, val):
  42:         '''Insert a value at the head of the list.'''
  43:         old_head = self.head
  44:         self.head = Node(val, old_head)
- 45:         self._length += 1
+ 45:         _length += 1
  46:     
  47:     def pop(self):
  48:         '''Remove the first value and return it.'''
  49:         if not (self.head):
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [#  93] SVD linkedList4: 
--------------------------------------------------------------------------------
  45:         self._length += 1
  46:     
  47:     def pop(self):
  48:         '''Remove the first value and return it.'''
- 49:         if not (self.head):
+ 49:         if not head:
  50:             raise IndexError('Cannot pop from an empty list')
  51:         to_return = self.head
  52:         self.head = self.head.next
  53:         self._length -= 1
--------------------------------------------------------------------------------
[5.21506 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_121

def test_case_121():
        complex_0 = -2363.678516 + 1356.37j
        node_0 = module_0.Node(complex_0)
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        var_1 = linked_list_0.display()
        assert var_1 == ')'
        var_2 = linked_list_0.search(none_type_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        linked_list_1 = module_0.LinkedList(node_1)
        assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
        var_3 = linked_list_1.remove(none_type_1)
        linked_list_2 = module_0.LinkedList(none_type_1)
        assert linked_list_2.head is None
        none_type_2 = None
        linked_list_3 = module_0.LinkedList(none_type_2)
        assert linked_list_3.head is None
        var_4 = linked_list_3.size()
        assert var_4 == 0
        linked_list_4 = module_0.LinkedList()
        assert linked_list_4.head is None
        none_type_3 = None
        linked_list_5 = module_0.LinkedList(none_type_3)
        assert linked_list_5.head is None
        var_5 = linked_list_5.size()
        assert var_5 == 0
        var_6 = linked_list_3.display()
        assert var_6 == ')'
        bool_0 = True
        node_2 = module_0.Node(bool_0)
        none_type_4 = None
        linked_list_6 = module_0.LinkedList(none_type_4)
        assert linked_list_6.head is None
        var_7 = linked_list_6.size()
        assert var_7 == 0
        linked_list_7 = module_0.LinkedList()
        assert linked_list_7.head is None
        node_3 = module_0.Node(var_7)
        assert node_3.data == 0
        var_8 = linked_list_7.display()
        assert var_8 == ')'
        none_type_5 = None
        node_4 = module_0.Node(none_type_5)
        linked_list_8 = module_0.LinkedList(node_4)
        assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
        var_9 = linked_list_8.remove(none_type_5)
        linked_list_9 = module_0.LinkedList(none_type_5)
        assert linked_list_9.head is None
        var_10 = linked_list_8.display()
        linked_list_10 = module_0.LinkedList()
        assert linked_list_10.head is None
        none_type_6 = None
        node_5 = module_0.Node(none_type_6)
        linked_list_11 = module_0.LinkedList(node_5)
        assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
        var_11 = linked_list_11.remove(none_type_6)
        none_type_7 = None
        linked_list_12 = module_0.LinkedList(none_type_7)
        assert linked_list_12.head is None
        var_12 = linked_list_12.size()
        assert var_12 == 0
        linked_list_13 = module_0.LinkedList()
        assert linked_list_13.head is None
        var_13 = linked_list_13.push(var_12)
        bool_1 = True
        node_6 = module_0.Node(bool_1)
        node_7 = module_0.Node(bool_1)
        none_type_8 = None
        linked_list_14 = module_0.LinkedList(none_type_8)
        assert linked_list_14.head is None
        var_14 = linked_list_14.size()
        assert var_14 == 0
        linked_list_15 = module_0.LinkedList()
        assert linked_list_15.head is None
        node_8 = module_0.Node(var_14)
        assert node_8.data == 0
>       var_15 = linked_list_1.pop()

RANDOM/test_linkedList4_RANDOM.py:5140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList4.LinkedList object at 0x7eff50307ee0>

>   ???
E   NameError: name 'head' is not defined

linkedList4:49: NameError
   - [#  94] SVD linkedList4: 
--------------------------------------------------------------------------------
  47:     def pop(self):
  48:         '''Remove the first value and return it.'''
  49:         if not (self.head):
  50:             raise IndexError('Cannot pop from an empty list')
- 51:         to_return = self.head
+ 51:         to_return = head
  52:         self.head = self.head.next
  53:         self._length -= 1
  54:         return to_return.data
  55:     
--------------------------------------------------------------------------------
[5.18408 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_121

def test_case_121():
        complex_0 = -2363.678516 + 1356.37j
        node_0 = module_0.Node(complex_0)
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        var_1 = linked_list_0.display()
        assert var_1 == ')'
        var_2 = linked_list_0.search(none_type_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        linked_list_1 = module_0.LinkedList(node_1)
        assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
        var_3 = linked_list_1.remove(none_type_1)
        linked_list_2 = module_0.LinkedList(none_type_1)
        assert linked_list_2.head is None
        none_type_2 = None
        linked_list_3 = module_0.LinkedList(none_type_2)
        assert linked_list_3.head is None
        var_4 = linked_list_3.size()
        assert var_4 == 0
        linked_list_4 = module_0.LinkedList()
        assert linked_list_4.head is None
        none_type_3 = None
        linked_list_5 = module_0.LinkedList(none_type_3)
        assert linked_list_5.head is None
        var_5 = linked_list_5.size()
        assert var_5 == 0
        var_6 = linked_list_3.display()
        assert var_6 == ')'
        bool_0 = True
        node_2 = module_0.Node(bool_0)
        none_type_4 = None
        linked_list_6 = module_0.LinkedList(none_type_4)
        assert linked_list_6.head is None
        var_7 = linked_list_6.size()
        assert var_7 == 0
        linked_list_7 = module_0.LinkedList()
        assert linked_list_7.head is None
        node_3 = module_0.Node(var_7)
        assert node_3.data == 0
        var_8 = linked_list_7.display()
        assert var_8 == ')'
        none_type_5 = None
        node_4 = module_0.Node(none_type_5)
        linked_list_8 = module_0.LinkedList(node_4)
        assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
        var_9 = linked_list_8.remove(none_type_5)
        linked_list_9 = module_0.LinkedList(none_type_5)
        assert linked_list_9.head is None
        var_10 = linked_list_8.display()
        linked_list_10 = module_0.LinkedList()
        assert linked_list_10.head is None
        none_type_6 = None
        node_5 = module_0.Node(none_type_6)
        linked_list_11 = module_0.LinkedList(node_5)
        assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
        var_11 = linked_list_11.remove(none_type_6)
        none_type_7 = None
        linked_list_12 = module_0.LinkedList(none_type_7)
        assert linked_list_12.head is None
        var_12 = linked_list_12.size()
        assert var_12 == 0
        linked_list_13 = module_0.LinkedList()
        assert linked_list_13.head is None
        var_13 = linked_list_13.push(var_12)
        bool_1 = True
        node_6 = module_0.Node(bool_1)
        node_7 = module_0.Node(bool_1)
        none_type_8 = None
        linked_list_14 = module_0.LinkedList(none_type_8)
        assert linked_list_14.head is None
        var_14 = linked_list_14.size()
        assert var_14 == 0
        linked_list_15 = module_0.LinkedList()
        assert linked_list_15.head is None
        node_8 = module_0.Node(var_14)
        assert node_8.data == 0
>       var_15 = linked_list_1.pop()

RANDOM/test_linkedList4_RANDOM.py:5140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList4.LinkedList object at 0x7eff503070d0>

>   ???
E   NameError: name 'head' is not defined

linkedList4:51: NameError
   - [#  95] SVD linkedList4: 
--------------------------------------------------------------------------------
  48:         '''Remove the first value and return it.'''
  49:         if not (self.head):
  50:             raise IndexError('Cannot pop from an empty list')
  51:         to_return = self.head
- 52:         self.head = self.head.next
+ 52:         head = self.head.next
  53:         self._length -= 1
  54:         return to_return.data
  55:     
  56:     def size(self):
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [#  96] SVD linkedList4: 
--------------------------------------------------------------------------------
  48:         '''Remove the first value and return it.'''
  49:         if not (self.head):
  50:             raise IndexError('Cannot pop from an empty list')
  51:         to_return = self.head
- 52:         self.head = self.head.next
+ 52:         self.head = head.next
  53:         self._length -= 1
  54:         return to_return.data
  55:     
  56:     def size(self):
--------------------------------------------------------------------------------
[5.24845 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_121

def test_case_121():
        complex_0 = -2363.678516 + 1356.37j
        node_0 = module_0.Node(complex_0)
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        var_1 = linked_list_0.display()
        assert var_1 == ')'
        var_2 = linked_list_0.search(none_type_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        linked_list_1 = module_0.LinkedList(node_1)
        assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
        var_3 = linked_list_1.remove(none_type_1)
        linked_list_2 = module_0.LinkedList(none_type_1)
        assert linked_list_2.head is None
        none_type_2 = None
        linked_list_3 = module_0.LinkedList(none_type_2)
        assert linked_list_3.head is None
        var_4 = linked_list_3.size()
        assert var_4 == 0
        linked_list_4 = module_0.LinkedList()
        assert linked_list_4.head is None
        none_type_3 = None
        linked_list_5 = module_0.LinkedList(none_type_3)
        assert linked_list_5.head is None
        var_5 = linked_list_5.size()
        assert var_5 == 0
        var_6 = linked_list_3.display()
        assert var_6 == ')'
        bool_0 = True
        node_2 = module_0.Node(bool_0)
        none_type_4 = None
        linked_list_6 = module_0.LinkedList(none_type_4)
        assert linked_list_6.head is None
        var_7 = linked_list_6.size()
        assert var_7 == 0
        linked_list_7 = module_0.LinkedList()
        assert linked_list_7.head is None
        node_3 = module_0.Node(var_7)
        assert node_3.data == 0
        var_8 = linked_list_7.display()
        assert var_8 == ')'
        none_type_5 = None
        node_4 = module_0.Node(none_type_5)
        linked_list_8 = module_0.LinkedList(node_4)
        assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
        var_9 = linked_list_8.remove(none_type_5)
        linked_list_9 = module_0.LinkedList(none_type_5)
        assert linked_list_9.head is None
        var_10 = linked_list_8.display()
        linked_list_10 = module_0.LinkedList()
        assert linked_list_10.head is None
        none_type_6 = None
        node_5 = module_0.Node(none_type_6)
        linked_list_11 = module_0.LinkedList(node_5)
        assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
        var_11 = linked_list_11.remove(none_type_6)
        none_type_7 = None
        linked_list_12 = module_0.LinkedList(none_type_7)
        assert linked_list_12.head is None
        var_12 = linked_list_12.size()
        assert var_12 == 0
        linked_list_13 = module_0.LinkedList()
        assert linked_list_13.head is None
        var_13 = linked_list_13.push(var_12)
        bool_1 = True
        node_6 = module_0.Node(bool_1)
        node_7 = module_0.Node(bool_1)
        none_type_8 = None
        linked_list_14 = module_0.LinkedList(none_type_8)
        assert linked_list_14.head is None
        var_14 = linked_list_14.size()
        assert var_14 == 0
        linked_list_15 = module_0.LinkedList()
        assert linked_list_15.head is None
        node_8 = module_0.Node(var_14)
        assert node_8.data == 0
>       var_15 = linked_list_1.pop()

RANDOM/test_linkedList4_RANDOM.py:5140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList4.LinkedList object at 0x7eff50304b20>

>   ???
E   NameError: name 'head' is not defined

linkedList4:52: NameError
   - [#  97] SVD linkedList4: 
--------------------------------------------------------------------------------
  49:         if not (self.head):
  50:             raise IndexError('Cannot pop from an empty list')
  51:         to_return = self.head
  52:         self.head = self.head.next
- 53:         self._length -= 1
+ 53:         _length -= 1
  54:         return to_return.data
  55:     
  56:     def size(self):
  57:         '''Return the length of the list.'''
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [#  98] SVD linkedList4: 
--------------------------------------------------------------------------------
  54:         return to_return.data
  55:     
  56:     def size(self):
  57:         '''Return the length of the list.'''
- 58:         return self._length
+ 58:         return _length
  59:     
  60:     def search(self, val):
  61:         '''Return the node containing val.'''
  62:         curr = self.head
--------------------------------------------------------------------------------
[4.99069 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_0

def test_case_0():
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
>       var_0 = linked_list_0.size()

RANDOM/test_linkedList4_RANDOM.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList4.LinkedList object at 0x7eff502e01f0>

>   ???
E   NameError: name '_length' is not defined

linkedList4:58: NameError
   - [#  99] SVD linkedList4: 
--------------------------------------------------------------------------------
  58:         return self._length
  59:     
  60:     def search(self, val):
  61:         '''Return the node containing val.'''
- 62:         curr = self.head
+ 62:         curr = head
  63:         while curr:
  64:             if curr.data == val:
  65:                 return curr
  66:             curr = curr.next
--------------------------------------------------------------------------------
[5.18505 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_8

def test_case_8():
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        none_type_1 = None
        linked_list_2 = module_0.LinkedList(none_type_1)
        assert linked_list_2.head is None
        var_1 = linked_list_2.size()
        assert var_1 == 0
        var_2 = linked_list_0.display()
        assert var_2 == ')'
>       var_3 = linked_list_0.search(var_2)

RANDOM/test_linkedList4_RANDOM.py:150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList4.LinkedList object at 0x7eff516f3460>, val = ')'

>   ???
E   NameError: name 'head' is not defined

linkedList4:62: NameError
   - [# 100] SVD linkedList4: 
--------------------------------------------------------------------------------
  66:             curr = curr.next
  67:     
  68:     def remove(self, val):
  69:         '''Remove node from list if exists.'''
- 70:         curr = self.head
+ 70:         curr = head
  71:         if (curr and val is self.head.data):
  72:             self.head = self.head.next
  73:             self._length -= 1
  74:         while curr:
--------------------------------------------------------------------------------
[5.01768 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_9

def test_case_9():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        linked_list_0 = module_0.LinkedList(node_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
>       var_0 = linked_list_0.remove(none_type_0)

RANDOM/test_linkedList4_RANDOM.py:158: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList4.LinkedList object at 0x7eff50695180>, val = None

>   ???
E   NameError: name 'head' is not defined

linkedList4:70: NameError
   - [# 101] SVD linkedList4: 
--------------------------------------------------------------------------------
  67:     
  68:     def remove(self, val):
  69:         '''Remove node from list if exists.'''
  70:         curr = self.head
- 71:         if (curr and val is self.head.data):
+ 71:         if (curr and val is head.data):
  72:             self.head = self.head.next
  73:             self._length -= 1
  74:         while curr:
  75:             if (curr.next and curr.next.data == val):
--------------------------------------------------------------------------------
[5.21977 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_9

def test_case_9():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        linked_list_0 = module_0.LinkedList(node_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
>       var_0 = linked_list_0.remove(none_type_0)

RANDOM/test_linkedList4_RANDOM.py:158: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList4.LinkedList object at 0x7eff4f271fc0>, val = None

>   ???
E   NameError: name 'head' is not defined

linkedList4:71: NameError
   - [# 102] SVD linkedList4: 
--------------------------------------------------------------------------------
  68:     def remove(self, val):
  69:         '''Remove node from list if exists.'''
  70:         curr = self.head
  71:         if (curr and val is self.head.data):
- 72:             self.head = self.head.next
+ 72:             head = self.head.next
  73:             self._length -= 1
  74:         while curr:
  75:             if (curr.next and curr.next.data == val):
  76:                 curr.next = curr.next.next
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 103] SVD linkedList4: 
--------------------------------------------------------------------------------
  68:     def remove(self, val):
  69:         '''Remove node from list if exists.'''
  70:         curr = self.head
  71:         if (curr and val is self.head.data):
- 72:             self.head = self.head.next
+ 72:             self.head = head.next
  73:             self._length -= 1
  74:         while curr:
  75:             if (curr.next and curr.next.data == val):
  76:                 curr.next = curr.next.next
--------------------------------------------------------------------------------
[5.15449 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_12

def test_case_12():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        linked_list_0 = module_0.LinkedList(node_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
        var_0 = linked_list_0.remove(none_type_1)
        none_type_2 = None
        linked_list_1 = module_0.LinkedList(none_type_2)
        assert linked_list_1.head is None
        var_1 = linked_list_1.size()
        assert var_1 == 0
        linked_list_2 = module_0.LinkedList()
        assert linked_list_2.head is None
        none_type_3 = None
        linked_list_3 = module_0.LinkedList(none_type_3)
        assert linked_list_3.head is None
        var_2 = linked_list_3.size()
        assert var_2 == 0
        var_3 = linked_list_1.display()
        assert var_3 == ')'
        none_type_4 = None
        linked_list_4 = module_0.LinkedList(none_type_4)
        assert linked_list_4.head is None
        var_4 = linked_list_4.size()
        assert var_4 == 0
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        none_type_5 = None
        node_2 = module_0.Node(none_type_5)
        none_type_6 = None
        linked_list_6 = module_0.LinkedList(none_type_6)
        assert linked_list_6.head is None
        var_5 = linked_list_6.size()
        assert var_5 == 0
        var_6 = linked_list_6.size()
        assert var_6 == 0
>       var_7 = linked_list_0.remove(node_1)

RANDOM/test_linkedList4_RANDOM.py:304: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList4.LinkedList object at 0x7eff51e6de40>
val = <linkedList4.Node object at 0x7eff51e6fe20>

>   ???
E   NameError: name 'head' is not defined

linkedList4:72: NameError
   - [# 104] SVD linkedList4: 
--------------------------------------------------------------------------------
  69:         '''Remove node from list if exists.'''
  70:         curr = self.head
  71:         if (curr and val is self.head.data):
  72:             self.head = self.head.next
- 73:             self._length -= 1
+ 73:             _length -= 1
  74:         while curr:
  75:             if (curr.next and curr.next.data == val):
  76:                 curr.next = curr.next.next
  77:                 self._length -= 1
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 105] SVD linkedList4: 
--------------------------------------------------------------------------------
  73:             self._length -= 1
  74:         while curr:
  75:             if (curr.next and curr.next.data == val):
  76:                 curr.next = curr.next.next
- 77:                 self._length -= 1
+ 77:                 _length -= 1
  78:             curr = curr.next
  79:     
  80:     def display(self):
  81:         '''Display list as a tuple.'''
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 106] SVD linkedList4: 
--------------------------------------------------------------------------------
  78:             curr = curr.next
  79:     
  80:     def display(self):
  81:         '''Display list as a tuple.'''
- 82:         curr = self.head
+ 82:         curr = head
  83:         display = '('
  84:         while curr:
  85:             display += str(curr.data) + ', '
  86:             curr = curr.next
--------------------------------------------------------------------------------
[5.23987 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_5

def test_case_5():
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        none_type_1 = None
        linked_list_2 = module_0.LinkedList(none_type_1)
        assert linked_list_2.head is None
        var_1 = linked_list_2.size()
        assert var_1 == 0
>       var_2 = linked_list_0.display()

RANDOM/test_linkedList4_RANDOM.py:74: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linkedList4.LinkedList object at 0x7eff516cdab0>

>   ???
E   NameError: name 'head' is not defined

linkedList4:82: NameError
   - [# 107] ZIL linkedList4: 
--------------------------------------------------------------------------------
  32:         self._length = 0
  33:         self.head = None
  34:         try:
  35:             for val in data:
- 36:                 self.push(val)
+ 36:                 break
  37:         except TypeError:
  38:             if data:
  39:                 self.push(data)
  40:     
--------------------------------------------------------------------------------
[5.36602 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_123

def test_case_123():
        str_0 = '#p1jIXa}Q?(h'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, str_0, dict_0]
        node_0 = module_0.Node(list_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        linked_list_0 = module_0.LinkedList()
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.remove(none_type_0)
        none_type_1 = None
        node_2 = module_0.Node(none_type_1)
        linked_list_1 = module_0.LinkedList(node_2)
        assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
        var_1 = linked_list_1.remove(none_type_1)
        linked_list_2 = module_0.LinkedList(none_type_1)
        assert linked_list_2.head is None
        var_2 = linked_list_1.display()
        bool_0 = True
        node_3 = module_0.Node(bool_0)
        node_4 = module_0.Node(bool_0)
        none_type_2 = None
        node_5 = module_0.Node(none_type_2)
        linked_list_3 = module_0.LinkedList(node_5)
        assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
        var_3 = linked_list_3.remove(none_type_2)
        none_type_3 = None
        node_6 = module_0.Node(none_type_3)
        none_type_4 = None
        linked_list_4 = module_0.LinkedList(none_type_4)
        assert linked_list_4.head is None
        var_4 = linked_list_4.size()
        assert var_4 == 0
        var_5 = linked_list_4.size()
        assert var_5 == 0
        none_type_5 = None
        linked_list_5 = module_0.LinkedList(none_type_5)
        assert linked_list_5.head is None
        var_6 = linked_list_5.size()
        assert var_6 == 0
        bool_1 = True
        node_7 = module_0.Node(bool_1)
        none_type_6 = None
        linked_list_6 = module_0.LinkedList(none_type_6)
        assert linked_list_6.head is None
        var_7 = linked_list_6.size()
        assert var_7 == 0
        linked_list_7 = module_0.LinkedList()
        assert linked_list_7.head is None
        node_8 = module_0.Node(var_7)
        assert node_8.data == 0
        var_8 = linked_list_7.display()
        assert var_8 == ')'
        int_0 = 903
        dict_1 = {none_type_0: list_0, var_5: int_0, bool_1: str_0, none_type_5: linked_list_3}
        linked_list_8 = module_0.LinkedList(dict_1)
>       assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
E       AssertionError

RANDOM/test_linkedList4_RANDOM.py:5211: AssertionError
   - [# 108] ZIL linkedList4: 
--------------------------------------------------------------------------------
  60:     def search(self, val):
  61:         '''Return the node containing val.'''
  62:         curr = self.head
  63:         while curr:
- 64:             if curr.data == val:
- 65:                 return curr
- 66:             curr = curr.next
+ 64:             break
+ 65:     
+ 66:     
  67:     
  68:     def remove(self, val):
  69:         '''Remove node from list if exists.'''
  70:         curr = self.head
--------------------------------------------------------------------------------
[5.53492 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_365

def test_case_365():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        linked_list_0 = module_0.LinkedList(node_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
        var_0 = linked_list_0.remove(none_type_0)
        linked_list_1 = module_0.LinkedList(none_type_0)
        assert linked_list_1.head is None
        var_1 = linked_list_0.display()
        int_0 = 1454
        linked_list_2 = module_0.LinkedList()
        assert linked_list_2.head is None
        var_2 = linked_list_2.search(int_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        linked_list_3 = module_0.LinkedList(node_1)
        assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
        var_3 = linked_list_3.remove(none_type_1)
        linked_list_4 = module_0.LinkedList()
        assert linked_list_4.head is None
        node_2 = module_0.Node(linked_list_3, linked_list_2)
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        none_type_2 = None
        node_3 = module_0.Node(none_type_2)
        linked_list_6 = module_0.LinkedList(node_3)
        assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
        var_4 = linked_list_6.remove(none_type_2)
        var_5 = linked_list_6.push(none_type_2)
        bool_0 = True
        node_4 = module_0.Node(bool_0)
        none_type_3 = None
        linked_list_7 = module_0.LinkedList(none_type_3)
        assert linked_list_7.head is None
        var_6 = linked_list_7.size()
        assert var_6 == 0
        var_7 = linked_list_7.display()
        assert var_7 == ')'
        linked_list_8 = module_0.LinkedList()
        assert linked_list_8.head is None
        none_type_4 = None
        node_5 = module_0.Node(none_type_4)
        linked_list_9 = module_0.LinkedList(node_5)
        assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
        var_8 = linked_list_9.remove(none_type_4)
        none_type_5 = None
        linked_list_10 = module_0.LinkedList(none_type_5)
        assert linked_list_10.head is None
        var_9 = linked_list_10.size()
        assert var_9 == 0
        linked_list_11 = module_0.LinkedList()
        assert linked_list_11.head is None
        var_10 = linked_list_11.push(var_9)
        float_0 = 2634.854
        dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
        bool_1 = True
        list_0 = [dict_0]
        list_1 = [bool_1, float_0]
        tuple_0 = (list_1,)
        tuple_1 = (dict_0, bool_1, list_0, tuple_0)
        node_6 = module_0.Node(tuple_1)
        int_1 = 1454
        linked_list_12 = module_0.LinkedList()
        assert linked_list_12.head is None
        var_11 = linked_list_12.search(int_1)
        complex_0 = -2363.678516 + 1356.37j
        node_7 = module_0.Node(complex_0)
        node_8 = module_0.Node(node_7)
        var_12 = linked_list_6.search(var_0)
>       assert f'{type(var_12).__module__}.{type(var_12).__qualname__}' == 'linkedList4.Node'
E       AssertionError

RANDOM/test_linkedList4_RANDOM.py:15504: AssertionError
   - [# 109] ZIL linkedList4: 
--------------------------------------------------------------------------------
  71:         if (curr and val is self.head.data):
  72:             self.head = self.head.next
  73:             self._length -= 1
  74:         while curr:
- 75:             if (curr.next and curr.next.data == val):
- 76:                 curr.next = curr.next.next
- 77:                 self._length -= 1
- 78:             curr = curr.next
+ 75:             break
+ 76:     
+ 77:     
+ 78:     
  79:     
  80:     def display(self):
  81:         '''Display list as a tuple.'''
  82:         curr = self.head
--------------------------------------------------------------------------------
[2.72094 s] survived
   - [# 110] ZIL linkedList4: 
--------------------------------------------------------------------------------
  81:         '''Display list as a tuple.'''
  82:         curr = self.head
  83:         display = '('
  84:         while curr:
- 85:             display += str(curr.data) + ', '
- 86:             curr = curr.next
+ 85:             break
+ 86:         
  87:         return display[:-2] + ')'
--------------------------------------------------------------------------------
[5.30052 s] killed by RANDOM/test_linkedList4_RANDOM.py::test_case_199

def test_case_199():
        complex_0 = -2363.678516 + 1356.37j
        node_0 = module_0.Node(complex_0)
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        var_1 = linked_list_0.display()
        assert var_1 == ')'
        var_2 = linked_list_0.search(none_type_0)
        int_0 = 1454
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        var_3 = linked_list_1.search(int_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        linked_list_2 = module_0.LinkedList(node_1)
        assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
        var_4 = linked_list_2.remove(none_type_1)
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
        node_2 = module_0.Node(linked_list_2, linked_list_1)
        none_type_2 = None
        node_3 = module_0.Node(none_type_2)
        none_type_3 = None
        linked_list_4 = module_0.LinkedList(none_type_3)
        assert linked_list_4.head is None
        var_5 = linked_list_4.size()
        assert var_5 == 0
        var_6 = linked_list_4.size()
        assert var_6 == 0
        complex_1 = -2363.678516 + 1356.37j
        node_4 = module_0.Node(complex_1)
        str_0 = '#p1jIXa}Q?(h'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, str_0, dict_0]
        node_5 = module_0.Node(list_0)
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        none_type_4 = None
        node_6 = module_0.Node(none_type_4)
        linked_list_6 = module_0.LinkedList()
        assert linked_list_6.head is None
        linked_list_7 = module_0.LinkedList()
        assert linked_list_7.head is None
        str_1 = '#p1jIXa}Q?(h'
        dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
        list_1 = [dict_1, dict_1, str_1, dict_1]
        node_7 = module_0.Node(list_1)
        node_8 = module_0.Node(node_7, list_1)
        none_type_5 = None
        node_9 = module_0.Node(none_type_5)
        linked_list_8 = module_0.LinkedList()
        assert linked_list_8.head is None
        var_7 = linked_list_8.remove(none_type_5)
        var_8 = linked_list_8.search(node_9)
        int_1 = -1061
        linked_list_9 = module_0.LinkedList()
        assert linked_list_9.head is None
        var_9 = linked_list_9.push(int_1)
        var_10 = linked_list_9.display()
>       assert var_10 == '(-1061)'
E       AssertionError

RANDOM/test_linkedList4_RANDOM.py:8396: AssertionError
[*] Mutation score [536.41373 s]: 87.4%
   - all: 110
   - killed: 73 (66.4%)
   - survived: 11 (10.0%)
   - incompetent: 23 (20.9%)
   - timeout: 3 (2.7%)
